; ModuleID = 'seashell-compiler-output'
source_filename = "seashell-compiler-output"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stbi_io_callbacks = type { i32 (i8*, i8*, i32)*, void (i8*, i32)*, i32 (i8*)* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.stbi__context = type { i32, i32, i32, i32, %struct.stbi_io_callbacks, i8*, i32, i32, [128 x i8], i32, i8*, i8*, i8*, i8* }
%struct.stbi__result_info = type { i32, i32, i32 }
%struct.stbi__jpeg = type { %struct.stbi__context*, [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman], [4 x [64 x i16]], [4 x [512 x i16]], i32, i32, i32, i32, i32, i32, [4 x %struct.anon], i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, void (i8*, i32, i16*)*, void (i8*, i8*, i8*, i8*, i32, i32)*, i8* (i8*, i8*, i8*, i32, i32)* }
%struct.stbi__huffman = type { [512 x i8], [256 x i16], [256 x i8], [257 x i8], [18 x i32], [17 x i32] }
%struct.anon = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i16*, i32, i32 }
%struct.stbi__png = type { %struct.stbi__context*, i8*, i8*, i8*, i32 }
%struct.stbi__bmp_data = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.stbi__gif = type { i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, [256 x [4 x i8]], [256 x [4 x i8]], [8192 x %struct.stbi__gif_lzw], i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.stbi__gif_lzw = type { i16, i8, i8 }
%struct.stbi__pic_packet = type { i8, i8, i8 }
%struct.stbi__pngchunk = type { i32, i32 }
%struct.stbi__zbuf = type { i8*, i8*, i32, i32, i8*, i8*, i8*, i32, %struct.stbi__zhuffman, %struct.stbi__zhuffman }
%struct.stbi__zhuffman = type { [512 x i16], [16 x i16], [17 x i32], [16 x i16], [288 x i8], [288 x i16] }
%struct.stbi__resample = type { i8* (i8*, i8*, i8*, i32, i32)*, i8*, i8*, i32, i32, i32, i32, i32 }
%struct.__mm_loadl_epi64_struct = type { i64 }
%struct.__storeu_si128 = type { <2 x i64> }
%struct.stbi__write_context = type { void (i8*, i8*, i32)*, i8*, [64 x i8], i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.image = type { i32, i32, i32, i32, i8* }
%struct.__dirstream = type opaque
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }

@stbi_write_png_compression_level = global i32 8, align 4
@stbi_write_tga_with_rle = global i32 1, align 4
@stbi_write_force_png_filter = global i32 -1, align 4
@BLACK = constant i32 0, align 4
@WHITE = constant i32 255, align 4
@stbi__g_failure_reason = internal thread_local global i8* null, align 8
@stbi__vertically_flip_on_load_global = internal global i32 0, align 4
@stbi__vertically_flip_on_load_local = internal thread_local global i32 0, align 4
@stbi__vertically_flip_on_load_set = internal thread_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"can't fopen\00", align 1
@.str.29 = private unnamed_addr constant [54 x i8] c"ri.bits_per_channel == 8 || ri.bits_per_channel == 16\00", align 1
@.str.30 = private unnamed_addr constant [57 x i8] c"/u1/dtompkins/.seashell/projects/_A4/common/_stb_image.h\00", align 1
@__PRETTY_FUNCTION__.stbi__load_and_postprocess_8bit = private unnamed_addr constant [90 x i8] c"unsigned char *stbi__load_and_postprocess_8bit(stbi__context *, int *, int *, int *, int)\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"outofmem\00", align 1
@.str.31 = private unnamed_addr constant [19 x i8] c"unknown image type\00", align 1
@.str.48 = private unnamed_addr constant [10 x i8] c"too large\00", align 1
@.str.123 = private unnamed_addr constant [11 x i8] c"bad format\00", align 1
@.str.134 = private unnamed_addr constant [12 x i8] c"bad palette\00", align 1
@.str.135 = private unnamed_addr constant [21 x i8] c"tga_comp == STBI_rgb\00", align 1
@__PRETTY_FUNCTION__.stbi__tga_load = private unnamed_addr constant [85 x i8] c"void *stbi__tga_load(stbi__context *, int *, int *, int *, int, stbi__result_info *)\00", align 1
@.str.92 = private unnamed_addr constant [31 x i8] c"req_comp >= 1 && req_comp <= 4\00", align 1
@__PRETTY_FUNCTION__.stbi__convert_format = private unnamed_addr constant [91 x i8] c"unsigned char *stbi__convert_format(unsigned char *, int, int, unsigned int, unsigned int)\00", align 1
@.str.93 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@stbi__h2l_scale_i = internal global float 1.000000e+00, align 4
@stbi__h2l_gamma_i = internal global float 0x3FDD1745C0000000, align 4
@.str.125 = private unnamed_addr constant [11 x i8] c"#?RADIANCE\00", align 1
@.str.126 = private unnamed_addr constant [7 x i8] c"#?RGBE\00", align 1
@.str.127 = private unnamed_addr constant [8 x i8] c"not HDR\00", align 1
@.str.128 = private unnamed_addr constant [23 x i8] c"FORMAT=32-bit_rle_rgbe\00", align 1
@.str.129 = private unnamed_addr constant [19 x i8] c"unsupported format\00", align 1
@.str.130 = private unnamed_addr constant [4 x i8] c"-Y \00", align 1
@.str.131 = private unnamed_addr constant [24 x i8] c"unsupported data layout\00", align 1
@.str.132 = private unnamed_addr constant [4 x i8] c"+X \00", align 1
@.str.133 = private unnamed_addr constant [32 x i8] c"invalid decoded scanline length\00", align 1
@.str.119 = private unnamed_addr constant [8 x i8] c"corrupt\00", align 1
@.str.145 = private unnamed_addr constant [12 x i8] c"#?RADIANCE\0A\00", align 1
@.str.146 = private unnamed_addr constant [8 x i8] c"#?RGBE\0A\00", align 1
@.str.124 = private unnamed_addr constant [16 x i8] c"max value > 255\00", align 1
@.str.122 = private unnamed_addr constant [9 x i8] c"bad file\00", align 1
@.str.120 = private unnamed_addr constant [5 x i8] c"S\80\F64\00", align 1
@.str.121 = private unnamed_addr constant [5 x i8] c"PICT\00", align 1
@.str.113 = private unnamed_addr constant [8 x i8] c"not PSD\00", align 1
@.str.114 = private unnamed_addr constant [14 x i8] c"wrong version\00", align 1
@.str.115 = private unnamed_addr constant [20 x i8] c"wrong channel count\00", align 1
@.str.116 = private unnamed_addr constant [22 x i8] c"unsupported bit depth\00", align 1
@.str.117 = private unnamed_addr constant [19 x i8] c"wrong color format\00", align 1
@.str.118 = private unnamed_addr constant [16 x i8] c"bad compression\00", align 1
@__PRETTY_FUNCTION__.stbi__convert_format16 = private unnamed_addr constant [91 x i8] c"stbi__uint16 *stbi__convert_format16(stbi__uint16 *, int, int, unsigned int, unsigned int)\00", align 1
@.str.105 = private unnamed_addr constant [21 x i8] c"bad Image Descriptor\00", align 1
@.str.106 = private unnamed_addr constant [20 x i8] c"missing color table\00", align 1
@.str.107 = private unnamed_addr constant [13 x i8] c"unknown code\00", align 1
@.str.110 = private unnamed_addr constant [14 x i8] c"no clear code\00", align 1
@.str.111 = private unnamed_addr constant [15 x i8] c"too many codes\00", align 1
@.str.112 = private unnamed_addr constant [23 x i8] c"illegal code in raster\00", align 1
@.str.108 = private unnamed_addr constant [8 x i8] c"not GIF\00", align 1
@.str.109 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.94 = private unnamed_addr constant [89 x i8] c"info.offset == s->callback_already_read + (int) (s->img_buffer - s->img_buffer_original)\00", align 1
@__PRETTY_FUNCTION__.stbi__bmp_load = private unnamed_addr constant [85 x i8] c"void *stbi__bmp_load(stbi__context *, int *, int *, int *, int, stbi__result_info *)\00", align 1
@.str.95 = private unnamed_addr constant [11 x i8] c"bad offset\00", align 1
@.str.96 = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.97 = private unnamed_addr constant [8 x i8] c"bad bpp\00", align 1
@.str.98 = private unnamed_addr constant [10 x i8] c"bad masks\00", align 1
@.str.103 = private unnamed_addr constant [8 x i8] c"v < 256\00", align 1
@__PRETTY_FUNCTION__.stbi__shiftsigned = private unnamed_addr constant [46 x i8] c"int stbi__shiftsigned(unsigned int, int, int)\00", align 1
@.str.104 = private unnamed_addr constant [23 x i8] c"bits >= 0 && bits <= 8\00", align 1
@stbi__shiftsigned.mul_table = internal global [9 x i32] [i32 0, i32 255, i32 85, i32 73, i32 17, i32 33, i32 65, i32 129, i32 1], align 16
@stbi__shiftsigned.shift_table = internal global [9 x i32] [i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 4, i32 6, i32 0], align 16
@.str.99 = private unnamed_addr constant [8 x i8] c"not BMP\00", align 1
@.str.100 = private unnamed_addr constant [8 x i8] c"bad BMP\00", align 1
@.str.101 = private unnamed_addr constant [12 x i8] c"unknown BMP\00", align 1
@.str.102 = private unnamed_addr constant [8 x i8] c"BMP RLE\00", align 1
@.str.54 = private unnamed_addr constant [13 x i8] c"bad req_comp\00", align 1
@.str.66 = private unnamed_addr constant [21 x i8] c"bad bits_per_channel\00", align 1
@.str.67 = private unnamed_addr constant [14 x i8] c"multiple IHDR\00", align 1
@.str.68 = private unnamed_addr constant [13 x i8] c"bad IHDR len\00", align 1
@.str.69 = private unnamed_addr constant [20 x i8] c"1/2/4/8/16-bit only\00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c"bad ctype\00", align 1
@.str.71 = private unnamed_addr constant [16 x i8] c"bad comp method\00", align 1
@.str.72 = private unnamed_addr constant [18 x i8] c"bad filter method\00", align 1
@.str.73 = private unnamed_addr constant [21 x i8] c"bad interlace method\00", align 1
@.str.74 = private unnamed_addr constant [14 x i8] c"0-pixel image\00", align 1
@.str.75 = private unnamed_addr constant [15 x i8] c"first not IHDR\00", align 1
@.str.76 = private unnamed_addr constant [13 x i8] c"invalid PLTE\00", align 1
@.str.77 = private unnamed_addr constant [16 x i8] c"tRNS after IDAT\00", align 1
@.str.78 = private unnamed_addr constant [17 x i8] c"tRNS before PLTE\00", align 1
@.str.79 = private unnamed_addr constant [13 x i8] c"bad tRNS len\00", align 1
@.str.80 = private unnamed_addr constant [16 x i8] c"tRNS with alpha\00", align 1
@stbi__depth_scale_table = internal constant [9 x i8] c"\00\FFU\00\11\00\00\00\01", align 1
@.str.81 = private unnamed_addr constant [8 x i8] c"no PLTE\00", align 1
@.str.82 = private unnamed_addr constant [10 x i8] c"outofdata\00", align 1
@.str.83 = private unnamed_addr constant [8 x i8] c"no IDAT\00", align 1
@stbi__de_iphone_flag = internal global i32 0, align 4
@stbi__parse_png_file.invalid_chunk = internal global [25 x i8] c"XXXX PNG chunk not known\00", align 16
@.str.91 = private unnamed_addr constant [18 x i8] c"s->img_out_n == 4\00", align 1
@__PRETTY_FUNCTION__.stbi__de_iphone = private unnamed_addr constant [34 x i8] c"void stbi__de_iphone(stbi__png *)\00", align 1
@stbi__unpremultiply_on_load = internal global i32 0, align 4
@.str.90 = private unnamed_addr constant [25 x i8] c"out_n == 2 || out_n == 4\00", align 1
@__PRETTY_FUNCTION__.stbi__compute_transparency = private unnamed_addr constant [60 x i8] c"int stbi__compute_transparency(stbi__png *, stbi_uc *, int)\00", align 1
@__PRETTY_FUNCTION__.stbi__compute_transparency16 = private unnamed_addr constant [67 x i8] c"int stbi__compute_transparency16(stbi__png *, stbi__uint16 *, int)\00", align 1
@__const.stbi__create_png_image.xorig = private unnamed_addr constant [7 x i32] [i32 0, i32 4, i32 0, i32 2, i32 0, i32 1, i32 0], align 16
@__const.stbi__create_png_image.yorig = private unnamed_addr constant [7 x i32] [i32 0, i32 0, i32 4, i32 0, i32 2, i32 0, i32 1], align 16
@__const.stbi__create_png_image.xspc = private unnamed_addr constant [7 x i32] [i32 8, i32 8, i32 4, i32 4, i32 2, i32 2, i32 1], align 16
@__const.stbi__create_png_image.yspc = private unnamed_addr constant [7 x i32] [i32 8, i32 8, i32 8, i32 4, i32 4, i32 2, i32 2], align 16
@.str.84 = private unnamed_addr constant [41 x i8] c"out_n == s->img_n || out_n == s->img_n+1\00", align 1
@__PRETTY_FUNCTION__.stbi__create_png_image_raw = private unnamed_addr constant [112 x i8] c"int stbi__create_png_image_raw(stbi__png *, stbi_uc *, stbi__uint32, int, stbi__uint32, stbi__uint32, int, int)\00", align 1
@.str.85 = private unnamed_addr constant [18 x i8] c"not enough pixels\00", align 1
@.str.86 = private unnamed_addr constant [15 x i8] c"invalid filter\00", align 1
@.str.87 = private unnamed_addr constant [14 x i8] c"invalid width\00", align 1
@first_row_filter = internal global [5 x i8] c"\00\01\00\05\06", align 1
@.str.88 = private unnamed_addr constant [17 x i8] c"img_n+1 == out_n\00", align 1
@.str.89 = private unnamed_addr constant [11 x i8] c"img_n == 3\00", align 1
@stbi__zdefault_length = internal constant [288 x i8] calign 16
@stbi__zdefault_distance = internal constant [32 x i8] c"\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05", align 16
@.str.62 = private unnamed_addr constant [17 x i8] c"bad huffman code\00", align 1
@stbi__zlength_base = internal constant [31 x i32] [i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 13, i32 15, i32 17, i32 19, i32 23, i32 27, i32 31, i32 35, i32 43, i32 51, i32 59, i32 67, i32 83, i32 99, i32 115, i32 131, i32 163, i32 195, i32 227, i32 258, i32 0, i32 0], align 16
@stbi__zlength_extra = internal constant [31 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0], align 16
@stbi__zdist_base = internal constant [32 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 7, i32 9, i32 13, i32 17, i32 25, i32 33, i32 49, i32 65, i32 97, i32 129, i32 193, i32 257, i32 385, i32 513, i32 769, i32 1025, i32 1537, i32 2049, i32 3073, i32 4097, i32 6145, i32 8193, i32 12289, i32 16385, i32 24577, i32 0, i32 0], align 16
@stbi__zdist_extra = internal constant [32 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 0, i32 0], align 16
@.str.144 = private unnamed_addr constant [9 x i8] c"bad dist\00", align 1
@.str.140 = private unnamed_addr constant [20 x i8] c"output buffer limit\00", align 1
@.str.143 = private unnamed_addr constant [11 x i8] c"bits <= 16\00", align 1
@__PRETTY_FUNCTION__.stbi__bit_reverse = private unnamed_addr constant [32 x i8] c"int stbi__bit_reverse(int, int)\00", align 1
@stbi__compute_huffman_codes.length_dezigzag = internal constant [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F", align 16
@.str.142 = private unnamed_addr constant [16 x i8] c"bad codelengths\00", align 1
@.str.141 = private unnamed_addr constant [10 x i8] c"bad sizes\00", align 1
@.str.138 = private unnamed_addr constant [13 x i8] c"zlib corrupt\00", align 1
@.str.139 = private unnamed_addr constant [17 x i8] c"read past buffer\00", align 1
@.str.136 = private unnamed_addr constant [16 x i8] c"bad zlib header\00", align 1
@.str.137 = private unnamed_addr constant [15 x i8] c"no preset dict\00", align 1
@stbi__check_png_header.png_sig = internal constant [8 x i8] c"\89PNG\0D\0A\1A\0A", align 1
@.str.65 = private unnamed_addr constant [12 x i8] c"bad png sig\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"bad DNL len\00", align 1
@.str.56 = private unnamed_addr constant [15 x i8] c"bad DNL height\00", align 1
@.str.34 = private unnamed_addr constant [16 x i8] c"expected marker\00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"bad DRI len\00", align 1
@.str.36 = private unnamed_addr constant [13 x i8] c"bad DQT type\00", align 1
@.str.37 = private unnamed_addr constant [14 x i8] c"bad DQT table\00", align 1
@stbi__jpeg_dezigzag = internal constant [79 x i8] c"\00\01\08\10\09\02\03\0A\11\18 \19\12\0B\04\05\0C\13\1A!(0)\22\1B\14\0D\06\07\0E\15\1C#*1892+$\1D\16\0F\17\1E%,3:;4-&\1F'.5<=6/7>????????????????", align 16
@.str.38 = private unnamed_addr constant [15 x i8] c"bad DHT header\00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c"bad COM len\00", align 1
@.str.40 = private unnamed_addr constant [12 x i8] c"bad APP len\00", align 1
@stbi__process_marker.tag = internal constant [5 x i8] c"JFIF\00", align 1
@stbi__process_marker.tag.41 = internal constant [6 x i8] c"Adobe\00", align 1
@.str.42 = private unnamed_addr constant [15 x i8] c"unknown marker\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"bad code lengths\00", align 1
@.str.64 = private unnamed_addr constant [22 x i8] c"can't merge dc and ac\00", align 1
@stbi__bmask = internal constant [17 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535], align 16
@stbi__jbias = internal constant [16 x i32] [i32 0, i32 -1, i32 -3, i32 -7, i32 -15, i32 -31, i32 -63, i32 -127, i32 -255, i32 -511, i32 -1023, i32 -2047, i32 -4095, i32 -8191, i32 -16383, i32 -32767], align 16
@.str.63 = private unnamed_addr constant [82 x i8] c"(((j->code_buffer) >> (32 - h->size[c])) & stbi__bmask[h->size[c]]) == h->code[c]\00", align 1
@__PRETTY_FUNCTION__.stbi__jpeg_huff_decode = private unnamed_addr constant [58 x i8] c"int stbi__jpeg_huff_decode(stbi__jpeg *, stbi__huffman *)\00", align 1
@.str.57 = private unnamed_addr constant [24 x i8] c"bad SOS component count\00", align 1
@.str.58 = private unnamed_addr constant [12 x i8] c"bad SOS len\00", align 1
@.str.59 = private unnamed_addr constant [12 x i8] c"bad DC huff\00", align 1
@.str.60 = private unnamed_addr constant [12 x i8] c"bad AC huff\00", align 1
@.str.61 = private unnamed_addr constant [8 x i8] c"bad SOS\00", align 1
@.str.32 = private unnamed_addr constant [7 x i8] c"no SOI\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"no SOF\00", align 1
@.str.44 = private unnamed_addr constant [12 x i8] c"bad SOF len\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"only 8-bit\00", align 1
@.str.46 = private unnamed_addr constant [17 x i8] c"no header height\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"0 width\00", align 1
@.str.49 = private unnamed_addr constant [20 x i8] c"bad component count\00", align 1
@stbi__process_frame_header.rgb = internal constant [3 x i8] c"RGB", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"bad H\00", align 1
@.str.51 = private unnamed_addr constant [6 x i8] c"bad V\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"bad TQ\00", align 1
@stbi__stdio_callbacks = internal global %struct.stbi_io_callbacks { i32 (i8*, i8*, i32)* @stbi__stdio_read, void (i8*, i32)* @stbi__stdio_skip, i32 (i8*)* @stbi__stdio_eof }, align 8
@__PRETTY_FUNCTION__.stbi__load_and_postprocess_16bit = private unnamed_addr constant [90 x i8] c"stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *, int *, int *, int *, int)\00", align 1
@stbi__l2h_gamma = internal global float 0x40019999A0000000, align 4
@stbi__l2h_scale = internal global float 1.000000e+00, align 4
@stbi__flip_vertically_on_write = internal global i32 0, align 4
@.str.147 = private unnamed_addr constant [24 x i8] c"11 4 22 44 44 22 444444\00", align 1
@__const.stbiw__write_pixel.bg = private unnamed_addr constant [3 x i8] c"\FF\00\FF", align 1
@.str.3 = private unnamed_addr constant [63 x i8] c"/u1/dtompkins/.seashell/projects/_A4/common/_stb_image_write.h\00", align 1
@__PRETTY_FUNCTION__.stbiw__writefv = private unnamed_addr constant [81 x i8] c"void stbiw__writefv(stbi__write_context *, const char *, struct __va_list_tag *)\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.148 = private unnamed_addr constant [16 x i8] c"111 221 2222 11\00", align 1
@__const.stbi_write_hdr_core.header = private unnamed_addr constant [66 x i8] c"#?RADIANCE\0A# Written by stb_image_write.h\0AFORMAT=32-bit_rle_rgbe\0A\00", align 16
@.str.149 = private unnamed_addr constant [49 x i8] c"EXPOSURE=          1.0000000000000\0A\0A-Y %d +X %d\0A\00", align 1
@__const.stbiw__write_hdr_scanline.scanlineheader = private unnamed_addr constant [4 x i8] c"\02\02\00\00", align 1
@.str.151 = private unnamed_addr constant [18 x i8] c"length+128 <= 255\00", align 1
@__PRETTY_FUNCTION__.stbiw__write_run_data = private unnamed_addr constant [70 x i8] c"void stbiw__write_run_data(stbi__write_context *, int, unsigned char)\00", align 1
@.str.150 = private unnamed_addr constant [14 x i8] c"length <= 128\00", align 1
@__PRETTY_FUNCTION__.stbiw__write_dump_data = private unnamed_addr constant [73 x i8] c"void stbiw__write_dump_data(stbi__write_context *, int, unsigned char *)\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"d <= 32767 && best <= 258\00", align 1
@__PRETTY_FUNCTION__.stbi_zlib_compress = private unnamed_addr constant [68 x i8] c"unsigned char *stbi_zlib_compress(unsigned char *, int, int *, int)\00", align 1
@stbi_zlib_compress.lengthc = internal global [30 x i16] [i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 13, i16 15, i16 17, i16 19, i16 23, i16 27, i16 31, i16 35, i16 43, i16 51, i16 59, i16 67, i16 83, i16 99, i16 115, i16 131, i16 163, i16 195, i16 227, i16 258, i16 259], align 16
@stbi_zlib_compress.lengtheb = internal global [29 x i8] c"\00\00\00\00\00\00\00\00\01\01\01\01\02\02\02\02\03\03\03\03\04\04\04\04\05\05\05\05\00", align 16
@stbi_zlib_compress.distc = internal global [31 x i16] [i16 1, i16 2, i16 3, i16 4, i16 5, i16 7, i16 9, i16 13, i16 17, i16 25, i16 33, i16 49, i16 65, i16 97, i16 129, i16 193, i16 257, i16 385, i16 513, i16 769, i16 1025, i16 1537, i16 2049, i16 3073, i16 4097, i16 6145, i16 8193, i16 12289, i16 16385, i16 24577, i16 -32768], align 16
@stbi_zlib_compress.disteb = internal global [30 x i8] c"\00\00\00\00\01\01\02\02\03\03\04\04\05\05\06\06\07\07\08\08\09\09\0A\0A\0B\0B\0C\0C\0D\0D", align 16
@.str.152 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@__PRETTY_FUNCTION__.stbiw__sbgrowf = private unnamed_addr constant [40 x i8] c"void *stbiw__sbgrowf(void **, int, int)\00", align 1
@__const.stbi_write_png_to_mem.ctype = private unnamed_addr constant [5 x i32] [i32 -1, i32 0, i32 4, i32 2, i32 6], align 16
@__const.stbi_write_png_to_mem.sig = private unnamed_addr constant [8 x i8] c"\89PNG\0D\0A\1A\0A", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"IHDR\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"IDAT\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"IEND\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"o == out + *out_len\00", align 1
@__PRETTY_FUNCTION__.stbi_write_png_to_mem = private unnamed_addr constant [87 x i8] c"unsigned char *stbi_write_png_to_mem(const unsigned char *, int, int, int, int, int *)\00", align 1
@stbiw__crc32.crc_table = internal global [256 x i32] [i32 0, i32 1996959894, i32 -301047508, i32 -1727442502, i32 124634137, i32 1886057615, i32 -379345611, i32 -1637575261, i32 249268274, i32 2044508324, i32 -522852066, i32 -1747789432, i32 162941995, i32 2125561021, i32 -407360249, i32 -1866523247, i32 498536548, i32 1789927666, i32 -205950648, i32 -2067906082, i32 450548861, i32 1843258603, i32 -187386543, i32 -2083289657, i32 325883990, i32 1684777152, i32 -43845254, i32 -1973040660, i32 335633487, i32 1661365465, i32 -99664541, i32 -1928851979, i32 997073096, i32 1281953886, i32 -715111964, i32 -1570279054, i32 1006888145, i32 1258607687, i32 -770865667, i32 -1526024853, i32 901097722, i32 1119000684, i32 -608450090, i32 -1396901568, i32 853044451, i32 1172266101, i32 -589951537, i32 -1412350631, i32 651767980, i32 1373503546, i32 -925412992, i32 -1076862698, i32 565507253, i32 1454621731, i32 -809855591, i32 -1195530993, i32 671266974, i32 1594198024, i32 -972236366, i32 -1324619484, i32 795835527, i32 1483230225, i32 -1050600021, i32 -1234817731, i32 1994146192, i32 31158534, i32 -1731059524, i32 -271249366, i32 1907459465, i32 112637215, i32 -1614814043, i32 -390540237, i32 2013776290, i32 251722036, i32 -1777751922, i32 -519137256, i32 2137656763, i32 141376813, i32 -1855689577, i32 -429695999, i32 1802195444, i32 476864866, i32 -2056965928, i32 -228458418, i32 1812370925, i32 453092731, i32 -2113342271, i32 -183516073, i32 1706088902, i32 314042704, i32 -1950435094, i32 -54949764, i32 1658658271, i32 366619977, i32 -1932296973, i32 -69972891, i32 1303535960, i32 984961486, i32 -1547960204, i32 -725929758, i32 1256170817, i32 1037604311, i32 -1529756563, i32 -740887301, i32 1131014506, i32 879679996, i32 -1385723834, i32 -631195440, i32 1141124467, i32 855842277, i32 -1442165665, i32 -586318647, i32 1342533948, i32 654459306, i32 -1106571248, i32 -921952122, i32 1466479909, i32 544179635, i32 -1184443383, i32 -832445281, i32 1591671054, i32 702138776, i32 -1328506846, i32 -942167884, i32 1504918807, i32 783551873, i32 -1212326853, i32 -1061524307, i32 -306674912, i32 -1698712650, i32 62317068, i32 1957810842, i32 -355121351, i32 -1647151185, i32 81470997, i32 1943803523, i32 -480048366, i32 -1805370492, i32 225274430, i32 2053790376, i32 -468791541, i32 -1828061283, i32 167816743, i32 2097651377, i32 -267414716, i32 -2029476910, i32 503444072, i32 1762050814, i32 -144550051, i32 -2140837941, i32 426522225, i32 1852507879, i32 -19653770, i32 -1982649376, i32 282753626, i32 1742555852, i32 -105259153, i32 -1900089351, i32 397917763, i32 1622183637, i32 -690576408, i32 -1580100738, i32 953729732, i32 1340076626, i32 -776247311, i32 -1497606297, i32 1068828381, i32 1219638859, i32 -670225446, i32 -1358292148, i32 906185462, i32 1090812512, i32 -547295293, i32 -1469587627, i32 829329135, i32 1181335161, i32 -882789492, i32 -1134132454, i32 628085408, i32 1382605366, i32 -871598187, i32 -1156888829, i32 570562233, i32 1426400815, i32 -977650754, i32 -1296233688, i32 733239954, i32 1555261956, i32 -1026031705, i32 -1244606671, i32 752459403, i32 1541320221, i32 -1687895376, i32 -328994266, i32 1969922972, i32 40735498, i32 -1677130071, i32 -351390145, i32 1913087877, i32 83908371, i32 -1782625662, i32 -491226604, i32 2075208622, i32 213261112, i32 -1831694693, i32 -438977011, i32 2094854071, i32 198958881, i32 -2032938284, i32 -237706686, i32 1759359992, i32 534414190, i32 -2118248755, i32 -155638181, i32 1873836001, i32 414664567, i32 -2012718362, i32 -15766928, i32 1711684554, i32 285281116, i32 -1889165569, i32 -127750551, i32 1634467795, i32 376229701, i32 -1609899400, i32 -686959890, i32 1308918612, i32 956543938, i32 -1486412191, i32 -799009033, i32 1231636301, i32 1047427035, i32 -1362007478, i32 -640263460, i32 1088359270, i32 936918000, i32 -1447252397, i32 -558129467, i32 1202900863, i32 817233897, i32 -1111625188, i32 -893730166, i32 1404277552, i32 615818150, i32 -1160759803, i32 -841546093, i32 1423857449, i32 601450431, i32 -1285129682, i32 -1000256840, i32 1567103746, i32 711928724, i32 -1274298825, i32 -1022587231, i32 1510334235, i32 755167117], align 16
@stbiw__encode_png_line.mapping = internal global [5 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4], align 16
@stbiw__encode_png_line.firstmap = internal global [5 x i32] [i32 0, i32 1, i32 0, i32 5, i32 6], align 16
@stbi_write_jpg_core.YQT = internal constant [64 x i32] [i32 16, i32 11, i32 10, i32 16, i32 24, i32 40, i32 51, i32 61, i32 12, i32 12, i32 14, i32 19, i32 26, i32 58, i32 60, i32 55, i32 14, i32 13, i32 16, i32 24, i32 40, i32 57, i32 69, i32 56, i32 14, i32 17, i32 22, i32 29, i32 51, i32 87, i32 80, i32 62, i32 18, i32 22, i32 37, i32 56, i32 68, i32 109, i32 103, i32 77, i32 24, i32 35, i32 55, i32 64, i32 81, i32 104, i32 113, i32 92, i32 49, i32 64, i32 78, i32 87, i32 103, i32 121, i32 120, i32 101, i32 72, i32 92, i32 95, i32 98, i32 112, i32 100, i32 103, i32 99], align 16
@stbiw__jpg_ZigZag = internal constant [64 x i8] c"\00\01\05\06\0E\0F\1B\1C\02\04\07\0D\10\1A\1D*\03\08\0C\11\19\1E)+\09\0B\12\18\1F(,5\0A\13\17 '-46\14\16!&.37<\15\22%/28;=#$019:>?", align 16
@stbi_write_jpg_core.UVQT = internal constant [64 x i32] [i32 17, i32 18, i32 24, i32 47, i32 99, i32 99, i32 99, i32 99, i32 18, i32 21, i32 26, i32 66, i32 99, i32 99, i32 99, i32 99, i32 24, i32 26, i32 56, i32 99, i32 99, i32 99, i32 99, i32 99, i32 47, i32 66, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99, i32 99], align 16
@stbi_write_jpg_core.aasf = internal constant [8 x float] [float 0x4006A09E60000000, float 0x400F6297E0000000, float 0x400D906BE0000000, float 0x400A9B6600000000, float 0x4006A09E60000000, float 0x4001C73B40000000, float 0x3FF87DE2A0000000, float 0x3FE8F8B840000000], align 16
@stbi_write_jpg_core.head0 = internal constant [25 x i8] c"\FF\D8\FF\E0\00\10JFIF\00\01\01\00\00\01\00\01\00\00\FF\DB\00\84\00", align 16
@stbi_write_jpg_core.std_dc_luminance_nrcodes = internal constant [17 x i8] c"\00\00\01\05\01\01\01\01\01\01\00\00\00\00\00\00\00", align 16
@stbi_write_jpg_core.std_dc_luminance_values = internal constant [12 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B", align 1
@stbi_write_jpg_core.std_ac_luminance_nrcodes = internal constant [17 x i8] c"\00\00\02\01\03\03\02\04\03\05\05\04\04\00\00\01}", align 16
@stbi_write_jpg_core.std_ac_luminance_values = internal constant [162 x i8] c"\01\02\03\00\04\11\05\12!1A\06\13Qa\07\22q\142\81\91\A1\08#B\B1\C1\15R\D1\F0$3br\82\09\0A\16\17\18\19\1A%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA", align 16
@stbi_write_jpg_core.std_dc_chrominance_nrcodes = internal constant [17 x i8] c"\00\00\03\01\01\01\01\01\01\01\01\01\00\00\00\00\00", align 16
@stbi_write_jpg_core.std_dc_chrominance_values = internal constant [12 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B", align 1
@stbi_write_jpg_core.std_ac_chrominance_nrcodes = internal constant [17 x i8] c"\00\00\02\01\02\04\04\03\04\07\05\04\04\00\01\02w", align 16
@stbi_write_jpg_core.std_ac_chrominance_values = internal constant [162 x i8] c"\00\01\02\03\11\04\05!1\06\12AQ\07aq\13\222\81\08\14B\91\A1\B1\C1\09#3R\F0\15br\D1\0A\16$4\E1%\F1\17\18\19\1A&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\82\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E2\E3\E4\E5\E6\E7\E8\E9\EA\F2\F3\F4\F5\F6\F7\F8\F9\FA", align 16
@stbi_write_jpg_core.head2 = internal constant [14 x i8] c"\FF\DA\00\0C\03\01\00\02\11\03\11\00?\00", align 1
@stbi_write_jpg_core.YDC_HT = internal constant <{ [12 x [2 x i16]], [244 x [2 x i16]] }> <{ [12 x [2 x i16]] [[2 x i16] [i16 0, i16 2], [2 x i16] [i16 2, i16 3], [2 x i16] [i16 3, i16 3], [2 x i16] [i16 4, i16 3], [2 x i16] [i16 5, i16 3], [2 x i16] [i16 6, i16 3], [2 x i16] [i16 14, i16 4], [2 x i16] [i16 30, i16 5], [2 x i16] [i16 62, i16 6], [2 x i16] [i16 126, i16 7], [2 x i16] [i16 254, i16 8], [2 x i16] [i16 510, i16 9]], [244 x [2 x i16]] zeroinitializer }>, align 16
@stbi_write_jpg_core.YAC_HT = internal constant [256 x [2 x i16]] [[2 x i16] [i16 10, i16 4], [2 x i16] [i16 0, i16 2], [2 x i16] [i16 1, i16 2], [2 x i16] [i16 4, i16 3], [2 x i16] [i16 11, i16 4], [2 x i16] [i16 26, i16 5], [2 x i16] [i16 120, i16 7], [2 x i16] [i16 248, i16 8], [2 x i16] [i16 1014, i16 10], [2 x i16] [i16 -126, i16 16], [2 x i16] [i16 -125, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 12, i16 4], [2 x i16] [i16 27, i16 5], [2 x i16] [i16 121, i16 7], [2 x i16] [i16 502, i16 9], [2 x i16] [i16 2038, i16 11], [2 x i16] [i16 -124, i16 16], [2 x i16] [i16 -123, i16 16], [2 x i16] [i16 -122, i16 16], [2 x i16] [i16 -121, i16 16], [2 x i16] [i16 -120, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 28, i16 5], [2 x i16] [i16 249, i16 8], [2 x i16] [i16 1015, i16 10], [2 x i16] [i16 4084, i16 12], [2 x i16] [i16 -119, i16 16], [2 x i16] [i16 -118, i16 16], [2 x i16] [i16 -117, i16 16], [2 x i16] [i16 -116, i16 16], [2 x i16] [i16 -115, i16 16], [2 x i16] [i16 -114, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 58, i16 6], [2 x i16] [i16 503, i16 9], [2 x i16] [i16 4085, i16 12], [2 x i16] [i16 -113, i16 16], [2 x i16] [i16 -112, i16 16], [2 x i16] [i16 -111, i16 16], [2 x i16] [i16 -110, i16 16], [2 x i16] [i16 -109, i16 16], [2 x i16] [i16 -108, i16 16], [2 x i16] [i16 -107, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 59, i16 6], [2 x i16] [i16 1016, i16 10], [2 x i16] [i16 -106, i16 16], [2 x i16] [i16 -105, i16 16], [2 x i16] [i16 -104, i16 16], [2 x i16] [i16 -103, i16 16], [2 x i16] [i16 -102, i16 16], [2 x i16] [i16 -101, i16 16], [2 x i16] [i16 -100, i16 16], [2 x i16] [i16 -99, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 122, i16 7], [2 x i16] [i16 2039, i16 11], [2 x i16] [i16 -98, i16 16], [2 x i16] [i16 -97, i16 16], [2 x i16] [i16 -96, i16 16], [2 x i16] [i16 -95, i16 16], [2 x i16] [i16 -94, i16 16], [2 x i16] [i16 -93, i16 16], [2 x i16] [i16 -92, i16 16], [2 x i16] [i16 -91, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 123, i16 7], [2 x i16] [i16 4086, i16 12], [2 x i16] [i16 -90, i16 16], [2 x i16] [i16 -89, i16 16], [2 x i16] [i16 -88, i16 16], [2 x i16] [i16 -87, i16 16], [2 x i16] [i16 -86, i16 16], [2 x i16] [i16 -85, i16 16], [2 x i16] [i16 -84, i16 16], [2 x i16] [i16 -83, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 250, i16 8], [2 x i16] [i16 4087, i16 12], [2 x i16] [i16 -82, i16 16], [2 x i16] [i16 -81, i16 16], [2 x i16] [i16 -80, i16 16], [2 x i16] [i16 -79, i16 16], [2 x i16] [i16 -78, i16 16], [2 x i16] [i16 -77, i16 16], [2 x i16] [i16 -76, i16 16], [2 x i16] [i16 -75, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 504, i16 9], [2 x i16] [i16 32704, i16 15], [2 x i16] [i16 -74, i16 16], [2 x i16] [i16 -73, i16 16], [2 x i16] [i16 -72, i16 16], [2 x i16] [i16 -71, i16 16], [2 x i16] [i16 -70, i16 16], [2 x i16] [i16 -69, i16 16], [2 x i16] [i16 -68, i16 16], [2 x i16] [i16 -67, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 505, i16 9], [2 x i16] [i16 -66, i16 16], [2 x i16] [i16 -65, i16 16], [2 x i16] [i16 -64, i16 16], [2 x i16] [i16 -63, i16 16], [2 x i16] [i16 -62, i16 16], [2 x i16] [i16 -61, i16 16], [2 x i16] [i16 -60, i16 16], [2 x i16] [i16 -59, i16 16], [2 x i16] [i16 -58, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 506, i16 9], [2 x i16] [i16 -57, i16 16], [2 x i16] [i16 -56, i16 16], [2 x i16] [i16 -55, i16 16], [2 x i16] [i16 -54, i16 16], [2 x i16] [i16 -53, i16 16], [2 x i16] [i16 -52, i16 16], [2 x i16] [i16 -51, i16 16], [2 x i16] [i16 -50, i16 16], [2 x i16] [i16 -49, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 1017, i16 10], [2 x i16] [i16 -48, i16 16], [2 x i16] [i16 -47, i16 16], [2 x i16] [i16 -46, i16 16], [2 x i16] [i16 -45, i16 16], [2 x i16] [i16 -44, i16 16], [2 x i16] [i16 -43, i16 16], [2 x i16] [i16 -42, i16 16], [2 x i16] [i16 -41, i16 16], [2 x i16] [i16 -40, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 1018, i16 10], [2 x i16] [i16 -39, i16 16], [2 x i16] [i16 -38, i16 16], [2 x i16] [i16 -37, i16 16], [2 x i16] [i16 -36, i16 16], [2 x i16] [i16 -35, i16 16], [2 x i16] [i16 -34, i16 16], [2 x i16] [i16 -33, i16 16], [2 x i16] [i16 -32, i16 16], [2 x i16] [i16 -31, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 2040, i16 11], [2 x i16] [i16 -30, i16 16], [2 x i16] [i16 -29, i16 16], [2 x i16] [i16 -28, i16 16], [2 x i16] [i16 -27, i16 16], [2 x i16] [i16 -26, i16 16], [2 x i16] [i16 -25, i16 16], [2 x i16] [i16 -24, i16 16], [2 x i16] [i16 -23, i16 16], [2 x i16] [i16 -22, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 -21, i16 16], [2 x i16] [i16 -20, i16 16], [2 x i16] [i16 -19, i16 16], [2 x i16] [i16 -18, i16 16], [2 x i16] [i16 -17, i16 16], [2 x i16] [i16 -16, i16 16], [2 x i16] [i16 -15, i16 16], [2 x i16] [i16 -14, i16 16], [2 x i16] [i16 -13, i16 16], [2 x i16] [i16 -12, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 2041, i16 11], [2 x i16] [i16 -11, i16 16], [2 x i16] [i16 -10, i16 16], [2 x i16] [i16 -9, i16 16], [2 x i16] [i16 -8, i16 16], [2 x i16] [i16 -7, i16 16], [2 x i16] [i16 -6, i16 16], [2 x i16] [i16 -5, i16 16], [2 x i16] [i16 -4, i16 16], [2 x i16] [i16 -3, i16 16], [2 x i16] [i16 -2, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer], align 16
@stbi_write_jpg_core.UVDC_HT = internal constant <{ [12 x [2 x i16]], [244 x [2 x i16]] }> <{ [12 x [2 x i16]] [[2 x i16] [i16 0, i16 2], [2 x i16] [i16 1, i16 2], [2 x i16] [i16 2, i16 2], [2 x i16] [i16 6, i16 3], [2 x i16] [i16 14, i16 4], [2 x i16] [i16 30, i16 5], [2 x i16] [i16 62, i16 6], [2 x i16] [i16 126, i16 7], [2 x i16] [i16 254, i16 8], [2 x i16] [i16 510, i16 9], [2 x i16] [i16 1022, i16 10], [2 x i16] [i16 2046, i16 11]], [244 x [2 x i16]] zeroinitializer }>, align 16
@stbi_write_jpg_core.UVAC_HT = internal constant [256 x [2 x i16]] [[2 x i16] [i16 0, i16 2], [2 x i16] [i16 1, i16 2], [2 x i16] [i16 4, i16 3], [2 x i16] [i16 10, i16 4], [2 x i16] [i16 24, i16 5], [2 x i16] [i16 25, i16 5], [2 x i16] [i16 56, i16 6], [2 x i16] [i16 120, i16 7], [2 x i16] [i16 500, i16 9], [2 x i16] [i16 1014, i16 10], [2 x i16] [i16 4084, i16 12], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 11, i16 4], [2 x i16] [i16 57, i16 6], [2 x i16] [i16 246, i16 8], [2 x i16] [i16 501, i16 9], [2 x i16] [i16 2038, i16 11], [2 x i16] [i16 4085, i16 12], [2 x i16] [i16 -120, i16 16], [2 x i16] [i16 -119, i16 16], [2 x i16] [i16 -118, i16 16], [2 x i16] [i16 -117, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 26, i16 5], [2 x i16] [i16 247, i16 8], [2 x i16] [i16 1015, i16 10], [2 x i16] [i16 4086, i16 12], [2 x i16] [i16 32706, i16 15], [2 x i16] [i16 -116, i16 16], [2 x i16] [i16 -115, i16 16], [2 x i16] [i16 -114, i16 16], [2 x i16] [i16 -113, i16 16], [2 x i16] [i16 -112, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 27, i16 5], [2 x i16] [i16 248, i16 8], [2 x i16] [i16 1016, i16 10], [2 x i16] [i16 4087, i16 12], [2 x i16] [i16 -111, i16 16], [2 x i16] [i16 -110, i16 16], [2 x i16] [i16 -109, i16 16], [2 x i16] [i16 -108, i16 16], [2 x i16] [i16 -107, i16 16], [2 x i16] [i16 -106, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 58, i16 6], [2 x i16] [i16 502, i16 9], [2 x i16] [i16 -105, i16 16], [2 x i16] [i16 -104, i16 16], [2 x i16] [i16 -103, i16 16], [2 x i16] [i16 -102, i16 16], [2 x i16] [i16 -101, i16 16], [2 x i16] [i16 -100, i16 16], [2 x i16] [i16 -99, i16 16], [2 x i16] [i16 -98, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 59, i16 6], [2 x i16] [i16 1017, i16 10], [2 x i16] [i16 -97, i16 16], [2 x i16] [i16 -96, i16 16], [2 x i16] [i16 -95, i16 16], [2 x i16] [i16 -94, i16 16], [2 x i16] [i16 -93, i16 16], [2 x i16] [i16 -92, i16 16], [2 x i16] [i16 -91, i16 16], [2 x i16] [i16 -90, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 121, i16 7], [2 x i16] [i16 2039, i16 11], [2 x i16] [i16 -89, i16 16], [2 x i16] [i16 -88, i16 16], [2 x i16] [i16 -87, i16 16], [2 x i16] [i16 -86, i16 16], [2 x i16] [i16 -85, i16 16], [2 x i16] [i16 -84, i16 16], [2 x i16] [i16 -83, i16 16], [2 x i16] [i16 -82, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 122, i16 7], [2 x i16] [i16 2040, i16 11], [2 x i16] [i16 -81, i16 16], [2 x i16] [i16 -80, i16 16], [2 x i16] [i16 -79, i16 16], [2 x i16] [i16 -78, i16 16], [2 x i16] [i16 -77, i16 16], [2 x i16] [i16 -76, i16 16], [2 x i16] [i16 -75, i16 16], [2 x i16] [i16 -74, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 249, i16 8], [2 x i16] [i16 -73, i16 16], [2 x i16] [i16 -72, i16 16], [2 x i16] [i16 -71, i16 16], [2 x i16] [i16 -70, i16 16], [2 x i16] [i16 -69, i16 16], [2 x i16] [i16 -68, i16 16], [2 x i16] [i16 -67, i16 16], [2 x i16] [i16 -66, i16 16], [2 x i16] [i16 -65, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 503, i16 9], [2 x i16] [i16 -64, i16 16], [2 x i16] [i16 -63, i16 16], [2 x i16] [i16 -62, i16 16], [2 x i16] [i16 -61, i16 16], [2 x i16] [i16 -60, i16 16], [2 x i16] [i16 -59, i16 16], [2 x i16] [i16 -58, i16 16], [2 x i16] [i16 -57, i16 16], [2 x i16] [i16 -56, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 504, i16 9], [2 x i16] [i16 -55, i16 16], [2 x i16] [i16 -54, i16 16], [2 x i16] [i16 -53, i16 16], [2 x i16] [i16 -52, i16 16], [2 x i16] [i16 -51, i16 16], [2 x i16] [i16 -50, i16 16], [2 x i16] [i16 -49, i16 16], [2 x i16] [i16 -48, i16 16], [2 x i16] [i16 -47, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 505, i16 9], [2 x i16] [i16 -46, i16 16], [2 x i16] [i16 -45, i16 16], [2 x i16] [i16 -44, i16 16], [2 x i16] [i16 -43, i16 16], [2 x i16] [i16 -42, i16 16], [2 x i16] [i16 -41, i16 16], [2 x i16] [i16 -40, i16 16], [2 x i16] [i16 -39, i16 16], [2 x i16] [i16 -38, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 506, i16 9], [2 x i16] [i16 -37, i16 16], [2 x i16] [i16 -36, i16 16], [2 x i16] [i16 -35, i16 16], [2 x i16] [i16 -34, i16 16], [2 x i16] [i16 -33, i16 16], [2 x i16] [i16 -32, i16 16], [2 x i16] [i16 -31, i16 16], [2 x i16] [i16 -30, i16 16], [2 x i16] [i16 -29, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 2041, i16 11], [2 x i16] [i16 -28, i16 16], [2 x i16] [i16 -27, i16 16], [2 x i16] [i16 -26, i16 16], [2 x i16] [i16 -25, i16 16], [2 x i16] [i16 -24, i16 16], [2 x i16] [i16 -23, i16 16], [2 x i16] [i16 -22, i16 16], [2 x i16] [i16 -21, i16 16], [2 x i16] [i16 -20, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 16352, i16 14], [2 x i16] [i16 -19, i16 16], [2 x i16] [i16 -18, i16 16], [2 x i16] [i16 -17, i16 16], [2 x i16] [i16 -16, i16 16], [2 x i16] [i16 -15, i16 16], [2 x i16] [i16 -14, i16 16], [2 x i16] [i16 -13, i16 16], [2 x i16] [i16 -12, i16 16], [2 x i16] [i16 -11, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] [i16 1018, i16 10], [2 x i16] [i16 32707, i16 15], [2 x i16] [i16 -10, i16 16], [2 x i16] [i16 -9, i16 16], [2 x i16] [i16 -8, i16 16], [2 x i16] [i16 -7, i16 16], [2 x i16] [i16 -6, i16 16], [2 x i16] [i16 -5, i16 16], [2 x i16] [i16 -4, i16 16], [2 x i16] [i16 -3, i16 16], [2 x i16] [i16 -2, i16 16], [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer, [2 x i16] zeroinitializer], align 16
@stbi_write_jpg_core.fillBits = internal constant [2 x i16] [i16 127, i16 7], align 2
@.str.9 = private unnamed_addr constant [10 x i8] c"0 < width\00", align 1
@.str.10 = private unnamed_addr constant [52 x i8] c"/u1/dtompkins/.seashell/projects/_A4/common/image.c\00", align 1
@__PRETTY_FUNCTION__.image_create = private unnamed_addr constant [42 x i8] c"struct image *image_create(int, int, int)\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"0 < height\00", align 1
@.str.12 = private unnamed_addr constant [31 x i8] c"BLACK <= grey && grey <= WHITE\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"img\00", align 1
@__PRETTY_FUNCTION__.image_destroy = private unnamed_addr constant [35 x i8] c"void image_destroy(struct image *)\00", align 1
@__PRETTY_FUNCTION__.image_get_width = private unnamed_addr constant [42 x i8] c"int image_get_width(const struct image *)\00", align 1
@__PRETTY_FUNCTION__.image_get_height = private unnamed_addr constant [43 x i8] c"int image_get_height(const struct image *)\00", align 1
@.str.153 = private unnamed_addr constant [23 x i8] c"valid_pixel(img, x, y)\00", align 1
@__PRETTY_FUNCTION__.pos = private unnamed_addr constant [42 x i8] c"BYTE *pos(const struct image *, int, int)\00", align 1
@__PRETTY_FUNCTION__.valid_pixel = private unnamed_addr constant [50 x i8] c"_Bool valid_pixel(const struct image *, int, int)\00", align 1
@__PRETTY_FUNCTION__.image_set_pixel = private unnamed_addr constant [52 x i8] c"void image_set_pixel(struct image *, int, int, int)\00", align 1
@.str.14 = private unnamed_addr constant [13 x i8] c"image_id > 0\00", align 1
@__PRETTY_FUNCTION__.image_load_library = private unnamed_addr constant [38 x i8] c"struct image *image_load_library(int)\00", align 1
@severdir = internal global i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.154, i32 0, i32 0), align 8
@filename_buffer = internal global [4096 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [10 x i8] c"%s/%d.png\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.16 = private unnamed_addr constant [49 x i8] c"[UNEXPECTED ERROR] COULD NOT LOAD FILE\0A[%s][%s]\0A\00", align 1
@.str.154 = private unnamed_addr constant [49 x i8] c"/u2/cs136/public_html/current/assignments/images\00", align 1
@.str.17 = private unnamed_addr constant [42 x i8] c"[UNEXPECTED ERROR] COULD NOT ACCESS\0A[%s]\0A\00", align 1
@.str.18 = private unnamed_addr constant [46 x i8] c"[UNEXPECTED ERROR] COULD NOT OBTAIN USERNAME\0A\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@path_buffer = internal global [4096 x i8] zeroinitializer, align 16
@.str.20 = private unnamed_addr constant [45 x i8] c"[UNEXPECTED ERROR] COULD NOT SAVE FILE\0A[%s]\0A\00", align 1
@.str.21 = private unnamed_addr constant [26 x i8] c"[UNEXPECTED ERROR] chmod\0A\00", align 1
@url_buffer = internal global [4096 x i8] zeroinitializer, align 16
@.str.22 = private unnamed_addr constant [38 x i8] c"http://student.cs.uwaterloo.ca/~%s/%s\00", align 1
@.str.23 = private unnamed_addr constant [28 x i8] c">>> image available at: %s\0A\00", align 1
@.str.158 = private unnamed_addr constant [49 x i8] c"[UNEXPECTED ERROR] bad filename (too long)\0A[%s]\0A\00", align 1
@.str.159 = private unnamed_addr constant [5 x i8] c".png\00", align 1
@.str.160 = private unnamed_addr constant [49 x i8] c"[UNEXPECTED ERROR] bad filename (not .png)\0A[%s]\0A\00", align 1
@.str.161 = private unnamed_addr constant [63 x i8] c"[UNEXPECTED ERROR] bad filename (only {a-z,A-Z,0-9}.png)\0A[%s]\0A\00", align 1
@.str.155 = private unnamed_addr constant [34 x i8] c"[UNEXPECTED ERROR] getpwuid fail\0A\00", align 1
@.str.156 = private unnamed_addr constant [32 x i8] c"[UNEXPECTED ERROR] pw_dir fail\0A\00", align 1
@.str.157 = private unnamed_addr constant [15 x i8] c"%s/public_html\00", align 1
@__PRETTY_FUNCTION__.image_trace = private unnamed_addr constant [39 x i8] c"void image_trace(const struct image *)\00", align 1
@.str.24 = private unnamed_addr constant [31 x i8] c">>> TRACING IMAGE: size %dx%d\0A\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c">>> \00", align 1
@.str.26 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.28 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define i8* @stbi_failure_reason() #0 {
entry:
  %0 = load i8*, i8** @stbi__g_failure_reason, align 8
  ret i8* %0
}

; Function Attrs: noinline nounwind optnone
define void @stbi_image_free(i8* %retval_from_stbi_load) #0 {
entry:
  %retval_from_stbi_load.addr = alloca i8*, align 8
  store i8* %retval_from_stbi_load, i8** %retval_from_stbi_load.addr, align 8
  %0 = load i8*, i8** %retval_from_stbi_load.addr, align 8
  call void @free(i8* %0) #10
  ret void
}

; Function Attrs: nounwind
declare void @free(i8*) #1

; Function Attrs: noinline nounwind optnone
define void @stbi_set_flip_vertically_on_load(i32 %flag_true_if_should_flip) #0 {
entry:
  %flag_true_if_should_flip.addr = alloca i32, align 4
  store i32 %flag_true_if_should_flip, i32* %flag_true_if_should_flip.addr, align 4
  %0 = load i32, i32* %flag_true_if_should_flip.addr, align 4
  store i32 %0, i32* @stbi__vertically_flip_on_load_global, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define void @stbi_set_flip_vertically_on_load_thread(i32 %flag_true_if_should_flip) #0 {
entry:
  %flag_true_if_should_flip.addr = alloca i32, align 4
  store i32 %flag_true_if_should_flip, i32* %flag_true_if_should_flip.addr, align 4
  %0 = load i32, i32* %flag_true_if_should_flip.addr, align 4
  store i32 %0, i32* @stbi__vertically_flip_on_load_local, align 4
  store i32 1, i32* @stbi__vertically_flip_on_load_set, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define i8* @stbi_load(i8* %filename, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %retval = alloca i8*, align 8
  %filename.addr = alloca i8*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %f = alloca %struct._IO_FILE*, align 8
  %result = alloca i8*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load i8*, i8** %filename.addr, align 8
  %call = call %struct._IO_FILE* @stbi__fopen(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %f, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %tobool = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %tobool2 = icmp ne i32 %call1, 0
  %2 = zext i1 %tobool2 to i64
  %cond = select i1 %tobool2, i8* null, i8* null
  %3 = ptrtoint i8* %cond to i64
  %4 = inttoptr i64 %3 to i8*
  store i8* %4, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %6 = load i32*, i32** %x.addr, align 8
  %7 = load i32*, i32** %y.addr, align 8
  %8 = load i32*, i32** %comp.addr, align 8
  %9 = load i32, i32* %req_comp.addr, align 4
  %call3 = call i8* @stbi_load_from_file(%struct._IO_FILE* %5, i32* %6, i32* %7, i32* %8, i32 %9)
  store i8* %call3, i8** %result, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call4 = call i32 @fclose(%struct._IO_FILE* %10)
  %11 = load i8*, i8** %result, align 8
  store i8* %11, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i8*, i8** %retval, align 8
  ret i8* %12
}

; Function Attrs: noinline nounwind optnone
define internal %struct._IO_FILE* @stbi__fopen(i8* %filename, i8* %mode) #0 {
entry:
  %filename.addr = alloca i8*, align 8
  %mode.addr = alloca i8*, align 8
  %f = alloca %struct._IO_FILE*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i8* %mode, i8** %mode.addr, align 8
  %0 = load i8*, i8** %filename.addr, align 8
  %1 = load i8*, i8** %mode.addr, align 8
  %call = call %struct._IO_FILE* @fopen(i8* %0, i8* %1)
  store %struct._IO_FILE* %call, %struct._IO_FILE** %f, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  ret %struct._IO_FILE* %2
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__err(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  store i8* %0, i8** @stbi__g_failure_reason, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define i8* @stbi_load_from_file(%struct._IO_FILE* %f, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %result = alloca i8*, align 8
  %s = alloca %struct.stbi__context, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  call void @stbi__start_file(%struct.stbi__context* %s, %struct._IO_FILE* %0)
  %1 = load i32*, i32** %x.addr, align 8
  %2 = load i32*, i32** %y.addr, align 8
  %3 = load i32*, i32** %comp.addr, align 8
  %4 = load i32, i32* %req_comp.addr, align 4
  %call = call i8* @stbi__load_and_postprocess_8bit(%struct.stbi__context* %s, i32* %1, i32* %2, i32* %3, i32 %4)
  store i8* %call, i8** %result, align 8
  %5 = load i8*, i8** %result, align 8
  %tobool = icmp ne i8* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  %img_buffer_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %s, i32 0, i32 11
  %7 = load i8*, i8** %img_buffer_end, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %s, i32 0, i32 10
  %8 = load i8*, i8** %img_buffer, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = sext i32 %sub to i64
  %call2 = call i32 @fseek(%struct._IO_FILE* %6, i64 %conv1, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i8*, i8** %result, align 8
  ret i8* %9
}

declare i32 @fclose(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone
define internal void @stbi__start_file(%struct.stbi__context* %s, %struct._IO_FILE* %f) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %f.addr = alloca %struct._IO_FILE*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  %2 = bitcast %struct._IO_FILE* %1 to i8*
  call void @stbi__start_callbacks(%struct.stbi__context* %0, %struct.stbi_io_callbacks* @stbi__stdio_callbacks, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__load_and_postprocess_8bit(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri = alloca %struct.stbi__result_info, align 4
  %result = alloca i8*, align 8
  %channels = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %1 = load i32*, i32** %x.addr, align 8
  %2 = load i32*, i32** %y.addr, align 8
  %3 = load i32*, i32** %comp.addr, align 8
  %4 = load i32, i32* %req_comp.addr, align 4
  %call = call i8* @stbi__load_main(%struct.stbi__context* %0, i32* %1, i32* %2, i32* %3, i32 %4, %struct.stbi__result_info* %ri, i32 8)
  store i8* %call, i8** %result, align 8
  %5 = load i8*, i8** %result, align 8
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %bits_per_channel = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %ri, i32 0, i32 0
  %6 = load i32, i32* %bits_per_channel, align 4
  %cmp1 = icmp eq i32 %6, 8
  br i1 %cmp1, label %if.then4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %bits_per_channel2 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %ri, i32 0, i32 0
  %7 = load i32, i32* %bits_per_channel2, align 4
  %cmp3 = icmp eq i32 %7, 16
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  br label %if.end5

if.else:                                          ; preds = %lor.lhs.false
  call void @__assert_fail(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 1209, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @__PRETTY_FUNCTION__.stbi__load_and_postprocess_8bit, i64 0, i64 0)) #11
  unreachable

if.end5:                                          ; preds = %if.then4
  %bits_per_channel6 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %ri, i32 0, i32 0
  %8 = load i32, i32* %bits_per_channel6, align 4
  %cmp7 = icmp ne i32 %8, 8
  br i1 %cmp7, label %if.then8, label %if.end12

if.then8:                                         ; preds = %if.end5
  %9 = load i8*, i8** %result, align 8
  %10 = bitcast i8* %9 to i16*
  %11 = load i32*, i32** %x.addr, align 8
  %12 = load i32, i32* %11, align 4
  %13 = load i32*, i32** %y.addr, align 8
  %14 = load i32, i32* %13, align 4
  %15 = load i32, i32* %req_comp.addr, align 4
  %cmp9 = icmp eq i32 %15, 0
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then8
  %16 = load i32*, i32** %comp.addr, align 8
  %17 = load i32, i32* %16, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then8
  %18 = load i32, i32* %req_comp.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %17, %cond.true ], [ %18, %cond.false ]
  %call10 = call i8* @stbi__convert_16_to_8(i16* %10, i32 %12, i32 %14, i32 %cond)
  store i8* %call10, i8** %result, align 8
  %bits_per_channel11 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %ri, i32 0, i32 0
  store i32 8, i32* %bits_per_channel11, align 4
  br label %if.end12

if.end12:                                         ; preds = %cond.end, %if.end5
  %19 = load i32, i32* @stbi__vertically_flip_on_load_set, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %cond.true13, label %cond.false15

cond.true13:                                      ; preds = %if.end12
  %20 = load i32, i32* @stbi__vertically_flip_on_load_local, align 4
  %tobool14 = icmp ne i32 %20, 0
  br i1 %tobool14, label %if.then17, label %if.end24

cond.false15:                                     ; preds = %if.end12
  %21 = load i32, i32* @stbi__vertically_flip_on_load_global, align 4
  %tobool16 = icmp ne i32 %21, 0
  br i1 %tobool16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %cond.false15, %cond.true13
  %22 = load i32, i32* %req_comp.addr, align 4
  %tobool18 = icmp ne i32 %22, 0
  br i1 %tobool18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %if.then17
  %23 = load i32, i32* %req_comp.addr, align 4
  br label %cond.end21

cond.false20:                                     ; preds = %if.then17
  %24 = load i32*, i32** %comp.addr, align 8
  %25 = load i32, i32* %24, align 4
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i32 [ %23, %cond.true19 ], [ %25, %cond.false20 ]
  store i32 %cond22, i32* %channels, align 4
  %26 = load i8*, i8** %result, align 8
  %27 = load i32*, i32** %x.addr, align 8
  %28 = load i32, i32* %27, align 4
  %29 = load i32*, i32** %y.addr, align 8
  %30 = load i32, i32* %29, align 4
  %31 = load i32, i32* %channels, align 4
  %conv = sext i32 %31 to i64
  %mul = mul i64 %conv, 1
  %conv23 = trunc i64 %mul to i32
  call void @stbi__vertical_flip(i8* %26, i32 %28, i32 %30, i32 %conv23)
  br label %if.end24

if.end24:                                         ; preds = %cond.end21, %cond.false15, %cond.true13
  %32 = load i8*, i8** %result, align 8
  store i8* %32, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end24, %if.then
  %33 = load i8*, i8** %retval, align 8
  ret i8* %33
}

declare i32 @fseek(%struct._IO_FILE*, i64, i32) #2

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__load_main(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp, %struct.stbi__result_info* %ri, i32 %bpc) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %bpc.addr = alloca i32, align 4
  %hdr = alloca float*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  store i32 %bpc, i32* %bpc.addr, align 4
  %0 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %1 = bitcast %struct.stbi__result_info* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1, i8 0, i64 12, i1 false)
  %2 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %bits_per_channel = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %2, i32 0, i32 0
  store i32 8, i32* %bits_per_channel, align 4
  %3 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %channel_order = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %3, i32 0, i32 2
  store i32 0, i32* %channel_order, align 4
  %4 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %num_channels = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %4, i32 0, i32 1
  store i32 0, i32* %num_channels, align 4
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__jpeg_test(%struct.stbi__context* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %7 = load i32*, i32** %x.addr, align 8
  %8 = load i32*, i32** %y.addr, align 8
  %9 = load i32*, i32** %comp.addr, align 8
  %10 = load i32, i32* %req_comp.addr, align 4
  %11 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %call1 = call i8* @stbi__jpeg_load(%struct.stbi__context* %6, i32* %7, i32* %8, i32* %9, i32 %10, %struct.stbi__result_info* %11)
  store i8* %call1, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %12 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call2 = call i32 @stbi__png_test(%struct.stbi__context* %12)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %13 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %14 = load i32*, i32** %x.addr, align 8
  %15 = load i32*, i32** %y.addr, align 8
  %16 = load i32*, i32** %comp.addr, align 8
  %17 = load i32, i32* %req_comp.addr, align 4
  %18 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %call5 = call i8* @stbi__png_load(%struct.stbi__context* %13, i32* %14, i32* %15, i32* %16, i32 %17, %struct.stbi__result_info* %18)
  store i8* %call5, i8** %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  %19 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call7 = call i32 @stbi__bmp_test(%struct.stbi__context* %19)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end6
  %20 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %21 = load i32*, i32** %x.addr, align 8
  %22 = load i32*, i32** %y.addr, align 8
  %23 = load i32*, i32** %comp.addr, align 8
  %24 = load i32, i32* %req_comp.addr, align 4
  %25 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %call10 = call i8* @stbi__bmp_load(%struct.stbi__context* %20, i32* %21, i32* %22, i32* %23, i32 %24, %struct.stbi__result_info* %25)
  store i8* %call10, i8** %retval, align 8
  br label %return

if.end11:                                         ; preds = %if.end6
  %26 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call12 = call i32 @stbi__gif_test(%struct.stbi__context* %26)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end11
  %27 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %28 = load i32*, i32** %x.addr, align 8
  %29 = load i32*, i32** %y.addr, align 8
  %30 = load i32*, i32** %comp.addr, align 8
  %31 = load i32, i32* %req_comp.addr, align 4
  %32 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %call15 = call i8* @stbi__gif_load(%struct.stbi__context* %27, i32* %28, i32* %29, i32* %30, i32 %31, %struct.stbi__result_info* %32)
  store i8* %call15, i8** %retval, align 8
  br label %return

if.end16:                                         ; preds = %if.end11
  %33 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call17 = call i32 @stbi__psd_test(%struct.stbi__context* %33)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end16
  %34 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %35 = load i32*, i32** %x.addr, align 8
  %36 = load i32*, i32** %y.addr, align 8
  %37 = load i32*, i32** %comp.addr, align 8
  %38 = load i32, i32* %req_comp.addr, align 4
  %39 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %40 = load i32, i32* %bpc.addr, align 4
  %call20 = call i8* @stbi__psd_load(%struct.stbi__context* %34, i32* %35, i32* %36, i32* %37, i32 %38, %struct.stbi__result_info* %39, i32 %40)
  store i8* %call20, i8** %retval, align 8
  br label %return

if.end21:                                         ; preds = %if.end16
  %41 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call22 = call i32 @stbi__pic_test(%struct.stbi__context* %41)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end21
  %42 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %43 = load i32*, i32** %x.addr, align 8
  %44 = load i32*, i32** %y.addr, align 8
  %45 = load i32*, i32** %comp.addr, align 8
  %46 = load i32, i32* %req_comp.addr, align 4
  %47 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %call25 = call i8* @stbi__pic_load(%struct.stbi__context* %42, i32* %43, i32* %44, i32* %45, i32 %46, %struct.stbi__result_info* %47)
  store i8* %call25, i8** %retval, align 8
  br label %return

if.end26:                                         ; preds = %if.end21
  %48 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call27 = call i32 @stbi__pnm_test(%struct.stbi__context* %48)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end26
  %49 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %50 = load i32*, i32** %x.addr, align 8
  %51 = load i32*, i32** %y.addr, align 8
  %52 = load i32*, i32** %comp.addr, align 8
  %53 = load i32, i32* %req_comp.addr, align 4
  %54 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %call30 = call i8* @stbi__pnm_load(%struct.stbi__context* %49, i32* %50, i32* %51, i32* %52, i32 %53, %struct.stbi__result_info* %54)
  store i8* %call30, i8** %retval, align 8
  br label %return

if.end31:                                         ; preds = %if.end26
  %55 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call32 = call i32 @stbi__hdr_test(%struct.stbi__context* %55)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.then34, label %if.end38

if.then34:                                        ; preds = %if.end31
  %56 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %57 = load i32*, i32** %x.addr, align 8
  %58 = load i32*, i32** %y.addr, align 8
  %59 = load i32*, i32** %comp.addr, align 8
  %60 = load i32, i32* %req_comp.addr, align 4
  %61 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %call35 = call float* @stbi__hdr_load(%struct.stbi__context* %56, i32* %57, i32* %58, i32* %59, i32 %60, %struct.stbi__result_info* %61)
  store float* %call35, float** %hdr, align 8
  %62 = load float*, float** %hdr, align 8
  %63 = load i32*, i32** %x.addr, align 8
  %64 = load i32, i32* %63, align 4
  %65 = load i32*, i32** %y.addr, align 8
  %66 = load i32, i32* %65, align 4
  %67 = load i32, i32* %req_comp.addr, align 4
  %tobool36 = icmp ne i32 %67, 0
  br i1 %tobool36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then34
  %68 = load i32, i32* %req_comp.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then34
  %69 = load i32*, i32** %comp.addr, align 8
  %70 = load i32, i32* %69, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %68, %cond.true ], [ %70, %cond.false ]
  %call37 = call i8* @stbi__hdr_to_ldr(float* %62, i32 %64, i32 %66, i32 %cond)
  store i8* %call37, i8** %retval, align 8
  br label %return

if.end38:                                         ; preds = %if.end31
  %71 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call39 = call i32 @stbi__tga_test(%struct.stbi__context* %71)
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.end38
  %72 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %73 = load i32*, i32** %x.addr, align 8
  %74 = load i32*, i32** %y.addr, align 8
  %75 = load i32*, i32** %comp.addr, align 8
  %76 = load i32, i32* %req_comp.addr, align 4
  %77 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %call42 = call i8* @stbi__tga_load(%struct.stbi__context* %72, i32* %73, i32* %74, i32* %75, i32 %76, %struct.stbi__result_info* %77)
  store i8* %call42, i8** %retval, align 8
  br label %return

if.end43:                                         ; preds = %if.end38
  %call44 = call i32 @stbi__err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.31, i64 0, i64 0))
  %tobool45 = icmp ne i32 %call44, 0
  %78 = zext i1 %tobool45 to i64
  %cond46 = select i1 %tobool45, i8* null, i8* null
  %79 = ptrtoint i8* %cond46 to i64
  %80 = inttoptr i64 %79 to i8*
  store i8* %80, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end43, %if.then41, %cond.end, %if.then29, %if.then24, %if.then19, %if.then14, %if.then9, %if.then4, %if.then
  %81 = load i8*, i8** %retval, align 8
  ret i8* %81
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #3

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__convert_16_to_8(i16* %orig, i32 %w, i32 %h, i32 %channels) #0 {
entry:
  %retval = alloca i8*, align 8
  %orig.addr = alloca i16*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %channels.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %img_len = alloca i32, align 4
  %reduced = alloca i8*, align 8
  store i16* %orig, i16** %orig.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %channels, i32* %channels.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %channels.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  store i32 %mul1, i32* %img_len, align 4
  %3 = load i32, i32* %img_len, align 4
  %conv = sext i32 %3 to i64
  %call = call i8* @stbi__malloc(i64 %conv)
  store i8* %call, i8** %reduced, align 8
  %4 = load i8*, i8** %reduced, align 8
  %cmp = icmp eq i8* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool = icmp ne i32 %call3, 0
  %5 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %6 = ptrtoint i8* %cond to i64
  %7 = inttoptr i64 %6 to i8*
  store i8* %7, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %img_len, align 4
  %cmp4 = icmp slt i32 %8, %9
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i16*, i16** %orig.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i16, i16* %10, i64 %idxprom
  %12 = load i16, i16* %arrayidx, align 2
  %conv6 = zext i16 %12 to i32
  %shr = ashr i32 %conv6, 8
  %and = and i32 %shr, 255
  %conv7 = trunc i32 %and to i8
  %13 = load i8*, i8** %reduced, align 8
  %14 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %14 to i64
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i64 %idxprom8
  store i8 %conv7, i8* %arrayidx9, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i16*, i16** %orig.addr, align 8
  %17 = bitcast i16* %16 to i8*
  call void @free(i8* %17) #10
  %18 = load i8*, i8** %reduced, align 8
  store i8* %18, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %19 = load i8*, i8** %retval, align 8
  ret i8* %19
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__vertical_flip(i8* %image, i32 %w, i32 %h, i32 %bytes_per_pixel) #0 {
entry:
  %image.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %bytes_per_pixel.addr = alloca i32, align 4
  %row = alloca i32, align 4
  %bytes_per_row = alloca i64, align 8
  %temp = alloca [2048 x i8], align 16
  %bytes = alloca i8*, align 8
  %row0 = alloca i8*, align 8
  %row1 = alloca i8*, align 8
  %bytes_left = alloca i64, align 8
  %bytes_copy = alloca i64, align 8
  store i8* %image, i8** %image.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %bytes_per_pixel, i32* %bytes_per_pixel.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %bytes_per_pixel.addr, align 4
  %conv1 = sext i32 %1 to i64
  %mul = mul i64 %conv, %conv1
  store i64 %mul, i64* %bytes_per_row, align 8
  %2 = load i8*, i8** %image.addr, align 8
  store i8* %2, i8** %bytes, align 8
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %row, align 4
  %4 = load i32, i32* %h.addr, align 4
  %shr = ashr i32 %4, 1
  %cmp = icmp slt i32 %3, %shr
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** %bytes, align 8
  %6 = load i32, i32* %row, align 4
  %conv3 = sext i32 %6 to i64
  %7 = load i64, i64* %bytes_per_row, align 8
  %mul4 = mul i64 %conv3, %7
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %mul4
  store i8* %add.ptr, i8** %row0, align 8
  %8 = load i8*, i8** %bytes, align 8
  %9 = load i32, i32* %h.addr, align 4
  %10 = load i32, i32* %row, align 4
  %sub = sub nsw i32 %9, %10
  %sub5 = sub nsw i32 %sub, 1
  %conv6 = sext i32 %sub5 to i64
  %11 = load i64, i64* %bytes_per_row, align 8
  %mul7 = mul i64 %conv6, %11
  %add.ptr8 = getelementptr inbounds i8, i8* %8, i64 %mul7
  store i8* %add.ptr8, i8** %row1, align 8
  %12 = load i64, i64* %bytes_per_row, align 8
  store i64 %12, i64* %bytes_left, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %for.body
  %13 = load i64, i64* %bytes_left, align 8
  %tobool = icmp ne i64 %13, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i64, i64* %bytes_left, align 8
  %cmp9 = icmp ult i64 %14, 2048
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %15 = load i64, i64* %bytes_left, align 8
  br label %cond.end

cond.false:                                       ; preds = %while.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %15, %cond.true ], [ 2048, %cond.false ]
  store i64 %cond, i64* %bytes_copy, align 8
  %arraydecay = getelementptr inbounds [2048 x i8], [2048 x i8]* %temp, i64 0, i64 0
  %16 = load i8*, i8** %row0, align 8
  %17 = load i64, i64* %bytes_copy, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %arraydecay, i8* align 1 %16, i64 %17, i1 false)
  %18 = load i8*, i8** %row0, align 8
  %19 = load i8*, i8** %row1, align 8
  %20 = load i64, i64* %bytes_copy, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %19, i64 %20, i1 false)
  %21 = load i8*, i8** %row1, align 8
  %arraydecay11 = getelementptr inbounds [2048 x i8], [2048 x i8]* %temp, i64 0, i64 0
  %22 = load i64, i64* %bytes_copy, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 16 %arraydecay11, i64 %22, i1 false)
  %23 = load i64, i64* %bytes_copy, align 8
  %24 = load i8*, i8** %row0, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %24, i64 %23
  store i8* %add.ptr12, i8** %row0, align 8
  %25 = load i64, i64* %bytes_copy, align 8
  %26 = load i8*, i8** %row1, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %26, i64 %25
  store i8* %add.ptr13, i8** %row1, align 8
  %27 = load i64, i64* %bytes_copy, align 8
  %28 = load i64, i64* %bytes_left, align 8
  %sub14 = sub i64 %28, %27
  store i64 %sub14, i64* %bytes_left, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %29 = load i32, i32* %row, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__malloc(i64 %size) #0 {
entry:
  %size.addr = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %call = call noalias i8* @malloc(i64 %0) #10
  ret i8* %call
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__jpeg_test(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %r = alloca i32, align 4
  %j = alloca %struct.stbi__jpeg*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %call = call i8* @stbi__malloc(i64 18568)
  %0 = bitcast i8* %call to %struct.stbi__jpeg*
  store %struct.stbi__jpeg* %0, %struct.stbi__jpeg** %j, align 8
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  %s1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 0
  store %struct.stbi__context* %1, %struct.stbi__context** %s1, align 8
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  call void @stbi__setup_jpeg(%struct.stbi__jpeg* %3)
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  %call2 = call i32 @stbi__decode_jpeg_header(%struct.stbi__jpeg* %4, i32 1)
  store i32 %call2, i32* %r, align 4
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %5)
  %6 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  %7 = bitcast %struct.stbi__jpeg* %6 to i8*
  call void @free(i8* %7) #10
  %8 = load i32, i32* %r, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__jpeg_load(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp, %struct.stbi__result_info* %ri) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %result = alloca i8*, align 8
  %j = alloca %struct.stbi__jpeg*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  %call = call i8* @stbi__malloc(i64 18568)
  %0 = bitcast i8* %call to %struct.stbi__jpeg*
  store %struct.stbi__jpeg* %0, %struct.stbi__jpeg** %j, align 8
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  %s1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 0
  store %struct.stbi__context* %1, %struct.stbi__context** %s1, align 8
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  call void @stbi__setup_jpeg(%struct.stbi__jpeg* %3)
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  %5 = load i32*, i32** %x.addr, align 8
  %6 = load i32*, i32** %y.addr, align 8
  %7 = load i32*, i32** %comp.addr, align 8
  %8 = load i32, i32* %req_comp.addr, align 4
  %call2 = call i8* @load_jpeg_image(%struct.stbi__jpeg* %4, i32* %5, i32* %6, i32* %7, i32 %8)
  store i8* %call2, i8** %result, align 8
  %9 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  %10 = bitcast %struct.stbi__jpeg* %9 to i8*
  call void @free(i8* %10) #10
  %11 = load i8*, i8** %result, align 8
  ret i8* %11
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__png_test(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %r = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__check_png_header(%struct.stbi__context* %0)
  store i32 %call, i32* %r, align 4
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %1)
  %2 = load i32, i32* %r, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__png_load(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp, %struct.stbi__result_info* %ri) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %p = alloca %struct.stbi__png, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %p, i32 0, i32 0
  store %struct.stbi__context* %0, %struct.stbi__context** %s1, align 8
  %1 = load i32*, i32** %x.addr, align 8
  %2 = load i32*, i32** %y.addr, align 8
  %3 = load i32*, i32** %comp.addr, align 8
  %4 = load i32, i32* %req_comp.addr, align 4
  %5 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %call = call i8* @stbi__do_png(%struct.stbi__png* %p, i32* %1, i32* %2, i32* %3, i32 %4, %struct.stbi__result_info* %5)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__bmp_test(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %r = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__bmp_test_raw(%struct.stbi__context* %0)
  store i32 %call, i32* %r, align 4
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %1)
  %2 = load i32, i32* %r, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__bmp_load(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp, %struct.stbi__result_info* %ri) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %out = alloca i8*, align 8
  %mr = alloca i32, align 4
  %mg = alloca i32, align 4
  %mb = alloca i32, align 4
  %ma = alloca i32, align 4
  %all_a = alloca i32, align 4
  %pal = alloca [256 x [4 x i8]], align 16
  %psize = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %width = alloca i32, align 4
  %flip_vertically = alloca i32, align 4
  %pad = alloca i32, align 4
  %target = alloca i32, align 4
  %info = alloca %struct.stbi__bmp_data, align 4
  %z = alloca i32, align 4
  %bit_offset = alloca i32, align 4
  %v = alloca i32, align 4
  %color = alloca i32, align 4
  %v252 = alloca i32, align 4
  %v2 = alloca i32, align 4
  %rshift = alloca i32, align 4
  %gshift = alloca i32, align 4
  %bshift = alloca i32, align 4
  %ashift = alloca i32, align 4
  %rcount = alloca i32, align 4
  %gcount = alloca i32, align 4
  %bcount = alloca i32, align 4
  %acount = alloca i32, align 4
  %z332 = alloca i32, align 4
  %easy = alloca i32, align 4
  %a = alloca i8, align 1
  %bpp467 = alloca i32, align 4
  %v474 = alloca i32, align 4
  %a483 = alloca i32, align 4
  %t = alloca i8, align 1
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  store i32 0, i32* %mr, align 4
  store i32 0, i32* %mg, align 4
  store i32 0, i32* %mb, align 4
  store i32 0, i32* %ma, align 4
  store i32 0, i32* %psize, align 4
  %all_a1 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 7
  store i32 255, i32* %all_a1, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i8* @stbi__bmp_parse_header(%struct.stbi__context* %0, %struct.stbi__bmp_data* %info)
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %1, i32 0, i32 1
  %2 = load i32, i32* %img_y, align 4
  %cmp2 = icmp sgt i32 %2, 0
  %conv = zext i1 %cmp2 to i32
  store i32 %conv, i32* %flip_vertically, align 4
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y3 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %3, i32 0, i32 1
  %4 = load i32, i32* %img_y3, align 4
  %call4 = call i32 @abs(i32 %4) #9
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y5 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %5, i32 0, i32 1
  store i32 %call4, i32* %img_y5, align 4
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y6 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %6, i32 0, i32 1
  %7 = load i32, i32* %img_y6, align 4
  %cmp7 = icmp ugt i32 %7, 16777216
  br i1 %cmp7, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end
  %call10 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool = icmp ne i32 %call10, 0
  %8 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %9 = ptrtoint i8* %cond to i64
  %10 = inttoptr i64 %9 to i8*
  store i8* %10, i8** %retval, align 8
  br label %return

if.end11:                                         ; preds = %if.end
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %11, i32 0, i32 0
  %12 = load i32, i32* %img_x, align 8
  %cmp12 = icmp ugt i32 %12, 16777216
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %if.end11
  %call15 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool16 = icmp ne i32 %call15, 0
  %13 = zext i1 %tobool16 to i64
  %cond17 = select i1 %tobool16, i8* null, i8* null
  %14 = ptrtoint i8* %cond17 to i64
  %15 = inttoptr i64 %14 to i8*
  store i8* %15, i8** %retval, align 8
  br label %return

if.end18:                                         ; preds = %if.end11
  %mr19 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 3
  %16 = load i32, i32* %mr19, align 4
  store i32 %16, i32* %mr, align 4
  %mg20 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 4
  %17 = load i32, i32* %mg20, align 4
  store i32 %17, i32* %mg, align 4
  %mb21 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 5
  %18 = load i32, i32* %mb21, align 4
  store i32 %18, i32* %mb, align 4
  %ma22 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 6
  %19 = load i32, i32* %ma22, align 4
  store i32 %19, i32* %ma, align 4
  %all_a23 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 7
  %20 = load i32, i32* %all_a23, align 4
  store i32 %20, i32* %all_a, align 4
  %hsz = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 2
  %21 = load i32, i32* %hsz, align 4
  %cmp24 = icmp eq i32 %21, 12
  br i1 %cmp24, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.end18
  %bpp = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %22 = load i32, i32* %bpp, align 4
  %cmp27 = icmp slt i32 %22, 24
  br i1 %cmp27, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.then26
  %offset = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 1
  %23 = load i32, i32* %offset, align 4
  %extra_read = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 8
  %24 = load i32, i32* %extra_read, align 4
  %sub = sub nsw i32 %23, %24
  %sub30 = sub nsw i32 %sub, 24
  %div = sdiv i32 %sub30, 3
  store i32 %div, i32* %psize, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %if.then26
  br label %if.end42

if.else:                                          ; preds = %if.end18
  %bpp32 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %25 = load i32, i32* %bpp32, align 4
  %cmp33 = icmp slt i32 %25, 16
  br i1 %cmp33, label %if.then35, label %if.end41

if.then35:                                        ; preds = %if.else
  %offset36 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 1
  %26 = load i32, i32* %offset36, align 4
  %extra_read37 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 8
  %27 = load i32, i32* %extra_read37, align 4
  %sub38 = sub nsw i32 %26, %27
  %hsz39 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 2
  %28 = load i32, i32* %hsz39, align 4
  %sub40 = sub nsw i32 %sub38, %28
  %shr = ashr i32 %sub40, 2
  store i32 %shr, i32* %psize, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.then35, %if.else
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.end31
  %29 = load i32, i32* %psize, align 4
  %cmp43 = icmp eq i32 %29, 0
  br i1 %cmp43, label %if.then45, label %if.end69

if.then45:                                        ; preds = %if.end42
  %offset46 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 1
  %30 = load i32, i32* %offset46, align 4
  %31 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %callback_already_read = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %31, i32 0, i32 9
  %32 = load i32, i32* %callback_already_read, align 8
  %33 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %33, i32 0, i32 10
  %34 = load i8*, i8** %img_buffer, align 8
  %35 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_original = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %35, i32 0, i32 12
  %36 = load i8*, i8** %img_buffer_original, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %34 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %36 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv47 = trunc i64 %sub.ptr.sub to i32
  %add = add nsw i32 %32, %conv47
  %cmp48 = icmp eq i32 %30, %add
  br i1 %cmp48, label %if.then50, label %if.else51

if.then50:                                        ; preds = %if.then45
  br label %if.end52

if.else51:                                        ; preds = %if.then45
  call void @__assert_fail(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.94, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 5397, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @__PRETTY_FUNCTION__.stbi__bmp_load, i64 0, i64 0)) #11
  unreachable

if.end52:                                         ; preds = %if.then50
  %offset53 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 1
  %37 = load i32, i32* %offset53, align 4
  %conv54 = sext i32 %37 to i64
  %38 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %callback_already_read55 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %38, i32 0, i32 9
  %39 = load i32, i32* %callback_already_read55, align 8
  %conv56 = sext i32 %39 to i64
  %40 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer57 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %40, i32 0, i32 10
  %41 = load i8*, i8** %img_buffer57, align 8
  %42 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %buffer_start = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %42, i32 0, i32 8
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer_start, i64 0, i64 0
  %sub.ptr.lhs.cast58 = ptrtoint i8* %41 to i64
  %sub.ptr.rhs.cast59 = ptrtoint i8* %arraydecay to i64
  %sub.ptr.sub60 = sub i64 %sub.ptr.lhs.cast58, %sub.ptr.rhs.cast59
  %add61 = add nsw i64 %conv56, %sub.ptr.sub60
  %cmp62 = icmp ne i64 %conv54, %add61
  br i1 %cmp62, label %if.then64, label %if.end68

if.then64:                                        ; preds = %if.end52
  %call65 = call i32 @stbi__err(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.95, i64 0, i64 0))
  %tobool66 = icmp ne i32 %call65, 0
  %43 = zext i1 %tobool66 to i64
  %cond67 = select i1 %tobool66, i8* null, i8* null
  %44 = ptrtoint i8* %cond67 to i64
  %45 = inttoptr i64 %44 to i8*
  store i8* %45, i8** %retval, align 8
  br label %return

if.end68:                                         ; preds = %if.end52
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end42
  %bpp70 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %46 = load i32, i32* %bpp70, align 4
  %cmp71 = icmp eq i32 %46, 24
  br i1 %cmp71, label %land.lhs.true, label %if.else76

land.lhs.true:                                    ; preds = %if.end69
  %47 = load i32, i32* %ma, align 4
  %cmp73 = icmp eq i32 %47, -16777216
  br i1 %cmp73, label %if.then75, label %if.else76

if.then75:                                        ; preds = %land.lhs.true
  %48 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %48, i32 0, i32 2
  store i32 3, i32* %img_n, align 8
  br label %if.end80

if.else76:                                        ; preds = %land.lhs.true, %if.end69
  %49 = load i32, i32* %ma, align 4
  %tobool77 = icmp ne i32 %49, 0
  %50 = zext i1 %tobool77 to i64
  %cond78 = select i1 %tobool77, i32 4, i32 3
  %51 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n79 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %51, i32 0, i32 2
  store i32 %cond78, i32* %img_n79, align 8
  br label %if.end80

if.end80:                                         ; preds = %if.else76, %if.then75
  %52 = load i32, i32* %req_comp.addr, align 4
  %tobool81 = icmp ne i32 %52, 0
  br i1 %tobool81, label %land.lhs.true82, label %if.else86

land.lhs.true82:                                  ; preds = %if.end80
  %53 = load i32, i32* %req_comp.addr, align 4
  %cmp83 = icmp sge i32 %53, 3
  br i1 %cmp83, label %if.then85, label %if.else86

if.then85:                                        ; preds = %land.lhs.true82
  %54 = load i32, i32* %req_comp.addr, align 4
  store i32 %54, i32* %target, align 4
  br label %if.end88

if.else86:                                        ; preds = %land.lhs.true82, %if.end80
  %55 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n87 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %55, i32 0, i32 2
  %56 = load i32, i32* %img_n87, align 8
  store i32 %56, i32* %target, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.else86, %if.then85
  %57 = load i32, i32* %target, align 4
  %58 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x89 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %58, i32 0, i32 0
  %59 = load i32, i32* %img_x89, align 8
  %60 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y90 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %60, i32 0, i32 1
  %61 = load i32, i32* %img_y90, align 4
  %call91 = call i32 @stbi__mad3sizes_valid(i32 %57, i32 %59, i32 %61, i32 0)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end97, label %if.then93

if.then93:                                        ; preds = %if.end88
  %call94 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool95 = icmp ne i32 %call94, 0
  %62 = zext i1 %tobool95 to i64
  %cond96 = select i1 %tobool95, i8* null, i8* null
  %63 = ptrtoint i8* %cond96 to i64
  %64 = inttoptr i64 %63 to i8*
  store i8* %64, i8** %retval, align 8
  br label %return

if.end97:                                         ; preds = %if.end88
  %65 = load i32, i32* %target, align 4
  %66 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x98 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %66, i32 0, i32 0
  %67 = load i32, i32* %img_x98, align 8
  %68 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y99 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %68, i32 0, i32 1
  %69 = load i32, i32* %img_y99, align 4
  %call100 = call i8* @stbi__malloc_mad3(i32 %65, i32 %67, i32 %69, i32 0)
  store i8* %call100, i8** %out, align 8
  %70 = load i8*, i8** %out, align 8
  %tobool101 = icmp ne i8* %70, null
  br i1 %tobool101, label %if.end106, label %if.then102

if.then102:                                       ; preds = %if.end97
  %call103 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool104 = icmp ne i32 %call103, 0
  %71 = zext i1 %tobool104 to i64
  %cond105 = select i1 %tobool104, i8* null, i8* null
  %72 = ptrtoint i8* %cond105 to i64
  %73 = inttoptr i64 %72 to i8*
  store i8* %73, i8** %retval, align 8
  br label %return

if.end106:                                        ; preds = %if.end97
  %bpp107 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %74 = load i32, i32* %bpp107, align 4
  %cmp108 = icmp slt i32 %74, 16
  br i1 %cmp108, label %if.then110, label %if.else331

if.then110:                                       ; preds = %if.end106
  store i32 0, i32* %z, align 4
  %75 = load i32, i32* %psize, align 4
  %cmp111 = icmp eq i32 %75, 0
  br i1 %cmp111, label %if.then115, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then110
  %76 = load i32, i32* %psize, align 4
  %cmp113 = icmp sgt i32 %76, 256
  br i1 %cmp113, label %if.then115, label %if.end119

if.then115:                                       ; preds = %lor.lhs.false, %if.then110
  %77 = load i8*, i8** %out, align 8
  call void @free(i8* %77) #10
  %call116 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.96, i64 0, i64 0))
  %tobool117 = icmp ne i32 %call116, 0
  %78 = zext i1 %tobool117 to i64
  %cond118 = select i1 %tobool117, i8* null, i8* null
  %79 = ptrtoint i8* %cond118 to i64
  %80 = inttoptr i64 %79 to i8*
  store i8* %80, i8** %retval, align 8
  br label %return

if.end119:                                        ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end119
  %81 = load i32, i32* %i, align 4
  %82 = load i32, i32* %psize, align 4
  %cmp120 = icmp slt i32 %81, %82
  br i1 %cmp120, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %83 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call122 = call zeroext i8 @stbi__get8(%struct.stbi__context* %83)
  %84 = load i32, i32* %i, align 4
  %idxprom = sext i32 %84 to i64
  %arrayidx = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom
  %arrayidx123 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 2
  store i8 %call122, i8* %arrayidx123, align 2
  %85 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call124 = call zeroext i8 @stbi__get8(%struct.stbi__context* %85)
  %86 = load i32, i32* %i, align 4
  %idxprom125 = sext i32 %86 to i64
  %arrayidx126 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom125
  %arrayidx127 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx126, i64 0, i64 1
  store i8 %call124, i8* %arrayidx127, align 1
  %87 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call128 = call zeroext i8 @stbi__get8(%struct.stbi__context* %87)
  %88 = load i32, i32* %i, align 4
  %idxprom129 = sext i32 %88 to i64
  %arrayidx130 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom129
  %arrayidx131 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx130, i64 0, i64 0
  store i8 %call128, i8* %arrayidx131, align 4
  %hsz132 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 2
  %89 = load i32, i32* %hsz132, align 4
  %cmp133 = icmp ne i32 %89, 12
  br i1 %cmp133, label %if.then135, label %if.end137

if.then135:                                       ; preds = %for.body
  %90 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call136 = call zeroext i8 @stbi__get8(%struct.stbi__context* %90)
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.body
  %91 = load i32, i32* %i, align 4
  %idxprom138 = sext i32 %91 to i64
  %arrayidx139 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom138
  %arrayidx140 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx139, i64 0, i64 3
  store i8 -1, i8* %arrayidx140, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end137
  %92 = load i32, i32* %i, align 4
  %inc = add nsw i32 %92, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %93 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %offset141 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 1
  %94 = load i32, i32* %offset141, align 4
  %extra_read142 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 8
  %95 = load i32, i32* %extra_read142, align 4
  %sub143 = sub nsw i32 %94, %95
  %hsz144 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 2
  %96 = load i32, i32* %hsz144, align 4
  %sub145 = sub nsw i32 %sub143, %96
  %97 = load i32, i32* %psize, align 4
  %hsz146 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 2
  %98 = load i32, i32* %hsz146, align 4
  %cmp147 = icmp eq i32 %98, 12
  %99 = zext i1 %cmp147 to i64
  %cond149 = select i1 %cmp147, i32 3, i32 4
  %mul = mul nsw i32 %97, %cond149
  %sub150 = sub nsw i32 %sub145, %mul
  call void @stbi__skip(%struct.stbi__context* %93, i32 %sub150)
  %bpp151 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %100 = load i32, i32* %bpp151, align 4
  %cmp152 = icmp eq i32 %100, 1
  br i1 %cmp152, label %if.then154, label %if.else158

if.then154:                                       ; preds = %for.end
  %101 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x155 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %101, i32 0, i32 0
  %102 = load i32, i32* %img_x155, align 8
  %add156 = add i32 %102, 7
  %shr157 = lshr i32 %add156, 3
  store i32 %shr157, i32* %width, align 4
  br label %if.end178

if.else158:                                       ; preds = %for.end
  %bpp159 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %103 = load i32, i32* %bpp159, align 4
  %cmp160 = icmp eq i32 %103, 4
  br i1 %cmp160, label %if.then162, label %if.else166

if.then162:                                       ; preds = %if.else158
  %104 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x163 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %104, i32 0, i32 0
  %105 = load i32, i32* %img_x163, align 8
  %add164 = add i32 %105, 1
  %shr165 = lshr i32 %add164, 1
  store i32 %shr165, i32* %width, align 4
  br label %if.end177

if.else166:                                       ; preds = %if.else158
  %bpp167 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %106 = load i32, i32* %bpp167, align 4
  %cmp168 = icmp eq i32 %106, 8
  br i1 %cmp168, label %if.then170, label %if.else172

if.then170:                                       ; preds = %if.else166
  %107 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x171 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %107, i32 0, i32 0
  %108 = load i32, i32* %img_x171, align 8
  store i32 %108, i32* %width, align 4
  br label %if.end176

if.else172:                                       ; preds = %if.else166
  %109 = load i8*, i8** %out, align 8
  call void @free(i8* %109) #10
  %call173 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.97, i64 0, i64 0))
  %tobool174 = icmp ne i32 %call173, 0
  %110 = zext i1 %tobool174 to i64
  %cond175 = select i1 %tobool174, i8* null, i8* null
  %111 = ptrtoint i8* %cond175 to i64
  %112 = inttoptr i64 %111 to i8*
  store i8* %112, i8** %retval, align 8
  br label %return

if.end176:                                        ; preds = %if.then170
  br label %if.end177

if.end177:                                        ; preds = %if.end176, %if.then162
  br label %if.end178

if.end178:                                        ; preds = %if.end177, %if.then154
  %113 = load i32, i32* %width, align 4
  %sub179 = sub nsw i32 0, %113
  %and = and i32 %sub179, 3
  store i32 %and, i32* %pad, align 4
  %bpp180 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %114 = load i32, i32* %bpp180, align 4
  %cmp181 = icmp eq i32 %114, 1
  br i1 %cmp181, label %if.then183, label %if.else241

if.then183:                                       ; preds = %if.end178
  store i32 0, i32* %j, align 4
  br label %for.cond184

for.cond184:                                      ; preds = %for.inc238, %if.then183
  %115 = load i32, i32* %j, align 4
  %116 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y185 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %116, i32 0, i32 1
  %117 = load i32, i32* %img_y185, align 4
  %cmp186 = icmp slt i32 %115, %117
  br i1 %cmp186, label %for.body188, label %for.end240

for.body188:                                      ; preds = %for.cond184
  store i32 7, i32* %bit_offset, align 4
  %118 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call189 = call zeroext i8 @stbi__get8(%struct.stbi__context* %118)
  %conv190 = zext i8 %call189 to i32
  store i32 %conv190, i32* %v, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond191

for.cond191:                                      ; preds = %for.inc235, %for.body188
  %119 = load i32, i32* %i, align 4
  %120 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x192 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %120, i32 0, i32 0
  %121 = load i32, i32* %img_x192, align 8
  %cmp193 = icmp slt i32 %119, %121
  br i1 %cmp193, label %for.body195, label %for.end237

for.body195:                                      ; preds = %for.cond191
  %122 = load i32, i32* %v, align 4
  %123 = load i32, i32* %bit_offset, align 4
  %shr196 = ashr i32 %122, %123
  %and197 = and i32 %shr196, 1
  store i32 %and197, i32* %color, align 4
  %124 = load i32, i32* %color, align 4
  %idxprom198 = sext i32 %124 to i64
  %arrayidx199 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom198
  %arrayidx200 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx199, i64 0, i64 0
  %125 = load i8, i8* %arrayidx200, align 4
  %126 = load i8*, i8** %out, align 8
  %127 = load i32, i32* %z, align 4
  %inc201 = add nsw i32 %127, 1
  store i32 %inc201, i32* %z, align 4
  %idxprom202 = sext i32 %127 to i64
  %arrayidx203 = getelementptr inbounds i8, i8* %126, i64 %idxprom202
  store i8 %125, i8* %arrayidx203, align 1
  %128 = load i32, i32* %color, align 4
  %idxprom204 = sext i32 %128 to i64
  %arrayidx205 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom204
  %arrayidx206 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx205, i64 0, i64 1
  %129 = load i8, i8* %arrayidx206, align 1
  %130 = load i8*, i8** %out, align 8
  %131 = load i32, i32* %z, align 4
  %inc207 = add nsw i32 %131, 1
  store i32 %inc207, i32* %z, align 4
  %idxprom208 = sext i32 %131 to i64
  %arrayidx209 = getelementptr inbounds i8, i8* %130, i64 %idxprom208
  store i8 %129, i8* %arrayidx209, align 1
  %132 = load i32, i32* %color, align 4
  %idxprom210 = sext i32 %132 to i64
  %arrayidx211 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom210
  %arrayidx212 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx211, i64 0, i64 2
  %133 = load i8, i8* %arrayidx212, align 2
  %134 = load i8*, i8** %out, align 8
  %135 = load i32, i32* %z, align 4
  %inc213 = add nsw i32 %135, 1
  store i32 %inc213, i32* %z, align 4
  %idxprom214 = sext i32 %135 to i64
  %arrayidx215 = getelementptr inbounds i8, i8* %134, i64 %idxprom214
  store i8 %133, i8* %arrayidx215, align 1
  %136 = load i32, i32* %target, align 4
  %cmp216 = icmp eq i32 %136, 4
  br i1 %cmp216, label %if.then218, label %if.end222

if.then218:                                       ; preds = %for.body195
  %137 = load i8*, i8** %out, align 8
  %138 = load i32, i32* %z, align 4
  %inc219 = add nsw i32 %138, 1
  store i32 %inc219, i32* %z, align 4
  %idxprom220 = sext i32 %138 to i64
  %arrayidx221 = getelementptr inbounds i8, i8* %137, i64 %idxprom220
  store i8 -1, i8* %arrayidx221, align 1
  br label %if.end222

if.end222:                                        ; preds = %if.then218, %for.body195
  %139 = load i32, i32* %i, align 4
  %add223 = add nsw i32 %139, 1
  %140 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x224 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %140, i32 0, i32 0
  %141 = load i32, i32* %img_x224, align 8
  %cmp225 = icmp eq i32 %add223, %141
  br i1 %cmp225, label %if.then227, label %if.end228

if.then227:                                       ; preds = %if.end222
  br label %for.end237

if.end228:                                        ; preds = %if.end222
  %142 = load i32, i32* %bit_offset, align 4
  %dec = add nsw i32 %142, -1
  store i32 %dec, i32* %bit_offset, align 4
  %cmp229 = icmp slt i32 %dec, 0
  br i1 %cmp229, label %if.then231, label %if.end234

if.then231:                                       ; preds = %if.end228
  store i32 7, i32* %bit_offset, align 4
  %143 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call232 = call zeroext i8 @stbi__get8(%struct.stbi__context* %143)
  %conv233 = zext i8 %call232 to i32
  store i32 %conv233, i32* %v, align 4
  br label %if.end234

if.end234:                                        ; preds = %if.then231, %if.end228
  br label %for.inc235

for.inc235:                                       ; preds = %if.end234
  %144 = load i32, i32* %i, align 4
  %inc236 = add nsw i32 %144, 1
  store i32 %inc236, i32* %i, align 4
  br label %for.cond191

for.end237:                                       ; preds = %if.then227, %for.cond191
  %145 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %146 = load i32, i32* %pad, align 4
  call void @stbi__skip(%struct.stbi__context* %145, i32 %146)
  br label %for.inc238

for.inc238:                                       ; preds = %for.end237
  %147 = load i32, i32* %j, align 4
  %inc239 = add nsw i32 %147, 1
  store i32 %inc239, i32* %j, align 4
  br label %for.cond184

for.end240:                                       ; preds = %for.cond184
  br label %if.end330

if.else241:                                       ; preds = %if.end178
  store i32 0, i32* %j, align 4
  br label %for.cond242

for.cond242:                                      ; preds = %for.inc327, %if.else241
  %148 = load i32, i32* %j, align 4
  %149 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y243 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %149, i32 0, i32 1
  %150 = load i32, i32* %img_y243, align 4
  %cmp244 = icmp slt i32 %148, %150
  br i1 %cmp244, label %for.body246, label %for.end329

for.body246:                                      ; preds = %for.cond242
  store i32 0, i32* %i, align 4
  br label %for.cond247

for.cond247:                                      ; preds = %for.inc324, %for.body246
  %151 = load i32, i32* %i, align 4
  %152 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x248 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %152, i32 0, i32 0
  %153 = load i32, i32* %img_x248, align 8
  %cmp249 = icmp slt i32 %151, %153
  br i1 %cmp249, label %for.body251, label %for.end326

for.body251:                                      ; preds = %for.cond247
  %154 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call253 = call zeroext i8 @stbi__get8(%struct.stbi__context* %154)
  %conv254 = zext i8 %call253 to i32
  store i32 %conv254, i32* %v252, align 4
  store i32 0, i32* %v2, align 4
  %bpp255 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %155 = load i32, i32* %bpp255, align 4
  %cmp256 = icmp eq i32 %155, 4
  br i1 %cmp256, label %if.then258, label %if.end261

if.then258:                                       ; preds = %for.body251
  %156 = load i32, i32* %v252, align 4
  %and259 = and i32 %156, 15
  store i32 %and259, i32* %v2, align 4
  %157 = load i32, i32* %v252, align 4
  %shr260 = ashr i32 %157, 4
  store i32 %shr260, i32* %v252, align 4
  br label %if.end261

if.end261:                                        ; preds = %if.then258, %for.body251
  %158 = load i32, i32* %v252, align 4
  %idxprom262 = sext i32 %158 to i64
  %arrayidx263 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom262
  %arrayidx264 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx263, i64 0, i64 0
  %159 = load i8, i8* %arrayidx264, align 4
  %160 = load i8*, i8** %out, align 8
  %161 = load i32, i32* %z, align 4
  %inc265 = add nsw i32 %161, 1
  store i32 %inc265, i32* %z, align 4
  %idxprom266 = sext i32 %161 to i64
  %arrayidx267 = getelementptr inbounds i8, i8* %160, i64 %idxprom266
  store i8 %159, i8* %arrayidx267, align 1
  %162 = load i32, i32* %v252, align 4
  %idxprom268 = sext i32 %162 to i64
  %arrayidx269 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom268
  %arrayidx270 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx269, i64 0, i64 1
  %163 = load i8, i8* %arrayidx270, align 1
  %164 = load i8*, i8** %out, align 8
  %165 = load i32, i32* %z, align 4
  %inc271 = add nsw i32 %165, 1
  store i32 %inc271, i32* %z, align 4
  %idxprom272 = sext i32 %165 to i64
  %arrayidx273 = getelementptr inbounds i8, i8* %164, i64 %idxprom272
  store i8 %163, i8* %arrayidx273, align 1
  %166 = load i32, i32* %v252, align 4
  %idxprom274 = sext i32 %166 to i64
  %arrayidx275 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom274
  %arrayidx276 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx275, i64 0, i64 2
  %167 = load i8, i8* %arrayidx276, align 2
  %168 = load i8*, i8** %out, align 8
  %169 = load i32, i32* %z, align 4
  %inc277 = add nsw i32 %169, 1
  store i32 %inc277, i32* %z, align 4
  %idxprom278 = sext i32 %169 to i64
  %arrayidx279 = getelementptr inbounds i8, i8* %168, i64 %idxprom278
  store i8 %167, i8* %arrayidx279, align 1
  %170 = load i32, i32* %target, align 4
  %cmp280 = icmp eq i32 %170, 4
  br i1 %cmp280, label %if.then282, label %if.end286

if.then282:                                       ; preds = %if.end261
  %171 = load i8*, i8** %out, align 8
  %172 = load i32, i32* %z, align 4
  %inc283 = add nsw i32 %172, 1
  store i32 %inc283, i32* %z, align 4
  %idxprom284 = sext i32 %172 to i64
  %arrayidx285 = getelementptr inbounds i8, i8* %171, i64 %idxprom284
  store i8 -1, i8* %arrayidx285, align 1
  br label %if.end286

if.end286:                                        ; preds = %if.then282, %if.end261
  %173 = load i32, i32* %i, align 4
  %add287 = add nsw i32 %173, 1
  %174 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x288 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %174, i32 0, i32 0
  %175 = load i32, i32* %img_x288, align 8
  %cmp289 = icmp eq i32 %add287, %175
  br i1 %cmp289, label %if.then291, label %if.end292

if.then291:                                       ; preds = %if.end286
  br label %for.end326

if.end292:                                        ; preds = %if.end286
  %bpp293 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %176 = load i32, i32* %bpp293, align 4
  %cmp294 = icmp eq i32 %176, 8
  br i1 %cmp294, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end292
  %177 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call296 = call zeroext i8 @stbi__get8(%struct.stbi__context* %177)
  %conv297 = zext i8 %call296 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end292
  %178 = load i32, i32* %v2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond298 = phi i32 [ %conv297, %cond.true ], [ %178, %cond.false ]
  store i32 %cond298, i32* %v252, align 4
  %179 = load i32, i32* %v252, align 4
  %idxprom299 = sext i32 %179 to i64
  %arrayidx300 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom299
  %arrayidx301 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx300, i64 0, i64 0
  %180 = load i8, i8* %arrayidx301, align 4
  %181 = load i8*, i8** %out, align 8
  %182 = load i32, i32* %z, align 4
  %inc302 = add nsw i32 %182, 1
  store i32 %inc302, i32* %z, align 4
  %idxprom303 = sext i32 %182 to i64
  %arrayidx304 = getelementptr inbounds i8, i8* %181, i64 %idxprom303
  store i8 %180, i8* %arrayidx304, align 1
  %183 = load i32, i32* %v252, align 4
  %idxprom305 = sext i32 %183 to i64
  %arrayidx306 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom305
  %arrayidx307 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx306, i64 0, i64 1
  %184 = load i8, i8* %arrayidx307, align 1
  %185 = load i8*, i8** %out, align 8
  %186 = load i32, i32* %z, align 4
  %inc308 = add nsw i32 %186, 1
  store i32 %inc308, i32* %z, align 4
  %idxprom309 = sext i32 %186 to i64
  %arrayidx310 = getelementptr inbounds i8, i8* %185, i64 %idxprom309
  store i8 %184, i8* %arrayidx310, align 1
  %187 = load i32, i32* %v252, align 4
  %idxprom311 = sext i32 %187 to i64
  %arrayidx312 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 %idxprom311
  %arrayidx313 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx312, i64 0, i64 2
  %188 = load i8, i8* %arrayidx313, align 2
  %189 = load i8*, i8** %out, align 8
  %190 = load i32, i32* %z, align 4
  %inc314 = add nsw i32 %190, 1
  store i32 %inc314, i32* %z, align 4
  %idxprom315 = sext i32 %190 to i64
  %arrayidx316 = getelementptr inbounds i8, i8* %189, i64 %idxprom315
  store i8 %188, i8* %arrayidx316, align 1
  %191 = load i32, i32* %target, align 4
  %cmp317 = icmp eq i32 %191, 4
  br i1 %cmp317, label %if.then319, label %if.end323

if.then319:                                       ; preds = %cond.end
  %192 = load i8*, i8** %out, align 8
  %193 = load i32, i32* %z, align 4
  %inc320 = add nsw i32 %193, 1
  store i32 %inc320, i32* %z, align 4
  %idxprom321 = sext i32 %193 to i64
  %arrayidx322 = getelementptr inbounds i8, i8* %192, i64 %idxprom321
  store i8 -1, i8* %arrayidx322, align 1
  br label %if.end323

if.end323:                                        ; preds = %if.then319, %cond.end
  br label %for.inc324

for.inc324:                                       ; preds = %if.end323
  %194 = load i32, i32* %i, align 4
  %add325 = add nsw i32 %194, 2
  store i32 %add325, i32* %i, align 4
  br label %for.cond247

for.end326:                                       ; preds = %if.then291, %for.cond247
  %195 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %196 = load i32, i32* %pad, align 4
  call void @stbi__skip(%struct.stbi__context* %195, i32 %196)
  br label %for.inc327

for.inc327:                                       ; preds = %for.end326
  %197 = load i32, i32* %j, align 4
  %inc328 = add nsw i32 %197, 1
  store i32 %inc328, i32* %j, align 4
  br label %for.cond242

for.end329:                                       ; preds = %for.cond242
  br label %if.end330

if.end330:                                        ; preds = %for.end329, %for.end240
  br label %if.end529

if.else331:                                       ; preds = %if.end106
  store i32 0, i32* %rshift, align 4
  store i32 0, i32* %gshift, align 4
  store i32 0, i32* %bshift, align 4
  store i32 0, i32* %ashift, align 4
  store i32 0, i32* %rcount, align 4
  store i32 0, i32* %gcount, align 4
  store i32 0, i32* %bcount, align 4
  store i32 0, i32* %acount, align 4
  store i32 0, i32* %z332, align 4
  store i32 0, i32* %easy, align 4
  %198 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %offset333 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 1
  %199 = load i32, i32* %offset333, align 4
  %extra_read334 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 8
  %200 = load i32, i32* %extra_read334, align 4
  %sub335 = sub nsw i32 %199, %200
  %hsz336 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 2
  %201 = load i32, i32* %hsz336, align 4
  %sub337 = sub nsw i32 %sub335, %201
  call void @stbi__skip(%struct.stbi__context* %198, i32 %sub337)
  %bpp338 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %202 = load i32, i32* %bpp338, align 4
  %cmp339 = icmp eq i32 %202, 24
  br i1 %cmp339, label %if.then341, label %if.else344

if.then341:                                       ; preds = %if.else331
  %203 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x342 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %203, i32 0, i32 0
  %204 = load i32, i32* %img_x342, align 8
  %mul343 = mul i32 3, %204
  store i32 %mul343, i32* %width, align 4
  br label %if.end353

if.else344:                                       ; preds = %if.else331
  %bpp345 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %205 = load i32, i32* %bpp345, align 4
  %cmp346 = icmp eq i32 %205, 16
  br i1 %cmp346, label %if.then348, label %if.else351

if.then348:                                       ; preds = %if.else344
  %206 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x349 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %206, i32 0, i32 0
  %207 = load i32, i32* %img_x349, align 8
  %mul350 = mul i32 2, %207
  store i32 %mul350, i32* %width, align 4
  br label %if.end352

if.else351:                                       ; preds = %if.else344
  store i32 0, i32* %width, align 4
  br label %if.end352

if.end352:                                        ; preds = %if.else351, %if.then348
  br label %if.end353

if.end353:                                        ; preds = %if.end352, %if.then341
  %208 = load i32, i32* %width, align 4
  %sub354 = sub nsw i32 0, %208
  %and355 = and i32 %sub354, 3
  store i32 %and355, i32* %pad, align 4
  %bpp356 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %209 = load i32, i32* %bpp356, align 4
  %cmp357 = icmp eq i32 %209, 24
  br i1 %cmp357, label %if.then359, label %if.else360

if.then359:                                       ; preds = %if.end353
  store i32 1, i32* %easy, align 4
  br label %if.end379

if.else360:                                       ; preds = %if.end353
  %bpp361 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %210 = load i32, i32* %bpp361, align 4
  %cmp362 = icmp eq i32 %210, 32
  br i1 %cmp362, label %if.then364, label %if.end378

if.then364:                                       ; preds = %if.else360
  %211 = load i32, i32* %mb, align 4
  %cmp365 = icmp eq i32 %211, 255
  br i1 %cmp365, label %land.lhs.true367, label %if.end377

land.lhs.true367:                                 ; preds = %if.then364
  %212 = load i32, i32* %mg, align 4
  %cmp368 = icmp eq i32 %212, 65280
  br i1 %cmp368, label %land.lhs.true370, label %if.end377

land.lhs.true370:                                 ; preds = %land.lhs.true367
  %213 = load i32, i32* %mr, align 4
  %cmp371 = icmp eq i32 %213, 16711680
  br i1 %cmp371, label %land.lhs.true373, label %if.end377

land.lhs.true373:                                 ; preds = %land.lhs.true370
  %214 = load i32, i32* %ma, align 4
  %cmp374 = icmp eq i32 %214, -16777216
  br i1 %cmp374, label %if.then376, label %if.end377

if.then376:                                       ; preds = %land.lhs.true373
  store i32 2, i32* %easy, align 4
  br label %if.end377

if.end377:                                        ; preds = %if.then376, %land.lhs.true373, %land.lhs.true370, %land.lhs.true367, %if.then364
  br label %if.end378

if.end378:                                        ; preds = %if.end377, %if.else360
  br label %if.end379

if.end379:                                        ; preds = %if.end378, %if.then359
  %215 = load i32, i32* %easy, align 4
  %tobool380 = icmp ne i32 %215, 0
  br i1 %tobool380, label %if.end420, label %if.then381

if.then381:                                       ; preds = %if.end379
  %216 = load i32, i32* %mr, align 4
  %tobool382 = icmp ne i32 %216, 0
  br i1 %tobool382, label %lor.lhs.false383, label %if.then387

lor.lhs.false383:                                 ; preds = %if.then381
  %217 = load i32, i32* %mg, align 4
  %tobool384 = icmp ne i32 %217, 0
  br i1 %tobool384, label %lor.lhs.false385, label %if.then387

lor.lhs.false385:                                 ; preds = %lor.lhs.false383
  %218 = load i32, i32* %mb, align 4
  %tobool386 = icmp ne i32 %218, 0
  br i1 %tobool386, label %if.end391, label %if.then387

if.then387:                                       ; preds = %lor.lhs.false385, %lor.lhs.false383, %if.then381
  %219 = load i8*, i8** %out, align 8
  call void @free(i8* %219) #10
  %call388 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.98, i64 0, i64 0))
  %tobool389 = icmp ne i32 %call388, 0
  %220 = zext i1 %tobool389 to i64
  %cond390 = select i1 %tobool389, i8* null, i8* null
  %221 = ptrtoint i8* %cond390 to i64
  %222 = inttoptr i64 %221 to i8*
  store i8* %222, i8** %retval, align 8
  br label %return

if.end391:                                        ; preds = %lor.lhs.false385
  %223 = load i32, i32* %mr, align 4
  %call392 = call i32 @stbi__high_bit(i32 %223)
  %sub393 = sub nsw i32 %call392, 7
  store i32 %sub393, i32* %rshift, align 4
  %224 = load i32, i32* %mr, align 4
  %call394 = call i32 @stbi__bitcount(i32 %224)
  store i32 %call394, i32* %rcount, align 4
  %225 = load i32, i32* %mg, align 4
  %call395 = call i32 @stbi__high_bit(i32 %225)
  %sub396 = sub nsw i32 %call395, 7
  store i32 %sub396, i32* %gshift, align 4
  %226 = load i32, i32* %mg, align 4
  %call397 = call i32 @stbi__bitcount(i32 %226)
  store i32 %call397, i32* %gcount, align 4
  %227 = load i32, i32* %mb, align 4
  %call398 = call i32 @stbi__high_bit(i32 %227)
  %sub399 = sub nsw i32 %call398, 7
  store i32 %sub399, i32* %bshift, align 4
  %228 = load i32, i32* %mb, align 4
  %call400 = call i32 @stbi__bitcount(i32 %228)
  store i32 %call400, i32* %bcount, align 4
  %229 = load i32, i32* %ma, align 4
  %call401 = call i32 @stbi__high_bit(i32 %229)
  %sub402 = sub nsw i32 %call401, 7
  store i32 %sub402, i32* %ashift, align 4
  %230 = load i32, i32* %ma, align 4
  %call403 = call i32 @stbi__bitcount(i32 %230)
  store i32 %call403, i32* %acount, align 4
  %231 = load i32, i32* %rcount, align 4
  %cmp404 = icmp sgt i32 %231, 8
  br i1 %cmp404, label %if.then415, label %lor.lhs.false406

lor.lhs.false406:                                 ; preds = %if.end391
  %232 = load i32, i32* %gcount, align 4
  %cmp407 = icmp sgt i32 %232, 8
  br i1 %cmp407, label %if.then415, label %lor.lhs.false409

lor.lhs.false409:                                 ; preds = %lor.lhs.false406
  %233 = load i32, i32* %bcount, align 4
  %cmp410 = icmp sgt i32 %233, 8
  br i1 %cmp410, label %if.then415, label %lor.lhs.false412

lor.lhs.false412:                                 ; preds = %lor.lhs.false409
  %234 = load i32, i32* %acount, align 4
  %cmp413 = icmp sgt i32 %234, 8
  br i1 %cmp413, label %if.then415, label %if.end419

if.then415:                                       ; preds = %lor.lhs.false412, %lor.lhs.false409, %lor.lhs.false406, %if.end391
  %235 = load i8*, i8** %out, align 8
  call void @free(i8* %235) #10
  %call416 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.98, i64 0, i64 0))
  %tobool417 = icmp ne i32 %call416, 0
  %236 = zext i1 %tobool417 to i64
  %cond418 = select i1 %tobool417, i8* null, i8* null
  %237 = ptrtoint i8* %cond418 to i64
  %238 = inttoptr i64 %237 to i8*
  store i8* %238, i8** %retval, align 8
  br label %return

if.end419:                                        ; preds = %lor.lhs.false412
  br label %if.end420

if.end420:                                        ; preds = %if.end419, %if.end379
  store i32 0, i32* %j, align 4
  br label %for.cond421

for.cond421:                                      ; preds = %for.inc526, %if.end420
  %239 = load i32, i32* %j, align 4
  %240 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y422 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %240, i32 0, i32 1
  %241 = load i32, i32* %img_y422, align 4
  %cmp423 = icmp slt i32 %239, %241
  br i1 %cmp423, label %for.body425, label %for.end528

for.body425:                                      ; preds = %for.cond421
  %242 = load i32, i32* %easy, align 4
  %tobool426 = icmp ne i32 %242, 0
  br i1 %tobool426, label %if.then427, label %if.else466

if.then427:                                       ; preds = %for.body425
  store i32 0, i32* %i, align 4
  br label %for.cond428

for.cond428:                                      ; preds = %for.inc463, %if.then427
  %243 = load i32, i32* %i, align 4
  %244 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x429 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %244, i32 0, i32 0
  %245 = load i32, i32* %img_x429, align 8
  %cmp430 = icmp slt i32 %243, %245
  br i1 %cmp430, label %for.body432, label %for.end465

for.body432:                                      ; preds = %for.cond428
  %246 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call433 = call zeroext i8 @stbi__get8(%struct.stbi__context* %246)
  %247 = load i8*, i8** %out, align 8
  %248 = load i32, i32* %z332, align 4
  %add434 = add nsw i32 %248, 2
  %idxprom435 = sext i32 %add434 to i64
  %arrayidx436 = getelementptr inbounds i8, i8* %247, i64 %idxprom435
  store i8 %call433, i8* %arrayidx436, align 1
  %249 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call437 = call zeroext i8 @stbi__get8(%struct.stbi__context* %249)
  %250 = load i8*, i8** %out, align 8
  %251 = load i32, i32* %z332, align 4
  %add438 = add nsw i32 %251, 1
  %idxprom439 = sext i32 %add438 to i64
  %arrayidx440 = getelementptr inbounds i8, i8* %250, i64 %idxprom439
  store i8 %call437, i8* %arrayidx440, align 1
  %252 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call441 = call zeroext i8 @stbi__get8(%struct.stbi__context* %252)
  %253 = load i8*, i8** %out, align 8
  %254 = load i32, i32* %z332, align 4
  %add442 = add nsw i32 %254, 0
  %idxprom443 = sext i32 %add442 to i64
  %arrayidx444 = getelementptr inbounds i8, i8* %253, i64 %idxprom443
  store i8 %call441, i8* %arrayidx444, align 1
  %255 = load i32, i32* %z332, align 4
  %add445 = add nsw i32 %255, 3
  store i32 %add445, i32* %z332, align 4
  %256 = load i32, i32* %easy, align 4
  %cmp446 = icmp eq i32 %256, 2
  br i1 %cmp446, label %cond.true448, label %cond.false451

cond.true448:                                     ; preds = %for.body432
  %257 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call449 = call zeroext i8 @stbi__get8(%struct.stbi__context* %257)
  %conv450 = zext i8 %call449 to i32
  br label %cond.end452

cond.false451:                                    ; preds = %for.body432
  br label %cond.end452

cond.end452:                                      ; preds = %cond.false451, %cond.true448
  %cond453 = phi i32 [ %conv450, %cond.true448 ], [ 255, %cond.false451 ]
  %conv454 = trunc i32 %cond453 to i8
  store i8 %conv454, i8* %a, align 1
  %258 = load i8, i8* %a, align 1
  %conv455 = zext i8 %258 to i32
  %259 = load i32, i32* %all_a, align 4
  %or = or i32 %259, %conv455
  store i32 %or, i32* %all_a, align 4
  %260 = load i32, i32* %target, align 4
  %cmp456 = icmp eq i32 %260, 4
  br i1 %cmp456, label %if.then458, label %if.end462

if.then458:                                       ; preds = %cond.end452
  %261 = load i8, i8* %a, align 1
  %262 = load i8*, i8** %out, align 8
  %263 = load i32, i32* %z332, align 4
  %inc459 = add nsw i32 %263, 1
  store i32 %inc459, i32* %z332, align 4
  %idxprom460 = sext i32 %263 to i64
  %arrayidx461 = getelementptr inbounds i8, i8* %262, i64 %idxprom460
  store i8 %261, i8* %arrayidx461, align 1
  br label %if.end462

if.end462:                                        ; preds = %if.then458, %cond.end452
  br label %for.inc463

for.inc463:                                       ; preds = %if.end462
  %264 = load i32, i32* %i, align 4
  %inc464 = add nsw i32 %264, 1
  store i32 %inc464, i32* %i, align 4
  br label %for.cond428

for.end465:                                       ; preds = %for.cond428
  br label %if.end525

if.else466:                                       ; preds = %for.body425
  %bpp468 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %265 = load i32, i32* %bpp468, align 4
  store i32 %265, i32* %bpp467, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond469

for.cond469:                                      ; preds = %for.inc522, %if.else466
  %266 = load i32, i32* %i, align 4
  %267 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x470 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %267, i32 0, i32 0
  %268 = load i32, i32* %img_x470, align 8
  %cmp471 = icmp slt i32 %266, %268
  br i1 %cmp471, label %for.body473, label %for.end524

for.body473:                                      ; preds = %for.cond469
  %269 = load i32, i32* %bpp467, align 4
  %cmp475 = icmp eq i32 %269, 16
  br i1 %cmp475, label %cond.true477, label %cond.false479

cond.true477:                                     ; preds = %for.body473
  %270 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call478 = call i32 @stbi__get16le(%struct.stbi__context* %270)
  br label %cond.end481

cond.false479:                                    ; preds = %for.body473
  %271 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call480 = call i32 @stbi__get32le(%struct.stbi__context* %271)
  br label %cond.end481

cond.end481:                                      ; preds = %cond.false479, %cond.true477
  %cond482 = phi i32 [ %call478, %cond.true477 ], [ %call480, %cond.false479 ]
  store i32 %cond482, i32* %v474, align 4
  %272 = load i32, i32* %v474, align 4
  %273 = load i32, i32* %mr, align 4
  %and484 = and i32 %272, %273
  %274 = load i32, i32* %rshift, align 4
  %275 = load i32, i32* %rcount, align 4
  %call485 = call i32 @stbi__shiftsigned(i32 %and484, i32 %274, i32 %275)
  %and486 = and i32 %call485, 255
  %conv487 = trunc i32 %and486 to i8
  %276 = load i8*, i8** %out, align 8
  %277 = load i32, i32* %z332, align 4
  %inc488 = add nsw i32 %277, 1
  store i32 %inc488, i32* %z332, align 4
  %idxprom489 = sext i32 %277 to i64
  %arrayidx490 = getelementptr inbounds i8, i8* %276, i64 %idxprom489
  store i8 %conv487, i8* %arrayidx490, align 1
  %278 = load i32, i32* %v474, align 4
  %279 = load i32, i32* %mg, align 4
  %and491 = and i32 %278, %279
  %280 = load i32, i32* %gshift, align 4
  %281 = load i32, i32* %gcount, align 4
  %call492 = call i32 @stbi__shiftsigned(i32 %and491, i32 %280, i32 %281)
  %and493 = and i32 %call492, 255
  %conv494 = trunc i32 %and493 to i8
  %282 = load i8*, i8** %out, align 8
  %283 = load i32, i32* %z332, align 4
  %inc495 = add nsw i32 %283, 1
  store i32 %inc495, i32* %z332, align 4
  %idxprom496 = sext i32 %283 to i64
  %arrayidx497 = getelementptr inbounds i8, i8* %282, i64 %idxprom496
  store i8 %conv494, i8* %arrayidx497, align 1
  %284 = load i32, i32* %v474, align 4
  %285 = load i32, i32* %mb, align 4
  %and498 = and i32 %284, %285
  %286 = load i32, i32* %bshift, align 4
  %287 = load i32, i32* %bcount, align 4
  %call499 = call i32 @stbi__shiftsigned(i32 %and498, i32 %286, i32 %287)
  %and500 = and i32 %call499, 255
  %conv501 = trunc i32 %and500 to i8
  %288 = load i8*, i8** %out, align 8
  %289 = load i32, i32* %z332, align 4
  %inc502 = add nsw i32 %289, 1
  store i32 %inc502, i32* %z332, align 4
  %idxprom503 = sext i32 %289 to i64
  %arrayidx504 = getelementptr inbounds i8, i8* %288, i64 %idxprom503
  store i8 %conv501, i8* %arrayidx504, align 1
  %290 = load i32, i32* %ma, align 4
  %tobool505 = icmp ne i32 %290, 0
  br i1 %tobool505, label %cond.true506, label %cond.false509

cond.true506:                                     ; preds = %cond.end481
  %291 = load i32, i32* %v474, align 4
  %292 = load i32, i32* %ma, align 4
  %and507 = and i32 %291, %292
  %293 = load i32, i32* %ashift, align 4
  %294 = load i32, i32* %acount, align 4
  %call508 = call i32 @stbi__shiftsigned(i32 %and507, i32 %293, i32 %294)
  br label %cond.end510

cond.false509:                                    ; preds = %cond.end481
  br label %cond.end510

cond.end510:                                      ; preds = %cond.false509, %cond.true506
  %cond511 = phi i32 [ %call508, %cond.true506 ], [ 255, %cond.false509 ]
  store i32 %cond511, i32* %a483, align 4
  %295 = load i32, i32* %a483, align 4
  %296 = load i32, i32* %all_a, align 4
  %or512 = or i32 %296, %295
  store i32 %or512, i32* %all_a, align 4
  %297 = load i32, i32* %target, align 4
  %cmp513 = icmp eq i32 %297, 4
  br i1 %cmp513, label %if.then515, label %if.end521

if.then515:                                       ; preds = %cond.end510
  %298 = load i32, i32* %a483, align 4
  %and516 = and i32 %298, 255
  %conv517 = trunc i32 %and516 to i8
  %299 = load i8*, i8** %out, align 8
  %300 = load i32, i32* %z332, align 4
  %inc518 = add nsw i32 %300, 1
  store i32 %inc518, i32* %z332, align 4
  %idxprom519 = sext i32 %300 to i64
  %arrayidx520 = getelementptr inbounds i8, i8* %299, i64 %idxprom519
  store i8 %conv517, i8* %arrayidx520, align 1
  br label %if.end521

if.end521:                                        ; preds = %if.then515, %cond.end510
  br label %for.inc522

for.inc522:                                       ; preds = %if.end521
  %301 = load i32, i32* %i, align 4
  %inc523 = add nsw i32 %301, 1
  store i32 %inc523, i32* %i, align 4
  br label %for.cond469

for.end524:                                       ; preds = %for.cond469
  br label %if.end525

if.end525:                                        ; preds = %for.end524, %for.end465
  %302 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %303 = load i32, i32* %pad, align 4
  call void @stbi__skip(%struct.stbi__context* %302, i32 %303)
  br label %for.inc526

for.inc526:                                       ; preds = %if.end525
  %304 = load i32, i32* %j, align 4
  %inc527 = add nsw i32 %304, 1
  store i32 %inc527, i32* %j, align 4
  br label %for.cond421

for.end528:                                       ; preds = %for.cond421
  br label %if.end529

if.end529:                                        ; preds = %for.end528, %if.end330
  %305 = load i32, i32* %target, align 4
  %cmp530 = icmp eq i32 %305, 4
  br i1 %cmp530, label %land.lhs.true532, label %if.end550

land.lhs.true532:                                 ; preds = %if.end529
  %306 = load i32, i32* %all_a, align 4
  %cmp533 = icmp eq i32 %306, 0
  br i1 %cmp533, label %if.then535, label %if.end550

if.then535:                                       ; preds = %land.lhs.true532
  %307 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x536 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %307, i32 0, i32 0
  %308 = load i32, i32* %img_x536, align 8
  %mul537 = mul i32 4, %308
  %309 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y538 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %309, i32 0, i32 1
  %310 = load i32, i32* %img_y538, align 4
  %mul539 = mul i32 %mul537, %310
  %sub540 = sub i32 %mul539, 1
  store i32 %sub540, i32* %i, align 4
  br label %for.cond541

for.cond541:                                      ; preds = %for.inc547, %if.then535
  %311 = load i32, i32* %i, align 4
  %cmp542 = icmp sge i32 %311, 0
  br i1 %cmp542, label %for.body544, label %for.end549

for.body544:                                      ; preds = %for.cond541
  %312 = load i8*, i8** %out, align 8
  %313 = load i32, i32* %i, align 4
  %idxprom545 = sext i32 %313 to i64
  %arrayidx546 = getelementptr inbounds i8, i8* %312, i64 %idxprom545
  store i8 -1, i8* %arrayidx546, align 1
  br label %for.inc547

for.inc547:                                       ; preds = %for.body544
  %314 = load i32, i32* %i, align 4
  %sub548 = sub nsw i32 %314, 4
  store i32 %sub548, i32* %i, align 4
  br label %for.cond541

for.end549:                                       ; preds = %for.cond541
  br label %if.end550

if.end550:                                        ; preds = %for.end549, %land.lhs.true532, %if.end529
  %315 = load i32, i32* %flip_vertically, align 4
  %tobool551 = icmp ne i32 %315, 0
  br i1 %tobool551, label %if.then552, label %if.end590

if.then552:                                       ; preds = %if.end550
  store i32 0, i32* %j, align 4
  br label %for.cond553

for.cond553:                                      ; preds = %for.inc587, %if.then552
  %316 = load i32, i32* %j, align 4
  %317 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y554 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %317, i32 0, i32 1
  %318 = load i32, i32* %img_y554, align 4
  %shr555 = ashr i32 %318, 1
  %cmp556 = icmp slt i32 %316, %shr555
  br i1 %cmp556, label %for.body558, label %for.end589

for.body558:                                      ; preds = %for.cond553
  %319 = load i8*, i8** %out, align 8
  %320 = load i32, i32* %j, align 4
  %321 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x559 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %321, i32 0, i32 0
  %322 = load i32, i32* %img_x559, align 8
  %mul560 = mul i32 %320, %322
  %323 = load i32, i32* %target, align 4
  %mul561 = mul i32 %mul560, %323
  %idx.ext = zext i32 %mul561 to i64
  %add.ptr = getelementptr inbounds i8, i8* %319, i64 %idx.ext
  store i8* %add.ptr, i8** %p1, align 8
  %324 = load i8*, i8** %out, align 8
  %325 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y562 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %325, i32 0, i32 1
  %326 = load i32, i32* %img_y562, align 4
  %sub563 = sub i32 %326, 1
  %327 = load i32, i32* %j, align 4
  %sub564 = sub i32 %sub563, %327
  %328 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x565 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %328, i32 0, i32 0
  %329 = load i32, i32* %img_x565, align 8
  %mul566 = mul i32 %sub564, %329
  %330 = load i32, i32* %target, align 4
  %mul567 = mul i32 %mul566, %330
  %idx.ext568 = zext i32 %mul567 to i64
  %add.ptr569 = getelementptr inbounds i8, i8* %324, i64 %idx.ext568
  store i8* %add.ptr569, i8** %p2, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond570

for.cond570:                                      ; preds = %for.inc584, %for.body558
  %331 = load i32, i32* %i, align 4
  %332 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x571 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %332, i32 0, i32 0
  %333 = load i32, i32* %img_x571, align 8
  %334 = load i32, i32* %target, align 4
  %mul572 = mul nsw i32 %333, %334
  %cmp573 = icmp slt i32 %331, %mul572
  br i1 %cmp573, label %for.body575, label %for.end586

for.body575:                                      ; preds = %for.cond570
  %335 = load i8*, i8** %p1, align 8
  %336 = load i32, i32* %i, align 4
  %idxprom576 = sext i32 %336 to i64
  %arrayidx577 = getelementptr inbounds i8, i8* %335, i64 %idxprom576
  %337 = load i8, i8* %arrayidx577, align 1
  store i8 %337, i8* %t, align 1
  %338 = load i8*, i8** %p2, align 8
  %339 = load i32, i32* %i, align 4
  %idxprom578 = sext i32 %339 to i64
  %arrayidx579 = getelementptr inbounds i8, i8* %338, i64 %idxprom578
  %340 = load i8, i8* %arrayidx579, align 1
  %341 = load i8*, i8** %p1, align 8
  %342 = load i32, i32* %i, align 4
  %idxprom580 = sext i32 %342 to i64
  %arrayidx581 = getelementptr inbounds i8, i8* %341, i64 %idxprom580
  store i8 %340, i8* %arrayidx581, align 1
  %343 = load i8, i8* %t, align 1
  %344 = load i8*, i8** %p2, align 8
  %345 = load i32, i32* %i, align 4
  %idxprom582 = sext i32 %345 to i64
  %arrayidx583 = getelementptr inbounds i8, i8* %344, i64 %idxprom582
  store i8 %343, i8* %arrayidx583, align 1
  br label %for.inc584

for.inc584:                                       ; preds = %for.body575
  %346 = load i32, i32* %i, align 4
  %inc585 = add nsw i32 %346, 1
  store i32 %inc585, i32* %i, align 4
  br label %for.cond570

for.end586:                                       ; preds = %for.cond570
  br label %for.inc587

for.inc587:                                       ; preds = %for.end586
  %347 = load i32, i32* %j, align 4
  %inc588 = add nsw i32 %347, 1
  store i32 %inc588, i32* %j, align 4
  br label %for.cond553

for.end589:                                       ; preds = %for.cond553
  br label %if.end590

if.end590:                                        ; preds = %for.end589, %if.end550
  %348 = load i32, i32* %req_comp.addr, align 4
  %tobool591 = icmp ne i32 %348, 0
  br i1 %tobool591, label %land.lhs.true592, label %if.end603

land.lhs.true592:                                 ; preds = %if.end590
  %349 = load i32, i32* %req_comp.addr, align 4
  %350 = load i32, i32* %target, align 4
  %cmp593 = icmp ne i32 %349, %350
  br i1 %cmp593, label %if.then595, label %if.end603

if.then595:                                       ; preds = %land.lhs.true592
  %351 = load i8*, i8** %out, align 8
  %352 = load i32, i32* %target, align 4
  %353 = load i32, i32* %req_comp.addr, align 4
  %354 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x596 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %354, i32 0, i32 0
  %355 = load i32, i32* %img_x596, align 8
  %356 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y597 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %356, i32 0, i32 1
  %357 = load i32, i32* %img_y597, align 4
  %call598 = call i8* @stbi__convert_format(i8* %351, i32 %352, i32 %353, i32 %355, i32 %357)
  store i8* %call598, i8** %out, align 8
  %358 = load i8*, i8** %out, align 8
  %cmp599 = icmp eq i8* %358, null
  br i1 %cmp599, label %if.then601, label %if.end602

if.then601:                                       ; preds = %if.then595
  %359 = load i8*, i8** %out, align 8
  store i8* %359, i8** %retval, align 8
  br label %return

if.end602:                                        ; preds = %if.then595
  br label %if.end603

if.end603:                                        ; preds = %if.end602, %land.lhs.true592, %if.end590
  %360 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x604 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %360, i32 0, i32 0
  %361 = load i32, i32* %img_x604, align 8
  %362 = load i32*, i32** %x.addr, align 8
  store i32 %361, i32* %362, align 4
  %363 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y605 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %363, i32 0, i32 1
  %364 = load i32, i32* %img_y605, align 4
  %365 = load i32*, i32** %y.addr, align 8
  store i32 %364, i32* %365, align 4
  %366 = load i32*, i32** %comp.addr, align 8
  %tobool606 = icmp ne i32* %366, null
  br i1 %tobool606, label %if.then607, label %if.end609

if.then607:                                       ; preds = %if.end603
  %367 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n608 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %367, i32 0, i32 2
  %368 = load i32, i32* %img_n608, align 8
  %369 = load i32*, i32** %comp.addr, align 8
  store i32 %368, i32* %369, align 4
  br label %if.end609

if.end609:                                        ; preds = %if.then607, %if.end603
  %370 = load i8*, i8** %out, align 8
  store i8* %370, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end609, %if.then601, %if.then415, %if.then387, %if.else172, %if.then115, %if.then102, %if.then93, %if.then64, %if.then14, %if.then9, %if.then
  %371 = load i8*, i8** %retval, align 8
  ret i8* %371
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__gif_test(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %r = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__gif_test_raw(%struct.stbi__context* %0)
  store i32 %call, i32* %r, align 4
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %1)
  %2 = load i32, i32* %r, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__gif_load(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp, %struct.stbi__result_info* %ri) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %u = alloca i8*, align 8
  %g = alloca %struct.stbi__gif, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  store i8* null, i8** %u, align 8
  %0 = bitcast %struct.stbi__gif* %g to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 34928, i1 false)
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %2 = load i32*, i32** %comp.addr, align 8
  %3 = load i32, i32* %req_comp.addr, align 4
  %call = call i8* @stbi__gif_load_next(%struct.stbi__context* %1, %struct.stbi__gif* %g, i32* %2, i32 %3, i8* null)
  store i8* %call, i8** %u, align 8
  %4 = load i8*, i8** %u, align 8
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %6 = bitcast %struct.stbi__context* %5 to i8*
  %cmp = icmp eq i8* %4, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %u, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i8*, i8** %u, align 8
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %w = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 0
  %8 = load i32, i32* %w, align 8
  %9 = load i32*, i32** %x.addr, align 8
  store i32 %8, i32* %9, align 4
  %h = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 1
  %10 = load i32, i32* %h, align 4
  %11 = load i32*, i32** %y.addr, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32, i32* %req_comp.addr, align 4
  %tobool2 = icmp ne i32 %12, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %if.then1
  %13 = load i32, i32* %req_comp.addr, align 4
  %cmp3 = icmp ne i32 %13, 4
  br i1 %cmp3, label %if.then4, label %if.end8

if.then4:                                         ; preds = %land.lhs.true
  %14 = load i8*, i8** %u, align 8
  %15 = load i32, i32* %req_comp.addr, align 4
  %w5 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 0
  %16 = load i32, i32* %w5, align 8
  %h6 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 1
  %17 = load i32, i32* %h6, align 4
  %call7 = call i8* @stbi__convert_format(i8* %14, i32 4, i32 %15, i32 %16, i32 %17)
  store i8* %call7, i8** %u, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then4, %land.lhs.true, %if.then1
  br label %if.end13

if.else:                                          ; preds = %if.end
  %out = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 2
  %18 = load i8*, i8** %out, align 8
  %tobool9 = icmp ne i8* %18, null
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.else
  %out11 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 2
  %19 = load i8*, i8** %out11, align 8
  call void @free(i8* %19) #10
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.else
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end8
  %history = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 4
  %20 = load i8*, i8** %history, align 8
  call void @free(i8* %20) #10
  %background = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 3
  %21 = load i8*, i8** %background, align 8
  call void @free(i8* %21) #10
  %22 = load i8*, i8** %u, align 8
  ret i8* %22
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__psd_test(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %r = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__get32be(%struct.stbi__context* %0)
  %cmp = icmp eq i32 %call, 943870035
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %r, align 4
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %1)
  %2 = load i32, i32* %r, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__psd_load(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp, %struct.stbi__result_info* %ri, i32 %bpc) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %bpc.addr = alloca i32, align 4
  %pixelCount = alloca i32, align 4
  %channelCount = alloca i32, align 4
  %compression = alloca i32, align 4
  %channel = alloca i32, align 4
  %i = alloca i32, align 4
  %bitdepth = alloca i32, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %out = alloca i8*, align 8
  %p = alloca i8*, align 8
  %q = alloca i16*, align 8
  %val = alloca i16, align 2
  %p139 = alloca i8*, align 8
  %val142 = alloca i8, align 1
  %q161 = alloca i16*, align 8
  %p175 = alloca i8*, align 8
  %pixel = alloca i16*, align 8
  %a = alloca float, align 4
  %ra = alloca float, align 4
  %inv_a = alloca float, align 4
  %pixel267 = alloca i8*, align 8
  %a281 = alloca float, align 4
  %ra286 = alloca float, align 4
  %inv_a288 = alloca float, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  store i32 %bpc, i32* %bpc.addr, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__get32be(%struct.stbi__context* %0)
  %cmp = icmp ne i32 %call, 943870035
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.113, i64 0, i64 0))
  %tobool = icmp ne i32 %call1, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %2 = ptrtoint i8* %cond to i64
  %3 = inttoptr i64 %2 to i8*
  store i8* %3, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call2 = call i32 @stbi__get16be(%struct.stbi__context* %4)
  %cmp3 = icmp ne i32 %call2, 1
  br i1 %cmp3, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.end
  %call5 = call i32 @stbi__err(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.114, i64 0, i64 0))
  %tobool6 = icmp ne i32 %call5, 0
  %5 = zext i1 %tobool6 to i64
  %cond7 = select i1 %tobool6, i8* null, i8* null
  %6 = ptrtoint i8* %cond7 to i64
  %7 = inttoptr i64 %6 to i8*
  store i8* %7, i8** %retval, align 8
  br label %return

if.end8:                                          ; preds = %if.end
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %8, i32 6)
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call9 = call i32 @stbi__get16be(%struct.stbi__context* %9)
  store i32 %call9, i32* %channelCount, align 4
  %10 = load i32, i32* %channelCount, align 4
  %cmp10 = icmp slt i32 %10, 0
  br i1 %cmp10, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end8
  %11 = load i32, i32* %channelCount, align 4
  %cmp11 = icmp sgt i32 %11, 16
  br i1 %cmp11, label %if.then12, label %if.end16

if.then12:                                        ; preds = %lor.lhs.false, %if.end8
  %call13 = call i32 @stbi__err(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.115, i64 0, i64 0))
  %tobool14 = icmp ne i32 %call13, 0
  %12 = zext i1 %tobool14 to i64
  %cond15 = select i1 %tobool14, i8* null, i8* null
  %13 = ptrtoint i8* %cond15 to i64
  %14 = inttoptr i64 %13 to i8*
  store i8* %14, i8** %retval, align 8
  br label %return

if.end16:                                         ; preds = %lor.lhs.false
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call17 = call i32 @stbi__get32be(%struct.stbi__context* %15)
  store i32 %call17, i32* %h, align 4
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call18 = call i32 @stbi__get32be(%struct.stbi__context* %16)
  store i32 %call18, i32* %w, align 4
  %17 = load i32, i32* %h, align 4
  %cmp19 = icmp sgt i32 %17, 16777216
  br i1 %cmp19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %if.end16
  %call21 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool22 = icmp ne i32 %call21, 0
  %18 = zext i1 %tobool22 to i64
  %cond23 = select i1 %tobool22, i8* null, i8* null
  %19 = ptrtoint i8* %cond23 to i64
  %20 = inttoptr i64 %19 to i8*
  store i8* %20, i8** %retval, align 8
  br label %return

if.end24:                                         ; preds = %if.end16
  %21 = load i32, i32* %w, align 4
  %cmp25 = icmp sgt i32 %21, 16777216
  br i1 %cmp25, label %if.then26, label %if.end30

if.then26:                                        ; preds = %if.end24
  %call27 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool28 = icmp ne i32 %call27, 0
  %22 = zext i1 %tobool28 to i64
  %cond29 = select i1 %tobool28, i8* null, i8* null
  %23 = ptrtoint i8* %cond29 to i64
  %24 = inttoptr i64 %23 to i8*
  store i8* %24, i8** %retval, align 8
  br label %return

if.end30:                                         ; preds = %if.end24
  %25 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call31 = call i32 @stbi__get16be(%struct.stbi__context* %25)
  store i32 %call31, i32* %bitdepth, align 4
  %26 = load i32, i32* %bitdepth, align 4
  %cmp32 = icmp ne i32 %26, 8
  br i1 %cmp32, label %land.lhs.true, label %if.end38

land.lhs.true:                                    ; preds = %if.end30
  %27 = load i32, i32* %bitdepth, align 4
  %cmp33 = icmp ne i32 %27, 16
  br i1 %cmp33, label %if.then34, label %if.end38

if.then34:                                        ; preds = %land.lhs.true
  %call35 = call i32 @stbi__err(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.116, i64 0, i64 0))
  %tobool36 = icmp ne i32 %call35, 0
  %28 = zext i1 %tobool36 to i64
  %cond37 = select i1 %tobool36, i8* null, i8* null
  %29 = ptrtoint i8* %cond37 to i64
  %30 = inttoptr i64 %29 to i8*
  store i8* %30, i8** %retval, align 8
  br label %return

if.end38:                                         ; preds = %land.lhs.true, %if.end30
  %31 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call39 = call i32 @stbi__get16be(%struct.stbi__context* %31)
  %cmp40 = icmp ne i32 %call39, 3
  br i1 %cmp40, label %if.then41, label %if.end45

if.then41:                                        ; preds = %if.end38
  %call42 = call i32 @stbi__err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.117, i64 0, i64 0))
  %tobool43 = icmp ne i32 %call42, 0
  %32 = zext i1 %tobool43 to i64
  %cond44 = select i1 %tobool43, i8* null, i8* null
  %33 = ptrtoint i8* %cond44 to i64
  %34 = inttoptr i64 %33 to i8*
  store i8* %34, i8** %retval, align 8
  br label %return

if.end45:                                         ; preds = %if.end38
  %35 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %36 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call46 = call i32 @stbi__get32be(%struct.stbi__context* %36)
  call void @stbi__skip(%struct.stbi__context* %35, i32 %call46)
  %37 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %38 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call47 = call i32 @stbi__get32be(%struct.stbi__context* %38)
  call void @stbi__skip(%struct.stbi__context* %37, i32 %call47)
  %39 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %40 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call48 = call i32 @stbi__get32be(%struct.stbi__context* %40)
  call void @stbi__skip(%struct.stbi__context* %39, i32 %call48)
  %41 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call49 = call i32 @stbi__get16be(%struct.stbi__context* %41)
  store i32 %call49, i32* %compression, align 4
  %42 = load i32, i32* %compression, align 4
  %cmp50 = icmp sgt i32 %42, 1
  br i1 %cmp50, label %if.then51, label %if.end55

if.then51:                                        ; preds = %if.end45
  %call52 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.118, i64 0, i64 0))
  %tobool53 = icmp ne i32 %call52, 0
  %43 = zext i1 %tobool53 to i64
  %cond54 = select i1 %tobool53, i8* null, i8* null
  %44 = ptrtoint i8* %cond54 to i64
  %45 = inttoptr i64 %44 to i8*
  store i8* %45, i8** %retval, align 8
  br label %return

if.end55:                                         ; preds = %if.end45
  %46 = load i32, i32* %w, align 4
  %47 = load i32, i32* %h, align 4
  %call56 = call i32 @stbi__mad3sizes_valid(i32 4, i32 %46, i32 %47, i32 0)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.end62, label %if.then58

if.then58:                                        ; preds = %if.end55
  %call59 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool60 = icmp ne i32 %call59, 0
  %48 = zext i1 %tobool60 to i64
  %cond61 = select i1 %tobool60, i8* null, i8* null
  %49 = ptrtoint i8* %cond61 to i64
  %50 = inttoptr i64 %49 to i8*
  store i8* %50, i8** %retval, align 8
  br label %return

if.end62:                                         ; preds = %if.end55
  %51 = load i32, i32* %compression, align 4
  %tobool63 = icmp ne i32 %51, 0
  br i1 %tobool63, label %if.else, label %land.lhs.true64

land.lhs.true64:                                  ; preds = %if.end62
  %52 = load i32, i32* %bitdepth, align 4
  %cmp65 = icmp eq i32 %52, 16
  br i1 %cmp65, label %land.lhs.true66, label %if.else

land.lhs.true66:                                  ; preds = %land.lhs.true64
  %53 = load i32, i32* %bpc.addr, align 4
  %cmp67 = icmp eq i32 %53, 16
  br i1 %cmp67, label %if.then68, label %if.else

if.then68:                                        ; preds = %land.lhs.true66
  %54 = load i32, i32* %w, align 4
  %55 = load i32, i32* %h, align 4
  %call69 = call i8* @stbi__malloc_mad3(i32 8, i32 %54, i32 %55, i32 0)
  store i8* %call69, i8** %out, align 8
  %56 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %bits_per_channel = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %56, i32 0, i32 0
  store i32 16, i32* %bits_per_channel, align 4
  br label %if.end72

if.else:                                          ; preds = %land.lhs.true66, %land.lhs.true64, %if.end62
  %57 = load i32, i32* %w, align 4
  %mul = mul nsw i32 4, %57
  %58 = load i32, i32* %h, align 4
  %mul70 = mul nsw i32 %mul, %58
  %conv = sext i32 %mul70 to i64
  %call71 = call i8* @stbi__malloc(i64 %conv)
  store i8* %call71, i8** %out, align 8
  br label %if.end72

if.end72:                                         ; preds = %if.else, %if.then68
  %59 = load i8*, i8** %out, align 8
  %tobool73 = icmp ne i8* %59, null
  br i1 %tobool73, label %if.end78, label %if.then74

if.then74:                                        ; preds = %if.end72
  %call75 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool76 = icmp ne i32 %call75, 0
  %60 = zext i1 %tobool76 to i64
  %cond77 = select i1 %tobool76, i8* null, i8* null
  %61 = ptrtoint i8* %cond77 to i64
  %62 = inttoptr i64 %61 to i8*
  store i8* %62, i8** %retval, align 8
  br label %return

if.end78:                                         ; preds = %if.end72
  %63 = load i32, i32* %w, align 4
  %64 = load i32, i32* %h, align 4
  %mul79 = mul nsw i32 %63, %64
  store i32 %mul79, i32* %pixelCount, align 4
  %65 = load i32, i32* %compression, align 4
  %tobool80 = icmp ne i32 %65, 0
  br i1 %tobool80, label %if.then81, label %if.else110

if.then81:                                        ; preds = %if.end78
  %66 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %67 = load i32, i32* %h, align 4
  %68 = load i32, i32* %channelCount, align 4
  %mul82 = mul nsw i32 %67, %68
  %mul83 = mul nsw i32 %mul82, 2
  call void @stbi__skip(%struct.stbi__context* %66, i32 %mul83)
  store i32 0, i32* %channel, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc107, %if.then81
  %69 = load i32, i32* %channel, align 4
  %cmp84 = icmp slt i32 %69, 4
  br i1 %cmp84, label %for.body, label %for.end109

for.body:                                         ; preds = %for.cond
  %70 = load i8*, i8** %out, align 8
  %71 = load i32, i32* %channel, align 4
  %idx.ext = sext i32 %71 to i64
  %add.ptr = getelementptr inbounds i8, i8* %70, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8
  %72 = load i32, i32* %channel, align 4
  %73 = load i32, i32* %channelCount, align 4
  %cmp86 = icmp sge i32 %72, %73
  br i1 %cmp86, label %if.then88, label %if.else98

if.then88:                                        ; preds = %for.body
  store i32 0, i32* %i, align 4
  br label %for.cond89

for.cond89:                                       ; preds = %for.inc, %if.then88
  %74 = load i32, i32* %i, align 4
  %75 = load i32, i32* %pixelCount, align 4
  %cmp90 = icmp slt i32 %74, %75
  br i1 %cmp90, label %for.body92, label %for.end

for.body92:                                       ; preds = %for.cond89
  %76 = load i32, i32* %channel, align 4
  %cmp93 = icmp eq i32 %76, 3
  %77 = zext i1 %cmp93 to i64
  %cond95 = select i1 %cmp93, i32 255, i32 0
  %conv96 = trunc i32 %cond95 to i8
  %78 = load i8*, i8** %p, align 8
  store i8 %conv96, i8* %78, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body92
  %79 = load i32, i32* %i, align 4
  %inc = add nsw i32 %79, 1
  store i32 %inc, i32* %i, align 4
  %80 = load i8*, i8** %p, align 8
  %add.ptr97 = getelementptr inbounds i8, i8* %80, i64 4
  store i8* %add.ptr97, i8** %p, align 8
  br label %for.cond89

for.end:                                          ; preds = %for.cond89
  br label %if.end106

if.else98:                                        ; preds = %for.body
  %81 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %82 = load i8*, i8** %p, align 8
  %83 = load i32, i32* %pixelCount, align 4
  %call99 = call i32 @stbi__psd_decode_rle(%struct.stbi__context* %81, i8* %82, i32 %83)
  %tobool100 = icmp ne i32 %call99, 0
  br i1 %tobool100, label %if.end105, label %if.then101

if.then101:                                       ; preds = %if.else98
  %84 = load i8*, i8** %out, align 8
  call void @free(i8* %84) #10
  %call102 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.119, i64 0, i64 0))
  %tobool103 = icmp ne i32 %call102, 0
  %85 = zext i1 %tobool103 to i64
  %cond104 = select i1 %tobool103, i8* null, i8* null
  %86 = ptrtoint i8* %cond104 to i64
  %87 = inttoptr i64 %86 to i8*
  store i8* %87, i8** %retval, align 8
  br label %return

if.end105:                                        ; preds = %if.else98
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %for.end
  br label %for.inc107

for.inc107:                                       ; preds = %if.end106
  %88 = load i32, i32* %channel, align 4
  %inc108 = add nsw i32 %88, 1
  store i32 %inc108, i32* %channel, align 4
  br label %for.cond

for.end109:                                       ; preds = %for.cond
  br label %if.end207

if.else110:                                       ; preds = %if.end78
  store i32 0, i32* %channel, align 4
  br label %for.cond111

for.cond111:                                      ; preds = %for.inc204, %if.else110
  %89 = load i32, i32* %channel, align 4
  %cmp112 = icmp slt i32 %89, 4
  br i1 %cmp112, label %for.body114, label %for.end206

for.body114:                                      ; preds = %for.cond111
  %90 = load i32, i32* %channel, align 4
  %91 = load i32, i32* %channelCount, align 4
  %cmp115 = icmp sge i32 %90, %91
  br i1 %cmp115, label %if.then117, label %if.else156

if.then117:                                       ; preds = %for.body114
  %92 = load i32, i32* %bitdepth, align 4
  %cmp118 = icmp eq i32 %92, 16
  br i1 %cmp118, label %land.lhs.true120, label %if.else138

land.lhs.true120:                                 ; preds = %if.then117
  %93 = load i32, i32* %bpc.addr, align 4
  %cmp121 = icmp eq i32 %93, 16
  br i1 %cmp121, label %if.then123, label %if.else138

if.then123:                                       ; preds = %land.lhs.true120
  %94 = load i8*, i8** %out, align 8
  %95 = bitcast i8* %94 to i16*
  %96 = load i32, i32* %channel, align 4
  %idx.ext124 = sext i32 %96 to i64
  %add.ptr125 = getelementptr inbounds i16, i16* %95, i64 %idx.ext124
  store i16* %add.ptr125, i16** %q, align 8
  %97 = load i32, i32* %channel, align 4
  %cmp126 = icmp eq i32 %97, 3
  %98 = zext i1 %cmp126 to i64
  %cond128 = select i1 %cmp126, i32 65535, i32 0
  %conv129 = trunc i32 %cond128 to i16
  store i16 %conv129, i16* %val, align 2
  store i32 0, i32* %i, align 4
  br label %for.cond130

for.cond130:                                      ; preds = %for.inc134, %if.then123
  %99 = load i32, i32* %i, align 4
  %100 = load i32, i32* %pixelCount, align 4
  %cmp131 = icmp slt i32 %99, %100
  br i1 %cmp131, label %for.body133, label %for.end137

for.body133:                                      ; preds = %for.cond130
  %101 = load i16, i16* %val, align 2
  %102 = load i16*, i16** %q, align 8
  store i16 %101, i16* %102, align 2
  br label %for.inc134

for.inc134:                                       ; preds = %for.body133
  %103 = load i32, i32* %i, align 4
  %inc135 = add nsw i32 %103, 1
  store i32 %inc135, i32* %i, align 4
  %104 = load i16*, i16** %q, align 8
  %add.ptr136 = getelementptr inbounds i16, i16* %104, i64 4
  store i16* %add.ptr136, i16** %q, align 8
  br label %for.cond130

for.end137:                                       ; preds = %for.cond130
  br label %if.end155

if.else138:                                       ; preds = %land.lhs.true120, %if.then117
  %105 = load i8*, i8** %out, align 8
  %106 = load i32, i32* %channel, align 4
  %idx.ext140 = sext i32 %106 to i64
  %add.ptr141 = getelementptr inbounds i8, i8* %105, i64 %idx.ext140
  store i8* %add.ptr141, i8** %p139, align 8
  %107 = load i32, i32* %channel, align 4
  %cmp143 = icmp eq i32 %107, 3
  %108 = zext i1 %cmp143 to i64
  %cond145 = select i1 %cmp143, i32 255, i32 0
  %conv146 = trunc i32 %cond145 to i8
  store i8 %conv146, i8* %val142, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond147

for.cond147:                                      ; preds = %for.inc151, %if.else138
  %109 = load i32, i32* %i, align 4
  %110 = load i32, i32* %pixelCount, align 4
  %cmp148 = icmp slt i32 %109, %110
  br i1 %cmp148, label %for.body150, label %for.end154

for.body150:                                      ; preds = %for.cond147
  %111 = load i8, i8* %val142, align 1
  %112 = load i8*, i8** %p139, align 8
  store i8 %111, i8* %112, align 1
  br label %for.inc151

for.inc151:                                       ; preds = %for.body150
  %113 = load i32, i32* %i, align 4
  %inc152 = add nsw i32 %113, 1
  store i32 %inc152, i32* %i, align 4
  %114 = load i8*, i8** %p139, align 8
  %add.ptr153 = getelementptr inbounds i8, i8* %114, i64 4
  store i8* %add.ptr153, i8** %p139, align 8
  br label %for.cond147

for.end154:                                       ; preds = %for.cond147
  br label %if.end155

if.end155:                                        ; preds = %for.end154, %for.end137
  br label %if.end203

if.else156:                                       ; preds = %for.body114
  %115 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %bits_per_channel157 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %115, i32 0, i32 0
  %116 = load i32, i32* %bits_per_channel157, align 4
  %cmp158 = icmp eq i32 %116, 16
  br i1 %cmp158, label %if.then160, label %if.else174

if.then160:                                       ; preds = %if.else156
  %117 = load i8*, i8** %out, align 8
  %118 = bitcast i8* %117 to i16*
  %119 = load i32, i32* %channel, align 4
  %idx.ext162 = sext i32 %119 to i64
  %add.ptr163 = getelementptr inbounds i16, i16* %118, i64 %idx.ext162
  store i16* %add.ptr163, i16** %q161, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond164

for.cond164:                                      ; preds = %for.inc170, %if.then160
  %120 = load i32, i32* %i, align 4
  %121 = load i32, i32* %pixelCount, align 4
  %cmp165 = icmp slt i32 %120, %121
  br i1 %cmp165, label %for.body167, label %for.end173

for.body167:                                      ; preds = %for.cond164
  %122 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call168 = call i32 @stbi__get16be(%struct.stbi__context* %122)
  %conv169 = trunc i32 %call168 to i16
  %123 = load i16*, i16** %q161, align 8
  store i16 %conv169, i16* %123, align 2
  br label %for.inc170

for.inc170:                                       ; preds = %for.body167
  %124 = load i32, i32* %i, align 4
  %inc171 = add nsw i32 %124, 1
  store i32 %inc171, i32* %i, align 4
  %125 = load i16*, i16** %q161, align 8
  %add.ptr172 = getelementptr inbounds i16, i16* %125, i64 4
  store i16* %add.ptr172, i16** %q161, align 8
  br label %for.cond164

for.end173:                                       ; preds = %for.cond164
  br label %if.end202

if.else174:                                       ; preds = %if.else156
  %126 = load i8*, i8** %out, align 8
  %127 = load i32, i32* %channel, align 4
  %idx.ext176 = sext i32 %127 to i64
  %add.ptr177 = getelementptr inbounds i8, i8* %126, i64 %idx.ext176
  store i8* %add.ptr177, i8** %p175, align 8
  %128 = load i32, i32* %bitdepth, align 4
  %cmp178 = icmp eq i32 %128, 16
  br i1 %cmp178, label %if.then180, label %if.else191

if.then180:                                       ; preds = %if.else174
  store i32 0, i32* %i, align 4
  br label %for.cond181

for.cond181:                                      ; preds = %for.inc187, %if.then180
  %129 = load i32, i32* %i, align 4
  %130 = load i32, i32* %pixelCount, align 4
  %cmp182 = icmp slt i32 %129, %130
  br i1 %cmp182, label %for.body184, label %for.end190

for.body184:                                      ; preds = %for.cond181
  %131 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call185 = call i32 @stbi__get16be(%struct.stbi__context* %131)
  %shr = ashr i32 %call185, 8
  %conv186 = trunc i32 %shr to i8
  %132 = load i8*, i8** %p175, align 8
  store i8 %conv186, i8* %132, align 1
  br label %for.inc187

for.inc187:                                       ; preds = %for.body184
  %133 = load i32, i32* %i, align 4
  %inc188 = add nsw i32 %133, 1
  store i32 %inc188, i32* %i, align 4
  %134 = load i8*, i8** %p175, align 8
  %add.ptr189 = getelementptr inbounds i8, i8* %134, i64 4
  store i8* %add.ptr189, i8** %p175, align 8
  br label %for.cond181

for.end190:                                       ; preds = %for.cond181
  br label %if.end201

if.else191:                                       ; preds = %if.else174
  store i32 0, i32* %i, align 4
  br label %for.cond192

for.cond192:                                      ; preds = %for.inc197, %if.else191
  %135 = load i32, i32* %i, align 4
  %136 = load i32, i32* %pixelCount, align 4
  %cmp193 = icmp slt i32 %135, %136
  br i1 %cmp193, label %for.body195, label %for.end200

for.body195:                                      ; preds = %for.cond192
  %137 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call196 = call zeroext i8 @stbi__get8(%struct.stbi__context* %137)
  %138 = load i8*, i8** %p175, align 8
  store i8 %call196, i8* %138, align 1
  br label %for.inc197

for.inc197:                                       ; preds = %for.body195
  %139 = load i32, i32* %i, align 4
  %inc198 = add nsw i32 %139, 1
  store i32 %inc198, i32* %i, align 4
  %140 = load i8*, i8** %p175, align 8
  %add.ptr199 = getelementptr inbounds i8, i8* %140, i64 4
  store i8* %add.ptr199, i8** %p175, align 8
  br label %for.cond192

for.end200:                                       ; preds = %for.cond192
  br label %if.end201

if.end201:                                        ; preds = %for.end200, %for.end190
  br label %if.end202

if.end202:                                        ; preds = %if.end201, %for.end173
  br label %if.end203

if.end203:                                        ; preds = %if.end202, %if.end155
  br label %for.inc204

for.inc204:                                       ; preds = %if.end203
  %141 = load i32, i32* %channel, align 4
  %inc205 = add nsw i32 %141, 1
  store i32 %inc205, i32* %channel, align 4
  br label %for.cond111

for.end206:                                       ; preds = %for.cond111
  br label %if.end207

if.end207:                                        ; preds = %for.end206, %for.end109
  %142 = load i32, i32* %channelCount, align 4
  %cmp208 = icmp sge i32 %142, 4
  br i1 %cmp208, label %if.then210, label %if.end317

if.then210:                                       ; preds = %if.end207
  %143 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %bits_per_channel211 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %143, i32 0, i32 0
  %144 = load i32, i32* %bits_per_channel211, align 4
  %cmp212 = icmp eq i32 %144, 16
  br i1 %cmp212, label %if.then214, label %if.else261

if.then214:                                       ; preds = %if.then210
  store i32 0, i32* %i, align 4
  br label %for.cond215

for.cond215:                                      ; preds = %for.inc258, %if.then214
  %145 = load i32, i32* %i, align 4
  %146 = load i32, i32* %w, align 4
  %147 = load i32, i32* %h, align 4
  %mul216 = mul nsw i32 %146, %147
  %cmp217 = icmp slt i32 %145, %mul216
  br i1 %cmp217, label %for.body219, label %for.end260

for.body219:                                      ; preds = %for.cond215
  %148 = load i8*, i8** %out, align 8
  %149 = bitcast i8* %148 to i16*
  %150 = load i32, i32* %i, align 4
  %mul220 = mul nsw i32 4, %150
  %idx.ext221 = sext i32 %mul220 to i64
  %add.ptr222 = getelementptr inbounds i16, i16* %149, i64 %idx.ext221
  store i16* %add.ptr222, i16** %pixel, align 8
  %151 = load i16*, i16** %pixel, align 8
  %arrayidx = getelementptr inbounds i16, i16* %151, i64 3
  %152 = load i16, i16* %arrayidx, align 2
  %conv223 = zext i16 %152 to i32
  %cmp224 = icmp ne i32 %conv223, 0
  br i1 %cmp224, label %land.lhs.true226, label %if.end257

land.lhs.true226:                                 ; preds = %for.body219
  %153 = load i16*, i16** %pixel, align 8
  %arrayidx227 = getelementptr inbounds i16, i16* %153, i64 3
  %154 = load i16, i16* %arrayidx227, align 2
  %conv228 = zext i16 %154 to i32
  %cmp229 = icmp ne i32 %conv228, 65535
  br i1 %cmp229, label %if.then231, label %if.end257

if.then231:                                       ; preds = %land.lhs.true226
  %155 = load i16*, i16** %pixel, align 8
  %arrayidx232 = getelementptr inbounds i16, i16* %155, i64 3
  %156 = load i16, i16* %arrayidx232, align 2
  %conv233 = zext i16 %156 to i32
  %conv234 = sitofp i32 %conv233 to float
  %div = fdiv float %conv234, 6.553500e+04
  store float %div, float* %a, align 4
  %157 = load float, float* %a, align 4
  %div235 = fdiv float 1.000000e+00, %157
  store float %div235, float* %ra, align 4
  %158 = load float, float* %ra, align 4
  %sub = fsub float 1.000000e+00, %158
  %mul236 = fmul float 6.553500e+04, %sub
  store float %mul236, float* %inv_a, align 4
  %159 = load i16*, i16** %pixel, align 8
  %arrayidx237 = getelementptr inbounds i16, i16* %159, i64 0
  %160 = load i16, i16* %arrayidx237, align 2
  %conv238 = zext i16 %160 to i32
  %conv239 = sitofp i32 %conv238 to float
  %161 = load float, float* %ra, align 4
  %mul240 = fmul float %conv239, %161
  %162 = load float, float* %inv_a, align 4
  %add = fadd float %mul240, %162
  %conv241 = fptoui float %add to i16
  %163 = load i16*, i16** %pixel, align 8
  %arrayidx242 = getelementptr inbounds i16, i16* %163, i64 0
  store i16 %conv241, i16* %arrayidx242, align 2
  %164 = load i16*, i16** %pixel, align 8
  %arrayidx243 = getelementptr inbounds i16, i16* %164, i64 1
  %165 = load i16, i16* %arrayidx243, align 2
  %conv244 = zext i16 %165 to i32
  %conv245 = sitofp i32 %conv244 to float
  %166 = load float, float* %ra, align 4
  %mul246 = fmul float %conv245, %166
  %167 = load float, float* %inv_a, align 4
  %add247 = fadd float %mul246, %167
  %conv248 = fptoui float %add247 to i16
  %168 = load i16*, i16** %pixel, align 8
  %arrayidx249 = getelementptr inbounds i16, i16* %168, i64 1
  store i16 %conv248, i16* %arrayidx249, align 2
  %169 = load i16*, i16** %pixel, align 8
  %arrayidx250 = getelementptr inbounds i16, i16* %169, i64 2
  %170 = load i16, i16* %arrayidx250, align 2
  %conv251 = zext i16 %170 to i32
  %conv252 = sitofp i32 %conv251 to float
  %171 = load float, float* %ra, align 4
  %mul253 = fmul float %conv252, %171
  %172 = load float, float* %inv_a, align 4
  %add254 = fadd float %mul253, %172
  %conv255 = fptoui float %add254 to i16
  %173 = load i16*, i16** %pixel, align 8
  %arrayidx256 = getelementptr inbounds i16, i16* %173, i64 2
  store i16 %conv255, i16* %arrayidx256, align 2
  br label %if.end257

if.end257:                                        ; preds = %if.then231, %land.lhs.true226, %for.body219
  br label %for.inc258

for.inc258:                                       ; preds = %if.end257
  %174 = load i32, i32* %i, align 4
  %inc259 = add nsw i32 %174, 1
  store i32 %inc259, i32* %i, align 4
  br label %for.cond215

for.end260:                                       ; preds = %for.cond215
  br label %if.end316

if.else261:                                       ; preds = %if.then210
  store i32 0, i32* %i, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc313, %if.else261
  %175 = load i32, i32* %i, align 4
  %176 = load i32, i32* %w, align 4
  %177 = load i32, i32* %h, align 4
  %mul263 = mul nsw i32 %176, %177
  %cmp264 = icmp slt i32 %175, %mul263
  br i1 %cmp264, label %for.body266, label %for.end315

for.body266:                                      ; preds = %for.cond262
  %178 = load i8*, i8** %out, align 8
  %179 = load i32, i32* %i, align 4
  %mul268 = mul nsw i32 4, %179
  %idx.ext269 = sext i32 %mul268 to i64
  %add.ptr270 = getelementptr inbounds i8, i8* %178, i64 %idx.ext269
  store i8* %add.ptr270, i8** %pixel267, align 8
  %180 = load i8*, i8** %pixel267, align 8
  %arrayidx271 = getelementptr inbounds i8, i8* %180, i64 3
  %181 = load i8, i8* %arrayidx271, align 1
  %conv272 = zext i8 %181 to i32
  %cmp273 = icmp ne i32 %conv272, 0
  br i1 %cmp273, label %land.lhs.true275, label %if.end312

land.lhs.true275:                                 ; preds = %for.body266
  %182 = load i8*, i8** %pixel267, align 8
  %arrayidx276 = getelementptr inbounds i8, i8* %182, i64 3
  %183 = load i8, i8* %arrayidx276, align 1
  %conv277 = zext i8 %183 to i32
  %cmp278 = icmp ne i32 %conv277, 255
  br i1 %cmp278, label %if.then280, label %if.end312

if.then280:                                       ; preds = %land.lhs.true275
  %184 = load i8*, i8** %pixel267, align 8
  %arrayidx282 = getelementptr inbounds i8, i8* %184, i64 3
  %185 = load i8, i8* %arrayidx282, align 1
  %conv283 = zext i8 %185 to i32
  %conv284 = sitofp i32 %conv283 to float
  %div285 = fdiv float %conv284, 2.550000e+02
  store float %div285, float* %a281, align 4
  %186 = load float, float* %a281, align 4
  %div287 = fdiv float 1.000000e+00, %186
  store float %div287, float* %ra286, align 4
  %187 = load float, float* %ra286, align 4
  %sub289 = fsub float 1.000000e+00, %187
  %mul290 = fmul float 2.550000e+02, %sub289
  store float %mul290, float* %inv_a288, align 4
  %188 = load i8*, i8** %pixel267, align 8
  %arrayidx291 = getelementptr inbounds i8, i8* %188, i64 0
  %189 = load i8, i8* %arrayidx291, align 1
  %conv292 = zext i8 %189 to i32
  %conv293 = sitofp i32 %conv292 to float
  %190 = load float, float* %ra286, align 4
  %mul294 = fmul float %conv293, %190
  %191 = load float, float* %inv_a288, align 4
  %add295 = fadd float %mul294, %191
  %conv296 = fptoui float %add295 to i8
  %192 = load i8*, i8** %pixel267, align 8
  %arrayidx297 = getelementptr inbounds i8, i8* %192, i64 0
  store i8 %conv296, i8* %arrayidx297, align 1
  %193 = load i8*, i8** %pixel267, align 8
  %arrayidx298 = getelementptr inbounds i8, i8* %193, i64 1
  %194 = load i8, i8* %arrayidx298, align 1
  %conv299 = zext i8 %194 to i32
  %conv300 = sitofp i32 %conv299 to float
  %195 = load float, float* %ra286, align 4
  %mul301 = fmul float %conv300, %195
  %196 = load float, float* %inv_a288, align 4
  %add302 = fadd float %mul301, %196
  %conv303 = fptoui float %add302 to i8
  %197 = load i8*, i8** %pixel267, align 8
  %arrayidx304 = getelementptr inbounds i8, i8* %197, i64 1
  store i8 %conv303, i8* %arrayidx304, align 1
  %198 = load i8*, i8** %pixel267, align 8
  %arrayidx305 = getelementptr inbounds i8, i8* %198, i64 2
  %199 = load i8, i8* %arrayidx305, align 1
  %conv306 = zext i8 %199 to i32
  %conv307 = sitofp i32 %conv306 to float
  %200 = load float, float* %ra286, align 4
  %mul308 = fmul float %conv307, %200
  %201 = load float, float* %inv_a288, align 4
  %add309 = fadd float %mul308, %201
  %conv310 = fptoui float %add309 to i8
  %202 = load i8*, i8** %pixel267, align 8
  %arrayidx311 = getelementptr inbounds i8, i8* %202, i64 2
  store i8 %conv310, i8* %arrayidx311, align 1
  br label %if.end312

if.end312:                                        ; preds = %if.then280, %land.lhs.true275, %for.body266
  br label %for.inc313

for.inc313:                                       ; preds = %if.end312
  %203 = load i32, i32* %i, align 4
  %inc314 = add nsw i32 %203, 1
  store i32 %inc314, i32* %i, align 4
  br label %for.cond262

for.end315:                                       ; preds = %for.cond262
  br label %if.end316

if.end316:                                        ; preds = %for.end315, %for.end260
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %if.end207
  %204 = load i32, i32* %req_comp.addr, align 4
  %tobool318 = icmp ne i32 %204, 0
  br i1 %tobool318, label %land.lhs.true319, label %if.end335

land.lhs.true319:                                 ; preds = %if.end317
  %205 = load i32, i32* %req_comp.addr, align 4
  %cmp320 = icmp ne i32 %205, 4
  br i1 %cmp320, label %if.then322, label %if.end335

if.then322:                                       ; preds = %land.lhs.true319
  %206 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %bits_per_channel323 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %206, i32 0, i32 0
  %207 = load i32, i32* %bits_per_channel323, align 4
  %cmp324 = icmp eq i32 %207, 16
  br i1 %cmp324, label %if.then326, label %if.else328

if.then326:                                       ; preds = %if.then322
  %208 = load i8*, i8** %out, align 8
  %209 = bitcast i8* %208 to i16*
  %210 = load i32, i32* %req_comp.addr, align 4
  %211 = load i32, i32* %w, align 4
  %212 = load i32, i32* %h, align 4
  %call327 = call i16* @stbi__convert_format16(i16* %209, i32 4, i32 %210, i32 %211, i32 %212)
  %213 = bitcast i16* %call327 to i8*
  store i8* %213, i8** %out, align 8
  br label %if.end330

if.else328:                                       ; preds = %if.then322
  %214 = load i8*, i8** %out, align 8
  %215 = load i32, i32* %req_comp.addr, align 4
  %216 = load i32, i32* %w, align 4
  %217 = load i32, i32* %h, align 4
  %call329 = call i8* @stbi__convert_format(i8* %214, i32 4, i32 %215, i32 %216, i32 %217)
  store i8* %call329, i8** %out, align 8
  br label %if.end330

if.end330:                                        ; preds = %if.else328, %if.then326
  %218 = load i8*, i8** %out, align 8
  %cmp331 = icmp eq i8* %218, null
  br i1 %cmp331, label %if.then333, label %if.end334

if.then333:                                       ; preds = %if.end330
  %219 = load i8*, i8** %out, align 8
  store i8* %219, i8** %retval, align 8
  br label %return

if.end334:                                        ; preds = %if.end330
  br label %if.end335

if.end335:                                        ; preds = %if.end334, %land.lhs.true319, %if.end317
  %220 = load i32*, i32** %comp.addr, align 8
  %tobool336 = icmp ne i32* %220, null
  br i1 %tobool336, label %if.then337, label %if.end338

if.then337:                                       ; preds = %if.end335
  %221 = load i32*, i32** %comp.addr, align 8
  store i32 4, i32* %221, align 4
  br label %if.end338

if.end338:                                        ; preds = %if.then337, %if.end335
  %222 = load i32, i32* %h, align 4
  %223 = load i32*, i32** %y.addr, align 8
  store i32 %222, i32* %223, align 4
  %224 = load i32, i32* %w, align 4
  %225 = load i32*, i32** %x.addr, align 8
  store i32 %224, i32* %225, align 4
  %226 = load i8*, i8** %out, align 8
  store i8* %226, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end338, %if.then333, %if.then101, %if.then74, %if.then58, %if.then51, %if.then41, %if.then34, %if.then26, %if.then20, %if.then12, %if.then4, %if.then
  %227 = load i8*, i8** %retval, align 8
  ret i8* %227
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__pic_test(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %r = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__pic_test_core(%struct.stbi__context* %0)
  store i32 %call, i32* %r, align 4
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %1)
  %2 = load i32, i32* %r, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__pic_load(%struct.stbi__context* %s, i32* %px, i32* %py, i32* %comp, i32 %req_comp, %struct.stbi__result_info* %ri) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %px.addr = alloca i32*, align 8
  %py.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %result = alloca i8*, align 8
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %internal_comp = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %px, i32** %px.addr, align 8
  store i32* %py, i32** %py.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  %0 = load i32*, i32** %comp.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32* %internal_comp, i32** %comp.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 92
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call i32 @stbi__get16be(%struct.stbi__context* %4)
  store i32 %call1, i32* %x, align 4
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call2 = call i32 @stbi__get16be(%struct.stbi__context* %5)
  store i32 %call2, i32* %y, align 4
  %6 = load i32, i32* %y, align 4
  %cmp3 = icmp sgt i32 %6, 16777216
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %for.end
  %call5 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool6 = icmp ne i32 %call5, 0
  %7 = zext i1 %tobool6 to i64
  %cond = select i1 %tobool6, i8* null, i8* null
  %8 = ptrtoint i8* %cond to i64
  %9 = inttoptr i64 %8 to i8*
  store i8* %9, i8** %retval, align 8
  br label %return

if.end7:                                          ; preds = %for.end
  %10 = load i32, i32* %x, align 4
  %cmp8 = icmp sgt i32 %10, 16777216
  br i1 %cmp8, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.end7
  %call10 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool11 = icmp ne i32 %call10, 0
  %11 = zext i1 %tobool11 to i64
  %cond12 = select i1 %tobool11, i8* null, i8* null
  %12 = ptrtoint i8* %cond12 to i64
  %13 = inttoptr i64 %12 to i8*
  store i8* %13, i8** %retval, align 8
  br label %return

if.end13:                                         ; preds = %if.end7
  %14 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call14 = call i32 @stbi__at_eof(%struct.stbi__context* %14)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.end20

if.then16:                                        ; preds = %if.end13
  %call17 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.122, i64 0, i64 0))
  %tobool18 = icmp ne i32 %call17, 0
  %15 = zext i1 %tobool18 to i64
  %cond19 = select i1 %tobool18, i8* null, i8* null
  %16 = ptrtoint i8* %cond19 to i64
  %17 = inttoptr i64 %16 to i8*
  store i8* %17, i8** %retval, align 8
  br label %return

if.end20:                                         ; preds = %if.end13
  %18 = load i32, i32* %x, align 4
  %19 = load i32, i32* %y, align 4
  %call21 = call i32 @stbi__mad3sizes_valid(i32 %18, i32 %19, i32 4, i32 0)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %call24 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool25 = icmp ne i32 %call24, 0
  %20 = zext i1 %tobool25 to i64
  %cond26 = select i1 %tobool25, i8* null, i8* null
  %21 = ptrtoint i8* %cond26 to i64
  %22 = inttoptr i64 %21 to i8*
  store i8* %22, i8** %retval, align 8
  br label %return

if.end27:                                         ; preds = %if.end20
  %23 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call28 = call i32 @stbi__get32be(%struct.stbi__context* %23)
  %24 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call29 = call i32 @stbi__get16be(%struct.stbi__context* %24)
  %25 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call30 = call i32 @stbi__get16be(%struct.stbi__context* %25)
  %26 = load i32, i32* %x, align 4
  %27 = load i32, i32* %y, align 4
  %call31 = call i8* @stbi__malloc_mad3(i32 %26, i32 %27, i32 4, i32 0)
  store i8* %call31, i8** %result, align 8
  %28 = load i8*, i8** %result, align 8
  %29 = load i32, i32* %x, align 4
  %30 = load i32, i32* %y, align 4
  %mul = mul nsw i32 %29, %30
  %mul32 = mul nsw i32 %mul, 4
  %conv = sext i32 %mul32 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 -1, i64 %conv, i1 false)
  %31 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %32 = load i32, i32* %x, align 4
  %33 = load i32, i32* %y, align 4
  %34 = load i32*, i32** %comp.addr, align 8
  %35 = load i8*, i8** %result, align 8
  %call33 = call i8* @stbi__pic_load_core(%struct.stbi__context* %31, i32 %32, i32 %33, i32* %34, i8* %35)
  %tobool34 = icmp ne i8* %call33, null
  br i1 %tobool34, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.end27
  %36 = load i8*, i8** %result, align 8
  call void @free(i8* %36) #10
  store i8* null, i8** %result, align 8
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.end27
  %37 = load i32, i32* %x, align 4
  %38 = load i32*, i32** %px.addr, align 8
  store i32 %37, i32* %38, align 4
  %39 = load i32, i32* %y, align 4
  %40 = load i32*, i32** %py.addr, align 8
  store i32 %39, i32* %40, align 4
  %41 = load i32, i32* %req_comp.addr, align 4
  %cmp37 = icmp eq i32 %41, 0
  br i1 %cmp37, label %if.then39, label %if.end40

if.then39:                                        ; preds = %if.end36
  %42 = load i32*, i32** %comp.addr, align 8
  %43 = load i32, i32* %42, align 4
  store i32 %43, i32* %req_comp.addr, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %if.end36
  %44 = load i8*, i8** %result, align 8
  %45 = load i32, i32* %req_comp.addr, align 4
  %46 = load i32, i32* %x, align 4
  %47 = load i32, i32* %y, align 4
  %call41 = call i8* @stbi__convert_format(i8* %44, i32 4, i32 %45, i32 %46, i32 %47)
  store i8* %call41, i8** %result, align 8
  %48 = load i8*, i8** %result, align 8
  store i8* %48, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end40, %if.then23, %if.then16, %if.then9, %if.then4
  %49 = load i8*, i8** %retval, align 8
  ret i8* %49
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__pnm_test(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %p = alloca i8, align 1
  %t = alloca i8, align 1
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  store i8 %call, i8* %p, align 1
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call zeroext i8 @stbi__get8(%struct.stbi__context* %1)
  store i8 %call1, i8* %t, align 1
  %2 = load i8, i8* %p, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 80
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8, i8* %t, align 1
  %conv3 = sext i8 %3 to i32
  %cmp4 = icmp ne i32 %conv3, 53
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load i8, i8* %t, align 1
  %conv6 = sext i8 %4 to i32
  %cmp7 = icmp ne i32 %conv6, 54
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %5)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__pnm_load(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp, %struct.stbi__result_info* %ri) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %out = alloca i8*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %1, i32 0, i32 0
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 1
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %3, i32 0, i32 2
  %call = call i32 @stbi__pnm_info(%struct.stbi__context* %0, i32* %img_x, i32* %img_y, i32* %img_n)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y1 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 1
  %5 = load i32, i32* %img_y1, align 4
  %cmp = icmp ugt i32 %5, 16777216
  br i1 %cmp, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %call3 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool4 = icmp ne i32 %call3, 0
  %6 = zext i1 %tobool4 to i64
  %cond = select i1 %tobool4, i8* null, i8* null
  %7 = ptrtoint i8* %cond to i64
  %8 = inttoptr i64 %7 to i8*
  store i8* %8, i8** %retval, align 8
  br label %return

if.end5:                                          ; preds = %if.end
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x6 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %9, i32 0, i32 0
  %10 = load i32, i32* %img_x6, align 8
  %cmp7 = icmp ugt i32 %10, 16777216
  br i1 %cmp7, label %if.then8, label %if.end12

if.then8:                                         ; preds = %if.end5
  %call9 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool10 = icmp ne i32 %call9, 0
  %11 = zext i1 %tobool10 to i64
  %cond11 = select i1 %tobool10, i8* null, i8* null
  %12 = ptrtoint i8* %cond11 to i64
  %13 = inttoptr i64 %12 to i8*
  store i8* %13, i8** %retval, align 8
  br label %return

if.end12:                                         ; preds = %if.end5
  %14 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x13 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %14, i32 0, i32 0
  %15 = load i32, i32* %img_x13, align 8
  %16 = load i32*, i32** %x.addr, align 8
  store i32 %15, i32* %16, align 4
  %17 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y14 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %17, i32 0, i32 1
  %18 = load i32, i32* %img_y14, align 4
  %19 = load i32*, i32** %y.addr, align 8
  store i32 %18, i32* %19, align 4
  %20 = load i32*, i32** %comp.addr, align 8
  %tobool15 = icmp ne i32* %20, null
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end12
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n17 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %21, i32 0, i32 2
  %22 = load i32, i32* %img_n17, align 8
  %23 = load i32*, i32** %comp.addr, align 8
  store i32 %22, i32* %23, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end12
  %24 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n19 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %24, i32 0, i32 2
  %25 = load i32, i32* %img_n19, align 8
  %26 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x20 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %26, i32 0, i32 0
  %27 = load i32, i32* %img_x20, align 8
  %28 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y21 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %28, i32 0, i32 1
  %29 = load i32, i32* %img_y21, align 4
  %call22 = call i32 @stbi__mad3sizes_valid(i32 %25, i32 %27, i32 %29, i32 0)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end28, label %if.then24

if.then24:                                        ; preds = %if.end18
  %call25 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool26 = icmp ne i32 %call25, 0
  %30 = zext i1 %tobool26 to i64
  %cond27 = select i1 %tobool26, i8* null, i8* null
  %31 = ptrtoint i8* %cond27 to i64
  %32 = inttoptr i64 %31 to i8*
  store i8* %32, i8** %retval, align 8
  br label %return

if.end28:                                         ; preds = %if.end18
  %33 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n29 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %33, i32 0, i32 2
  %34 = load i32, i32* %img_n29, align 8
  %35 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x30 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %35, i32 0, i32 0
  %36 = load i32, i32* %img_x30, align 8
  %37 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y31 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %37, i32 0, i32 1
  %38 = load i32, i32* %img_y31, align 4
  %call32 = call i8* @stbi__malloc_mad3(i32 %34, i32 %36, i32 %38, i32 0)
  store i8* %call32, i8** %out, align 8
  %39 = load i8*, i8** %out, align 8
  %tobool33 = icmp ne i8* %39, null
  br i1 %tobool33, label %if.end38, label %if.then34

if.then34:                                        ; preds = %if.end28
  %call35 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool36 = icmp ne i32 %call35, 0
  %40 = zext i1 %tobool36 to i64
  %cond37 = select i1 %tobool36, i8* null, i8* null
  %41 = ptrtoint i8* %cond37 to i64
  %42 = inttoptr i64 %41 to i8*
  store i8* %42, i8** %retval, align 8
  br label %return

if.end38:                                         ; preds = %if.end28
  %43 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %44 = load i8*, i8** %out, align 8
  %45 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n39 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %45, i32 0, i32 2
  %46 = load i32, i32* %img_n39, align 8
  %47 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x40 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %47, i32 0, i32 0
  %48 = load i32, i32* %img_x40, align 8
  %mul = mul i32 %46, %48
  %49 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y41 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %49, i32 0, i32 1
  %50 = load i32, i32* %img_y41, align 4
  %mul42 = mul i32 %mul, %50
  %call43 = call i32 @stbi__getn(%struct.stbi__context* %43, i8* %44, i32 %mul42)
  %51 = load i32, i32* %req_comp.addr, align 4
  %tobool44 = icmp ne i32 %51, 0
  br i1 %tobool44, label %land.lhs.true, label %if.end55

land.lhs.true:                                    ; preds = %if.end38
  %52 = load i32, i32* %req_comp.addr, align 4
  %53 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n45 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %53, i32 0, i32 2
  %54 = load i32, i32* %img_n45, align 8
  %cmp46 = icmp ne i32 %52, %54
  br i1 %cmp46, label %if.then47, label %if.end55

if.then47:                                        ; preds = %land.lhs.true
  %55 = load i8*, i8** %out, align 8
  %56 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_n48 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %56, i32 0, i32 2
  %57 = load i32, i32* %img_n48, align 8
  %58 = load i32, i32* %req_comp.addr, align 4
  %59 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x49 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %59, i32 0, i32 0
  %60 = load i32, i32* %img_x49, align 8
  %61 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y50 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %61, i32 0, i32 1
  %62 = load i32, i32* %img_y50, align 4
  %call51 = call i8* @stbi__convert_format(i8* %55, i32 %57, i32 %58, i32 %60, i32 %62)
  store i8* %call51, i8** %out, align 8
  %63 = load i8*, i8** %out, align 8
  %cmp52 = icmp eq i8* %63, null
  br i1 %cmp52, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.then47
  %64 = load i8*, i8** %out, align 8
  store i8* %64, i8** %retval, align 8
  br label %return

if.end54:                                         ; preds = %if.then47
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %land.lhs.true, %if.end38
  %65 = load i8*, i8** %out, align 8
  store i8* %65, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end55, %if.then53, %if.then34, %if.then24, %if.then8, %if.then2, %if.then
  %66 = load i8*, i8** %retval, align 8
  ret i8* %66
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__hdr_test(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %r = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__hdr_test_core(%struct.stbi__context* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.145, i64 0, i64 0))
  store i32 %call, i32* %r, align 4
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %1)
  %2 = load i32, i32* %r, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call i32 @stbi__hdr_test_core(%struct.stbi__context* %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.146, i64 0, i64 0))
  store i32 %call1, i32* %r, align 4
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %r, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define internal float* @stbi__hdr_load(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp, %struct.stbi__result_info* %ri) #0 {
entry:
  %retval = alloca float*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %buffer = alloca [1024 x i8], align 16
  %token = alloca i8*, align 8
  %valid = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %scanline = alloca i8*, align 8
  %hdr_data = alloca float*, align 8
  %len = alloca i32, align 4
  %count = alloca i8, align 1
  %value = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %z = alloca i32, align 4
  %headerToken = alloca i8*, align 8
  %rgbe = alloca [4 x i8], align 1
  %rgbe123 = alloca [4 x i8], align 1
  %nleft = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  store i32 0, i32* %valid, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buffer, i64 0, i64 0
  %call = call i8* @stbi__hdr_gettoken(%struct.stbi__context* %0, i8* %arraydecay)
  store i8* %call, i8** %headerToken, align 8
  %1 = load i8*, i8** %headerToken, align 8
  %call1 = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.125, i64 0, i64 0)) #12
  %cmp = icmp ne i32 %call1, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %headerToken, align 8
  %call2 = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.126, i64 0, i64 0)) #12
  %cmp3 = icmp ne i32 %call2, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %call4 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.127, i64 0, i64 0))
  %tobool = icmp ne i32 %call4, 0
  %3 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %4 = ptrtoint i8* %cond to i64
  %5 = inttoptr i64 %4 to float*
  store float* %5, float** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %if.end
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %arraydecay5 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buffer, i64 0, i64 0
  %call6 = call i8* @stbi__hdr_gettoken(%struct.stbi__context* %6, i8* %arraydecay5)
  store i8* %call6, i8** %token, align 8
  %7 = load i8*, i8** %token, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %8 to i32
  %cmp7 = icmp eq i32 %conv, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.cond
  br label %for.end

if.end10:                                         ; preds = %for.cond
  %9 = load i8*, i8** %token, align 8
  %call11 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.128, i64 0, i64 0)) #12
  %cmp12 = icmp eq i32 %call11, 0
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end10
  store i32 1, i32* %valid, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.end10
  br label %for.cond

for.end:                                          ; preds = %if.then9
  %10 = load i32, i32* %valid, align 4
  %tobool16 = icmp ne i32 %10, 0
  br i1 %tobool16, label %if.end21, label %if.then17

if.then17:                                        ; preds = %for.end
  %call18 = call i32 @stbi__err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.129, i64 0, i64 0))
  %tobool19 = icmp ne i32 %call18, 0
  %11 = zext i1 %tobool19 to i64
  %cond20 = select i1 %tobool19, i8* null, i8* null
  %12 = ptrtoint i8* %cond20 to i64
  %13 = inttoptr i64 %12 to float*
  store float* %13, float** %retval, align 8
  br label %return

if.end21:                                         ; preds = %for.end
  %14 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %arraydecay22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buffer, i64 0, i64 0
  %call23 = call i8* @stbi__hdr_gettoken(%struct.stbi__context* %14, i8* %arraydecay22)
  store i8* %call23, i8** %token, align 8
  %15 = load i8*, i8** %token, align 8
  %call24 = call i32 @strncmp(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i64 0, i64 0), i64 3) #12
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.then26, label %if.end30

if.then26:                                        ; preds = %if.end21
  %call27 = call i32 @stbi__err(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.131, i64 0, i64 0))
  %tobool28 = icmp ne i32 %call27, 0
  %16 = zext i1 %tobool28 to i64
  %cond29 = select i1 %tobool28, i8* null, i8* null
  %17 = ptrtoint i8* %cond29 to i64
  %18 = inttoptr i64 %17 to float*
  store float* %18, float** %retval, align 8
  br label %return

if.end30:                                         ; preds = %if.end21
  %19 = load i8*, i8** %token, align 8
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 3
  store i8* %add.ptr, i8** %token, align 8
  %20 = load i8*, i8** %token, align 8
  %call31 = call i64 @strtol(i8* %20, i8** %token, i32 10) #10
  %conv32 = trunc i64 %call31 to i32
  store i32 %conv32, i32* %height, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end30
  %21 = load i8*, i8** %token, align 8
  %22 = load i8, i8* %21, align 1
  %conv33 = sext i8 %22 to i32
  %cmp34 = icmp eq i32 %conv33, 32
  br i1 %cmp34, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %23 = load i8*, i8** %token, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr, i8** %token, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load i8*, i8** %token, align 8
  %call36 = call i32 @strncmp(i8* %24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.132, i64 0, i64 0), i64 3) #12
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end42

if.then38:                                        ; preds = %while.end
  %call39 = call i32 @stbi__err(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.131, i64 0, i64 0))
  %tobool40 = icmp ne i32 %call39, 0
  %25 = zext i1 %tobool40 to i64
  %cond41 = select i1 %tobool40, i8* null, i8* null
  %26 = ptrtoint i8* %cond41 to i64
  %27 = inttoptr i64 %26 to float*
  store float* %27, float** %retval, align 8
  br label %return

if.end42:                                         ; preds = %while.end
  %28 = load i8*, i8** %token, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %28, i64 3
  store i8* %add.ptr43, i8** %token, align 8
  %29 = load i8*, i8** %token, align 8
  %call44 = call i64 @strtol(i8* %29, i8** null, i32 10) #10
  %conv45 = trunc i64 %call44 to i32
  store i32 %conv45, i32* %width, align 4
  %30 = load i32, i32* %height, align 4
  %cmp46 = icmp sgt i32 %30, 16777216
  br i1 %cmp46, label %if.then48, label %if.end52

if.then48:                                        ; preds = %if.end42
  %call49 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool50 = icmp ne i32 %call49, 0
  %31 = zext i1 %tobool50 to i64
  %cond51 = select i1 %tobool50, i8* null, i8* null
  %32 = ptrtoint i8* %cond51 to i64
  %33 = inttoptr i64 %32 to float*
  store float* %33, float** %retval, align 8
  br label %return

if.end52:                                         ; preds = %if.end42
  %34 = load i32, i32* %width, align 4
  %cmp53 = icmp sgt i32 %34, 16777216
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end52
  %call56 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool57 = icmp ne i32 %call56, 0
  %35 = zext i1 %tobool57 to i64
  %cond58 = select i1 %tobool57, i8* null, i8* null
  %36 = ptrtoint i8* %cond58 to i64
  %37 = inttoptr i64 %36 to float*
  store float* %37, float** %retval, align 8
  br label %return

if.end59:                                         ; preds = %if.end52
  %38 = load i32, i32* %width, align 4
  %39 = load i32*, i32** %x.addr, align 8
  store i32 %38, i32* %39, align 4
  %40 = load i32, i32* %height, align 4
  %41 = load i32*, i32** %y.addr, align 8
  store i32 %40, i32* %41, align 4
  %42 = load i32*, i32** %comp.addr, align 8
  %tobool60 = icmp ne i32* %42, null
  br i1 %tobool60, label %if.then61, label %if.end62

if.then61:                                        ; preds = %if.end59
  %43 = load i32*, i32** %comp.addr, align 8
  store i32 3, i32* %43, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then61, %if.end59
  %44 = load i32, i32* %req_comp.addr, align 4
  %cmp63 = icmp eq i32 %44, 0
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %if.end62
  store i32 3, i32* %req_comp.addr, align 4
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %if.end62
  %45 = load i32, i32* %width, align 4
  %46 = load i32, i32* %height, align 4
  %47 = load i32, i32* %req_comp.addr, align 4
  %call67 = call i32 @stbi__mad4sizes_valid(i32 %45, i32 %46, i32 %47, i32 4, i32 0)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end73, label %if.then69

if.then69:                                        ; preds = %if.end66
  %call70 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool71 = icmp ne i32 %call70, 0
  %48 = zext i1 %tobool71 to i64
  %cond72 = select i1 %tobool71, i8* null, i8* null
  %49 = ptrtoint i8* %cond72 to i64
  %50 = inttoptr i64 %49 to float*
  store float* %50, float** %retval, align 8
  br label %return

if.end73:                                         ; preds = %if.end66
  %51 = load i32, i32* %width, align 4
  %52 = load i32, i32* %height, align 4
  %53 = load i32, i32* %req_comp.addr, align 4
  %call74 = call i8* @stbi__malloc_mad4(i32 %51, i32 %52, i32 %53, i32 4, i32 0)
  %54 = bitcast i8* %call74 to float*
  store float* %54, float** %hdr_data, align 8
  %55 = load float*, float** %hdr_data, align 8
  %tobool75 = icmp ne float* %55, null
  br i1 %tobool75, label %if.end80, label %if.then76

if.then76:                                        ; preds = %if.end73
  %call77 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool78 = icmp ne i32 %call77, 0
  %56 = zext i1 %tobool78 to i64
  %cond79 = select i1 %tobool78, i8* null, i8* null
  %57 = ptrtoint i8* %cond79 to i64
  %58 = inttoptr i64 %57 to float*
  store float* %58, float** %retval, align 8
  br label %return

if.end80:                                         ; preds = %if.end73
  %59 = load i32, i32* %width, align 4
  %cmp81 = icmp slt i32 %59, 8
  br i1 %cmp81, label %if.then85, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end80
  %60 = load i32, i32* %width, align 4
  %cmp83 = icmp sge i32 %60, 32768
  br i1 %cmp83, label %if.then85, label %if.else

if.then85:                                        ; preds = %lor.lhs.false, %if.end80
  store i32 0, i32* %j, align 4
  br label %for.cond86

for.cond86:                                       ; preds = %for.inc102, %if.then85
  %61 = load i32, i32* %j, align 4
  %62 = load i32, i32* %height, align 4
  %cmp87 = icmp slt i32 %61, %62
  br i1 %cmp87, label %for.body, label %for.end104

for.body:                                         ; preds = %for.cond86
  store i32 0, i32* %i, align 4
  br label %for.cond89

for.cond89:                                       ; preds = %for.inc, %for.body
  %63 = load i32, i32* %i, align 4
  %64 = load i32, i32* %width, align 4
  %cmp90 = icmp slt i32 %63, %64
  br i1 %cmp90, label %for.body92, label %for.end101

for.body92:                                       ; preds = %for.cond89
  br label %main_decode_loop

main_decode_loop:                                 ; preds = %if.then122, %for.body92
  %65 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %arraydecay93 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe, i64 0, i64 0
  %call94 = call i32 @stbi__getn(%struct.stbi__context* %65, i8* %arraydecay93, i32 4)
  %66 = load float*, float** %hdr_data, align 8
  %67 = load i32, i32* %j, align 4
  %68 = load i32, i32* %width, align 4
  %mul = mul nsw i32 %67, %68
  %69 = load i32, i32* %req_comp.addr, align 4
  %mul95 = mul nsw i32 %mul, %69
  %idx.ext = sext i32 %mul95 to i64
  %add.ptr96 = getelementptr inbounds float, float* %66, i64 %idx.ext
  %70 = load i32, i32* %i, align 4
  %71 = load i32, i32* %req_comp.addr, align 4
  %mul97 = mul nsw i32 %70, %71
  %idx.ext98 = sext i32 %mul97 to i64
  %add.ptr99 = getelementptr inbounds float, float* %add.ptr96, i64 %idx.ext98
  %arraydecay100 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe, i64 0, i64 0
  %72 = load i32, i32* %req_comp.addr, align 4
  call void @stbi__hdr_convert(float* %add.ptr99, i8* %arraydecay100, i32 %72)
  br label %for.inc

for.inc:                                          ; preds = %main_decode_loop
  %73 = load i32, i32* %i, align 4
  %inc = add nsw i32 %73, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond89

for.end101:                                       ; preds = %for.cond89
  br label %for.inc102

for.inc102:                                       ; preds = %for.end101
  %74 = load i32, i32* %j, align 4
  %inc103 = add nsw i32 %74, 1
  store i32 %inc103, i32* %j, align 4
  br label %for.cond86

for.end104:                                       ; preds = %for.cond86
  br label %if.end239

if.else:                                          ; preds = %lor.lhs.false
  store i8* null, i8** %scanline, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond105

for.cond105:                                      ; preds = %for.inc233, %if.else
  %75 = load i32, i32* %j, align 4
  %76 = load i32, i32* %height, align 4
  %cmp106 = icmp slt i32 %75, %76
  br i1 %cmp106, label %for.body108, label %for.end235

for.body108:                                      ; preds = %for.cond105
  %77 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call109 = call zeroext i8 @stbi__get8(%struct.stbi__context* %77)
  %conv110 = zext i8 %call109 to i32
  store i32 %conv110, i32* %c1, align 4
  %78 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call111 = call zeroext i8 @stbi__get8(%struct.stbi__context* %78)
  %conv112 = zext i8 %call111 to i32
  store i32 %conv112, i32* %c2, align 4
  %79 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call113 = call zeroext i8 @stbi__get8(%struct.stbi__context* %79)
  %conv114 = zext i8 %call113 to i32
  store i32 %conv114, i32* %len, align 4
  %80 = load i32, i32* %c1, align 4
  %cmp115 = icmp ne i32 %80, 2
  br i1 %cmp115, label %if.then122, label %lor.lhs.false117

lor.lhs.false117:                                 ; preds = %for.body108
  %81 = load i32, i32* %c2, align 4
  %cmp118 = icmp ne i32 %81, 2
  br i1 %cmp118, label %if.then122, label %lor.lhs.false120

lor.lhs.false120:                                 ; preds = %lor.lhs.false117
  %82 = load i32, i32* %len, align 4
  %and = and i32 %82, 128
  %tobool121 = icmp ne i32 %and, 0
  br i1 %tobool121, label %if.then122, label %if.end133

if.then122:                                       ; preds = %lor.lhs.false120, %lor.lhs.false117, %for.body108
  %83 = load i32, i32* %c1, align 4
  %conv124 = trunc i32 %83 to i8
  %arrayidx125 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe123, i64 0, i64 0
  store i8 %conv124, i8* %arrayidx125, align 1
  %84 = load i32, i32* %c2, align 4
  %conv126 = trunc i32 %84 to i8
  %arrayidx127 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe123, i64 0, i64 1
  store i8 %conv126, i8* %arrayidx127, align 1
  %85 = load i32, i32* %len, align 4
  %conv128 = trunc i32 %85 to i8
  %arrayidx129 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe123, i64 0, i64 2
  store i8 %conv128, i8* %arrayidx129, align 1
  %86 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call130 = call zeroext i8 @stbi__get8(%struct.stbi__context* %86)
  %arrayidx131 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe123, i64 0, i64 3
  store i8 %call130, i8* %arrayidx131, align 1
  %87 = load float*, float** %hdr_data, align 8
  %arraydecay132 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe123, i64 0, i64 0
  %88 = load i32, i32* %req_comp.addr, align 4
  call void @stbi__hdr_convert(float* %87, i8* %arraydecay132, i32 %88)
  store i32 1, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %89 = load i8*, i8** %scanline, align 8
  call void @free(i8* %89) #10
  br label %main_decode_loop

if.end133:                                        ; preds = %lor.lhs.false120
  %90 = load i32, i32* %len, align 4
  %shl = shl i32 %90, 8
  store i32 %shl, i32* %len, align 4
  %91 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call134 = call zeroext i8 @stbi__get8(%struct.stbi__context* %91)
  %conv135 = zext i8 %call134 to i32
  %92 = load i32, i32* %len, align 4
  %or = or i32 %92, %conv135
  store i32 %or, i32* %len, align 4
  %93 = load i32, i32* %len, align 4
  %94 = load i32, i32* %width, align 4
  %cmp136 = icmp ne i32 %93, %94
  br i1 %cmp136, label %if.then138, label %if.end142

if.then138:                                       ; preds = %if.end133
  %95 = load float*, float** %hdr_data, align 8
  %96 = bitcast float* %95 to i8*
  call void @free(i8* %96) #10
  %97 = load i8*, i8** %scanline, align 8
  call void @free(i8* %97) #10
  %call139 = call i32 @stbi__err(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.133, i64 0, i64 0))
  %tobool140 = icmp ne i32 %call139, 0
  %98 = zext i1 %tobool140 to i64
  %cond141 = select i1 %tobool140, i8* null, i8* null
  %99 = ptrtoint i8* %cond141 to i64
  %100 = inttoptr i64 %99 to float*
  store float* %100, float** %retval, align 8
  br label %return

if.end142:                                        ; preds = %if.end133
  %101 = load i8*, i8** %scanline, align 8
  %cmp143 = icmp eq i8* %101, null
  br i1 %cmp143, label %if.then145, label %if.end153

if.then145:                                       ; preds = %if.end142
  %102 = load i32, i32* %width, align 4
  %call146 = call i8* @stbi__malloc_mad2(i32 %102, i32 4, i32 0)
  store i8* %call146, i8** %scanline, align 8
  %103 = load i8*, i8** %scanline, align 8
  %tobool147 = icmp ne i8* %103, null
  br i1 %tobool147, label %if.end152, label %if.then148

if.then148:                                       ; preds = %if.then145
  %104 = load float*, float** %hdr_data, align 8
  %105 = bitcast float* %104 to i8*
  call void @free(i8* %105) #10
  %call149 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool150 = icmp ne i32 %call149, 0
  %106 = zext i1 %tobool150 to i64
  %cond151 = select i1 %tobool150, i8* null, i8* null
  %107 = ptrtoint i8* %cond151 to i64
  %108 = inttoptr i64 %107 to float*
  store float* %108, float** %retval, align 8
  br label %return

if.end152:                                        ; preds = %if.then145
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %if.end142
  store i32 0, i32* %k, align 4
  br label %for.cond154

for.cond154:                                      ; preds = %for.inc215, %if.end153
  %109 = load i32, i32* %k, align 4
  %cmp155 = icmp slt i32 %109, 4
  br i1 %cmp155, label %for.body157, label %for.end217

for.body157:                                      ; preds = %for.cond154
  store i32 0, i32* %i, align 4
  br label %while.cond158

while.cond158:                                    ; preds = %if.end213, %for.body157
  %110 = load i32, i32* %width, align 4
  %111 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %110, %111
  store i32 %sub, i32* %nleft, align 4
  %cmp159 = icmp sgt i32 %sub, 0
  br i1 %cmp159, label %while.body161, label %while.end214

while.body161:                                    ; preds = %while.cond158
  %112 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call162 = call zeroext i8 @stbi__get8(%struct.stbi__context* %112)
  store i8 %call162, i8* %count, align 1
  %113 = load i8, i8* %count, align 1
  %conv163 = zext i8 %113 to i32
  %cmp164 = icmp sgt i32 %conv163, 128
  br i1 %cmp164, label %if.then166, label %if.else190

if.then166:                                       ; preds = %while.body161
  %114 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call167 = call zeroext i8 @stbi__get8(%struct.stbi__context* %114)
  store i8 %call167, i8* %value, align 1
  %115 = load i8, i8* %count, align 1
  %conv168 = zext i8 %115 to i32
  %sub169 = sub nsw i32 %conv168, 128
  %conv170 = trunc i32 %sub169 to i8
  store i8 %conv170, i8* %count, align 1
  %116 = load i8, i8* %count, align 1
  %conv171 = zext i8 %116 to i32
  %117 = load i32, i32* %nleft, align 4
  %cmp172 = icmp sgt i32 %conv171, %117
  br i1 %cmp172, label %if.then174, label %if.end178

if.then174:                                       ; preds = %if.then166
  %118 = load float*, float** %hdr_data, align 8
  %119 = bitcast float* %118 to i8*
  call void @free(i8* %119) #10
  %120 = load i8*, i8** %scanline, align 8
  call void @free(i8* %120) #10
  %call175 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.119, i64 0, i64 0))
  %tobool176 = icmp ne i32 %call175, 0
  %121 = zext i1 %tobool176 to i64
  %cond177 = select i1 %tobool176, i8* null, i8* null
  %122 = ptrtoint i8* %cond177 to i64
  %123 = inttoptr i64 %122 to float*
  store float* %123, float** %retval, align 8
  br label %return

if.end178:                                        ; preds = %if.then166
  store i32 0, i32* %z, align 4
  br label %for.cond179

for.cond179:                                      ; preds = %for.inc187, %if.end178
  %124 = load i32, i32* %z, align 4
  %125 = load i8, i8* %count, align 1
  %conv180 = zext i8 %125 to i32
  %cmp181 = icmp slt i32 %124, %conv180
  br i1 %cmp181, label %for.body183, label %for.end189

for.body183:                                      ; preds = %for.cond179
  %126 = load i8, i8* %value, align 1
  %127 = load i8*, i8** %scanline, align 8
  %128 = load i32, i32* %i, align 4
  %inc184 = add nsw i32 %128, 1
  store i32 %inc184, i32* %i, align 4
  %mul185 = mul nsw i32 %128, 4
  %129 = load i32, i32* %k, align 4
  %add = add nsw i32 %mul185, %129
  %idxprom = sext i32 %add to i64
  %arrayidx186 = getelementptr inbounds i8, i8* %127, i64 %idxprom
  store i8 %126, i8* %arrayidx186, align 1
  br label %for.inc187

for.inc187:                                       ; preds = %for.body183
  %130 = load i32, i32* %z, align 4
  %inc188 = add nsw i32 %130, 1
  store i32 %inc188, i32* %z, align 4
  br label %for.cond179

for.end189:                                       ; preds = %for.cond179
  br label %if.end213

if.else190:                                       ; preds = %while.body161
  %131 = load i8, i8* %count, align 1
  %conv191 = zext i8 %131 to i32
  %132 = load i32, i32* %nleft, align 4
  %cmp192 = icmp sgt i32 %conv191, %132
  br i1 %cmp192, label %if.then194, label %if.end198

if.then194:                                       ; preds = %if.else190
  %133 = load float*, float** %hdr_data, align 8
  %134 = bitcast float* %133 to i8*
  call void @free(i8* %134) #10
  %135 = load i8*, i8** %scanline, align 8
  call void @free(i8* %135) #10
  %call195 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.119, i64 0, i64 0))
  %tobool196 = icmp ne i32 %call195, 0
  %136 = zext i1 %tobool196 to i64
  %cond197 = select i1 %tobool196, i8* null, i8* null
  %137 = ptrtoint i8* %cond197 to i64
  %138 = inttoptr i64 %137 to float*
  store float* %138, float** %retval, align 8
  br label %return

if.end198:                                        ; preds = %if.else190
  store i32 0, i32* %z, align 4
  br label %for.cond199

for.cond199:                                      ; preds = %for.inc210, %if.end198
  %139 = load i32, i32* %z, align 4
  %140 = load i8, i8* %count, align 1
  %conv200 = zext i8 %140 to i32
  %cmp201 = icmp slt i32 %139, %conv200
  br i1 %cmp201, label %for.body203, label %for.end212

for.body203:                                      ; preds = %for.cond199
  %141 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call204 = call zeroext i8 @stbi__get8(%struct.stbi__context* %141)
  %142 = load i8*, i8** %scanline, align 8
  %143 = load i32, i32* %i, align 4
  %inc205 = add nsw i32 %143, 1
  store i32 %inc205, i32* %i, align 4
  %mul206 = mul nsw i32 %143, 4
  %144 = load i32, i32* %k, align 4
  %add207 = add nsw i32 %mul206, %144
  %idxprom208 = sext i32 %add207 to i64
  %arrayidx209 = getelementptr inbounds i8, i8* %142, i64 %idxprom208
  store i8 %call204, i8* %arrayidx209, align 1
  br label %for.inc210

for.inc210:                                       ; preds = %for.body203
  %145 = load i32, i32* %z, align 4
  %inc211 = add nsw i32 %145, 1
  store i32 %inc211, i32* %z, align 4
  br label %for.cond199

for.end212:                                       ; preds = %for.cond199
  br label %if.end213

if.end213:                                        ; preds = %for.end212, %for.end189
  br label %while.cond158

while.end214:                                     ; preds = %while.cond158
  br label %for.inc215

for.inc215:                                       ; preds = %while.end214
  %146 = load i32, i32* %k, align 4
  %inc216 = add nsw i32 %146, 1
  store i32 %inc216, i32* %k, align 4
  br label %for.cond154

for.end217:                                       ; preds = %for.cond154
  store i32 0, i32* %i, align 4
  br label %for.cond218

for.cond218:                                      ; preds = %for.inc230, %for.end217
  %147 = load i32, i32* %i, align 4
  %148 = load i32, i32* %width, align 4
  %cmp219 = icmp slt i32 %147, %148
  br i1 %cmp219, label %for.body221, label %for.end232

for.body221:                                      ; preds = %for.cond218
  %149 = load float*, float** %hdr_data, align 8
  %150 = load i32, i32* %j, align 4
  %151 = load i32, i32* %width, align 4
  %mul222 = mul nsw i32 %150, %151
  %152 = load i32, i32* %i, align 4
  %add223 = add nsw i32 %mul222, %152
  %153 = load i32, i32* %req_comp.addr, align 4
  %mul224 = mul nsw i32 %add223, %153
  %idx.ext225 = sext i32 %mul224 to i64
  %add.ptr226 = getelementptr inbounds float, float* %149, i64 %idx.ext225
  %154 = load i8*, i8** %scanline, align 8
  %155 = load i32, i32* %i, align 4
  %mul227 = mul nsw i32 %155, 4
  %idx.ext228 = sext i32 %mul227 to i64
  %add.ptr229 = getelementptr inbounds i8, i8* %154, i64 %idx.ext228
  %156 = load i32, i32* %req_comp.addr, align 4
  call void @stbi__hdr_convert(float* %add.ptr226, i8* %add.ptr229, i32 %156)
  br label %for.inc230

for.inc230:                                       ; preds = %for.body221
  %157 = load i32, i32* %i, align 4
  %inc231 = add nsw i32 %157, 1
  store i32 %inc231, i32* %i, align 4
  br label %for.cond218

for.end232:                                       ; preds = %for.cond218
  br label %for.inc233

for.inc233:                                       ; preds = %for.end232
  %158 = load i32, i32* %j, align 4
  %inc234 = add nsw i32 %158, 1
  store i32 %inc234, i32* %j, align 4
  br label %for.cond105

for.end235:                                       ; preds = %for.cond105
  %159 = load i8*, i8** %scanline, align 8
  %tobool236 = icmp ne i8* %159, null
  br i1 %tobool236, label %if.then237, label %if.end238

if.then237:                                       ; preds = %for.end235
  %160 = load i8*, i8** %scanline, align 8
  call void @free(i8* %160) #10
  br label %if.end238

if.end238:                                        ; preds = %if.then237, %for.end235
  br label %if.end239

if.end239:                                        ; preds = %if.end238, %for.end104
  %161 = load float*, float** %hdr_data, align 8
  store float* %161, float** %retval, align 8
  br label %return

return:                                           ; preds = %if.end239, %if.then194, %if.then174, %if.then148, %if.then138, %if.then76, %if.then69, %if.then55, %if.then48, %if.then38, %if.then26, %if.then17, %if.then
  %162 = load float*, float** %retval, align 8
  ret float* %162
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__hdr_to_ldr(float* %data, i32 %x, i32 %y, i32 %comp) #0 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca float*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %output = alloca i8*, align 8
  %z = alloca float, align 4
  %z35 = alloca float, align 4
  store float* %data, float** %data.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  %0 = load float*, float** %data.addr, align 8
  %tobool = icmp ne float* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %y.addr, align 4
  %3 = load i32, i32* %comp.addr, align 4
  %call = call i8* @stbi__malloc_mad3(i32 %1, i32 %2, i32 %3, i32 0)
  store i8* %call, i8** %output, align 8
  %4 = load i8*, i8** %output, align 8
  %cmp = icmp eq i8* %4, null
  br i1 %cmp, label %if.then1, label %if.end4

if.then1:                                         ; preds = %if.end
  %5 = load float*, float** %data.addr, align 8
  %6 = bitcast float* %5 to i8*
  call void @free(i8* %6) #10
  %call2 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool3 = icmp ne i32 %call2, 0
  %7 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i8* null, i8* null
  %8 = ptrtoint i8* %cond to i64
  %9 = inttoptr i64 %8 to i8*
  store i8* %9, i8** %retval, align 8
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load i32, i32* %comp.addr, align 4
  %and = and i32 %10, 1
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end4
  %11 = load i32, i32* %comp.addr, align 4
  store i32 %11, i32* %n, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end4
  %12 = load i32, i32* %comp.addr, align 4
  %sub = sub nsw i32 %12, 1
  store i32 %sub, i32* %n, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc57, %if.end7
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %x.addr, align 4
  %15 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %14, %15
  %cmp8 = icmp slt i32 %13, %mul
  br i1 %cmp8, label %for.body, label %for.end59

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body
  %16 = load i32, i32* %k, align 4
  %17 = load i32, i32* %n, align 4
  %cmp10 = icmp slt i32 %16, %17
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond9
  %18 = load float*, float** %data.addr, align 8
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %comp.addr, align 4
  %mul12 = mul nsw i32 %19, %20
  %21 = load i32, i32* %k, align 4
  %add = add nsw i32 %mul12, %21
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds float, float* %18, i64 %idxprom
  %22 = load float, float* %arrayidx, align 4
  %23 = load float, float* @stbi__h2l_scale_i, align 4
  %mul13 = fmul float %22, %23
  %conv = fpext float %mul13 to double
  %24 = load float, float* @stbi__h2l_gamma_i, align 4
  %conv14 = fpext float %24 to double
  %25 = call double @llvm.pow.f64(double %conv, double %conv14)
  %conv15 = fptrunc double %25 to float
  %mul16 = fmul float %conv15, 2.550000e+02
  %add17 = fadd float %mul16, 5.000000e-01
  store float %add17, float* %z, align 4
  %26 = load float, float* %z, align 4
  %cmp18 = fcmp olt float %26, 0.000000e+00
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body11
  store float 0.000000e+00, float* %z, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %for.body11
  %27 = load float, float* %z, align 4
  %cmp22 = fcmp ogt float %27, 2.550000e+02
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end21
  store float 2.550000e+02, float* %z, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %if.end21
  %28 = load float, float* %z, align 4
  %conv26 = fptosi float %28 to i32
  %conv27 = trunc i32 %conv26 to i8
  %29 = load i8*, i8** %output, align 8
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* %comp.addr, align 4
  %mul28 = mul nsw i32 %30, %31
  %32 = load i32, i32* %k, align 4
  %add29 = add nsw i32 %mul28, %32
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i8, i8* %29, i64 %idxprom30
  store i8 %conv27, i8* %arrayidx31, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end25
  %33 = load i32, i32* %k, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  %34 = load i32, i32* %k, align 4
  %35 = load i32, i32* %comp.addr, align 4
  %cmp32 = icmp slt i32 %34, %35
  br i1 %cmp32, label %if.then34, label %if.end56

if.then34:                                        ; preds = %for.end
  %36 = load float*, float** %data.addr, align 8
  %37 = load i32, i32* %i, align 4
  %38 = load i32, i32* %comp.addr, align 4
  %mul36 = mul nsw i32 %37, %38
  %39 = load i32, i32* %k, align 4
  %add37 = add nsw i32 %mul36, %39
  %idxprom38 = sext i32 %add37 to i64
  %arrayidx39 = getelementptr inbounds float, float* %36, i64 %idxprom38
  %40 = load float, float* %arrayidx39, align 4
  %mul40 = fmul float %40, 2.550000e+02
  %add41 = fadd float %mul40, 5.000000e-01
  store float %add41, float* %z35, align 4
  %41 = load float, float* %z35, align 4
  %cmp42 = fcmp olt float %41, 0.000000e+00
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %if.then34
  store float 0.000000e+00, float* %z35, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %if.then34
  %42 = load float, float* %z35, align 4
  %cmp46 = fcmp ogt float %42, 2.550000e+02
  br i1 %cmp46, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.end45
  store float 2.550000e+02, float* %z35, align 4
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %if.end45
  %43 = load float, float* %z35, align 4
  %conv50 = fptosi float %43 to i32
  %conv51 = trunc i32 %conv50 to i8
  %44 = load i8*, i8** %output, align 8
  %45 = load i32, i32* %i, align 4
  %46 = load i32, i32* %comp.addr, align 4
  %mul52 = mul nsw i32 %45, %46
  %47 = load i32, i32* %k, align 4
  %add53 = add nsw i32 %mul52, %47
  %idxprom54 = sext i32 %add53 to i64
  %arrayidx55 = getelementptr inbounds i8, i8* %44, i64 %idxprom54
  store i8 %conv51, i8* %arrayidx55, align 1
  br label %if.end56

if.end56:                                         ; preds = %if.end49, %for.end
  br label %for.inc57

for.inc57:                                        ; preds = %if.end56
  %48 = load i32, i32* %i, align 4
  %inc58 = add nsw i32 %48, 1
  store i32 %inc58, i32* %i, align 4
  br label %for.cond

for.end59:                                        ; preds = %for.cond
  %49 = load float*, float** %data.addr, align 8
  %50 = bitcast float* %49 to i8*
  call void @free(i8* %50) #10
  %51 = load i8*, i8** %output, align 8
  store i8* %51, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end59, %if.then1, %if.then
  %52 = load i8*, i8** %retval, align 8
  ret i8* %52
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__tga_test(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %res = alloca i32, align 4
  %sz = alloca i32, align 4
  %tga_color_type = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32 0, i32* %res, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call zeroext i8 @stbi__get8(%struct.stbi__context* %1)
  %conv = zext i8 %call1 to i32
  store i32 %conv, i32* %tga_color_type, align 4
  %2 = load i32, i32* %tga_color_type, align 4
  %cmp = icmp sgt i32 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %errorEnd

if.end:                                           ; preds = %entry
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call3 = call zeroext i8 @stbi__get8(%struct.stbi__context* %3)
  %conv4 = zext i8 %call3 to i32
  store i32 %conv4, i32* %sz, align 4
  %4 = load i32, i32* %tga_color_type, align 4
  %cmp5 = icmp eq i32 %4, 1
  br i1 %cmp5, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end
  %5 = load i32, i32* %sz, align 4
  %cmp8 = icmp ne i32 %5, 1
  br i1 %cmp8, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.then7
  %6 = load i32, i32* %sz, align 4
  %cmp10 = icmp ne i32 %6, 9
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true
  br label %errorEnd

if.end13:                                         ; preds = %land.lhs.true, %if.then7
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %7, i32 4)
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call14 = call zeroext i8 @stbi__get8(%struct.stbi__context* %8)
  %conv15 = zext i8 %call14 to i32
  store i32 %conv15, i32* %sz, align 4
  %9 = load i32, i32* %sz, align 4
  %cmp16 = icmp ne i32 %9, 8
  br i1 %cmp16, label %land.lhs.true18, label %if.end31

land.lhs.true18:                                  ; preds = %if.end13
  %10 = load i32, i32* %sz, align 4
  %cmp19 = icmp ne i32 %10, 15
  br i1 %cmp19, label %land.lhs.true21, label %if.end31

land.lhs.true21:                                  ; preds = %land.lhs.true18
  %11 = load i32, i32* %sz, align 4
  %cmp22 = icmp ne i32 %11, 16
  br i1 %cmp22, label %land.lhs.true24, label %if.end31

land.lhs.true24:                                  ; preds = %land.lhs.true21
  %12 = load i32, i32* %sz, align 4
  %cmp25 = icmp ne i32 %12, 24
  br i1 %cmp25, label %land.lhs.true27, label %if.end31

land.lhs.true27:                                  ; preds = %land.lhs.true24
  %13 = load i32, i32* %sz, align 4
  %cmp28 = icmp ne i32 %13, 32
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %land.lhs.true27
  br label %errorEnd

if.end31:                                         ; preds = %land.lhs.true27, %land.lhs.true24, %land.lhs.true21, %land.lhs.true18, %if.end13
  %14 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %14, i32 4)
  br label %if.end45

if.else:                                          ; preds = %if.end
  %15 = load i32, i32* %sz, align 4
  %cmp32 = icmp ne i32 %15, 2
  br i1 %cmp32, label %land.lhs.true34, label %if.end44

land.lhs.true34:                                  ; preds = %if.else
  %16 = load i32, i32* %sz, align 4
  %cmp35 = icmp ne i32 %16, 3
  br i1 %cmp35, label %land.lhs.true37, label %if.end44

land.lhs.true37:                                  ; preds = %land.lhs.true34
  %17 = load i32, i32* %sz, align 4
  %cmp38 = icmp ne i32 %17, 10
  br i1 %cmp38, label %land.lhs.true40, label %if.end44

land.lhs.true40:                                  ; preds = %land.lhs.true37
  %18 = load i32, i32* %sz, align 4
  %cmp41 = icmp ne i32 %18, 11
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %land.lhs.true40
  br label %errorEnd

if.end44:                                         ; preds = %land.lhs.true40, %land.lhs.true37, %land.lhs.true34, %if.else
  %19 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %19, i32 9)
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end31
  %20 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call46 = call i32 @stbi__get16le(%struct.stbi__context* %20)
  %cmp47 = icmp slt i32 %call46, 1
  br i1 %cmp47, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.end45
  br label %errorEnd

if.end50:                                         ; preds = %if.end45
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call51 = call i32 @stbi__get16le(%struct.stbi__context* %21)
  %cmp52 = icmp slt i32 %call51, 1
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  br label %errorEnd

if.end55:                                         ; preds = %if.end50
  %22 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call56 = call zeroext i8 @stbi__get8(%struct.stbi__context* %22)
  %conv57 = zext i8 %call56 to i32
  store i32 %conv57, i32* %sz, align 4
  %23 = load i32, i32* %tga_color_type, align 4
  %cmp58 = icmp eq i32 %23, 1
  br i1 %cmp58, label %land.lhs.true60, label %if.end67

land.lhs.true60:                                  ; preds = %if.end55
  %24 = load i32, i32* %sz, align 4
  %cmp61 = icmp ne i32 %24, 8
  br i1 %cmp61, label %land.lhs.true63, label %if.end67

land.lhs.true63:                                  ; preds = %land.lhs.true60
  %25 = load i32, i32* %sz, align 4
  %cmp64 = icmp ne i32 %25, 16
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %land.lhs.true63
  br label %errorEnd

if.end67:                                         ; preds = %land.lhs.true63, %land.lhs.true60, %if.end55
  %26 = load i32, i32* %sz, align 4
  %cmp68 = icmp ne i32 %26, 8
  br i1 %cmp68, label %land.lhs.true70, label %if.end83

land.lhs.true70:                                  ; preds = %if.end67
  %27 = load i32, i32* %sz, align 4
  %cmp71 = icmp ne i32 %27, 15
  br i1 %cmp71, label %land.lhs.true73, label %if.end83

land.lhs.true73:                                  ; preds = %land.lhs.true70
  %28 = load i32, i32* %sz, align 4
  %cmp74 = icmp ne i32 %28, 16
  br i1 %cmp74, label %land.lhs.true76, label %if.end83

land.lhs.true76:                                  ; preds = %land.lhs.true73
  %29 = load i32, i32* %sz, align 4
  %cmp77 = icmp ne i32 %29, 24
  br i1 %cmp77, label %land.lhs.true79, label %if.end83

land.lhs.true79:                                  ; preds = %land.lhs.true76
  %30 = load i32, i32* %sz, align 4
  %cmp80 = icmp ne i32 %30, 32
  br i1 %cmp80, label %if.then82, label %if.end83

if.then82:                                        ; preds = %land.lhs.true79
  br label %errorEnd

if.end83:                                         ; preds = %land.lhs.true79, %land.lhs.true76, %land.lhs.true73, %land.lhs.true70, %if.end67
  store i32 1, i32* %res, align 4
  br label %errorEnd

errorEnd:                                         ; preds = %if.end83, %if.then82, %if.then66, %if.then54, %if.then49, %if.then43, %if.then30, %if.then12, %if.then
  %31 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %31)
  %32 = load i32, i32* %res, align 4
  ret i32 %32
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__tga_load(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp, %struct.stbi__result_info* %ri) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %tga_offset = alloca i32, align 4
  %tga_indexed = alloca i32, align 4
  %tga_image_type = alloca i32, align 4
  %tga_is_RLE = alloca i32, align 4
  %tga_palette_start = alloca i32, align 4
  %tga_palette_len = alloca i32, align 4
  %tga_palette_bits = alloca i32, align 4
  %tga_x_origin = alloca i32, align 4
  %tga_y_origin = alloca i32, align 4
  %tga_width = alloca i32, align 4
  %tga_height = alloca i32, align 4
  %tga_bits_per_pixel = alloca i32, align 4
  %tga_comp = alloca i32, align 4
  %tga_rgb16 = alloca i32, align 4
  %tga_inverted = alloca i32, align 4
  %tga_data = alloca i8*, align 8
  %tga_palette = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %raw_data = alloca [4 x i8], align 1
  %RLE_count = alloca i32, align 4
  %RLE_repeating = alloca i32, align 4
  %read_next_pixel = alloca i32, align 4
  %row = alloca i32, align 4
  %tga_row = alloca i8*, align 8
  %pal_entry = alloca i8*, align 8
  %RLE_cmd = alloca i32, align 4
  %pal_idx = alloca i32, align 4
  %index1 = alloca i32, align 4
  %index2 = alloca i32, align 4
  %temp = alloca i8, align 1
  %tga_pixel = alloca i8*, align 8
  %temp256 = alloca i8, align 1
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  %conv = zext i8 %call to i32
  store i32 %conv, i32* %tga_offset, align 4
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call zeroext i8 @stbi__get8(%struct.stbi__context* %1)
  %conv2 = zext i8 %call1 to i32
  store i32 %conv2, i32* %tga_indexed, align 4
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call3 = call zeroext i8 @stbi__get8(%struct.stbi__context* %2)
  %conv4 = zext i8 %call3 to i32
  store i32 %conv4, i32* %tga_image_type, align 4
  store i32 0, i32* %tga_is_RLE, align 4
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call5 = call i32 @stbi__get16le(%struct.stbi__context* %3)
  store i32 %call5, i32* %tga_palette_start, align 4
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call6 = call i32 @stbi__get16le(%struct.stbi__context* %4)
  store i32 %call6, i32* %tga_palette_len, align 4
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call7 = call zeroext i8 @stbi__get8(%struct.stbi__context* %5)
  %conv8 = zext i8 %call7 to i32
  store i32 %conv8, i32* %tga_palette_bits, align 4
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call9 = call i32 @stbi__get16le(%struct.stbi__context* %6)
  store i32 %call9, i32* %tga_x_origin, align 4
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call10 = call i32 @stbi__get16le(%struct.stbi__context* %7)
  store i32 %call10, i32* %tga_y_origin, align 4
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call11 = call i32 @stbi__get16le(%struct.stbi__context* %8)
  store i32 %call11, i32* %tga_width, align 4
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call12 = call i32 @stbi__get16le(%struct.stbi__context* %9)
  store i32 %call12, i32* %tga_height, align 4
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call13 = call zeroext i8 @stbi__get8(%struct.stbi__context* %10)
  %conv14 = zext i8 %call13 to i32
  store i32 %conv14, i32* %tga_bits_per_pixel, align 4
  store i32 0, i32* %tga_rgb16, align 4
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call15 = call zeroext i8 @stbi__get8(%struct.stbi__context* %11)
  %conv16 = zext i8 %call15 to i32
  store i32 %conv16, i32* %tga_inverted, align 4
  store i8* null, i8** %tga_palette, align 8
  %12 = bitcast [4 x i8]* %raw_data to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 4, i1 false)
  store i32 0, i32* %RLE_count, align 4
  store i32 0, i32* %RLE_repeating, align 4
  store i32 1, i32* %read_next_pixel, align 4
  %13 = load i32, i32* %tga_height, align 4
  %cmp = icmp sgt i32 %13, 16777216
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call18 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool = icmp ne i32 %call18, 0
  %14 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %15 = ptrtoint i8* %cond to i64
  %16 = inttoptr i64 %15 to i8*
  store i8* %16, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %17 = load i32, i32* %tga_width, align 4
  %cmp19 = icmp sgt i32 %17, 16777216
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end
  %call22 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool23 = icmp ne i32 %call22, 0
  %18 = zext i1 %tobool23 to i64
  %cond24 = select i1 %tobool23, i8* null, i8* null
  %19 = ptrtoint i8* %cond24 to i64
  %20 = inttoptr i64 %19 to i8*
  store i8* %20, i8** %retval, align 8
  br label %return

if.end25:                                         ; preds = %if.end
  %21 = load i32, i32* %tga_image_type, align 4
  %cmp26 = icmp sge i32 %21, 8
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end25
  %22 = load i32, i32* %tga_image_type, align 4
  %sub = sub nsw i32 %22, 8
  store i32 %sub, i32* %tga_image_type, align 4
  store i32 1, i32* %tga_is_RLE, align 4
  br label %if.end29

if.end29:                                         ; preds = %if.then28, %if.end25
  %23 = load i32, i32* %tga_inverted, align 4
  %shr = ashr i32 %23, 5
  %and = and i32 %shr, 1
  %sub30 = sub nsw i32 1, %and
  store i32 %sub30, i32* %tga_inverted, align 4
  %24 = load i32, i32* %tga_indexed, align 4
  %tobool31 = icmp ne i32 %24, 0
  br i1 %tobool31, label %if.then32, label %if.else

if.then32:                                        ; preds = %if.end29
  %25 = load i32, i32* %tga_palette_bits, align 4
  %call33 = call i32 @stbi__tga_get_comp(i32 %25, i32 0, i32* %tga_rgb16)
  store i32 %call33, i32* %tga_comp, align 4
  br label %if.end37

if.else:                                          ; preds = %if.end29
  %26 = load i32, i32* %tga_bits_per_pixel, align 4
  %27 = load i32, i32* %tga_image_type, align 4
  %cmp34 = icmp eq i32 %27, 3
  %conv35 = zext i1 %cmp34 to i32
  %call36 = call i32 @stbi__tga_get_comp(i32 %26, i32 %conv35, i32* %tga_rgb16)
  store i32 %call36, i32* %tga_comp, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.else, %if.then32
  %28 = load i32, i32* %tga_comp, align 4
  %tobool38 = icmp ne i32 %28, 0
  br i1 %tobool38, label %if.end43, label %if.then39

if.then39:                                        ; preds = %if.end37
  %call40 = call i32 @stbi__err(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.123, i64 0, i64 0))
  %tobool41 = icmp ne i32 %call40, 0
  %29 = zext i1 %tobool41 to i64
  %cond42 = select i1 %tobool41, i8* null, i8* null
  %30 = ptrtoint i8* %cond42 to i64
  %31 = inttoptr i64 %30 to i8*
  store i8* %31, i8** %retval, align 8
  br label %return

if.end43:                                         ; preds = %if.end37
  %32 = load i32, i32* %tga_width, align 4
  %33 = load i32*, i32** %x.addr, align 8
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %tga_height, align 4
  %35 = load i32*, i32** %y.addr, align 8
  store i32 %34, i32* %35, align 4
  %36 = load i32*, i32** %comp.addr, align 8
  %tobool44 = icmp ne i32* %36, null
  br i1 %tobool44, label %if.then45, label %if.end46

if.then45:                                        ; preds = %if.end43
  %37 = load i32, i32* %tga_comp, align 4
  %38 = load i32*, i32** %comp.addr, align 8
  store i32 %37, i32* %38, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then45, %if.end43
  %39 = load i32, i32* %tga_width, align 4
  %40 = load i32, i32* %tga_height, align 4
  %41 = load i32, i32* %tga_comp, align 4
  %call47 = call i32 @stbi__mad3sizes_valid(i32 %39, i32 %40, i32 %41, i32 0)
  %tobool48 = icmp ne i32 %call47, 0
  br i1 %tobool48, label %if.end53, label %if.then49

if.then49:                                        ; preds = %if.end46
  %call50 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool51 = icmp ne i32 %call50, 0
  %42 = zext i1 %tobool51 to i64
  %cond52 = select i1 %tobool51, i8* null, i8* null
  %43 = ptrtoint i8* %cond52 to i64
  %44 = inttoptr i64 %43 to i8*
  store i8* %44, i8** %retval, align 8
  br label %return

if.end53:                                         ; preds = %if.end46
  %45 = load i32, i32* %tga_width, align 4
  %46 = load i32, i32* %tga_height, align 4
  %47 = load i32, i32* %tga_comp, align 4
  %call54 = call i8* @stbi__malloc_mad3(i32 %45, i32 %46, i32 %47, i32 0)
  store i8* %call54, i8** %tga_data, align 8
  %48 = load i8*, i8** %tga_data, align 8
  %tobool55 = icmp ne i8* %48, null
  br i1 %tobool55, label %if.end60, label %if.then56

if.then56:                                        ; preds = %if.end53
  %call57 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool58 = icmp ne i32 %call57, 0
  %49 = zext i1 %tobool58 to i64
  %cond59 = select i1 %tobool58, i8* null, i8* null
  %50 = ptrtoint i8* %cond59 to i64
  %51 = inttoptr i64 %50 to i8*
  store i8* %51, i8** %retval, align 8
  br label %return

if.end60:                                         ; preds = %if.end53
  %52 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %53 = load i32, i32* %tga_offset, align 4
  call void @stbi__skip(%struct.stbi__context* %52, i32 %53)
  %54 = load i32, i32* %tga_indexed, align 4
  %tobool61 = icmp ne i32 %54, 0
  br i1 %tobool61, label %if.else75, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end60
  %55 = load i32, i32* %tga_is_RLE, align 4
  %tobool62 = icmp ne i32 %55, 0
  br i1 %tobool62, label %if.else75, label %land.lhs.true63

land.lhs.true63:                                  ; preds = %land.lhs.true
  %56 = load i32, i32* %tga_rgb16, align 4
  %tobool64 = icmp ne i32 %56, 0
  br i1 %tobool64, label %if.else75, label %if.then65

if.then65:                                        ; preds = %land.lhs.true63
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then65
  %57 = load i32, i32* %i, align 4
  %58 = load i32, i32* %tga_height, align 4
  %cmp66 = icmp slt i32 %57, %58
  br i1 %cmp66, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %59 = load i32, i32* %tga_inverted, align 4
  %tobool68 = icmp ne i32 %59, 0
  br i1 %tobool68, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %60 = load i32, i32* %tga_height, align 4
  %61 = load i32, i32* %i, align 4
  %sub69 = sub nsw i32 %60, %61
  %sub70 = sub nsw i32 %sub69, 1
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %62 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond71 = phi i32 [ %sub70, %cond.true ], [ %62, %cond.false ]
  store i32 %cond71, i32* %row, align 4
  %63 = load i8*, i8** %tga_data, align 8
  %64 = load i32, i32* %row, align 4
  %65 = load i32, i32* %tga_width, align 4
  %mul = mul nsw i32 %64, %65
  %66 = load i32, i32* %tga_comp, align 4
  %mul72 = mul nsw i32 %mul, %66
  %idx.ext = sext i32 %mul72 to i64
  %add.ptr = getelementptr inbounds i8, i8* %63, i64 %idx.ext
  store i8* %add.ptr, i8** %tga_row, align 8
  %67 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %68 = load i8*, i8** %tga_row, align 8
  %69 = load i32, i32* %tga_width, align 4
  %70 = load i32, i32* %tga_comp, align 4
  %mul73 = mul nsw i32 %69, %70
  %call74 = call i32 @stbi__getn(%struct.stbi__context* %67, i8* %68, i32 %mul73)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %71 = load i32, i32* %i, align 4
  %inc = add nsw i32 %71, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end245

if.else75:                                        ; preds = %land.lhs.true63, %land.lhs.true, %if.end60
  %72 = load i32, i32* %tga_indexed, align 4
  %tobool76 = icmp ne i32 %72, 0
  br i1 %tobool76, label %if.then77, label %if.end118

if.then77:                                        ; preds = %if.else75
  %73 = load i32, i32* %tga_palette_len, align 4
  %cmp78 = icmp eq i32 %73, 0
  br i1 %cmp78, label %if.then80, label %if.end84

if.then80:                                        ; preds = %if.then77
  %74 = load i8*, i8** %tga_data, align 8
  call void @free(i8* %74) #10
  %call81 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.134, i64 0, i64 0))
  %tobool82 = icmp ne i32 %call81, 0
  %75 = zext i1 %tobool82 to i64
  %cond83 = select i1 %tobool82, i8* null, i8* null
  %76 = ptrtoint i8* %cond83 to i64
  %77 = inttoptr i64 %76 to i8*
  store i8* %77, i8** %retval, align 8
  br label %return

if.end84:                                         ; preds = %if.then77
  %78 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %79 = load i32, i32* %tga_palette_start, align 4
  call void @stbi__skip(%struct.stbi__context* %78, i32 %79)
  %80 = load i32, i32* %tga_palette_len, align 4
  %81 = load i32, i32* %tga_comp, align 4
  %call85 = call i8* @stbi__malloc_mad2(i32 %80, i32 %81, i32 0)
  store i8* %call85, i8** %tga_palette, align 8
  %82 = load i8*, i8** %tga_palette, align 8
  %tobool86 = icmp ne i8* %82, null
  br i1 %tobool86, label %if.end91, label %if.then87

if.then87:                                        ; preds = %if.end84
  %83 = load i8*, i8** %tga_data, align 8
  call void @free(i8* %83) #10
  %call88 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool89 = icmp ne i32 %call88, 0
  %84 = zext i1 %tobool89 to i64
  %cond90 = select i1 %tobool89, i8* null, i8* null
  %85 = ptrtoint i8* %cond90 to i64
  %86 = inttoptr i64 %85 to i8*
  store i8* %86, i8** %retval, align 8
  br label %return

if.end91:                                         ; preds = %if.end84
  %87 = load i32, i32* %tga_rgb16, align 4
  %tobool92 = icmp ne i32 %87, 0
  br i1 %tobool92, label %if.then93, label %if.else108

if.then93:                                        ; preds = %if.end91
  %88 = load i8*, i8** %tga_palette, align 8
  store i8* %88, i8** %pal_entry, align 8
  %89 = load i32, i32* %tga_comp, align 4
  %cmp94 = icmp eq i32 %89, 3
  br i1 %cmp94, label %if.then96, label %if.else97

if.then96:                                        ; preds = %if.then93
  br label %if.end98

if.else97:                                        ; preds = %if.then93
  call void @__assert_fail(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.135, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 5777, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @__PRETTY_FUNCTION__.stbi__tga_load, i64 0, i64 0)) #11
  unreachable

if.end98:                                         ; preds = %if.then96
  store i32 0, i32* %i, align 4
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc105, %if.end98
  %90 = load i32, i32* %i, align 4
  %91 = load i32, i32* %tga_palette_len, align 4
  %cmp100 = icmp slt i32 %90, %91
  br i1 %cmp100, label %for.body102, label %for.end107

for.body102:                                      ; preds = %for.cond99
  %92 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %93 = load i8*, i8** %pal_entry, align 8
  call void @stbi__tga_read_rgb16(%struct.stbi__context* %92, i8* %93)
  %94 = load i32, i32* %tga_comp, align 4
  %95 = load i8*, i8** %pal_entry, align 8
  %idx.ext103 = sext i32 %94 to i64
  %add.ptr104 = getelementptr inbounds i8, i8* %95, i64 %idx.ext103
  store i8* %add.ptr104, i8** %pal_entry, align 8
  br label %for.inc105

for.inc105:                                       ; preds = %for.body102
  %96 = load i32, i32* %i, align 4
  %inc106 = add nsw i32 %96, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond99

for.end107:                                       ; preds = %for.cond99
  br label %if.end117

if.else108:                                       ; preds = %if.end91
  %97 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %98 = load i8*, i8** %tga_palette, align 8
  %99 = load i32, i32* %tga_palette_len, align 4
  %100 = load i32, i32* %tga_comp, align 4
  %mul109 = mul nsw i32 %99, %100
  %call110 = call i32 @stbi__getn(%struct.stbi__context* %97, i8* %98, i32 %mul109)
  %tobool111 = icmp ne i32 %call110, 0
  br i1 %tobool111, label %if.end116, label %if.then112

if.then112:                                       ; preds = %if.else108
  %101 = load i8*, i8** %tga_data, align 8
  call void @free(i8* %101) #10
  %102 = load i8*, i8** %tga_palette, align 8
  call void @free(i8* %102) #10
  %call113 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.134, i64 0, i64 0))
  %tobool114 = icmp ne i32 %call113, 0
  %103 = zext i1 %tobool114 to i64
  %cond115 = select i1 %tobool114, i8* null, i8* null
  %104 = ptrtoint i8* %cond115 to i64
  %105 = inttoptr i64 %104 to i8*
  store i8* %105, i8** %retval, align 8
  br label %return

if.end116:                                        ; preds = %if.else108
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %for.end107
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.else75
  store i32 0, i32* %i, align 4
  br label %for.cond119

for.cond119:                                      ; preds = %for.inc203, %if.end118
  %106 = load i32, i32* %i, align 4
  %107 = load i32, i32* %tga_width, align 4
  %108 = load i32, i32* %tga_height, align 4
  %mul120 = mul nsw i32 %107, %108
  %cmp121 = icmp slt i32 %106, %mul120
  br i1 %cmp121, label %for.body123, label %for.end205

for.body123:                                      ; preds = %for.cond119
  %109 = load i32, i32* %tga_is_RLE, align 4
  %tobool124 = icmp ne i32 %109, 0
  br i1 %tobool124, label %if.then125, label %if.else138

if.then125:                                       ; preds = %for.body123
  %110 = load i32, i32* %RLE_count, align 4
  %cmp126 = icmp eq i32 %110, 0
  br i1 %cmp126, label %if.then128, label %if.else133

if.then128:                                       ; preds = %if.then125
  %111 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call129 = call zeroext i8 @stbi__get8(%struct.stbi__context* %111)
  %conv130 = zext i8 %call129 to i32
  store i32 %conv130, i32* %RLE_cmd, align 4
  %112 = load i32, i32* %RLE_cmd, align 4
  %and131 = and i32 %112, 127
  %add = add nsw i32 1, %and131
  store i32 %add, i32* %RLE_count, align 4
  %113 = load i32, i32* %RLE_cmd, align 4
  %shr132 = ashr i32 %113, 7
  store i32 %shr132, i32* %RLE_repeating, align 4
  store i32 1, i32* %read_next_pixel, align 4
  br label %if.end137

if.else133:                                       ; preds = %if.then125
  %114 = load i32, i32* %RLE_repeating, align 4
  %tobool134 = icmp ne i32 %114, 0
  br i1 %tobool134, label %if.end136, label %if.then135

if.then135:                                       ; preds = %if.else133
  store i32 1, i32* %read_next_pixel, align 4
  br label %if.end136

if.end136:                                        ; preds = %if.then135, %if.else133
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.then128
  br label %if.end139

if.else138:                                       ; preds = %for.body123
  store i32 1, i32* %read_next_pixel, align 4
  br label %if.end139

if.end139:                                        ; preds = %if.else138, %if.end137
  %115 = load i32, i32* %read_next_pixel, align 4
  %tobool140 = icmp ne i32 %115, 0
  br i1 %tobool140, label %if.then141, label %if.end189

if.then141:                                       ; preds = %if.end139
  %116 = load i32, i32* %tga_indexed, align 4
  %tobool142 = icmp ne i32 %116, 0
  br i1 %tobool142, label %if.then143, label %if.else168

if.then143:                                       ; preds = %if.then141
  %117 = load i32, i32* %tga_bits_per_pixel, align 4
  %cmp144 = icmp eq i32 %117, 8
  br i1 %cmp144, label %cond.true146, label %cond.false149

cond.true146:                                     ; preds = %if.then143
  %118 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call147 = call zeroext i8 @stbi__get8(%struct.stbi__context* %118)
  %conv148 = zext i8 %call147 to i32
  br label %cond.end151

cond.false149:                                    ; preds = %if.then143
  %119 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call150 = call i32 @stbi__get16le(%struct.stbi__context* %119)
  br label %cond.end151

cond.end151:                                      ; preds = %cond.false149, %cond.true146
  %cond152 = phi i32 [ %conv148, %cond.true146 ], [ %call150, %cond.false149 ]
  store i32 %cond152, i32* %pal_idx, align 4
  %120 = load i32, i32* %pal_idx, align 4
  %121 = load i32, i32* %tga_palette_len, align 4
  %cmp153 = icmp sge i32 %120, %121
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %cond.end151
  store i32 0, i32* %pal_idx, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then155, %cond.end151
  %122 = load i32, i32* %tga_comp, align 4
  %123 = load i32, i32* %pal_idx, align 4
  %mul157 = mul nsw i32 %123, %122
  store i32 %mul157, i32* %pal_idx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc165, %if.end156
  %124 = load i32, i32* %j, align 4
  %125 = load i32, i32* %tga_comp, align 4
  %cmp159 = icmp slt i32 %124, %125
  br i1 %cmp159, label %for.body161, label %for.end167

for.body161:                                      ; preds = %for.cond158
  %126 = load i8*, i8** %tga_palette, align 8
  %127 = load i32, i32* %pal_idx, align 4
  %128 = load i32, i32* %j, align 4
  %add162 = add nsw i32 %127, %128
  %idxprom = sext i32 %add162 to i64
  %arrayidx = getelementptr inbounds i8, i8* %126, i64 %idxprom
  %129 = load i8, i8* %arrayidx, align 1
  %130 = load i32, i32* %j, align 4
  %idxprom163 = sext i32 %130 to i64
  %arrayidx164 = getelementptr inbounds [4 x i8], [4 x i8]* %raw_data, i64 0, i64 %idxprom163
  store i8 %129, i8* %arrayidx164, align 1
  br label %for.inc165

for.inc165:                                       ; preds = %for.body161
  %131 = load i32, i32* %j, align 4
  %inc166 = add nsw i32 %131, 1
  store i32 %inc166, i32* %j, align 4
  br label %for.cond158

for.end167:                                       ; preds = %for.cond158
  br label %if.end188

if.else168:                                       ; preds = %if.then141
  %132 = load i32, i32* %tga_rgb16, align 4
  %tobool169 = icmp ne i32 %132, 0
  br i1 %tobool169, label %if.then170, label %if.else176

if.then170:                                       ; preds = %if.else168
  %133 = load i32, i32* %tga_comp, align 4
  %cmp171 = icmp eq i32 %133, 3
  br i1 %cmp171, label %if.then173, label %if.else174

if.then173:                                       ; preds = %if.then170
  br label %if.end175

if.else174:                                       ; preds = %if.then170
  call void @__assert_fail(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.135, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 5826, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @__PRETTY_FUNCTION__.stbi__tga_load, i64 0, i64 0)) #11
  unreachable

if.end175:                                        ; preds = %if.then173
  %134 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %raw_data, i64 0, i64 0
  call void @stbi__tga_read_rgb16(%struct.stbi__context* %134, i8* %arraydecay)
  br label %if.end187

if.else176:                                       ; preds = %if.else168
  store i32 0, i32* %j, align 4
  br label %for.cond177

for.cond177:                                      ; preds = %for.inc184, %if.else176
  %135 = load i32, i32* %j, align 4
  %136 = load i32, i32* %tga_comp, align 4
  %cmp178 = icmp slt i32 %135, %136
  br i1 %cmp178, label %for.body180, label %for.end186

for.body180:                                      ; preds = %for.cond177
  %137 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call181 = call zeroext i8 @stbi__get8(%struct.stbi__context* %137)
  %138 = load i32, i32* %j, align 4
  %idxprom182 = sext i32 %138 to i64
  %arrayidx183 = getelementptr inbounds [4 x i8], [4 x i8]* %raw_data, i64 0, i64 %idxprom182
  store i8 %call181, i8* %arrayidx183, align 1
  br label %for.inc184

for.inc184:                                       ; preds = %for.body180
  %139 = load i32, i32* %j, align 4
  %inc185 = add nsw i32 %139, 1
  store i32 %inc185, i32* %j, align 4
  br label %for.cond177

for.end186:                                       ; preds = %for.cond177
  br label %if.end187

if.end187:                                        ; preds = %for.end186, %if.end175
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %for.end167
  store i32 0, i32* %read_next_pixel, align 4
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.end139
  store i32 0, i32* %j, align 4
  br label %for.cond190

for.cond190:                                      ; preds = %for.inc200, %if.end189
  %140 = load i32, i32* %j, align 4
  %141 = load i32, i32* %tga_comp, align 4
  %cmp191 = icmp slt i32 %140, %141
  br i1 %cmp191, label %for.body193, label %for.end202

for.body193:                                      ; preds = %for.cond190
  %142 = load i32, i32* %j, align 4
  %idxprom194 = sext i32 %142 to i64
  %arrayidx195 = getelementptr inbounds [4 x i8], [4 x i8]* %raw_data, i64 0, i64 %idxprom194
  %143 = load i8, i8* %arrayidx195, align 1
  %144 = load i8*, i8** %tga_data, align 8
  %145 = load i32, i32* %i, align 4
  %146 = load i32, i32* %tga_comp, align 4
  %mul196 = mul nsw i32 %145, %146
  %147 = load i32, i32* %j, align 4
  %add197 = add nsw i32 %mul196, %147
  %idxprom198 = sext i32 %add197 to i64
  %arrayidx199 = getelementptr inbounds i8, i8* %144, i64 %idxprom198
  store i8 %143, i8* %arrayidx199, align 1
  br label %for.inc200

for.inc200:                                       ; preds = %for.body193
  %148 = load i32, i32* %j, align 4
  %inc201 = add nsw i32 %148, 1
  store i32 %inc201, i32* %j, align 4
  br label %for.cond190

for.end202:                                       ; preds = %for.cond190
  %149 = load i32, i32* %RLE_count, align 4
  %dec = add nsw i32 %149, -1
  store i32 %dec, i32* %RLE_count, align 4
  br label %for.inc203

for.inc203:                                       ; preds = %for.end202
  %150 = load i32, i32* %i, align 4
  %inc204 = add nsw i32 %150, 1
  store i32 %inc204, i32* %i, align 4
  br label %for.cond119

for.end205:                                       ; preds = %for.cond119
  %151 = load i32, i32* %tga_inverted, align 4
  %tobool206 = icmp ne i32 %151, 0
  br i1 %tobool206, label %if.then207, label %if.end240

if.then207:                                       ; preds = %for.end205
  store i32 0, i32* %j, align 4
  br label %for.cond208

for.cond208:                                      ; preds = %for.inc237, %if.then207
  %152 = load i32, i32* %j, align 4
  %mul209 = mul nsw i32 %152, 2
  %153 = load i32, i32* %tga_height, align 4
  %cmp210 = icmp slt i32 %mul209, %153
  br i1 %cmp210, label %for.body212, label %for.end239

for.body212:                                      ; preds = %for.cond208
  %154 = load i32, i32* %j, align 4
  %155 = load i32, i32* %tga_width, align 4
  %mul213 = mul nsw i32 %154, %155
  %156 = load i32, i32* %tga_comp, align 4
  %mul214 = mul nsw i32 %mul213, %156
  store i32 %mul214, i32* %index1, align 4
  %157 = load i32, i32* %tga_height, align 4
  %sub215 = sub nsw i32 %157, 1
  %158 = load i32, i32* %j, align 4
  %sub216 = sub nsw i32 %sub215, %158
  %159 = load i32, i32* %tga_width, align 4
  %mul217 = mul nsw i32 %sub216, %159
  %160 = load i32, i32* %tga_comp, align 4
  %mul218 = mul nsw i32 %mul217, %160
  store i32 %mul218, i32* %index2, align 4
  %161 = load i32, i32* %tga_width, align 4
  %162 = load i32, i32* %tga_comp, align 4
  %mul219 = mul nsw i32 %161, %162
  store i32 %mul219, i32* %i, align 4
  br label %for.cond220

for.cond220:                                      ; preds = %for.inc234, %for.body212
  %163 = load i32, i32* %i, align 4
  %cmp221 = icmp sgt i32 %163, 0
  br i1 %cmp221, label %for.body223, label %for.end236

for.body223:                                      ; preds = %for.cond220
  %164 = load i8*, i8** %tga_data, align 8
  %165 = load i32, i32* %index1, align 4
  %idxprom224 = sext i32 %165 to i64
  %arrayidx225 = getelementptr inbounds i8, i8* %164, i64 %idxprom224
  %166 = load i8, i8* %arrayidx225, align 1
  store i8 %166, i8* %temp, align 1
  %167 = load i8*, i8** %tga_data, align 8
  %168 = load i32, i32* %index2, align 4
  %idxprom226 = sext i32 %168 to i64
  %arrayidx227 = getelementptr inbounds i8, i8* %167, i64 %idxprom226
  %169 = load i8, i8* %arrayidx227, align 1
  %170 = load i8*, i8** %tga_data, align 8
  %171 = load i32, i32* %index1, align 4
  %idxprom228 = sext i32 %171 to i64
  %arrayidx229 = getelementptr inbounds i8, i8* %170, i64 %idxprom228
  store i8 %169, i8* %arrayidx229, align 1
  %172 = load i8, i8* %temp, align 1
  %173 = load i8*, i8** %tga_data, align 8
  %174 = load i32, i32* %index2, align 4
  %idxprom230 = sext i32 %174 to i64
  %arrayidx231 = getelementptr inbounds i8, i8* %173, i64 %idxprom230
  store i8 %172, i8* %arrayidx231, align 1
  %175 = load i32, i32* %index1, align 4
  %inc232 = add nsw i32 %175, 1
  store i32 %inc232, i32* %index1, align 4
  %176 = load i32, i32* %index2, align 4
  %inc233 = add nsw i32 %176, 1
  store i32 %inc233, i32* %index2, align 4
  br label %for.inc234

for.inc234:                                       ; preds = %for.body223
  %177 = load i32, i32* %i, align 4
  %dec235 = add nsw i32 %177, -1
  store i32 %dec235, i32* %i, align 4
  br label %for.cond220

for.end236:                                       ; preds = %for.cond220
  br label %for.inc237

for.inc237:                                       ; preds = %for.end236
  %178 = load i32, i32* %j, align 4
  %inc238 = add nsw i32 %178, 1
  store i32 %inc238, i32* %j, align 4
  br label %for.cond208

for.end239:                                       ; preds = %for.cond208
  br label %if.end240

if.end240:                                        ; preds = %for.end239, %for.end205
  %179 = load i8*, i8** %tga_palette, align 8
  %cmp241 = icmp ne i8* %179, null
  br i1 %cmp241, label %if.then243, label %if.end244

if.then243:                                       ; preds = %if.end240
  %180 = load i8*, i8** %tga_palette, align 8
  call void @free(i8* %180) #10
  br label %if.end244

if.end244:                                        ; preds = %if.then243, %if.end240
  br label %if.end245

if.end245:                                        ; preds = %if.end244, %for.end
  %181 = load i32, i32* %tga_comp, align 4
  %cmp246 = icmp sge i32 %181, 3
  br i1 %cmp246, label %land.lhs.true248, label %if.end266

land.lhs.true248:                                 ; preds = %if.end245
  %182 = load i32, i32* %tga_rgb16, align 4
  %tobool249 = icmp ne i32 %182, 0
  br i1 %tobool249, label %if.end266, label %if.then250

if.then250:                                       ; preds = %land.lhs.true248
  %183 = load i8*, i8** %tga_data, align 8
  store i8* %183, i8** %tga_pixel, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond251

for.cond251:                                      ; preds = %for.inc263, %if.then250
  %184 = load i32, i32* %i, align 4
  %185 = load i32, i32* %tga_width, align 4
  %186 = load i32, i32* %tga_height, align 4
  %mul252 = mul nsw i32 %185, %186
  %cmp253 = icmp slt i32 %184, %mul252
  br i1 %cmp253, label %for.body255, label %for.end265

for.body255:                                      ; preds = %for.cond251
  %187 = load i8*, i8** %tga_pixel, align 8
  %arrayidx257 = getelementptr inbounds i8, i8* %187, i64 0
  %188 = load i8, i8* %arrayidx257, align 1
  store i8 %188, i8* %temp256, align 1
  %189 = load i8*, i8** %tga_pixel, align 8
  %arrayidx258 = getelementptr inbounds i8, i8* %189, i64 2
  %190 = load i8, i8* %arrayidx258, align 1
  %191 = load i8*, i8** %tga_pixel, align 8
  %arrayidx259 = getelementptr inbounds i8, i8* %191, i64 0
  store i8 %190, i8* %arrayidx259, align 1
  %192 = load i8, i8* %temp256, align 1
  %193 = load i8*, i8** %tga_pixel, align 8
  %arrayidx260 = getelementptr inbounds i8, i8* %193, i64 2
  store i8 %192, i8* %arrayidx260, align 1
  %194 = load i32, i32* %tga_comp, align 4
  %195 = load i8*, i8** %tga_pixel, align 8
  %idx.ext261 = sext i32 %194 to i64
  %add.ptr262 = getelementptr inbounds i8, i8* %195, i64 %idx.ext261
  store i8* %add.ptr262, i8** %tga_pixel, align 8
  br label %for.inc263

for.inc263:                                       ; preds = %for.body255
  %196 = load i32, i32* %i, align 4
  %inc264 = add nsw i32 %196, 1
  store i32 %inc264, i32* %i, align 4
  br label %for.cond251

for.end265:                                       ; preds = %for.cond251
  br label %if.end266

if.end266:                                        ; preds = %for.end265, %land.lhs.true248, %if.end245
  %197 = load i32, i32* %req_comp.addr, align 4
  %tobool267 = icmp ne i32 %197, 0
  br i1 %tobool267, label %land.lhs.true268, label %if.end273

land.lhs.true268:                                 ; preds = %if.end266
  %198 = load i32, i32* %req_comp.addr, align 4
  %199 = load i32, i32* %tga_comp, align 4
  %cmp269 = icmp ne i32 %198, %199
  br i1 %cmp269, label %if.then271, label %if.end273

if.then271:                                       ; preds = %land.lhs.true268
  %200 = load i8*, i8** %tga_data, align 8
  %201 = load i32, i32* %tga_comp, align 4
  %202 = load i32, i32* %req_comp.addr, align 4
  %203 = load i32, i32* %tga_width, align 4
  %204 = load i32, i32* %tga_height, align 4
  %call272 = call i8* @stbi__convert_format(i8* %200, i32 %201, i32 %202, i32 %203, i32 %204)
  store i8* %call272, i8** %tga_data, align 8
  br label %if.end273

if.end273:                                        ; preds = %if.then271, %land.lhs.true268, %if.end266
  store i32 0, i32* %tga_y_origin, align 4
  store i32 0, i32* %tga_x_origin, align 4
  store i32 0, i32* %tga_palette_bits, align 4
  store i32 0, i32* %tga_palette_len, align 4
  store i32 0, i32* %tga_palette_start, align 4
  %205 = load i8*, i8** %tga_data, align 8
  store i8* %205, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end273, %if.then112, %if.then87, %if.then80, %if.then56, %if.then49, %if.then39, %if.then21, %if.then
  %206 = load i8*, i8** %retval, align 8
  ret i8* %206
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i8 @stbi__get8(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %struct.stbi__context*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %0, i32 0, i32 10
  %1 = load i8*, i8** %img_buffer, align 8
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 11
  %3 = load i8*, i8** %img_buffer_end, align 8
  %cmp = icmp ult i8* %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer1 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 10
  %5 = load i8*, i8** %img_buffer1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %img_buffer1, align 8
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %read_from_callbacks = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %7, i32 0, i32 6
  %8 = load i32, i32* %read_from_callbacks, align 8
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__refill_buffer(%struct.stbi__context* %9)
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer3 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %10, i32 0, i32 10
  %11 = load i8*, i8** %img_buffer3, align 8
  %incdec.ptr4 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr4, i8** %img_buffer3, align 8
  %12 = load i8, i8* %11, align 1
  store i8 %12, i8* %retval, align 1
  br label %return

if.end5:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end5, %if.then2, %if.then
  %13 = load i8, i8* %retval, align 1
  ret i8 %13
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__get16le(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %z = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  %conv = zext i8 %call to i32
  store i32 %conv, i32* %z, align 4
  %1 = load i32, i32* %z, align 4
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call zeroext i8 @stbi__get8(%struct.stbi__context* %2)
  %conv2 = zext i8 %call1 to i32
  %shl = shl i32 %conv2, 8
  %add = add nsw i32 %1, %shl
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__tga_get_comp(i32 %bits_per_pixel, i32 %is_grey, i32* %is_rgb16) #0 {
entry:
  %retval = alloca i32, align 4
  %bits_per_pixel.addr = alloca i32, align 4
  %is_grey.addr = alloca i32, align 4
  %is_rgb16.addr = alloca i32*, align 8
  store i32 %bits_per_pixel, i32* %bits_per_pixel.addr, align 4
  store i32 %is_grey, i32* %is_grey.addr, align 4
  store i32* %is_rgb16, i32** %is_rgb16.addr, align 8
  %0 = load i32*, i32** %is_rgb16.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %is_rgb16.addr, align 8
  store i32 0, i32* %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %bits_per_pixel.addr, align 4
  switch i32 %2, label %sw.default [
    i32 8, label %sw.bb
    i32 16, label %sw.bb1
    i32 15, label %sw.bb5
    i32 24, label %sw.bb9
    i32 32, label %sw.bb9
  ]

sw.bb:                                            ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

sw.bb1:                                           ; preds = %if.end
  %3 = load i32, i32* %is_grey.addr, align 4
  %tobool2 = icmp ne i32 %3, 0
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %sw.bb1
  store i32 2, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %sw.bb1
  br label %sw.bb5

sw.bb5:                                           ; preds = %if.end, %if.end4
  %4 = load i32*, i32** %is_rgb16.addr, align 8
  %tobool6 = icmp ne i32* %4, null
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %sw.bb5
  %5 = load i32*, i32** %is_rgb16.addr, align 8
  store i32 1, i32* %5, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %sw.bb5
  store i32 3, i32* %retval, align 4
  br label %return

sw.bb9:                                           ; preds = %if.end, %if.end
  %6 = load i32, i32* %bits_per_pixel.addr, align 4
  %div = sdiv i32 %6, 8
  store i32 %div, i32* %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.default, %sw.bb9, %if.end8, %if.then3, %sw.bb
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__mad3sizes_valid(i32 %a, i32 %b, i32 %c, i32 %add) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %add.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %add, i32* %add.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %call = call i32 @stbi__mul2sizes_valid(i32 %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %mul = mul nsw i32 %2, %3
  %4 = load i32, i32* %c.addr, align 4
  %call1 = call i32 @stbi__mul2sizes_valid(i32 %mul, i32 %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %5 = load i32, i32* %a.addr, align 4
  %6 = load i32, i32* %b.addr, align 4
  %mul3 = mul nsw i32 %5, %6
  %7 = load i32, i32* %c.addr, align 4
  %mul4 = mul nsw i32 %mul3, %7
  %8 = load i32, i32* %add.addr, align 4
  %call5 = call i32 @stbi__addsizes_valid(i32 %mul4, i32 %8)
  %tobool6 = icmp ne i32 %call5, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %9 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool6, %land.rhs ]
  %land.ext = zext i1 %9 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__malloc_mad3(i32 %a, i32 %b, i32 %c, i32 %add) #0 {
entry:
  %retval = alloca i8*, align 8
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %add.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %add, i32* %add.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %c.addr, align 4
  %3 = load i32, i32* %add.addr, align 4
  %call = call i32 @stbi__mad3sizes_valid(i32 %0, i32 %1, i32 %2, i32 %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4
  %5 = load i32, i32* %b.addr, align 4
  %mul = mul nsw i32 %4, %5
  %6 = load i32, i32* %c.addr, align 4
  %mul1 = mul nsw i32 %mul, %6
  %7 = load i32, i32* %add.addr, align 4
  %add2 = add nsw i32 %mul1, %7
  %conv = sext i32 %add2 to i64
  %call3 = call i8* @stbi__malloc(i64 %conv)
  store i8* %call3, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load i8*, i8** %retval, align 8
  ret i8* %8
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__skip(%struct.stbi__context* %s, i32 %n) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %n.addr = alloca i32, align 4
  %blen = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 11
  %3 = load i8*, i8** %img_buffer_end, align 8
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 10
  store i8* %3, i8** %img_buffer, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %5, i32 0, i32 4
  %read = getelementptr inbounds %struct.stbi_io_callbacks, %struct.stbi_io_callbacks* %io, i32 0, i32 0
  %6 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %read, align 8
  %tobool = icmp ne i32 (i8*, i8*, i32)* %6, null
  br i1 %tobool, label %if.then4, label %if.end14

if.then4:                                         ; preds = %if.end3
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end5 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %7, i32 0, i32 11
  %8 = load i8*, i8** %img_buffer_end5, align 8
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer6 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %9, i32 0, i32 10
  %10 = load i8*, i8** %img_buffer6, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  store i32 %conv, i32* %blen, align 4
  %11 = load i32, i32* %blen, align 4
  %12 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.then4
  %13 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end10 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %13, i32 0, i32 11
  %14 = load i8*, i8** %img_buffer_end10, align 8
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer11 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %15, i32 0, i32 10
  store i8* %14, i8** %img_buffer11, align 8
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io12 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %16, i32 0, i32 4
  %skip = getelementptr inbounds %struct.stbi_io_callbacks, %struct.stbi_io_callbacks* %io12, i32 0, i32 1
  %17 = load void (i8*, i32)*, void (i8*, i32)** %skip, align 8
  %18 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io_user_data = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %18, i32 0, i32 5
  %19 = load i8*, i8** %io_user_data, align 8
  %20 = load i32, i32* %n.addr, align 4
  %21 = load i32, i32* %blen, align 4
  %sub = sub nsw i32 %20, %21
  call void %17(i8* %19, i32 %sub)
  br label %return

if.end13:                                         ; preds = %if.then4
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end3
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer15 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %23, i32 0, i32 10
  %24 = load i8*, i8** %img_buffer15, align 8
  %idx.ext = sext i32 %22 to i64
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 %idx.ext
  store i8* %add.ptr, i8** %img_buffer15, align 8
  br label %return

return:                                           ; preds = %if.end14, %if.then9, %if.then2, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__getn(%struct.stbi__context* %s, i8* %buffer, i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %buffer.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %blen = alloca i32, align 4
  %res = alloca i32, align 4
  %count = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %0, i32 0, i32 4
  %read = getelementptr inbounds %struct.stbi_io_callbacks, %struct.stbi_io_callbacks* %io, i32 0, i32 0
  %1 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %read, align 8
  %tobool = icmp ne i32 (i8*, i8*, i32)* %1, null
  br i1 %tobool, label %if.then, label %if.end12

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 11
  %3 = load i8*, i8** %img_buffer_end, align 8
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 10
  %5 = load i8*, i8** %img_buffer, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  store i32 %conv, i32* %blen, align 4
  %6 = load i32, i32* %blen, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %8 = load i8*, i8** %buffer.addr, align 8
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer3 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %9, i32 0, i32 10
  %10 = load i8*, i8** %img_buffer3, align 8
  %11 = load i32, i32* %blen, align 4
  %conv4 = sext i32 %11 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %10, i64 %conv4, i1 false)
  %12 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io5 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %12, i32 0, i32 4
  %read6 = getelementptr inbounds %struct.stbi_io_callbacks, %struct.stbi_io_callbacks* %io5, i32 0, i32 0
  %13 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %read6, align 8
  %14 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io_user_data = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %14, i32 0, i32 5
  %15 = load i8*, i8** %io_user_data, align 8
  %16 = load i8*, i8** %buffer.addr, align 8
  %17 = load i32, i32* %blen, align 4
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %idx.ext
  %18 = load i32, i32* %n.addr, align 4
  %19 = load i32, i32* %blen, align 4
  %sub = sub nsw i32 %18, %19
  %call = call i32 %13(i8* %15, i8* %add.ptr, i32 %sub)
  store i32 %call, i32* %count, align 4
  %20 = load i32, i32* %count, align 4
  %21 = load i32, i32* %n.addr, align 4
  %22 = load i32, i32* %blen, align 4
  %sub7 = sub nsw i32 %21, %22
  %cmp8 = icmp eq i32 %20, %sub7
  %conv9 = zext i1 %cmp8 to i32
  store i32 %conv9, i32* %res, align 4
  %23 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end10 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %23, i32 0, i32 11
  %24 = load i8*, i8** %img_buffer_end10, align 8
  %25 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer11 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %25, i32 0, i32 10
  store i8* %24, i8** %img_buffer11, align 8
  %26 = load i32, i32* %res, align 4
  store i32 %26, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end12

if.end12:                                         ; preds = %if.end, %entry
  %27 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer13 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %27, i32 0, i32 10
  %28 = load i8*, i8** %img_buffer13, align 8
  %29 = load i32, i32* %n.addr, align 4
  %idx.ext14 = sext i32 %29 to i64
  %add.ptr15 = getelementptr inbounds i8, i8* %28, i64 %idx.ext14
  %30 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end16 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %30, i32 0, i32 11
  %31 = load i8*, i8** %img_buffer_end16, align 8
  %cmp17 = icmp ule i8* %add.ptr15, %31
  br i1 %cmp17, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.end12
  %32 = load i8*, i8** %buffer.addr, align 8
  %33 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer20 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %33, i32 0, i32 10
  %34 = load i8*, i8** %img_buffer20, align 8
  %35 = load i32, i32* %n.addr, align 4
  %conv21 = sext i32 %35 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %34, i64 %conv21, i1 false)
  %36 = load i32, i32* %n.addr, align 4
  %37 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer22 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %37, i32 0, i32 10
  %38 = load i8*, i8** %img_buffer22, align 8
  %idx.ext23 = sext i32 %36 to i64
  %add.ptr24 = getelementptr inbounds i8, i8* %38, i64 %idx.ext23
  store i8* %add.ptr24, i8** %img_buffer22, align 8
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.end12
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then19, %if.then2
  %39 = load i32, i32* %retval, align 4
  ret i32 %39
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__malloc_mad2(i32 %a, i32 %b, i32 %add) #0 {
entry:
  %retval = alloca i8*, align 8
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %add.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %add, i32* %add.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %add.addr, align 4
  %call = call i32 @stbi__mad2sizes_valid(i32 %0, i32 %1, i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %a.addr, align 4
  %4 = load i32, i32* %b.addr, align 4
  %mul = mul nsw i32 %3, %4
  %5 = load i32, i32* %add.addr, align 4
  %add1 = add nsw i32 %mul, %5
  %conv = sext i32 %add1 to i64
  %call2 = call i8* @stbi__malloc(i64 %conv)
  store i8* %call2, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 8
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__tga_read_rgb16(%struct.stbi__context* %s, i8* %out) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %out.addr = alloca i8*, align 8
  %px = alloca i16, align 2
  %fiveBitMask = alloca i16, align 2
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i8* %out, i8** %out.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__get16le(%struct.stbi__context* %0)
  %conv = trunc i32 %call to i16
  store i16 %conv, i16* %px, align 2
  store i16 31, i16* %fiveBitMask, align 2
  %1 = load i16, i16* %px, align 2
  %conv1 = zext i16 %1 to i32
  %shr = ashr i32 %conv1, 10
  %2 = load i16, i16* %fiveBitMask, align 2
  %conv2 = zext i16 %2 to i32
  %and = and i32 %shr, %conv2
  store i32 %and, i32* %r, align 4
  %3 = load i16, i16* %px, align 2
  %conv3 = zext i16 %3 to i32
  %shr4 = ashr i32 %conv3, 5
  %4 = load i16, i16* %fiveBitMask, align 2
  %conv5 = zext i16 %4 to i32
  %and6 = and i32 %shr4, %conv5
  store i32 %and6, i32* %g, align 4
  %5 = load i16, i16* %px, align 2
  %conv7 = zext i16 %5 to i32
  %6 = load i16, i16* %fiveBitMask, align 2
  %conv8 = zext i16 %6 to i32
  %and9 = and i32 %conv7, %conv8
  store i32 %and9, i32* %b, align 4
  %7 = load i32, i32* %r, align 4
  %mul = mul nsw i32 %7, 255
  %div = sdiv i32 %mul, 31
  %conv10 = trunc i32 %div to i8
  %8 = load i8*, i8** %out.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 0
  store i8 %conv10, i8* %arrayidx, align 1
  %9 = load i32, i32* %g, align 4
  %mul11 = mul nsw i32 %9, 255
  %div12 = sdiv i32 %mul11, 31
  %conv13 = trunc i32 %div12 to i8
  %10 = load i8*, i8** %out.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %10, i64 1
  store i8 %conv13, i8* %arrayidx14, align 1
  %11 = load i32, i32* %b, align 4
  %mul15 = mul nsw i32 %11, 255
  %div16 = sdiv i32 %mul15, 31
  %conv17 = trunc i32 %div16 to i8
  %12 = load i8*, i8** %out.addr, align 8
  %arrayidx18 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 %conv17, i8* %arrayidx18, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__convert_format(i8* %data, i32 %img_n, i32 %req_comp, i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %img_n.addr = alloca i32, align 4
  %req_comp.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %good = alloca i8*, align 8
  %src = alloca i8*, align 8
  %dest = alloca i8*, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %img_n, i32* %img_n.addr, align 4
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %req_comp.addr, align 4
  %1 = load i32, i32* %img_n.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %data.addr, align 8
  store i8* %2, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %req_comp.addr, align 4
  %cmp1 = icmp sge i32 %3, 1
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32, i32* %req_comp.addr, align 4
  %cmp2 = icmp sle i32 %4, 4
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %land.lhs.true
  br label %if.end4

if.else:                                          ; preds = %land.lhs.true, %if.end
  call void @__assert_fail(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.92, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 1700, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @__PRETTY_FUNCTION__.stbi__convert_format, i64 0, i64 0)) #11
  unreachable

if.end4:                                          ; preds = %if.then3
  %5 = load i32, i32* %req_comp.addr, align 4
  %6 = load i32, i32* %x.addr, align 4
  %7 = load i32, i32* %y.addr, align 4
  %call = call i8* @stbi__malloc_mad3(i32 %5, i32 %6, i32 %7, i32 0)
  store i8* %call, i8** %good, align 8
  %8 = load i8*, i8** %good, align 8
  %cmp5 = icmp eq i8* %8, null
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end4
  %9 = load i8*, i8** %data.addr, align 8
  call void @free(i8* %9) #10
  %call7 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool = icmp ne i32 %call7, 0
  %10 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %11 = ptrtoint i8* %cond to i64
  %12 = inttoptr i64 %11 to i8*
  store i8* %12, i8** %retval, align 8
  br label %return

if.end8:                                          ; preds = %if.end4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc205, %if.end8
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %y.addr, align 4
  %cmp9 = icmp slt i32 %13, %14
  br i1 %cmp9, label %for.body, label %for.end206

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %data.addr, align 8
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %x.addr, align 4
  %mul = mul i32 %16, %17
  %18 = load i32, i32* %img_n.addr, align 4
  %mul10 = mul i32 %mul, %18
  %idx.ext = zext i32 %mul10 to i64
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %idx.ext
  store i8* %add.ptr, i8** %src, align 8
  %19 = load i8*, i8** %good, align 8
  %20 = load i32, i32* %j, align 4
  %21 = load i32, i32* %x.addr, align 4
  %mul11 = mul i32 %20, %21
  %22 = load i32, i32* %req_comp.addr, align 4
  %mul12 = mul i32 %mul11, %22
  %idx.ext13 = zext i32 %mul12 to i64
  %add.ptr14 = getelementptr inbounds i8, i8* %19, i64 %idx.ext13
  store i8* %add.ptr14, i8** %dest, align 8
  %23 = load i32, i32* %img_n.addr, align 4
  %mul15 = mul nsw i32 %23, 8
  %24 = load i32, i32* %req_comp.addr, align 4
  %add = add nsw i32 %mul15, %24
  switch i32 %add, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb23
    i32 12, label %sw.bb37
    i32 17, label %sw.bb52
    i32 19, label %sw.bb64
    i32 20, label %sw.bb78
    i32 28, label %sw.bb94
    i32 25, label %sw.bb111
    i32 26, label %sw.bb128
    i32 33, label %sw.bb148
    i32 34, label %sw.bb167
    i32 35, label %sw.bb188
  ]

sw.bb:                                            ; preds = %for.body
  %25 = load i32, i32* %x.addr, align 4
  %sub = sub i32 %25, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc, %sw.bb
  %26 = load i32, i32* %i, align 4
  %cmp17 = icmp sge i32 %26, 0
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond16
  %27 = load i8*, i8** %src, align 8
  %arrayidx = getelementptr inbounds i8, i8* %27, i64 0
  %28 = load i8, i8* %arrayidx, align 1
  %29 = load i8*, i8** %dest, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %29, i64 0
  store i8 %28, i8* %arrayidx19, align 1
  %30 = load i8*, i8** %dest, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %30, i64 1
  store i8 -1, i8* %arrayidx20, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %31 = load i32, i32* %i, align 4
  %dec = add nsw i32 %31, -1
  store i32 %dec, i32* %i, align 4
  %32 = load i8*, i8** %src, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %add.ptr21, i8** %src, align 8
  %33 = load i8*, i8** %dest, align 8
  %add.ptr22 = getelementptr inbounds i8, i8* %33, i64 2
  store i8* %add.ptr22, i8** %dest, align 8
  br label %for.cond16

for.end:                                          ; preds = %for.cond16
  br label %sw.epilog

sw.bb23:                                          ; preds = %for.body
  %34 = load i32, i32* %x.addr, align 4
  %sub24 = sub i32 %34, 1
  store i32 %sub24, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc32, %sw.bb23
  %35 = load i32, i32* %i, align 4
  %cmp26 = icmp sge i32 %35, 0
  br i1 %cmp26, label %for.body27, label %for.end36

for.body27:                                       ; preds = %for.cond25
  %36 = load i8*, i8** %src, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %36, i64 0
  %37 = load i8, i8* %arrayidx28, align 1
  %38 = load i8*, i8** %dest, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %38, i64 2
  store i8 %37, i8* %arrayidx29, align 1
  %39 = load i8*, i8** %dest, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %39, i64 1
  store i8 %37, i8* %arrayidx30, align 1
  %40 = load i8*, i8** %dest, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %40, i64 0
  store i8 %37, i8* %arrayidx31, align 1
  br label %for.inc32

for.inc32:                                        ; preds = %for.body27
  %41 = load i32, i32* %i, align 4
  %dec33 = add nsw i32 %41, -1
  store i32 %dec33, i32* %i, align 4
  %42 = load i8*, i8** %src, align 8
  %add.ptr34 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %add.ptr34, i8** %src, align 8
  %43 = load i8*, i8** %dest, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %43, i64 3
  store i8* %add.ptr35, i8** %dest, align 8
  br label %for.cond25

for.end36:                                        ; preds = %for.cond25
  br label %sw.epilog

sw.bb37:                                          ; preds = %for.body
  %44 = load i32, i32* %x.addr, align 4
  %sub38 = sub i32 %44, 1
  store i32 %sub38, i32* %i, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc47, %sw.bb37
  %45 = load i32, i32* %i, align 4
  %cmp40 = icmp sge i32 %45, 0
  br i1 %cmp40, label %for.body41, label %for.end51

for.body41:                                       ; preds = %for.cond39
  %46 = load i8*, i8** %src, align 8
  %arrayidx42 = getelementptr inbounds i8, i8* %46, i64 0
  %47 = load i8, i8* %arrayidx42, align 1
  %48 = load i8*, i8** %dest, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %48, i64 2
  store i8 %47, i8* %arrayidx43, align 1
  %49 = load i8*, i8** %dest, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %49, i64 1
  store i8 %47, i8* %arrayidx44, align 1
  %50 = load i8*, i8** %dest, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %50, i64 0
  store i8 %47, i8* %arrayidx45, align 1
  %51 = load i8*, i8** %dest, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %51, i64 3
  store i8 -1, i8* %arrayidx46, align 1
  br label %for.inc47

for.inc47:                                        ; preds = %for.body41
  %52 = load i32, i32* %i, align 4
  %dec48 = add nsw i32 %52, -1
  store i32 %dec48, i32* %i, align 4
  %53 = load i8*, i8** %src, align 8
  %add.ptr49 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %add.ptr49, i8** %src, align 8
  %54 = load i8*, i8** %dest, align 8
  %add.ptr50 = getelementptr inbounds i8, i8* %54, i64 4
  store i8* %add.ptr50, i8** %dest, align 8
  br label %for.cond39

for.end51:                                        ; preds = %for.cond39
  br label %sw.epilog

sw.bb52:                                          ; preds = %for.body
  %55 = load i32, i32* %x.addr, align 4
  %sub53 = sub i32 %55, 1
  store i32 %sub53, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc59, %sw.bb52
  %56 = load i32, i32* %i, align 4
  %cmp55 = icmp sge i32 %56, 0
  br i1 %cmp55, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond54
  %57 = load i8*, i8** %src, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %57, i64 0
  %58 = load i8, i8* %arrayidx57, align 1
  %59 = load i8*, i8** %dest, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %59, i64 0
  store i8 %58, i8* %arrayidx58, align 1
  br label %for.inc59

for.inc59:                                        ; preds = %for.body56
  %60 = load i32, i32* %i, align 4
  %dec60 = add nsw i32 %60, -1
  store i32 %dec60, i32* %i, align 4
  %61 = load i8*, i8** %src, align 8
  %add.ptr61 = getelementptr inbounds i8, i8* %61, i64 2
  store i8* %add.ptr61, i8** %src, align 8
  %62 = load i8*, i8** %dest, align 8
  %add.ptr62 = getelementptr inbounds i8, i8* %62, i64 1
  store i8* %add.ptr62, i8** %dest, align 8
  br label %for.cond54

for.end63:                                        ; preds = %for.cond54
  br label %sw.epilog

sw.bb64:                                          ; preds = %for.body
  %63 = load i32, i32* %x.addr, align 4
  %sub65 = sub i32 %63, 1
  store i32 %sub65, i32* %i, align 4
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc73, %sw.bb64
  %64 = load i32, i32* %i, align 4
  %cmp67 = icmp sge i32 %64, 0
  br i1 %cmp67, label %for.body68, label %for.end77

for.body68:                                       ; preds = %for.cond66
  %65 = load i8*, i8** %src, align 8
  %arrayidx69 = getelementptr inbounds i8, i8* %65, i64 0
  %66 = load i8, i8* %arrayidx69, align 1
  %67 = load i8*, i8** %dest, align 8
  %arrayidx70 = getelementptr inbounds i8, i8* %67, i64 2
  store i8 %66, i8* %arrayidx70, align 1
  %68 = load i8*, i8** %dest, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %68, i64 1
  store i8 %66, i8* %arrayidx71, align 1
  %69 = load i8*, i8** %dest, align 8
  %arrayidx72 = getelementptr inbounds i8, i8* %69, i64 0
  store i8 %66, i8* %arrayidx72, align 1
  br label %for.inc73

for.inc73:                                        ; preds = %for.body68
  %70 = load i32, i32* %i, align 4
  %dec74 = add nsw i32 %70, -1
  store i32 %dec74, i32* %i, align 4
  %71 = load i8*, i8** %src, align 8
  %add.ptr75 = getelementptr inbounds i8, i8* %71, i64 2
  store i8* %add.ptr75, i8** %src, align 8
  %72 = load i8*, i8** %dest, align 8
  %add.ptr76 = getelementptr inbounds i8, i8* %72, i64 3
  store i8* %add.ptr76, i8** %dest, align 8
  br label %for.cond66

for.end77:                                        ; preds = %for.cond66
  br label %sw.epilog

sw.bb78:                                          ; preds = %for.body
  %73 = load i32, i32* %x.addr, align 4
  %sub79 = sub i32 %73, 1
  store i32 %sub79, i32* %i, align 4
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc89, %sw.bb78
  %74 = load i32, i32* %i, align 4
  %cmp81 = icmp sge i32 %74, 0
  br i1 %cmp81, label %for.body82, label %for.end93

for.body82:                                       ; preds = %for.cond80
  %75 = load i8*, i8** %src, align 8
  %arrayidx83 = getelementptr inbounds i8, i8* %75, i64 0
  %76 = load i8, i8* %arrayidx83, align 1
  %77 = load i8*, i8** %dest, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %77, i64 2
  store i8 %76, i8* %arrayidx84, align 1
  %78 = load i8*, i8** %dest, align 8
  %arrayidx85 = getelementptr inbounds i8, i8* %78, i64 1
  store i8 %76, i8* %arrayidx85, align 1
  %79 = load i8*, i8** %dest, align 8
  %arrayidx86 = getelementptr inbounds i8, i8* %79, i64 0
  store i8 %76, i8* %arrayidx86, align 1
  %80 = load i8*, i8** %src, align 8
  %arrayidx87 = getelementptr inbounds i8, i8* %80, i64 1
  %81 = load i8, i8* %arrayidx87, align 1
  %82 = load i8*, i8** %dest, align 8
  %arrayidx88 = getelementptr inbounds i8, i8* %82, i64 3
  store i8 %81, i8* %arrayidx88, align 1
  br label %for.inc89

for.inc89:                                        ; preds = %for.body82
  %83 = load i32, i32* %i, align 4
  %dec90 = add nsw i32 %83, -1
  store i32 %dec90, i32* %i, align 4
  %84 = load i8*, i8** %src, align 8
  %add.ptr91 = getelementptr inbounds i8, i8* %84, i64 2
  store i8* %add.ptr91, i8** %src, align 8
  %85 = load i8*, i8** %dest, align 8
  %add.ptr92 = getelementptr inbounds i8, i8* %85, i64 4
  store i8* %add.ptr92, i8** %dest, align 8
  br label %for.cond80

for.end93:                                        ; preds = %for.cond80
  br label %sw.epilog

sw.bb94:                                          ; preds = %for.body
  %86 = load i32, i32* %x.addr, align 4
  %sub95 = sub i32 %86, 1
  store i32 %sub95, i32* %i, align 4
  br label %for.cond96

for.cond96:                                       ; preds = %for.inc106, %sw.bb94
  %87 = load i32, i32* %i, align 4
  %cmp97 = icmp sge i32 %87, 0
  br i1 %cmp97, label %for.body98, label %for.end110

for.body98:                                       ; preds = %for.cond96
  %88 = load i8*, i8** %src, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %88, i64 0
  %89 = load i8, i8* %arrayidx99, align 1
  %90 = load i8*, i8** %dest, align 8
  %arrayidx100 = getelementptr inbounds i8, i8* %90, i64 0
  store i8 %89, i8* %arrayidx100, align 1
  %91 = load i8*, i8** %src, align 8
  %arrayidx101 = getelementptr inbounds i8, i8* %91, i64 1
  %92 = load i8, i8* %arrayidx101, align 1
  %93 = load i8*, i8** %dest, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %93, i64 1
  store i8 %92, i8* %arrayidx102, align 1
  %94 = load i8*, i8** %src, align 8
  %arrayidx103 = getelementptr inbounds i8, i8* %94, i64 2
  %95 = load i8, i8* %arrayidx103, align 1
  %96 = load i8*, i8** %dest, align 8
  %arrayidx104 = getelementptr inbounds i8, i8* %96, i64 2
  store i8 %95, i8* %arrayidx104, align 1
  %97 = load i8*, i8** %dest, align 8
  %arrayidx105 = getelementptr inbounds i8, i8* %97, i64 3
  store i8 -1, i8* %arrayidx105, align 1
  br label %for.inc106

for.inc106:                                       ; preds = %for.body98
  %98 = load i32, i32* %i, align 4
  %dec107 = add nsw i32 %98, -1
  store i32 %dec107, i32* %i, align 4
  %99 = load i8*, i8** %src, align 8
  %add.ptr108 = getelementptr inbounds i8, i8* %99, i64 3
  store i8* %add.ptr108, i8** %src, align 8
  %100 = load i8*, i8** %dest, align 8
  %add.ptr109 = getelementptr inbounds i8, i8* %100, i64 4
  store i8* %add.ptr109, i8** %dest, align 8
  br label %for.cond96

for.end110:                                       ; preds = %for.cond96
  br label %sw.epilog

sw.bb111:                                         ; preds = %for.body
  %101 = load i32, i32* %x.addr, align 4
  %sub112 = sub i32 %101, 1
  store i32 %sub112, i32* %i, align 4
  br label %for.cond113

for.cond113:                                      ; preds = %for.inc123, %sw.bb111
  %102 = load i32, i32* %i, align 4
  %cmp114 = icmp sge i32 %102, 0
  br i1 %cmp114, label %for.body115, label %for.end127

for.body115:                                      ; preds = %for.cond113
  %103 = load i8*, i8** %src, align 8
  %arrayidx116 = getelementptr inbounds i8, i8* %103, i64 0
  %104 = load i8, i8* %arrayidx116, align 1
  %conv = zext i8 %104 to i32
  %105 = load i8*, i8** %src, align 8
  %arrayidx117 = getelementptr inbounds i8, i8* %105, i64 1
  %106 = load i8, i8* %arrayidx117, align 1
  %conv118 = zext i8 %106 to i32
  %107 = load i8*, i8** %src, align 8
  %arrayidx119 = getelementptr inbounds i8, i8* %107, i64 2
  %108 = load i8, i8* %arrayidx119, align 1
  %conv120 = zext i8 %108 to i32
  %call121 = call zeroext i8 @stbi__compute_y(i32 %conv, i32 %conv118, i32 %conv120)
  %109 = load i8*, i8** %dest, align 8
  %arrayidx122 = getelementptr inbounds i8, i8* %109, i64 0
  store i8 %call121, i8* %arrayidx122, align 1
  br label %for.inc123

for.inc123:                                       ; preds = %for.body115
  %110 = load i32, i32* %i, align 4
  %dec124 = add nsw i32 %110, -1
  store i32 %dec124, i32* %i, align 4
  %111 = load i8*, i8** %src, align 8
  %add.ptr125 = getelementptr inbounds i8, i8* %111, i64 3
  store i8* %add.ptr125, i8** %src, align 8
  %112 = load i8*, i8** %dest, align 8
  %add.ptr126 = getelementptr inbounds i8, i8* %112, i64 1
  store i8* %add.ptr126, i8** %dest, align 8
  br label %for.cond113

for.end127:                                       ; preds = %for.cond113
  br label %sw.epilog

sw.bb128:                                         ; preds = %for.body
  %113 = load i32, i32* %x.addr, align 4
  %sub129 = sub i32 %113, 1
  store i32 %sub129, i32* %i, align 4
  br label %for.cond130

for.cond130:                                      ; preds = %for.inc143, %sw.bb128
  %114 = load i32, i32* %i, align 4
  %cmp131 = icmp sge i32 %114, 0
  br i1 %cmp131, label %for.body133, label %for.end147

for.body133:                                      ; preds = %for.cond130
  %115 = load i8*, i8** %src, align 8
  %arrayidx134 = getelementptr inbounds i8, i8* %115, i64 0
  %116 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %116 to i32
  %117 = load i8*, i8** %src, align 8
  %arrayidx136 = getelementptr inbounds i8, i8* %117, i64 1
  %118 = load i8, i8* %arrayidx136, align 1
  %conv137 = zext i8 %118 to i32
  %119 = load i8*, i8** %src, align 8
  %arrayidx138 = getelementptr inbounds i8, i8* %119, i64 2
  %120 = load i8, i8* %arrayidx138, align 1
  %conv139 = zext i8 %120 to i32
  %call140 = call zeroext i8 @stbi__compute_y(i32 %conv135, i32 %conv137, i32 %conv139)
  %121 = load i8*, i8** %dest, align 8
  %arrayidx141 = getelementptr inbounds i8, i8* %121, i64 0
  store i8 %call140, i8* %arrayidx141, align 1
  %122 = load i8*, i8** %dest, align 8
  %arrayidx142 = getelementptr inbounds i8, i8* %122, i64 1
  store i8 -1, i8* %arrayidx142, align 1
  br label %for.inc143

for.inc143:                                       ; preds = %for.body133
  %123 = load i32, i32* %i, align 4
  %dec144 = add nsw i32 %123, -1
  store i32 %dec144, i32* %i, align 4
  %124 = load i8*, i8** %src, align 8
  %add.ptr145 = getelementptr inbounds i8, i8* %124, i64 3
  store i8* %add.ptr145, i8** %src, align 8
  %125 = load i8*, i8** %dest, align 8
  %add.ptr146 = getelementptr inbounds i8, i8* %125, i64 2
  store i8* %add.ptr146, i8** %dest, align 8
  br label %for.cond130

for.end147:                                       ; preds = %for.cond130
  br label %sw.epilog

sw.bb148:                                         ; preds = %for.body
  %126 = load i32, i32* %x.addr, align 4
  %sub149 = sub i32 %126, 1
  store i32 %sub149, i32* %i, align 4
  br label %for.cond150

for.cond150:                                      ; preds = %for.inc162, %sw.bb148
  %127 = load i32, i32* %i, align 4
  %cmp151 = icmp sge i32 %127, 0
  br i1 %cmp151, label %for.body153, label %for.end166

for.body153:                                      ; preds = %for.cond150
  %128 = load i8*, i8** %src, align 8
  %arrayidx154 = getelementptr inbounds i8, i8* %128, i64 0
  %129 = load i8, i8* %arrayidx154, align 1
  %conv155 = zext i8 %129 to i32
  %130 = load i8*, i8** %src, align 8
  %arrayidx156 = getelementptr inbounds i8, i8* %130, i64 1
  %131 = load i8, i8* %arrayidx156, align 1
  %conv157 = zext i8 %131 to i32
  %132 = load i8*, i8** %src, align 8
  %arrayidx158 = getelementptr inbounds i8, i8* %132, i64 2
  %133 = load i8, i8* %arrayidx158, align 1
  %conv159 = zext i8 %133 to i32
  %call160 = call zeroext i8 @stbi__compute_y(i32 %conv155, i32 %conv157, i32 %conv159)
  %134 = load i8*, i8** %dest, align 8
  %arrayidx161 = getelementptr inbounds i8, i8* %134, i64 0
  store i8 %call160, i8* %arrayidx161, align 1
  br label %for.inc162

for.inc162:                                       ; preds = %for.body153
  %135 = load i32, i32* %i, align 4
  %dec163 = add nsw i32 %135, -1
  store i32 %dec163, i32* %i, align 4
  %136 = load i8*, i8** %src, align 8
  %add.ptr164 = getelementptr inbounds i8, i8* %136, i64 4
  store i8* %add.ptr164, i8** %src, align 8
  %137 = load i8*, i8** %dest, align 8
  %add.ptr165 = getelementptr inbounds i8, i8* %137, i64 1
  store i8* %add.ptr165, i8** %dest, align 8
  br label %for.cond150

for.end166:                                       ; preds = %for.cond150
  br label %sw.epilog

sw.bb167:                                         ; preds = %for.body
  %138 = load i32, i32* %x.addr, align 4
  %sub168 = sub i32 %138, 1
  store i32 %sub168, i32* %i, align 4
  br label %for.cond169

for.cond169:                                      ; preds = %for.inc183, %sw.bb167
  %139 = load i32, i32* %i, align 4
  %cmp170 = icmp sge i32 %139, 0
  br i1 %cmp170, label %for.body172, label %for.end187

for.body172:                                      ; preds = %for.cond169
  %140 = load i8*, i8** %src, align 8
  %arrayidx173 = getelementptr inbounds i8, i8* %140, i64 0
  %141 = load i8, i8* %arrayidx173, align 1
  %conv174 = zext i8 %141 to i32
  %142 = load i8*, i8** %src, align 8
  %arrayidx175 = getelementptr inbounds i8, i8* %142, i64 1
  %143 = load i8, i8* %arrayidx175, align 1
  %conv176 = zext i8 %143 to i32
  %144 = load i8*, i8** %src, align 8
  %arrayidx177 = getelementptr inbounds i8, i8* %144, i64 2
  %145 = load i8, i8* %arrayidx177, align 1
  %conv178 = zext i8 %145 to i32
  %call179 = call zeroext i8 @stbi__compute_y(i32 %conv174, i32 %conv176, i32 %conv178)
  %146 = load i8*, i8** %dest, align 8
  %arrayidx180 = getelementptr inbounds i8, i8* %146, i64 0
  store i8 %call179, i8* %arrayidx180, align 1
  %147 = load i8*, i8** %src, align 8
  %arrayidx181 = getelementptr inbounds i8, i8* %147, i64 3
  %148 = load i8, i8* %arrayidx181, align 1
  %149 = load i8*, i8** %dest, align 8
  %arrayidx182 = getelementptr inbounds i8, i8* %149, i64 1
  store i8 %148, i8* %arrayidx182, align 1
  br label %for.inc183

for.inc183:                                       ; preds = %for.body172
  %150 = load i32, i32* %i, align 4
  %dec184 = add nsw i32 %150, -1
  store i32 %dec184, i32* %i, align 4
  %151 = load i8*, i8** %src, align 8
  %add.ptr185 = getelementptr inbounds i8, i8* %151, i64 4
  store i8* %add.ptr185, i8** %src, align 8
  %152 = load i8*, i8** %dest, align 8
  %add.ptr186 = getelementptr inbounds i8, i8* %152, i64 2
  store i8* %add.ptr186, i8** %dest, align 8
  br label %for.cond169

for.end187:                                       ; preds = %for.cond169
  br label %sw.epilog

sw.bb188:                                         ; preds = %for.body
  %153 = load i32, i32* %x.addr, align 4
  %sub189 = sub i32 %153, 1
  store i32 %sub189, i32* %i, align 4
  br label %for.cond190

for.cond190:                                      ; preds = %for.inc200, %sw.bb188
  %154 = load i32, i32* %i, align 4
  %cmp191 = icmp sge i32 %154, 0
  br i1 %cmp191, label %for.body193, label %for.end204

for.body193:                                      ; preds = %for.cond190
  %155 = load i8*, i8** %src, align 8
  %arrayidx194 = getelementptr inbounds i8, i8* %155, i64 0
  %156 = load i8, i8* %arrayidx194, align 1
  %157 = load i8*, i8** %dest, align 8
  %arrayidx195 = getelementptr inbounds i8, i8* %157, i64 0
  store i8 %156, i8* %arrayidx195, align 1
  %158 = load i8*, i8** %src, align 8
  %arrayidx196 = getelementptr inbounds i8, i8* %158, i64 1
  %159 = load i8, i8* %arrayidx196, align 1
  %160 = load i8*, i8** %dest, align 8
  %arrayidx197 = getelementptr inbounds i8, i8* %160, i64 1
  store i8 %159, i8* %arrayidx197, align 1
  %161 = load i8*, i8** %src, align 8
  %arrayidx198 = getelementptr inbounds i8, i8* %161, i64 2
  %162 = load i8, i8* %arrayidx198, align 1
  %163 = load i8*, i8** %dest, align 8
  %arrayidx199 = getelementptr inbounds i8, i8* %163, i64 2
  store i8 %162, i8* %arrayidx199, align 1
  br label %for.inc200

for.inc200:                                       ; preds = %for.body193
  %164 = load i32, i32* %i, align 4
  %dec201 = add nsw i32 %164, -1
  store i32 %dec201, i32* %i, align 4
  %165 = load i8*, i8** %src, align 8
  %add.ptr202 = getelementptr inbounds i8, i8* %165, i64 4
  store i8* %add.ptr202, i8** %src, align 8
  %166 = load i8*, i8** %dest, align 8
  %add.ptr203 = getelementptr inbounds i8, i8* %166, i64 3
  store i8* %add.ptr203, i8** %dest, align 8
  br label %for.cond190

for.end204:                                       ; preds = %for.cond190
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.93, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 1729, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @__PRETTY_FUNCTION__.stbi__convert_format, i64 0, i64 0)) #11
  unreachable

sw.epilog:                                        ; preds = %for.end204, %for.end187, %for.end166, %for.end147, %for.end127, %for.end110, %for.end93, %for.end77, %for.end63, %for.end51, %for.end36, %for.end
  br label %for.inc205

for.inc205:                                       ; preds = %sw.epilog
  %167 = load i32, i32* %j, align 4
  %inc = add nsw i32 %167, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end206:                                       ; preds = %for.cond
  %168 = load i8*, i8** %data.addr, align 8
  call void @free(i8* %168) #10
  %169 = load i8*, i8** %good, align 8
  store i8* %169, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end206, %if.then6, %if.then
  %170 = load i8*, i8** %retval, align 8
  ret i8* %170
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i8 @stbi__compute_y(i32 %r, i32 %g, i32 %b) #0 {
entry:
  %r.addr = alloca i32, align 4
  %g.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %r, i32* %r.addr, align 4
  store i32 %g, i32* %g.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %r.addr, align 4
  %mul = mul nsw i32 %0, 77
  %1 = load i32, i32* %g.addr, align 4
  %mul1 = mul nsw i32 %1, 150
  %add = add nsw i32 %mul, %mul1
  %2 = load i32, i32* %b.addr, align 4
  %mul2 = mul nsw i32 29, %2
  %add3 = add nsw i32 %add, %mul2
  %shr = ashr i32 %add3, 8
  %conv = trunc i32 %shr to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__mad2sizes_valid(i32 %a, i32 %b, i32 %add) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %add.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %add, i32* %add.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %call = call i32 @stbi__mul2sizes_valid(i32 %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %mul = mul nsw i32 %2, %3
  %4 = load i32, i32* %add.addr, align 4
  %call1 = call i32 @stbi__addsizes_valid(i32 %mul, i32 %4)
  %tobool2 = icmp ne i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__mul2sizes_valid(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %b.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %3 = load i32, i32* %a.addr, align 4
  %4 = load i32, i32* %b.addr, align 4
  %div = sdiv i32 2147483647, %4
  %cmp5 = icmp sle i32 %3, %div
  %conv = zext i1 %cmp5 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__addsizes_valid(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %sub = sub nsw i32 2147483647, %2
  %cmp1 = icmp sle i32 %1, %sub
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__refill_buffer(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %n = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %0, i32 0, i32 4
  %read = getelementptr inbounds %struct.stbi_io_callbacks, %struct.stbi_io_callbacks* %io, i32 0, i32 0
  %1 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %read, align 8
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io_user_data = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 5
  %3 = load i8*, i8** %io_user_data, align 8
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %buffer_start = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 8
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer_start, i64 0, i64 0
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %buflen = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %5, i32 0, i32 7
  %6 = load i32, i32* %buflen, align 4
  %call = call i32 %1(i8* %3, i8* %arraydecay, i32 %6)
  store i32 %call, i32* %n, align 4
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %7, i32 0, i32 10
  %8 = load i8*, i8** %img_buffer, align 8
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_original = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %9, i32 0, i32 12
  %10 = load i8*, i8** %img_buffer_original, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %callback_already_read = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %11, i32 0, i32 9
  %12 = load i32, i32* %callback_already_read, align 8
  %add = add nsw i32 %12, %conv
  store i32 %add, i32* %callback_already_read, align 8
  %13 = load i32, i32* %n, align 4
  %cmp = icmp eq i32 %13, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %14 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %read_from_callbacks = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %14, i32 0, i32 6
  store i32 0, i32* %read_from_callbacks, align 8
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %buffer_start2 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %15, i32 0, i32 8
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer_start2, i64 0, i64 0
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer4 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %16, i32 0, i32 10
  store i8* %arraydecay3, i8** %img_buffer4, align 8
  %17 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %buffer_start5 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %17, i32 0, i32 8
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer_start5, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay6, i64 1
  %18 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %18, i32 0, i32 11
  store i8* %add.ptr, i8** %img_buffer_end, align 8
  %19 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer7 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %19, i32 0, i32 10
  %20 = load i8*, i8** %img_buffer7, align 8
  store i8 0, i8* %20, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %buffer_start8 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %21, i32 0, i32 8
  %arraydecay9 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer_start8, i64 0, i64 0
  %22 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer10 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %22, i32 0, i32 10
  store i8* %arraydecay9, i8** %img_buffer10, align 8
  %23 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %buffer_start11 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %23, i32 0, i32 8
  %arraydecay12 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer_start11, i64 0, i64 0
  %24 = load i32, i32* %n, align 4
  %idx.ext = sext i32 %24 to i64
  %add.ptr13 = getelementptr inbounds i8, i8* %arraydecay12, i64 %idx.ext
  %25 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end14 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %25, i32 0, i32 11
  store i8* %add.ptr13, i8** %img_buffer_end14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__rewind(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_original = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %0, i32 0, i32 12
  %1 = load i8*, i8** %img_buffer_original, align 8
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 10
  store i8* %1, i8** %img_buffer, align 8
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_original_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %3, i32 0, i32 13
  %4 = load i8*, i8** %img_buffer_original_end, align 8
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %5, i32 0, i32 11
  store i8* %4, i8** %img_buffer_end, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.pow.f64(double, double) #5

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__hdr_gettoken(%struct.stbi__context* %z, i8* %buffer) #0 {
entry:
  %z.addr = alloca %struct.stbi__context*, align 8
  %buffer.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  %c = alloca i8, align 1
  store %struct.stbi__context* %z, %struct.stbi__context** %z.addr, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 0, i32* %len, align 4
  store i8 0, i8* %c, align 1
  %0 = load %struct.stbi__context*, %struct.stbi__context** %z.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  store i8 %call, i8* %c, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.stbi__context*, %struct.stbi__context** %z.addr, align 8
  %call1 = call i32 @stbi__at_eof(%struct.stbi__context* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %2 = load i8, i8* %c, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %3, label %while.body, label %while.end16

while.body:                                       ; preds = %land.end
  %4 = load i8, i8* %c, align 1
  %5 = load i8*, i8** %buffer.addr, align 8
  %6 = load i32, i32* %len, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %len, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  store i8 %4, i8* %arrayidx, align 1
  %7 = load i32, i32* %len, align 4
  %cmp3 = icmp eq i32 %7, 1023
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.cond5

while.cond5:                                      ; preds = %while.body14, %if.then
  %8 = load %struct.stbi__context*, %struct.stbi__context** %z.addr, align 8
  %call6 = call i32 @stbi__at_eof(%struct.stbi__context* %8)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %land.end13, label %land.rhs8

land.rhs8:                                        ; preds = %while.cond5
  %9 = load %struct.stbi__context*, %struct.stbi__context** %z.addr, align 8
  %call9 = call zeroext i8 @stbi__get8(%struct.stbi__context* %9)
  %conv10 = zext i8 %call9 to i32
  %cmp11 = icmp ne i32 %conv10, 10
  br label %land.end13

land.end13:                                       ; preds = %land.rhs8, %while.cond5
  %10 = phi i1 [ false, %while.cond5 ], [ %cmp11, %land.rhs8 ]
  br i1 %10, label %while.body14, label %while.end

while.body14:                                     ; preds = %land.end13
  br label %while.cond5

while.end:                                        ; preds = %land.end13
  br label %while.end16

if.end:                                           ; preds = %while.body
  %11 = load %struct.stbi__context*, %struct.stbi__context** %z.addr, align 8
  %call15 = call zeroext i8 @stbi__get8(%struct.stbi__context* %11)
  store i8 %call15, i8* %c, align 1
  br label %while.cond

while.end16:                                      ; preds = %while.end, %land.end
  %12 = load i8*, i8** %buffer.addr, align 8
  %13 = load i32, i32* %len, align 4
  %idxprom17 = sext i32 %13 to i64
  %arrayidx18 = getelementptr inbounds i8, i8* %12, i64 %idxprom17
  store i8 0, i8* %arrayidx18, align 1
  %14 = load i8*, i8** %buffer.addr, align 8
  ret i8* %14
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #6

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #6

; Function Attrs: nounwind
declare i64 @strtol(i8*, i8**, i32) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__mad4sizes_valid(i32 %a, i32 %b, i32 %c, i32 %d, i32 %add) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %add.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store i32 %add, i32* %add.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %call = call i32 @stbi__mul2sizes_valid(i32 %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %mul = mul nsw i32 %2, %3
  %4 = load i32, i32* %c.addr, align 4
  %call1 = call i32 @stbi__mul2sizes_valid(i32 %mul, i32 %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %land.lhs.true3, label %land.end

land.lhs.true3:                                   ; preds = %land.lhs.true
  %5 = load i32, i32* %a.addr, align 4
  %6 = load i32, i32* %b.addr, align 4
  %mul4 = mul nsw i32 %5, %6
  %7 = load i32, i32* %c.addr, align 4
  %mul5 = mul nsw i32 %mul4, %7
  %8 = load i32, i32* %d.addr, align 4
  %call6 = call i32 @stbi__mul2sizes_valid(i32 %mul5, i32 %8)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true3
  %9 = load i32, i32* %a.addr, align 4
  %10 = load i32, i32* %b.addr, align 4
  %mul8 = mul nsw i32 %9, %10
  %11 = load i32, i32* %c.addr, align 4
  %mul9 = mul nsw i32 %mul8, %11
  %12 = load i32, i32* %d.addr, align 4
  %mul10 = mul nsw i32 %mul9, %12
  %13 = load i32, i32* %add.addr, align 4
  %call11 = call i32 @stbi__addsizes_valid(i32 %mul10, i32 %13)
  %tobool12 = icmp ne i32 %call11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true3, %land.lhs.true, %entry
  %14 = phi i1 [ false, %land.lhs.true3 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool12, %land.rhs ]
  %land.ext = zext i1 %14 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__malloc_mad4(i32 %a, i32 %b, i32 %c, i32 %d, i32 %add) #0 {
entry:
  %retval = alloca i8*, align 8
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %add.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store i32 %add, i32* %add.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %c.addr, align 4
  %3 = load i32, i32* %d.addr, align 4
  %4 = load i32, i32* %add.addr, align 4
  %call = call i32 @stbi__mad4sizes_valid(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %a.addr, align 4
  %6 = load i32, i32* %b.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %c.addr, align 4
  %mul1 = mul nsw i32 %mul, %7
  %8 = load i32, i32* %d.addr, align 4
  %mul2 = mul nsw i32 %mul1, %8
  %9 = load i32, i32* %add.addr, align 4
  %add3 = add nsw i32 %mul2, %9
  %conv = sext i32 %add3 to i64
  %call4 = call i8* @stbi__malloc(i64 %conv)
  store i8* %call4, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i8*, i8** %retval, align 8
  ret i8* %10
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__hdr_convert(float* %output, i8* %input, i32 %req_comp) #0 {
entry:
  %output.addr = alloca float*, align 8
  %input.addr = alloca i8*, align 8
  %req_comp.addr = alloca i32, align 4
  %f1 = alloca float, align 4
  store float* %output, float** %output.addr, align 8
  store i8* %input, i8** %input.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load i8*, i8** %input.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 3
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.else42

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %input.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i64 3
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %sub = sub nsw i32 %conv3, 136
  %call = call double @ldexp(double 1.000000e+00, i32 %sub) #9
  %conv4 = fptrunc double %call to float
  store float %conv4, float* %f1, align 4
  %4 = load i32, i32* %req_comp.addr, align 4
  %cmp5 = icmp sle i32 %4, 2
  br i1 %cmp5, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then
  %5 = load i8*, i8** %input.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %6 to i32
  %7 = load i8*, i8** %input.addr, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %8 to i32
  %add = add nsw i32 %conv9, %conv11
  %9 = load i8*, i8** %input.addr, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %9, i64 2
  %10 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %10 to i32
  %add14 = add nsw i32 %add, %conv13
  %conv15 = sitofp i32 %add14 to float
  %11 = load float, float* %f1, align 4
  %mul = fmul float %conv15, %11
  %div = fdiv float %mul, 3.000000e+00
  %12 = load float*, float** %output.addr, align 8
  %arrayidx16 = getelementptr inbounds float, float* %12, i64 0
  store float %div, float* %arrayidx16, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load i8*, i8** %input.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %14 to i32
  %conv19 = sitofp i32 %conv18 to float
  %15 = load float, float* %f1, align 4
  %mul20 = fmul float %conv19, %15
  %16 = load float*, float** %output.addr, align 8
  %arrayidx21 = getelementptr inbounds float, float* %16, i64 0
  store float %mul20, float* %arrayidx21, align 4
  %17 = load i8*, i8** %input.addr, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %18 to i32
  %conv24 = sitofp i32 %conv23 to float
  %19 = load float, float* %f1, align 4
  %mul25 = fmul float %conv24, %19
  %20 = load float*, float** %output.addr, align 8
  %arrayidx26 = getelementptr inbounds float, float* %20, i64 1
  store float %mul25, float* %arrayidx26, align 4
  %21 = load i8*, i8** %input.addr, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %21, i64 2
  %22 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %22 to i32
  %conv29 = sitofp i32 %conv28 to float
  %23 = load float, float* %f1, align 4
  %mul30 = fmul float %conv29, %23
  %24 = load float*, float** %output.addr, align 8
  %arrayidx31 = getelementptr inbounds float, float* %24, i64 2
  store float %mul30, float* %arrayidx31, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  %25 = load i32, i32* %req_comp.addr, align 4
  %cmp32 = icmp eq i32 %25, 2
  br i1 %cmp32, label %if.then34, label %if.end36

if.then34:                                        ; preds = %if.end
  %26 = load float*, float** %output.addr, align 8
  %arrayidx35 = getelementptr inbounds float, float* %26, i64 1
  store float 1.000000e+00, float* %arrayidx35, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end
  %27 = load i32, i32* %req_comp.addr, align 4
  %cmp37 = icmp eq i32 %27, 4
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %if.end36
  %28 = load float*, float** %output.addr, align 8
  %arrayidx40 = getelementptr inbounds float, float* %28, i64 3
  store float 1.000000e+00, float* %arrayidx40, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %if.end36
  br label %if.end52

if.else42:                                        ; preds = %entry
  %29 = load i32, i32* %req_comp.addr, align 4
  switch i32 %29, label %sw.epilog [
    i32 4, label %sw.bb
    i32 3, label %sw.bb44
    i32 2, label %sw.bb48
    i32 1, label %sw.bb50
  ]

sw.bb:                                            ; preds = %if.else42
  %30 = load float*, float** %output.addr, align 8
  %arrayidx43 = getelementptr inbounds float, float* %30, i64 3
  store float 1.000000e+00, float* %arrayidx43, align 4
  br label %sw.bb44

sw.bb44:                                          ; preds = %if.else42, %sw.bb
  %31 = load float*, float** %output.addr, align 8
  %arrayidx45 = getelementptr inbounds float, float* %31, i64 2
  store float 0.000000e+00, float* %arrayidx45, align 4
  %32 = load float*, float** %output.addr, align 8
  %arrayidx46 = getelementptr inbounds float, float* %32, i64 1
  store float 0.000000e+00, float* %arrayidx46, align 4
  %33 = load float*, float** %output.addr, align 8
  %arrayidx47 = getelementptr inbounds float, float* %33, i64 0
  store float 0.000000e+00, float* %arrayidx47, align 4
  br label %sw.epilog

sw.bb48:                                          ; preds = %if.else42
  %34 = load float*, float** %output.addr, align 8
  %arrayidx49 = getelementptr inbounds float, float* %34, i64 1
  store float 1.000000e+00, float* %arrayidx49, align 4
  br label %sw.bb50

sw.bb50:                                          ; preds = %if.else42, %sw.bb48
  %35 = load float*, float** %output.addr, align 8
  %arrayidx51 = getelementptr inbounds float, float* %35, i64 0
  store float 0.000000e+00, float* %arrayidx51, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.else42, %sw.bb50, %sw.bb44
  br label %if.end52

if.end52:                                         ; preds = %sw.epilog, %if.end41
  ret void
}

; Function Attrs: nounwind readnone
declare double @ldexp(double, i32) #7

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__at_eof(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %0, i32 0, i32 4
  %read = getelementptr inbounds %struct.stbi_io_callbacks, %struct.stbi_io_callbacks* %io, i32 0, i32 0
  %1 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %read, align 8
  %tobool = icmp ne i32 (i8*, i8*, i32)* %1, null
  br i1 %tobool, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io1 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 4
  %eof = getelementptr inbounds %struct.stbi_io_callbacks, %struct.stbi_io_callbacks* %io1, i32 0, i32 2
  %3 = load i32 (i8*)*, i32 (i8*)** %eof, align 8
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io_user_data = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 5
  %5 = load i8*, i8** %io_user_data, align 8
  %call = call i32 %3(i8* %5)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %read_from_callbacks = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %6, i32 0, i32 6
  %7 = load i32, i32* %read_from_callbacks, align 8
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %if.end
  br label %if.end6

if.end6:                                          ; preds = %if.end5, %entry
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %8, i32 0, i32 10
  %9 = load i8*, i8** %img_buffer, align 8
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %10, i32 0, i32 11
  %11 = load i8*, i8** %img_buffer_end, align 8
  %cmp7 = icmp uge i8* %9, %11
  %conv = zext i1 %cmp7 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then4, %if.then3
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__hdr_test_core(%struct.stbi__context* %s, i8* %signature) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %signature.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i8* %signature, i8** %signature.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %signature.addr, align 8
  %1 = load i32, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 %idxprom
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %3)
  %conv = zext i8 %call to i32
  %4 = load i8*, i8** %signature.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 %idxprom1
  %6 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %6 to i32
  %cmp = icmp ne i32 %conv, %conv3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %8)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__pnm_info(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %maxv = alloca i32, align 4
  %dummy = alloca i32, align 4
  %c = alloca i8, align 1
  %p = alloca i8, align 1
  %t = alloca i8, align 1
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load i32*, i32** %x.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32* %dummy, i32** %x.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32*, i32** %y.addr, align 8
  %tobool1 = icmp ne i32* %1, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32* %dummy, i32** %y.addr, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %2 = load i32*, i32** %comp.addr, align 8
  %tobool4 = icmp ne i32* %2, null
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end3
  store i32* %dummy, i32** %comp.addr, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end3
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %3)
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %4)
  store i8 %call, i8* %p, align 1
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call7 = call zeroext i8 @stbi__get8(%struct.stbi__context* %5)
  store i8 %call7, i8* %t, align 1
  %6 = load i8, i8* %p, align 1
  %conv = sext i8 %6 to i32
  %cmp = icmp ne i32 %conv, 80
  br i1 %cmp, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end6
  %7 = load i8, i8* %t, align 1
  %conv9 = sext i8 %7 to i32
  %cmp10 = icmp ne i32 %conv9, 53
  br i1 %cmp10, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %lor.lhs.false
  %8 = load i8, i8* %t, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp ne i32 %conv12, 54
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %land.lhs.true, %if.end6
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %9)
  store i32 0, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %10 = load i8, i8* %t, align 1
  %conv17 = sext i8 %10 to i32
  %cmp18 = icmp eq i32 %conv17, 54
  %11 = zext i1 %cmp18 to i64
  %cond = select i1 %cmp18, i32 3, i32 1
  %12 = load i32*, i32** %comp.addr, align 8
  store i32 %cond, i32* %12, align 4
  %13 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call20 = call zeroext i8 @stbi__get8(%struct.stbi__context* %13)
  store i8 %call20, i8* %c, align 1
  %14 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__pnm_skip_whitespace(%struct.stbi__context* %14, i8* %c)
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call21 = call i32 @stbi__pnm_getinteger(%struct.stbi__context* %15, i8* %c)
  %16 = load i32*, i32** %x.addr, align 8
  store i32 %call21, i32* %16, align 4
  %17 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__pnm_skip_whitespace(%struct.stbi__context* %17, i8* %c)
  %18 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call22 = call i32 @stbi__pnm_getinteger(%struct.stbi__context* %18, i8* %c)
  %19 = load i32*, i32** %y.addr, align 8
  store i32 %call22, i32* %19, align 4
  %20 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__pnm_skip_whitespace(%struct.stbi__context* %20, i8* %c)
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call23 = call i32 @stbi__pnm_getinteger(%struct.stbi__context* %21, i8* %c)
  store i32 %call23, i32* %maxv, align 4
  %22 = load i32, i32* %maxv, align 4
  %cmp24 = icmp sgt i32 %22, 255
  br i1 %cmp24, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.end16
  %call27 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.124, i64 0, i64 0))
  store i32 %call27, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.end16
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then26, %if.then15
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__pnm_skip_whitespace(%struct.stbi__context* %s, i8* %c) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %c.addr = alloca i8*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i8* %c, i8** %c.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %while.end20, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.cond
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__at_eof(%struct.stbi__context* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %1 = load i8*, i8** %c.addr, align 8
  %2 = load i8, i8* %1, align 1
  %call1 = call i32 @stbi__pnm_isspace(i8 signext %2)
  %tobool2 = icmp ne i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call3 = call zeroext i8 @stbi__get8(%struct.stbi__context* %4)
  %5 = load i8*, i8** %c.addr, align 8
  store i8 %call3, i8* %5, align 1
  br label %while.cond

while.end:                                        ; preds = %land.end
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call4 = call i32 @stbi__at_eof(%struct.stbi__context* %6)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %7 = load i8*, i8** %c.addr, align 8
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp = icmp ne i32 %conv, 35
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.end
  br label %for.end

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond7

while.cond7:                                      ; preds = %while.body18, %if.end
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call8 = call i32 @stbi__at_eof(%struct.stbi__context* %9)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %land.end17, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.cond7
  %10 = load i8*, i8** %c.addr, align 8
  %11 = load i8, i8* %10, align 1
  %conv10 = sext i8 %11 to i32
  %cmp11 = icmp ne i32 %conv10, 10
  br i1 %cmp11, label %land.rhs13, label %land.end17

land.rhs13:                                       ; preds = %land.lhs.true
  %12 = load i8*, i8** %c.addr, align 8
  %13 = load i8, i8* %12, align 1
  %conv14 = sext i8 %13 to i32
  %cmp15 = icmp ne i32 %conv14, 13
  br label %land.end17

land.end17:                                       ; preds = %land.rhs13, %land.lhs.true, %while.cond7
  %14 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond7 ], [ %cmp15, %land.rhs13 ]
  br i1 %14, label %while.body18, label %while.end20

while.body18:                                     ; preds = %land.end17
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call19 = call zeroext i8 @stbi__get8(%struct.stbi__context* %15)
  %16 = load i8*, i8** %c.addr, align 8
  store i8 %call19, i8* %16, align 1
  br label %while.cond7

while.end20:                                      ; preds = %land.end17
  br label %for.cond

for.end:                                          ; preds = %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__pnm_getinteger(%struct.stbi__context* %s, i8* %c) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %c.addr = alloca i8*, align 8
  %value = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i8* %c, i8** %c.addr, align 8
  store i32 0, i32* %value, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__at_eof(%struct.stbi__context* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %1 = load i8*, i8** %c.addr, align 8
  %2 = load i8, i8* %1, align 1
  %call1 = call i32 @stbi__pnm_isdigit(i8 signext %2)
  %tobool2 = icmp ne i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %4 = load i32, i32* %value, align 4
  %mul = mul nsw i32 %4, 10
  %5 = load i8*, i8** %c.addr, align 8
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %sub = sub nsw i32 %conv, 48
  %add = add nsw i32 %mul, %sub
  store i32 %add, i32* %value, align 4
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call3 = call zeroext i8 @stbi__get8(%struct.stbi__context* %7)
  %8 = load i8*, i8** %c.addr, align 8
  store i8 %call3, i8* %8, align 1
  br label %while.cond

while.end:                                        ; preds = %land.end
  %9 = load i32, i32* %value, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__pnm_isdigit(i8 signext %c) #0 {
entry:
  %c.addr = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = sext i8 %0 to i32
  %cmp = icmp sge i32 %conv, 48
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load i8, i8* %c.addr, align 1
  %conv2 = sext i8 %1 to i32
  %cmp3 = icmp sle i32 %conv2, 57
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__pnm_isspace(i8 signext %c) #0 {
entry:
  %c.addr = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = sext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 32
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8, i8* %c.addr, align 1
  %conv2 = sext i8 %1 to i32
  %cmp3 = icmp eq i32 %conv2, 9
  br i1 %cmp3, label %lor.end, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %2 = load i8, i8* %c.addr, align 1
  %conv6 = sext i8 %2 to i32
  %cmp7 = icmp eq i32 %conv6, 10
  br i1 %cmp7, label %lor.end, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %3 = load i8, i8* %c.addr, align 1
  %conv10 = sext i8 %3 to i32
  %cmp11 = icmp eq i32 %conv10, 11
  br i1 %cmp11, label %lor.end, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %4 = load i8, i8* %c.addr, align 1
  %conv14 = sext i8 %4 to i32
  %cmp15 = icmp eq i32 %conv14, 12
  br i1 %cmp15, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false13
  %5 = load i8, i8* %c.addr, align 1
  %conv17 = sext i8 %5 to i32
  %cmp18 = icmp eq i32 %conv17, 13
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  %6 = phi i1 [ true, %lor.lhs.false13 ], [ true, %lor.lhs.false9 ], [ true, %lor.lhs.false5 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp18, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__get16be(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %z = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  %conv = zext i8 %call to i32
  store i32 %conv, i32* %z, align 4
  %1 = load i32, i32* %z, align 4
  %shl = shl i32 %1, 8
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call zeroext i8 @stbi__get8(%struct.stbi__context* %2)
  %conv2 = zext i8 %call1 to i32
  %add = add nsw i32 %shl, %conv2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__get32be(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %z = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__get16be(%struct.stbi__context* %0)
  store i32 %call, i32* %z, align 4
  %1 = load i32, i32* %z, align 4
  %shl = shl i32 %1, 16
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call i32 @stbi__get16be(%struct.stbi__context* %2)
  %add = add i32 %shl, %call1
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__pic_load_core(%struct.stbi__context* %s, i32 %width, i32 %height, i32* %comp, i8* %result) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %comp.addr = alloca i32*, align 8
  %result.addr = alloca i8*, align 8
  %act_comp = alloca i32, align 4
  %num_packets = alloca i32, align 4
  %y = alloca i32, align 4
  %chained = alloca i32, align 4
  %packets = alloca [10 x %struct.stbi__pic_packet], align 16
  %packet = alloca %struct.stbi__pic_packet*, align 8
  %packet_idx = alloca i32, align 4
  %packet34 = alloca %struct.stbi__pic_packet*, align 8
  %dest = alloca i8*, align 8
  %x = alloca i32, align 4
  %left = alloca i32, align 4
  %i = alloca i32, align 4
  %count = alloca i8, align 1
  %value = alloca [4 x i8], align 1
  %left92 = alloca i32, align 4
  %count97 = alloca i32, align 4
  %i100 = alloca i32, align 4
  %value111 = alloca [4 x i8], align 1
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32* %comp, i32** %comp.addr, align 8
  store i8* %result, i8** %result.addr, align 8
  store i32 0, i32* %act_comp, align 4
  store i32 0, i32* %num_packets, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i32, i32* %num_packets, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp eq i64 %conv, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call = call i32 @stbi__err(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.123, i64 0, i64 0))
  %tobool = icmp ne i32 %call, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %2 = ptrtoint i8* %cond to i64
  %3 = inttoptr i64 %2 to i8*
  store i8* %3, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %do.body
  %4 = load i32, i32* %num_packets, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %num_packets, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [10 x %struct.stbi__pic_packet], [10 x %struct.stbi__pic_packet]* %packets, i64 0, i64 %idxprom
  store %struct.stbi__pic_packet* %arrayidx, %struct.stbi__pic_packet** %packet, align 8
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call2 = call zeroext i8 @stbi__get8(%struct.stbi__context* %5)
  %conv3 = zext i8 %call2 to i32
  store i32 %conv3, i32* %chained, align 4
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call4 = call zeroext i8 @stbi__get8(%struct.stbi__context* %6)
  %7 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet, align 8
  %size = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %7, i32 0, i32 0
  store i8 %call4, i8* %size, align 1
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call5 = call zeroext i8 @stbi__get8(%struct.stbi__context* %8)
  %9 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet, align 8
  %type = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %9, i32 0, i32 1
  store i8 %call5, i8* %type, align 1
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call6 = call zeroext i8 @stbi__get8(%struct.stbi__context* %10)
  %11 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet, align 8
  %channel = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %11, i32 0, i32 2
  store i8 %call6, i8* %channel, align 1
  %12 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet, align 8
  %channel7 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %12, i32 0, i32 2
  %13 = load i8, i8* %channel7, align 1
  %conv8 = zext i8 %13 to i32
  %14 = load i32, i32* %act_comp, align 4
  %or = or i32 %14, %conv8
  store i32 %or, i32* %act_comp, align 4
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call9 = call i32 @stbi__at_eof(%struct.stbi__context* %15)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %call12 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.122, i64 0, i64 0))
  %tobool13 = icmp ne i32 %call12, 0
  %16 = zext i1 %tobool13 to i64
  %cond14 = select i1 %tobool13, i8* null, i8* null
  %17 = ptrtoint i8* %cond14 to i64
  %18 = inttoptr i64 %17 to i8*
  store i8* %18, i8** %retval, align 8
  br label %return

if.end15:                                         ; preds = %if.end
  %19 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet, align 8
  %size16 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %19, i32 0, i32 0
  %20 = load i8, i8* %size16, align 1
  %conv17 = zext i8 %20 to i32
  %cmp18 = icmp ne i32 %conv17, 8
  br i1 %cmp18, label %if.then20, label %if.end24

if.then20:                                        ; preds = %if.end15
  %call21 = call i32 @stbi__err(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.123, i64 0, i64 0))
  %tobool22 = icmp ne i32 %call21, 0
  %21 = zext i1 %tobool22 to i64
  %cond23 = select i1 %tobool22, i8* null, i8* null
  %22 = ptrtoint i8* %cond23 to i64
  %23 = inttoptr i64 %22 to i8*
  store i8* %23, i8** %retval, align 8
  br label %return

if.end24:                                         ; preds = %if.end15
  br label %do.cond

do.cond:                                          ; preds = %if.end24
  %24 = load i32, i32* %chained, align 4
  %tobool25 = icmp ne i32 %24, 0
  br i1 %tobool25, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %25 = load i32, i32* %act_comp, align 4
  %and = and i32 %25, 16
  %tobool26 = icmp ne i32 %and, 0
  %26 = zext i1 %tobool26 to i64
  %cond27 = select i1 %tobool26, i32 4, i32 3
  %27 = load i32*, i32** %comp.addr, align 8
  store i32 %cond27, i32* %27, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc172, %do.end
  %28 = load i32, i32* %y, align 4
  %29 = load i32, i32* %height.addr, align 4
  %cmp28 = icmp slt i32 %28, %29
  br i1 %cmp28, label %for.body, label %for.end174

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %packet_idx, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc169, %for.body
  %30 = load i32, i32* %packet_idx, align 4
  %31 = load i32, i32* %num_packets, align 4
  %cmp31 = icmp slt i32 %30, %31
  br i1 %cmp31, label %for.body33, label %for.end171

for.body33:                                       ; preds = %for.cond30
  %32 = load i32, i32* %packet_idx, align 4
  %idxprom35 = sext i32 %32 to i64
  %arrayidx36 = getelementptr inbounds [10 x %struct.stbi__pic_packet], [10 x %struct.stbi__pic_packet]* %packets, i64 0, i64 %idxprom35
  store %struct.stbi__pic_packet* %arrayidx36, %struct.stbi__pic_packet** %packet34, align 8
  %33 = load i8*, i8** %result.addr, align 8
  %34 = load i32, i32* %y, align 4
  %35 = load i32, i32* %width.addr, align 4
  %mul = mul nsw i32 %34, %35
  %mul37 = mul nsw i32 %mul, 4
  %idx.ext = sext i32 %mul37 to i64
  %add.ptr = getelementptr inbounds i8, i8* %33, i64 %idx.ext
  store i8* %add.ptr, i8** %dest, align 8
  %36 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet34, align 8
  %type38 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %36, i32 0, i32 1
  %37 = load i8, i8* %type38, align 1
  %conv39 = zext i8 %37 to i32
  switch i32 %conv39, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb55
    i32 2, label %sw.bb91
  ]

sw.default:                                       ; preds = %for.body33
  %call40 = call i32 @stbi__err(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.123, i64 0, i64 0))
  %tobool41 = icmp ne i32 %call40, 0
  %38 = zext i1 %tobool41 to i64
  %cond42 = select i1 %tobool41, i8* null, i8* null
  %39 = ptrtoint i8* %cond42 to i64
  %40 = inttoptr i64 %39 to i8*
  store i8* %40, i8** %retval, align 8
  br label %return

sw.bb:                                            ; preds = %for.body33
  store i32 0, i32* %x, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc, %sw.bb
  %41 = load i32, i32* %x, align 4
  %42 = load i32, i32* %width.addr, align 4
  %cmp44 = icmp slt i32 %41, %42
  br i1 %cmp44, label %for.body46, label %for.end

for.body46:                                       ; preds = %for.cond43
  %43 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %44 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet34, align 8
  %channel47 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %44, i32 0, i32 2
  %45 = load i8, i8* %channel47, align 1
  %conv48 = zext i8 %45 to i32
  %46 = load i8*, i8** %dest, align 8
  %call49 = call i8* @stbi__readval(%struct.stbi__context* %43, i32 %conv48, i8* %46)
  %tobool50 = icmp ne i8* %call49, null
  br i1 %tobool50, label %if.end52, label %if.then51

if.then51:                                        ; preds = %for.body46
  store i8* null, i8** %retval, align 8
  br label %return

if.end52:                                         ; preds = %for.body46
  br label %for.inc

for.inc:                                          ; preds = %if.end52
  %47 = load i32, i32* %x, align 4
  %inc53 = add nsw i32 %47, 1
  store i32 %inc53, i32* %x, align 4
  %48 = load i8*, i8** %dest, align 8
  %add.ptr54 = getelementptr inbounds i8, i8* %48, i64 4
  store i8* %add.ptr54, i8** %dest, align 8
  br label %for.cond43

for.end:                                          ; preds = %for.cond43
  br label %sw.epilog

sw.bb55:                                          ; preds = %for.body33
  %49 = load i32, i32* %width.addr, align 4
  store i32 %49, i32* %left, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end89, %sw.bb55
  %50 = load i32, i32* %left, align 4
  %cmp56 = icmp sgt i32 %50, 0
  br i1 %cmp56, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %51 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call58 = call zeroext i8 @stbi__get8(%struct.stbi__context* %51)
  store i8 %call58, i8* %count, align 1
  %52 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call59 = call i32 @stbi__at_eof(%struct.stbi__context* %52)
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.then61, label %if.end65

if.then61:                                        ; preds = %while.body
  %call62 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.122, i64 0, i64 0))
  %tobool63 = icmp ne i32 %call62, 0
  %53 = zext i1 %tobool63 to i64
  %cond64 = select i1 %tobool63, i8* null, i8* null
  %54 = ptrtoint i8* %cond64 to i64
  %55 = inttoptr i64 %54 to i8*
  store i8* %55, i8** %retval, align 8
  br label %return

if.end65:                                         ; preds = %while.body
  %56 = load i8, i8* %count, align 1
  %conv66 = zext i8 %56 to i32
  %57 = load i32, i32* %left, align 4
  %cmp67 = icmp sgt i32 %conv66, %57
  br i1 %cmp67, label %if.then69, label %if.end71

if.then69:                                        ; preds = %if.end65
  %58 = load i32, i32* %left, align 4
  %conv70 = trunc i32 %58 to i8
  store i8 %conv70, i8* %count, align 1
  br label %if.end71

if.end71:                                         ; preds = %if.then69, %if.end65
  %59 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %60 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet34, align 8
  %channel72 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %60, i32 0, i32 2
  %61 = load i8, i8* %channel72, align 1
  %conv73 = zext i8 %61 to i32
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %value, i64 0, i64 0
  %call74 = call i8* @stbi__readval(%struct.stbi__context* %59, i32 %conv73, i8* %arraydecay)
  %tobool75 = icmp ne i8* %call74, null
  br i1 %tobool75, label %if.end77, label %if.then76

if.then76:                                        ; preds = %if.end71
  store i8* null, i8** %retval, align 8
  br label %return

if.end77:                                         ; preds = %if.end71
  store i32 0, i32* %i, align 4
  br label %for.cond78

for.cond78:                                       ; preds = %for.inc86, %if.end77
  %62 = load i32, i32* %i, align 4
  %63 = load i8, i8* %count, align 1
  %conv79 = zext i8 %63 to i32
  %cmp80 = icmp slt i32 %62, %conv79
  br i1 %cmp80, label %for.body82, label %for.end89

for.body82:                                       ; preds = %for.cond78
  %64 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet34, align 8
  %channel83 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %64, i32 0, i32 2
  %65 = load i8, i8* %channel83, align 1
  %conv84 = zext i8 %65 to i32
  %66 = load i8*, i8** %dest, align 8
  %arraydecay85 = getelementptr inbounds [4 x i8], [4 x i8]* %value, i64 0, i64 0
  call void @stbi__copyval(i32 %conv84, i8* %66, i8* %arraydecay85)
  br label %for.inc86

for.inc86:                                        ; preds = %for.body82
  %67 = load i32, i32* %i, align 4
  %inc87 = add nsw i32 %67, 1
  store i32 %inc87, i32* %i, align 4
  %68 = load i8*, i8** %dest, align 8
  %add.ptr88 = getelementptr inbounds i8, i8* %68, i64 4
  store i8* %add.ptr88, i8** %dest, align 8
  br label %for.cond78

for.end89:                                        ; preds = %for.cond78
  %69 = load i8, i8* %count, align 1
  %conv90 = zext i8 %69 to i32
  %70 = load i32, i32* %left, align 4
  %sub = sub nsw i32 %70, %conv90
  store i32 %sub, i32* %left, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %sw.epilog

sw.bb91:                                          ; preds = %for.body33
  %71 = load i32, i32* %width.addr, align 4
  store i32 %71, i32* %left92, align 4
  br label %while.cond93

while.cond93:                                     ; preds = %if.end166, %sw.bb91
  %72 = load i32, i32* %left92, align 4
  %cmp94 = icmp sgt i32 %72, 0
  br i1 %cmp94, label %while.body96, label %while.end168

while.body96:                                     ; preds = %while.cond93
  %73 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call98 = call zeroext i8 @stbi__get8(%struct.stbi__context* %73)
  %conv99 = zext i8 %call98 to i32
  store i32 %conv99, i32* %count97, align 4
  %74 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call101 = call i32 @stbi__at_eof(%struct.stbi__context* %74)
  %tobool102 = icmp ne i32 %call101, 0
  br i1 %tobool102, label %if.then103, label %if.end107

if.then103:                                       ; preds = %while.body96
  %call104 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.122, i64 0, i64 0))
  %tobool105 = icmp ne i32 %call104, 0
  %75 = zext i1 %tobool105 to i64
  %cond106 = select i1 %tobool105, i8* null, i8* null
  %76 = ptrtoint i8* %cond106 to i64
  %77 = inttoptr i64 %76 to i8*
  store i8* %77, i8** %retval, align 8
  br label %return

if.end107:                                        ; preds = %while.body96
  %78 = load i32, i32* %count97, align 4
  %cmp108 = icmp sge i32 %78, 128
  br i1 %cmp108, label %if.then110, label %if.else143

if.then110:                                       ; preds = %if.end107
  %79 = load i32, i32* %count97, align 4
  %cmp112 = icmp eq i32 %79, 128
  br i1 %cmp112, label %if.then114, label %if.else

if.then114:                                       ; preds = %if.then110
  %80 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call115 = call i32 @stbi__get16be(%struct.stbi__context* %80)
  store i32 %call115, i32* %count97, align 4
  br label %if.end117

if.else:                                          ; preds = %if.then110
  %81 = load i32, i32* %count97, align 4
  %sub116 = sub nsw i32 %81, 127
  store i32 %sub116, i32* %count97, align 4
  br label %if.end117

if.end117:                                        ; preds = %if.else, %if.then114
  %82 = load i32, i32* %count97, align 4
  %83 = load i32, i32* %left92, align 4
  %cmp118 = icmp sgt i32 %82, %83
  br i1 %cmp118, label %if.then120, label %if.end124

if.then120:                                       ; preds = %if.end117
  %call121 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.122, i64 0, i64 0))
  %tobool122 = icmp ne i32 %call121, 0
  %84 = zext i1 %tobool122 to i64
  %cond123 = select i1 %tobool122, i8* null, i8* null
  %85 = ptrtoint i8* %cond123 to i64
  %86 = inttoptr i64 %85 to i8*
  store i8* %86, i8** %retval, align 8
  br label %return

if.end124:                                        ; preds = %if.end117
  %87 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %88 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet34, align 8
  %channel125 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %88, i32 0, i32 2
  %89 = load i8, i8* %channel125, align 1
  %conv126 = zext i8 %89 to i32
  %arraydecay127 = getelementptr inbounds [4 x i8], [4 x i8]* %value111, i64 0, i64 0
  %call128 = call i8* @stbi__readval(%struct.stbi__context* %87, i32 %conv126, i8* %arraydecay127)
  %tobool129 = icmp ne i8* %call128, null
  br i1 %tobool129, label %if.end131, label %if.then130

if.then130:                                       ; preds = %if.end124
  store i8* null, i8** %retval, align 8
  br label %return

if.end131:                                        ; preds = %if.end124
  store i32 0, i32* %i100, align 4
  br label %for.cond132

for.cond132:                                      ; preds = %for.inc139, %if.end131
  %90 = load i32, i32* %i100, align 4
  %91 = load i32, i32* %count97, align 4
  %cmp133 = icmp slt i32 %90, %91
  br i1 %cmp133, label %for.body135, label %for.end142

for.body135:                                      ; preds = %for.cond132
  %92 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet34, align 8
  %channel136 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %92, i32 0, i32 2
  %93 = load i8, i8* %channel136, align 1
  %conv137 = zext i8 %93 to i32
  %94 = load i8*, i8** %dest, align 8
  %arraydecay138 = getelementptr inbounds [4 x i8], [4 x i8]* %value111, i64 0, i64 0
  call void @stbi__copyval(i32 %conv137, i8* %94, i8* %arraydecay138)
  br label %for.inc139

for.inc139:                                       ; preds = %for.body135
  %95 = load i32, i32* %i100, align 4
  %inc140 = add nsw i32 %95, 1
  store i32 %inc140, i32* %i100, align 4
  %96 = load i8*, i8** %dest, align 8
  %add.ptr141 = getelementptr inbounds i8, i8* %96, i64 4
  store i8* %add.ptr141, i8** %dest, align 8
  br label %for.cond132

for.end142:                                       ; preds = %for.cond132
  br label %if.end166

if.else143:                                       ; preds = %if.end107
  %97 = load i32, i32* %count97, align 4
  %inc144 = add nsw i32 %97, 1
  store i32 %inc144, i32* %count97, align 4
  %98 = load i32, i32* %count97, align 4
  %99 = load i32, i32* %left92, align 4
  %cmp145 = icmp sgt i32 %98, %99
  br i1 %cmp145, label %if.then147, label %if.end151

if.then147:                                       ; preds = %if.else143
  %call148 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.122, i64 0, i64 0))
  %tobool149 = icmp ne i32 %call148, 0
  %100 = zext i1 %tobool149 to i64
  %cond150 = select i1 %tobool149, i8* null, i8* null
  %101 = ptrtoint i8* %cond150 to i64
  %102 = inttoptr i64 %101 to i8*
  store i8* %102, i8** %retval, align 8
  br label %return

if.end151:                                        ; preds = %if.else143
  store i32 0, i32* %i100, align 4
  br label %for.cond152

for.cond152:                                      ; preds = %for.inc162, %if.end151
  %103 = load i32, i32* %i100, align 4
  %104 = load i32, i32* %count97, align 4
  %cmp153 = icmp slt i32 %103, %104
  br i1 %cmp153, label %for.body155, label %for.end165

for.body155:                                      ; preds = %for.cond152
  %105 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %106 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet34, align 8
  %channel156 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %106, i32 0, i32 2
  %107 = load i8, i8* %channel156, align 1
  %conv157 = zext i8 %107 to i32
  %108 = load i8*, i8** %dest, align 8
  %call158 = call i8* @stbi__readval(%struct.stbi__context* %105, i32 %conv157, i8* %108)
  %tobool159 = icmp ne i8* %call158, null
  br i1 %tobool159, label %if.end161, label %if.then160

if.then160:                                       ; preds = %for.body155
  store i8* null, i8** %retval, align 8
  br label %return

if.end161:                                        ; preds = %for.body155
  br label %for.inc162

for.inc162:                                       ; preds = %if.end161
  %109 = load i32, i32* %i100, align 4
  %inc163 = add nsw i32 %109, 1
  store i32 %inc163, i32* %i100, align 4
  %110 = load i8*, i8** %dest, align 8
  %add.ptr164 = getelementptr inbounds i8, i8* %110, i64 4
  store i8* %add.ptr164, i8** %dest, align 8
  br label %for.cond152

for.end165:                                       ; preds = %for.cond152
  br label %if.end166

if.end166:                                        ; preds = %for.end165, %for.end142
  %111 = load i32, i32* %count97, align 4
  %112 = load i32, i32* %left92, align 4
  %sub167 = sub nsw i32 %112, %111
  store i32 %sub167, i32* %left92, align 4
  br label %while.cond93

while.end168:                                     ; preds = %while.cond93
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.end168, %while.end, %for.end
  br label %for.inc169

for.inc169:                                       ; preds = %sw.epilog
  %113 = load i32, i32* %packet_idx, align 4
  %inc170 = add nsw i32 %113, 1
  store i32 %inc170, i32* %packet_idx, align 4
  br label %for.cond30

for.end171:                                       ; preds = %for.cond30
  br label %for.inc172

for.inc172:                                       ; preds = %for.end171
  %114 = load i32, i32* %y, align 4
  %inc173 = add nsw i32 %114, 1
  store i32 %inc173, i32* %y, align 4
  br label %for.cond

for.end174:                                       ; preds = %for.cond
  %115 = load i8*, i8** %result.addr, align 8
  store i8* %115, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end174, %if.then160, %if.then147, %if.then130, %if.then120, %if.then103, %if.then76, %if.then61, %if.then51, %sw.default, %if.then20, %if.then11, %if.then
  %116 = load i8*, i8** %retval, align 8
  ret i8* %116
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__readval(%struct.stbi__context* %s, i32 %channel, i8* %dest) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %channel.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %mask = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32 %channel, i32* %channel.addr, align 4
  store i8* %dest, i8** %dest.addr, align 8
  store i32 128, i32* %mask, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %channel.addr, align 4
  %2 = load i32, i32* %mask, align 4
  %and = and i32 %1, %2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end6

if.then:                                          ; preds = %for.body
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__at_eof(%struct.stbi__context* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %call3 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.122, i64 0, i64 0))
  %tobool4 = icmp ne i32 %call3, 0
  %4 = zext i1 %tobool4 to i64
  %cond = select i1 %tobool4, i8* null, i8* null
  %5 = ptrtoint i8* %cond to i64
  %6 = inttoptr i64 %5 to i8*
  store i8* %6, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call5 = call zeroext i8 @stbi__get8(%struct.stbi__context* %7)
  %8 = load i8*, i8** %dest.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %idxprom
  store i8 %call5, i8* %arrayidx, align 1
  br label %if.end6

if.end6:                                          ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  %11 = load i32, i32* %mask, align 4
  %shr = ashr i32 %11, 1
  store i32 %shr, i32* %mask, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %dest.addr, align 8
  store i8* %12, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then2
  %13 = load i8*, i8** %retval, align 8
  ret i8* %13
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__copyval(i32 %channel, i8* %dest, i8* %src) #0 {
entry:
  %channel.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %mask = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %channel, i32* %channel.addr, align 4
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i32 128, i32* %mask, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %channel.addr, align 4
  %2 = load i32, i32* %mask, align 4
  %and = and i32 %1, %2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i8*, i8** %src.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %6 = load i8*, i8** %dest.addr, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %7 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i64 %idxprom1
  store i8 %5, i8* %arrayidx2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %mask, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %mask, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__pic_test_core(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %i = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__pic_is4(%struct.stbi__context* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.120, i64 0, i64 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 84
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call zeroext i8 @stbi__get8(%struct.stbi__context* %2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call2 = call i32 @stbi__pic_is4(%struct.stbi__context* %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.121, i64 0, i64 0))
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %for.end
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__pic_is4(%struct.stbi__context* %s, i8* %str) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %str.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i8* %str, i8** %str.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %1)
  %conv = zext i8 %call to i32
  %2 = load i8*, i8** %str.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv1 = zext i8 %4 to i32
  %cmp2 = icmp ne i32 %conv, %conv1
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__psd_decode_rle(%struct.stbi__context* %s, i8* %p, i32 %pixelCount) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %p.addr = alloca i8*, align 8
  %pixelCount.addr = alloca i32, align 4
  %count = alloca i32, align 4
  %nleft = alloca i32, align 4
  %len = alloca i32, align 4
  %val = alloca i8, align 1
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  store i32 %pixelCount, i32* %pixelCount.addr, align 4
  store i32 0, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end31, %entry
  %0 = load i32, i32* %pixelCount.addr, align 4
  %1 = load i32, i32* %count, align 4
  %sub = sub nsw i32 %0, %1
  store i32 %sub, i32* %nleft, align 4
  %cmp = icmp sgt i32 %sub, 0
  br i1 %cmp, label %while.body, label %while.end32

while.body:                                       ; preds = %while.cond
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %2)
  %conv = zext i8 %call to i32
  store i32 %conv, i32* %len, align 4
  %3 = load i32, i32* %len, align 4
  %cmp1 = icmp eq i32 %3, 128
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  br label %if.end31

if.else:                                          ; preds = %while.body
  %4 = load i32, i32* %len, align 4
  %cmp3 = icmp slt i32 %4, 128
  br i1 %cmp3, label %if.then5, label %if.else12

if.then5:                                         ; preds = %if.else
  %5 = load i32, i32* %len, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %len, align 4
  %6 = load i32, i32* %len, align 4
  %7 = load i32, i32* %nleft, align 4
  %cmp6 = icmp sgt i32 %6, %7
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then5
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then5
  %8 = load i32, i32* %len, align 4
  %9 = load i32, i32* %count, align 4
  %add = add nsw i32 %9, %8
  store i32 %add, i32* %count, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body10, %if.end
  %10 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %while.body10, label %while.end

while.body10:                                     ; preds = %while.cond9
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call11 = call zeroext i8 @stbi__get8(%struct.stbi__context* %11)
  %12 = load i8*, i8** %p.addr, align 8
  store i8 %call11, i8* %12, align 1
  %13 = load i8*, i8** %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 4
  store i8* %add.ptr, i8** %p.addr, align 8
  %14 = load i32, i32* %len, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* %len, align 4
  br label %while.cond9

while.end:                                        ; preds = %while.cond9
  br label %if.end30

if.else12:                                        ; preds = %if.else
  %15 = load i32, i32* %len, align 4
  %cmp13 = icmp sgt i32 %15, 128
  br i1 %cmp13, label %if.then15, label %if.end29

if.then15:                                        ; preds = %if.else12
  %16 = load i32, i32* %len, align 4
  %sub16 = sub nsw i32 257, %16
  store i32 %sub16, i32* %len, align 4
  %17 = load i32, i32* %len, align 4
  %18 = load i32, i32* %nleft, align 4
  %cmp17 = icmp sgt i32 %17, %18
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then15
  store i32 0, i32* %retval, align 4
  br label %return

if.end20:                                         ; preds = %if.then15
  %19 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call21 = call zeroext i8 @stbi__get8(%struct.stbi__context* %19)
  store i8 %call21, i8* %val, align 1
  %20 = load i32, i32* %len, align 4
  %21 = load i32, i32* %count, align 4
  %add22 = add nsw i32 %21, %20
  store i32 %add22, i32* %count, align 4
  br label %while.cond23

while.cond23:                                     ; preds = %while.body25, %if.end20
  %22 = load i32, i32* %len, align 4
  %tobool24 = icmp ne i32 %22, 0
  br i1 %tobool24, label %while.body25, label %while.end28

while.body25:                                     ; preds = %while.cond23
  %23 = load i8, i8* %val, align 1
  %24 = load i8*, i8** %p.addr, align 8
  store i8 %23, i8* %24, align 1
  %25 = load i8*, i8** %p.addr, align 8
  %add.ptr26 = getelementptr inbounds i8, i8* %25, i64 4
  store i8* %add.ptr26, i8** %p.addr, align 8
  %26 = load i32, i32* %len, align 4
  %dec27 = add nsw i32 %26, -1
  store i32 %dec27, i32* %len, align 4
  br label %while.cond23

while.end28:                                      ; preds = %while.cond23
  br label %if.end29

if.end29:                                         ; preds = %while.end28, %if.else12
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %while.end
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then
  br label %while.cond

while.end32:                                      ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end32, %if.then19, %if.then8
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind optnone
define internal i16* @stbi__convert_format16(i16* %data, i32 %img_n, i32 %req_comp, i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i16*, align 8
  %data.addr = alloca i16*, align 8
  %img_n.addr = alloca i32, align 4
  %req_comp.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %good = alloca i16*, align 8
  %src = alloca i16*, align 8
  %dest = alloca i16*, align 8
  store i16* %data, i16** %data.addr, align 8
  store i32 %img_n, i32* %img_n.addr, align 4
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %req_comp.addr, align 4
  %1 = load i32, i32* %img_n.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i16*, i16** %data.addr, align 8
  store i16* %2, i16** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %req_comp.addr, align 4
  %cmp1 = icmp sge i32 %3, 1
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32, i32* %req_comp.addr, align 4
  %cmp2 = icmp sle i32 %4, 4
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %land.lhs.true
  br label %if.end4

if.else:                                          ; preds = %land.lhs.true, %if.end
  call void @__assert_fail(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.92, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 1757, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @__PRETTY_FUNCTION__.stbi__convert_format16, i64 0, i64 0)) #11
  unreachable

if.end4:                                          ; preds = %if.then3
  %5 = load i32, i32* %req_comp.addr, align 4
  %6 = load i32, i32* %x.addr, align 4
  %mul = mul i32 %5, %6
  %7 = load i32, i32* %y.addr, align 4
  %mul5 = mul i32 %mul, %7
  %mul6 = mul i32 %mul5, 2
  %conv = zext i32 %mul6 to i64
  %call = call i8* @stbi__malloc(i64 %conv)
  %8 = bitcast i8* %call to i16*
  store i16* %8, i16** %good, align 8
  %9 = load i16*, i16** %good, align 8
  %cmp7 = icmp eq i16* %9, null
  br i1 %cmp7, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end4
  %10 = load i16*, i16** %data.addr, align 8
  %11 = bitcast i16* %10 to i8*
  call void @free(i8* %11) #10
  %call10 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool = icmp ne i32 %call10, 0
  %12 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %13 = ptrtoint i8* %cond to i64
  %14 = inttoptr i64 %13 to i8*
  %15 = bitcast i8* %14 to i16*
  store i16* %15, i16** %retval, align 8
  br label %return

if.end11:                                         ; preds = %if.end4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc219, %if.end11
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %y.addr, align 4
  %cmp12 = icmp slt i32 %16, %17
  br i1 %cmp12, label %for.body, label %for.end220

for.body:                                         ; preds = %for.cond
  %18 = load i16*, i16** %data.addr, align 8
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %x.addr, align 4
  %mul14 = mul i32 %19, %20
  %21 = load i32, i32* %img_n.addr, align 4
  %mul15 = mul i32 %mul14, %21
  %idx.ext = zext i32 %mul15 to i64
  %add.ptr = getelementptr inbounds i16, i16* %18, i64 %idx.ext
  store i16* %add.ptr, i16** %src, align 8
  %22 = load i16*, i16** %good, align 8
  %23 = load i32, i32* %j, align 4
  %24 = load i32, i32* %x.addr, align 4
  %mul16 = mul i32 %23, %24
  %25 = load i32, i32* %req_comp.addr, align 4
  %mul17 = mul i32 %mul16, %25
  %idx.ext18 = zext i32 %mul17 to i64
  %add.ptr19 = getelementptr inbounds i16, i16* %22, i64 %idx.ext18
  store i16* %add.ptr19, i16** %dest, align 8
  %26 = load i32, i32* %img_n.addr, align 4
  %mul20 = mul nsw i32 %26, 8
  %27 = load i32, i32* %req_comp.addr, align 4
  %add = add nsw i32 %mul20, %27
  switch i32 %add, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb29
    i32 12, label %sw.bb44
    i32 17, label %sw.bb60
    i32 19, label %sw.bb73
    i32 20, label %sw.bb88
    i32 28, label %sw.bb105
    i32 25, label %sw.bb123
    i32 26, label %sw.bb142
    i32 33, label %sw.bb162
    i32 34, label %sw.bb181
    i32 35, label %sw.bb202
  ]

sw.bb:                                            ; preds = %for.body
  %28 = load i32, i32* %x.addr, align 4
  %sub = sub i32 %28, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc, %sw.bb
  %29 = load i32, i32* %i, align 4
  %cmp22 = icmp sge i32 %29, 0
  br i1 %cmp22, label %for.body24, label %for.end

for.body24:                                       ; preds = %for.cond21
  %30 = load i16*, i16** %src, align 8
  %arrayidx = getelementptr inbounds i16, i16* %30, i64 0
  %31 = load i16, i16* %arrayidx, align 2
  %32 = load i16*, i16** %dest, align 8
  %arrayidx25 = getelementptr inbounds i16, i16* %32, i64 0
  store i16 %31, i16* %arrayidx25, align 2
  %33 = load i16*, i16** %dest, align 8
  %arrayidx26 = getelementptr inbounds i16, i16* %33, i64 1
  store i16 -1, i16* %arrayidx26, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body24
  %34 = load i32, i32* %i, align 4
  %dec = add nsw i32 %34, -1
  store i32 %dec, i32* %i, align 4
  %35 = load i16*, i16** %src, align 8
  %add.ptr27 = getelementptr inbounds i16, i16* %35, i64 1
  store i16* %add.ptr27, i16** %src, align 8
  %36 = load i16*, i16** %dest, align 8
  %add.ptr28 = getelementptr inbounds i16, i16* %36, i64 2
  store i16* %add.ptr28, i16** %dest, align 8
  br label %for.cond21

for.end:                                          ; preds = %for.cond21
  br label %sw.epilog

sw.bb29:                                          ; preds = %for.body
  %37 = load i32, i32* %x.addr, align 4
  %sub30 = sub i32 %37, 1
  store i32 %sub30, i32* %i, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %sw.bb29
  %38 = load i32, i32* %i, align 4
  %cmp32 = icmp sge i32 %38, 0
  br i1 %cmp32, label %for.body34, label %for.end43

for.body34:                                       ; preds = %for.cond31
  %39 = load i16*, i16** %src, align 8
  %arrayidx35 = getelementptr inbounds i16, i16* %39, i64 0
  %40 = load i16, i16* %arrayidx35, align 2
  %41 = load i16*, i16** %dest, align 8
  %arrayidx36 = getelementptr inbounds i16, i16* %41, i64 2
  store i16 %40, i16* %arrayidx36, align 2
  %42 = load i16*, i16** %dest, align 8
  %arrayidx37 = getelementptr inbounds i16, i16* %42, i64 1
  store i16 %40, i16* %arrayidx37, align 2
  %43 = load i16*, i16** %dest, align 8
  %arrayidx38 = getelementptr inbounds i16, i16* %43, i64 0
  store i16 %40, i16* %arrayidx38, align 2
  br label %for.inc39

for.inc39:                                        ; preds = %for.body34
  %44 = load i32, i32* %i, align 4
  %dec40 = add nsw i32 %44, -1
  store i32 %dec40, i32* %i, align 4
  %45 = load i16*, i16** %src, align 8
  %add.ptr41 = getelementptr inbounds i16, i16* %45, i64 1
  store i16* %add.ptr41, i16** %src, align 8
  %46 = load i16*, i16** %dest, align 8
  %add.ptr42 = getelementptr inbounds i16, i16* %46, i64 3
  store i16* %add.ptr42, i16** %dest, align 8
  br label %for.cond31

for.end43:                                        ; preds = %for.cond31
  br label %sw.epilog

sw.bb44:                                          ; preds = %for.body
  %47 = load i32, i32* %x.addr, align 4
  %sub45 = sub i32 %47, 1
  store i32 %sub45, i32* %i, align 4
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc55, %sw.bb44
  %48 = load i32, i32* %i, align 4
  %cmp47 = icmp sge i32 %48, 0
  br i1 %cmp47, label %for.body49, label %for.end59

for.body49:                                       ; preds = %for.cond46
  %49 = load i16*, i16** %src, align 8
  %arrayidx50 = getelementptr inbounds i16, i16* %49, i64 0
  %50 = load i16, i16* %arrayidx50, align 2
  %51 = load i16*, i16** %dest, align 8
  %arrayidx51 = getelementptr inbounds i16, i16* %51, i64 2
  store i16 %50, i16* %arrayidx51, align 2
  %52 = load i16*, i16** %dest, align 8
  %arrayidx52 = getelementptr inbounds i16, i16* %52, i64 1
  store i16 %50, i16* %arrayidx52, align 2
  %53 = load i16*, i16** %dest, align 8
  %arrayidx53 = getelementptr inbounds i16, i16* %53, i64 0
  store i16 %50, i16* %arrayidx53, align 2
  %54 = load i16*, i16** %dest, align 8
  %arrayidx54 = getelementptr inbounds i16, i16* %54, i64 3
  store i16 -1, i16* %arrayidx54, align 2
  br label %for.inc55

for.inc55:                                        ; preds = %for.body49
  %55 = load i32, i32* %i, align 4
  %dec56 = add nsw i32 %55, -1
  store i32 %dec56, i32* %i, align 4
  %56 = load i16*, i16** %src, align 8
  %add.ptr57 = getelementptr inbounds i16, i16* %56, i64 1
  store i16* %add.ptr57, i16** %src, align 8
  %57 = load i16*, i16** %dest, align 8
  %add.ptr58 = getelementptr inbounds i16, i16* %57, i64 4
  store i16* %add.ptr58, i16** %dest, align 8
  br label %for.cond46

for.end59:                                        ; preds = %for.cond46
  br label %sw.epilog

sw.bb60:                                          ; preds = %for.body
  %58 = load i32, i32* %x.addr, align 4
  %sub61 = sub i32 %58, 1
  store i32 %sub61, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc68, %sw.bb60
  %59 = load i32, i32* %i, align 4
  %cmp63 = icmp sge i32 %59, 0
  br i1 %cmp63, label %for.body65, label %for.end72

for.body65:                                       ; preds = %for.cond62
  %60 = load i16*, i16** %src, align 8
  %arrayidx66 = getelementptr inbounds i16, i16* %60, i64 0
  %61 = load i16, i16* %arrayidx66, align 2
  %62 = load i16*, i16** %dest, align 8
  %arrayidx67 = getelementptr inbounds i16, i16* %62, i64 0
  store i16 %61, i16* %arrayidx67, align 2
  br label %for.inc68

for.inc68:                                        ; preds = %for.body65
  %63 = load i32, i32* %i, align 4
  %dec69 = add nsw i32 %63, -1
  store i32 %dec69, i32* %i, align 4
  %64 = load i16*, i16** %src, align 8
  %add.ptr70 = getelementptr inbounds i16, i16* %64, i64 2
  store i16* %add.ptr70, i16** %src, align 8
  %65 = load i16*, i16** %dest, align 8
  %add.ptr71 = getelementptr inbounds i16, i16* %65, i64 1
  store i16* %add.ptr71, i16** %dest, align 8
  br label %for.cond62

for.end72:                                        ; preds = %for.cond62
  br label %sw.epilog

sw.bb73:                                          ; preds = %for.body
  %66 = load i32, i32* %x.addr, align 4
  %sub74 = sub i32 %66, 1
  store i32 %sub74, i32* %i, align 4
  br label %for.cond75

for.cond75:                                       ; preds = %for.inc83, %sw.bb73
  %67 = load i32, i32* %i, align 4
  %cmp76 = icmp sge i32 %67, 0
  br i1 %cmp76, label %for.body78, label %for.end87

for.body78:                                       ; preds = %for.cond75
  %68 = load i16*, i16** %src, align 8
  %arrayidx79 = getelementptr inbounds i16, i16* %68, i64 0
  %69 = load i16, i16* %arrayidx79, align 2
  %70 = load i16*, i16** %dest, align 8
  %arrayidx80 = getelementptr inbounds i16, i16* %70, i64 2
  store i16 %69, i16* %arrayidx80, align 2
  %71 = load i16*, i16** %dest, align 8
  %arrayidx81 = getelementptr inbounds i16, i16* %71, i64 1
  store i16 %69, i16* %arrayidx81, align 2
  %72 = load i16*, i16** %dest, align 8
  %arrayidx82 = getelementptr inbounds i16, i16* %72, i64 0
  store i16 %69, i16* %arrayidx82, align 2
  br label %for.inc83

for.inc83:                                        ; preds = %for.body78
  %73 = load i32, i32* %i, align 4
  %dec84 = add nsw i32 %73, -1
  store i32 %dec84, i32* %i, align 4
  %74 = load i16*, i16** %src, align 8
  %add.ptr85 = getelementptr inbounds i16, i16* %74, i64 2
  store i16* %add.ptr85, i16** %src, align 8
  %75 = load i16*, i16** %dest, align 8
  %add.ptr86 = getelementptr inbounds i16, i16* %75, i64 3
  store i16* %add.ptr86, i16** %dest, align 8
  br label %for.cond75

for.end87:                                        ; preds = %for.cond75
  br label %sw.epilog

sw.bb88:                                          ; preds = %for.body
  %76 = load i32, i32* %x.addr, align 4
  %sub89 = sub i32 %76, 1
  store i32 %sub89, i32* %i, align 4
  br label %for.cond90

for.cond90:                                       ; preds = %for.inc100, %sw.bb88
  %77 = load i32, i32* %i, align 4
  %cmp91 = icmp sge i32 %77, 0
  br i1 %cmp91, label %for.body93, label %for.end104

for.body93:                                       ; preds = %for.cond90
  %78 = load i16*, i16** %src, align 8
  %arrayidx94 = getelementptr inbounds i16, i16* %78, i64 0
  %79 = load i16, i16* %arrayidx94, align 2
  %80 = load i16*, i16** %dest, align 8
  %arrayidx95 = getelementptr inbounds i16, i16* %80, i64 2
  store i16 %79, i16* %arrayidx95, align 2
  %81 = load i16*, i16** %dest, align 8
  %arrayidx96 = getelementptr inbounds i16, i16* %81, i64 1
  store i16 %79, i16* %arrayidx96, align 2
  %82 = load i16*, i16** %dest, align 8
  %arrayidx97 = getelementptr inbounds i16, i16* %82, i64 0
  store i16 %79, i16* %arrayidx97, align 2
  %83 = load i16*, i16** %src, align 8
  %arrayidx98 = getelementptr inbounds i16, i16* %83, i64 1
  %84 = load i16, i16* %arrayidx98, align 2
  %85 = load i16*, i16** %dest, align 8
  %arrayidx99 = getelementptr inbounds i16, i16* %85, i64 3
  store i16 %84, i16* %arrayidx99, align 2
  br label %for.inc100

for.inc100:                                       ; preds = %for.body93
  %86 = load i32, i32* %i, align 4
  %dec101 = add nsw i32 %86, -1
  store i32 %dec101, i32* %i, align 4
  %87 = load i16*, i16** %src, align 8
  %add.ptr102 = getelementptr inbounds i16, i16* %87, i64 2
  store i16* %add.ptr102, i16** %src, align 8
  %88 = load i16*, i16** %dest, align 8
  %add.ptr103 = getelementptr inbounds i16, i16* %88, i64 4
  store i16* %add.ptr103, i16** %dest, align 8
  br label %for.cond90

for.end104:                                       ; preds = %for.cond90
  br label %sw.epilog

sw.bb105:                                         ; preds = %for.body
  %89 = load i32, i32* %x.addr, align 4
  %sub106 = sub i32 %89, 1
  store i32 %sub106, i32* %i, align 4
  br label %for.cond107

for.cond107:                                      ; preds = %for.inc118, %sw.bb105
  %90 = load i32, i32* %i, align 4
  %cmp108 = icmp sge i32 %90, 0
  br i1 %cmp108, label %for.body110, label %for.end122

for.body110:                                      ; preds = %for.cond107
  %91 = load i16*, i16** %src, align 8
  %arrayidx111 = getelementptr inbounds i16, i16* %91, i64 0
  %92 = load i16, i16* %arrayidx111, align 2
  %93 = load i16*, i16** %dest, align 8
  %arrayidx112 = getelementptr inbounds i16, i16* %93, i64 0
  store i16 %92, i16* %arrayidx112, align 2
  %94 = load i16*, i16** %src, align 8
  %arrayidx113 = getelementptr inbounds i16, i16* %94, i64 1
  %95 = load i16, i16* %arrayidx113, align 2
  %96 = load i16*, i16** %dest, align 8
  %arrayidx114 = getelementptr inbounds i16, i16* %96, i64 1
  store i16 %95, i16* %arrayidx114, align 2
  %97 = load i16*, i16** %src, align 8
  %arrayidx115 = getelementptr inbounds i16, i16* %97, i64 2
  %98 = load i16, i16* %arrayidx115, align 2
  %99 = load i16*, i16** %dest, align 8
  %arrayidx116 = getelementptr inbounds i16, i16* %99, i64 2
  store i16 %98, i16* %arrayidx116, align 2
  %100 = load i16*, i16** %dest, align 8
  %arrayidx117 = getelementptr inbounds i16, i16* %100, i64 3
  store i16 -1, i16* %arrayidx117, align 2
  br label %for.inc118

for.inc118:                                       ; preds = %for.body110
  %101 = load i32, i32* %i, align 4
  %dec119 = add nsw i32 %101, -1
  store i32 %dec119, i32* %i, align 4
  %102 = load i16*, i16** %src, align 8
  %add.ptr120 = getelementptr inbounds i16, i16* %102, i64 3
  store i16* %add.ptr120, i16** %src, align 8
  %103 = load i16*, i16** %dest, align 8
  %add.ptr121 = getelementptr inbounds i16, i16* %103, i64 4
  store i16* %add.ptr121, i16** %dest, align 8
  br label %for.cond107

for.end122:                                       ; preds = %for.cond107
  br label %sw.epilog

sw.bb123:                                         ; preds = %for.body
  %104 = load i32, i32* %x.addr, align 4
  %sub124 = sub i32 %104, 1
  store i32 %sub124, i32* %i, align 4
  br label %for.cond125

for.cond125:                                      ; preds = %for.inc137, %sw.bb123
  %105 = load i32, i32* %i, align 4
  %cmp126 = icmp sge i32 %105, 0
  br i1 %cmp126, label %for.body128, label %for.end141

for.body128:                                      ; preds = %for.cond125
  %106 = load i16*, i16** %src, align 8
  %arrayidx129 = getelementptr inbounds i16, i16* %106, i64 0
  %107 = load i16, i16* %arrayidx129, align 2
  %conv130 = zext i16 %107 to i32
  %108 = load i16*, i16** %src, align 8
  %arrayidx131 = getelementptr inbounds i16, i16* %108, i64 1
  %109 = load i16, i16* %arrayidx131, align 2
  %conv132 = zext i16 %109 to i32
  %110 = load i16*, i16** %src, align 8
  %arrayidx133 = getelementptr inbounds i16, i16* %110, i64 2
  %111 = load i16, i16* %arrayidx133, align 2
  %conv134 = zext i16 %111 to i32
  %call135 = call zeroext i16 @stbi__compute_y_16(i32 %conv130, i32 %conv132, i32 %conv134)
  %112 = load i16*, i16** %dest, align 8
  %arrayidx136 = getelementptr inbounds i16, i16* %112, i64 0
  store i16 %call135, i16* %arrayidx136, align 2
  br label %for.inc137

for.inc137:                                       ; preds = %for.body128
  %113 = load i32, i32* %i, align 4
  %dec138 = add nsw i32 %113, -1
  store i32 %dec138, i32* %i, align 4
  %114 = load i16*, i16** %src, align 8
  %add.ptr139 = getelementptr inbounds i16, i16* %114, i64 3
  store i16* %add.ptr139, i16** %src, align 8
  %115 = load i16*, i16** %dest, align 8
  %add.ptr140 = getelementptr inbounds i16, i16* %115, i64 1
  store i16* %add.ptr140, i16** %dest, align 8
  br label %for.cond125

for.end141:                                       ; preds = %for.cond125
  br label %sw.epilog

sw.bb142:                                         ; preds = %for.body
  %116 = load i32, i32* %x.addr, align 4
  %sub143 = sub i32 %116, 1
  store i32 %sub143, i32* %i, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc157, %sw.bb142
  %117 = load i32, i32* %i, align 4
  %cmp145 = icmp sge i32 %117, 0
  br i1 %cmp145, label %for.body147, label %for.end161

for.body147:                                      ; preds = %for.cond144
  %118 = load i16*, i16** %src, align 8
  %arrayidx148 = getelementptr inbounds i16, i16* %118, i64 0
  %119 = load i16, i16* %arrayidx148, align 2
  %conv149 = zext i16 %119 to i32
  %120 = load i16*, i16** %src, align 8
  %arrayidx150 = getelementptr inbounds i16, i16* %120, i64 1
  %121 = load i16, i16* %arrayidx150, align 2
  %conv151 = zext i16 %121 to i32
  %122 = load i16*, i16** %src, align 8
  %arrayidx152 = getelementptr inbounds i16, i16* %122, i64 2
  %123 = load i16, i16* %arrayidx152, align 2
  %conv153 = zext i16 %123 to i32
  %call154 = call zeroext i16 @stbi__compute_y_16(i32 %conv149, i32 %conv151, i32 %conv153)
  %124 = load i16*, i16** %dest, align 8
  %arrayidx155 = getelementptr inbounds i16, i16* %124, i64 0
  store i16 %call154, i16* %arrayidx155, align 2
  %125 = load i16*, i16** %dest, align 8
  %arrayidx156 = getelementptr inbounds i16, i16* %125, i64 1
  store i16 -1, i16* %arrayidx156, align 2
  br label %for.inc157

for.inc157:                                       ; preds = %for.body147
  %126 = load i32, i32* %i, align 4
  %dec158 = add nsw i32 %126, -1
  store i32 %dec158, i32* %i, align 4
  %127 = load i16*, i16** %src, align 8
  %add.ptr159 = getelementptr inbounds i16, i16* %127, i64 3
  store i16* %add.ptr159, i16** %src, align 8
  %128 = load i16*, i16** %dest, align 8
  %add.ptr160 = getelementptr inbounds i16, i16* %128, i64 2
  store i16* %add.ptr160, i16** %dest, align 8
  br label %for.cond144

for.end161:                                       ; preds = %for.cond144
  br label %sw.epilog

sw.bb162:                                         ; preds = %for.body
  %129 = load i32, i32* %x.addr, align 4
  %sub163 = sub i32 %129, 1
  store i32 %sub163, i32* %i, align 4
  br label %for.cond164

for.cond164:                                      ; preds = %for.inc176, %sw.bb162
  %130 = load i32, i32* %i, align 4
  %cmp165 = icmp sge i32 %130, 0
  br i1 %cmp165, label %for.body167, label %for.end180

for.body167:                                      ; preds = %for.cond164
  %131 = load i16*, i16** %src, align 8
  %arrayidx168 = getelementptr inbounds i16, i16* %131, i64 0
  %132 = load i16, i16* %arrayidx168, align 2
  %conv169 = zext i16 %132 to i32
  %133 = load i16*, i16** %src, align 8
  %arrayidx170 = getelementptr inbounds i16, i16* %133, i64 1
  %134 = load i16, i16* %arrayidx170, align 2
  %conv171 = zext i16 %134 to i32
  %135 = load i16*, i16** %src, align 8
  %arrayidx172 = getelementptr inbounds i16, i16* %135, i64 2
  %136 = load i16, i16* %arrayidx172, align 2
  %conv173 = zext i16 %136 to i32
  %call174 = call zeroext i16 @stbi__compute_y_16(i32 %conv169, i32 %conv171, i32 %conv173)
  %137 = load i16*, i16** %dest, align 8
  %arrayidx175 = getelementptr inbounds i16, i16* %137, i64 0
  store i16 %call174, i16* %arrayidx175, align 2
  br label %for.inc176

for.inc176:                                       ; preds = %for.body167
  %138 = load i32, i32* %i, align 4
  %dec177 = add nsw i32 %138, -1
  store i32 %dec177, i32* %i, align 4
  %139 = load i16*, i16** %src, align 8
  %add.ptr178 = getelementptr inbounds i16, i16* %139, i64 4
  store i16* %add.ptr178, i16** %src, align 8
  %140 = load i16*, i16** %dest, align 8
  %add.ptr179 = getelementptr inbounds i16, i16* %140, i64 1
  store i16* %add.ptr179, i16** %dest, align 8
  br label %for.cond164

for.end180:                                       ; preds = %for.cond164
  br label %sw.epilog

sw.bb181:                                         ; preds = %for.body
  %141 = load i32, i32* %x.addr, align 4
  %sub182 = sub i32 %141, 1
  store i32 %sub182, i32* %i, align 4
  br label %for.cond183

for.cond183:                                      ; preds = %for.inc197, %sw.bb181
  %142 = load i32, i32* %i, align 4
  %cmp184 = icmp sge i32 %142, 0
  br i1 %cmp184, label %for.body186, label %for.end201

for.body186:                                      ; preds = %for.cond183
  %143 = load i16*, i16** %src, align 8
  %arrayidx187 = getelementptr inbounds i16, i16* %143, i64 0
  %144 = load i16, i16* %arrayidx187, align 2
  %conv188 = zext i16 %144 to i32
  %145 = load i16*, i16** %src, align 8
  %arrayidx189 = getelementptr inbounds i16, i16* %145, i64 1
  %146 = load i16, i16* %arrayidx189, align 2
  %conv190 = zext i16 %146 to i32
  %147 = load i16*, i16** %src, align 8
  %arrayidx191 = getelementptr inbounds i16, i16* %147, i64 2
  %148 = load i16, i16* %arrayidx191, align 2
  %conv192 = zext i16 %148 to i32
  %call193 = call zeroext i16 @stbi__compute_y_16(i32 %conv188, i32 %conv190, i32 %conv192)
  %149 = load i16*, i16** %dest, align 8
  %arrayidx194 = getelementptr inbounds i16, i16* %149, i64 0
  store i16 %call193, i16* %arrayidx194, align 2
  %150 = load i16*, i16** %src, align 8
  %arrayidx195 = getelementptr inbounds i16, i16* %150, i64 3
  %151 = load i16, i16* %arrayidx195, align 2
  %152 = load i16*, i16** %dest, align 8
  %arrayidx196 = getelementptr inbounds i16, i16* %152, i64 1
  store i16 %151, i16* %arrayidx196, align 2
  br label %for.inc197

for.inc197:                                       ; preds = %for.body186
  %153 = load i32, i32* %i, align 4
  %dec198 = add nsw i32 %153, -1
  store i32 %dec198, i32* %i, align 4
  %154 = load i16*, i16** %src, align 8
  %add.ptr199 = getelementptr inbounds i16, i16* %154, i64 4
  store i16* %add.ptr199, i16** %src, align 8
  %155 = load i16*, i16** %dest, align 8
  %add.ptr200 = getelementptr inbounds i16, i16* %155, i64 2
  store i16* %add.ptr200, i16** %dest, align 8
  br label %for.cond183

for.end201:                                       ; preds = %for.cond183
  br label %sw.epilog

sw.bb202:                                         ; preds = %for.body
  %156 = load i32, i32* %x.addr, align 4
  %sub203 = sub i32 %156, 1
  store i32 %sub203, i32* %i, align 4
  br label %for.cond204

for.cond204:                                      ; preds = %for.inc214, %sw.bb202
  %157 = load i32, i32* %i, align 4
  %cmp205 = icmp sge i32 %157, 0
  br i1 %cmp205, label %for.body207, label %for.end218

for.body207:                                      ; preds = %for.cond204
  %158 = load i16*, i16** %src, align 8
  %arrayidx208 = getelementptr inbounds i16, i16* %158, i64 0
  %159 = load i16, i16* %arrayidx208, align 2
  %160 = load i16*, i16** %dest, align 8
  %arrayidx209 = getelementptr inbounds i16, i16* %160, i64 0
  store i16 %159, i16* %arrayidx209, align 2
  %161 = load i16*, i16** %src, align 8
  %arrayidx210 = getelementptr inbounds i16, i16* %161, i64 1
  %162 = load i16, i16* %arrayidx210, align 2
  %163 = load i16*, i16** %dest, align 8
  %arrayidx211 = getelementptr inbounds i16, i16* %163, i64 1
  store i16 %162, i16* %arrayidx211, align 2
  %164 = load i16*, i16** %src, align 8
  %arrayidx212 = getelementptr inbounds i16, i16* %164, i64 2
  %165 = load i16, i16* %arrayidx212, align 2
  %166 = load i16*, i16** %dest, align 8
  %arrayidx213 = getelementptr inbounds i16, i16* %166, i64 2
  store i16 %165, i16* %arrayidx213, align 2
  br label %for.inc214

for.inc214:                                       ; preds = %for.body207
  %167 = load i32, i32* %i, align 4
  %dec215 = add nsw i32 %167, -1
  store i32 %dec215, i32* %i, align 4
  %168 = load i16*, i16** %src, align 8
  %add.ptr216 = getelementptr inbounds i16, i16* %168, i64 4
  store i16* %add.ptr216, i16** %src, align 8
  %169 = load i16*, i16** %dest, align 8
  %add.ptr217 = getelementptr inbounds i16, i16* %169, i64 3
  store i16* %add.ptr217, i16** %dest, align 8
  br label %for.cond204

for.end218:                                       ; preds = %for.cond204
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.93, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 1786, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @__PRETTY_FUNCTION__.stbi__convert_format16, i64 0, i64 0)) #11
  unreachable

sw.epilog:                                        ; preds = %for.end218, %for.end201, %for.end180, %for.end161, %for.end141, %for.end122, %for.end104, %for.end87, %for.end72, %for.end59, %for.end43, %for.end
  br label %for.inc219

for.inc219:                                       ; preds = %sw.epilog
  %170 = load i32, i32* %j, align 4
  %inc = add nsw i32 %170, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end220:                                       ; preds = %for.cond
  %171 = load i16*, i16** %data.addr, align 8
  %172 = bitcast i16* %171 to i8*
  call void @free(i8* %172) #10
  %173 = load i16*, i16** %good, align 8
  store i16* %173, i16** %retval, align 8
  br label %return

return:                                           ; preds = %for.end220, %if.then9, %if.then
  %174 = load i16*, i16** %retval, align 8
  ret i16* %174
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i16 @stbi__compute_y_16(i32 %r, i32 %g, i32 %b) #0 {
entry:
  %r.addr = alloca i32, align 4
  %g.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %r, i32* %r.addr, align 4
  store i32 %g, i32* %g.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %r.addr, align 4
  %mul = mul nsw i32 %0, 77
  %1 = load i32, i32* %g.addr, align 4
  %mul1 = mul nsw i32 %1, 150
  %add = add nsw i32 %mul, %mul1
  %2 = load i32, i32* %b.addr, align 4
  %mul2 = mul nsw i32 29, %2
  %add3 = add nsw i32 %add, %mul2
  %shr = ashr i32 %add3, 8
  %conv = trunc i32 %shr to i16
  ret i16 %conv
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__gif_load_next(%struct.stbi__context* %s, %struct.stbi__gif* %g, i32* %comp, i32 %req_comp, i8* %two_back) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %g.addr = alloca %struct.stbi__gif*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %two_back.addr = alloca i8*, align 8
  %dispose = alloca i32, align 4
  %first_frame = alloca i32, align 4
  %pi = alloca i32, align 4
  %pcount = alloca i32, align 4
  %tag = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %w107 = alloca i32, align 4
  %h108 = alloca i32, align 4
  %o = alloca i8*, align 8
  %len = alloca i32, align 4
  %ext = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store %struct.stbi__gif* %g, %struct.stbi__gif** %g.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store i8* %two_back, i8** %two_back.addr, align 8
  store i32 0, i32* %first_frame, align 4
  %0 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %0, i32 0, i32 2
  %1 = load i8*, i8** %out, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %3 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %4 = load i32*, i32** %comp.addr, align 8
  %call = call i32 @stbi__gif_header(%struct.stbi__context* %2, %struct.stbi__gif* %3, i32* %4, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then1

if.then1:                                         ; preds = %if.then
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %w = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %5, i32 0, i32 0
  %6 = load i32, i32* %w, align 8
  %7 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %h = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %7, i32 0, i32 1
  %8 = load i32, i32* %h, align 4
  %call2 = call i32 @stbi__mad3sizes_valid(i32 4, i32 %6, i32 %8, i32 0)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end7, label %if.then4

if.then4:                                         ; preds = %if.end
  %call5 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  %tobool6 = icmp ne i32 %call5, 0
  %9 = zext i1 %tobool6 to i64
  %cond = select i1 %tobool6, i8* null, i8* null
  %10 = ptrtoint i8* %cond to i64
  %11 = inttoptr i64 %10 to i8*
  store i8* %11, i8** %retval, align 8
  br label %return

if.end7:                                          ; preds = %if.end
  %12 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %w8 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %12, i32 0, i32 0
  %13 = load i32, i32* %w8, align 8
  %14 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %h9 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %14, i32 0, i32 1
  %15 = load i32, i32* %h9, align 4
  %mul = mul nsw i32 %13, %15
  store i32 %mul, i32* %pcount, align 4
  %16 = load i32, i32* %pcount, align 4
  %mul10 = mul nsw i32 4, %16
  %conv = sext i32 %mul10 to i64
  %call11 = call i8* @stbi__malloc(i64 %conv)
  %17 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out12 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %17, i32 0, i32 2
  store i8* %call11, i8** %out12, align 8
  %18 = load i32, i32* %pcount, align 4
  %mul13 = mul nsw i32 4, %18
  %conv14 = sext i32 %mul13 to i64
  %call15 = call i8* @stbi__malloc(i64 %conv14)
  %19 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %background = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %19, i32 0, i32 3
  store i8* %call15, i8** %background, align 8
  %20 = load i32, i32* %pcount, align 4
  %conv16 = sext i32 %20 to i64
  %call17 = call i8* @stbi__malloc(i64 %conv16)
  %21 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %history = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %21, i32 0, i32 4
  store i8* %call17, i8** %history, align 8
  %22 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out18 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %22, i32 0, i32 2
  %23 = load i8*, i8** %out18, align 8
  %tobool19 = icmp ne i8* %23, null
  br i1 %tobool19, label %lor.lhs.false, label %if.then25

lor.lhs.false:                                    ; preds = %if.end7
  %24 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %background20 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %24, i32 0, i32 3
  %25 = load i8*, i8** %background20, align 8
  %tobool21 = icmp ne i8* %25, null
  br i1 %tobool21, label %lor.lhs.false22, label %if.then25

lor.lhs.false22:                                  ; preds = %lor.lhs.false
  %26 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %history23 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %26, i32 0, i32 4
  %27 = load i8*, i8** %history23, align 8
  %tobool24 = icmp ne i8* %27, null
  br i1 %tobool24, label %if.end29, label %if.then25

if.then25:                                        ; preds = %lor.lhs.false22, %lor.lhs.false, %if.end7
  %call26 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool27 = icmp ne i32 %call26, 0
  %28 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* null, i8* null
  %29 = ptrtoint i8* %cond28 to i64
  %30 = inttoptr i64 %29 to i8*
  store i8* %30, i8** %retval, align 8
  br label %return

if.end29:                                         ; preds = %lor.lhs.false22
  %31 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out30 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %31, i32 0, i32 2
  %32 = load i8*, i8** %out30, align 8
  %33 = load i32, i32* %pcount, align 4
  %mul31 = mul nsw i32 4, %33
  %conv32 = sext i32 %mul31 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 0, i64 %conv32, i1 false)
  %34 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %background33 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %34, i32 0, i32 3
  %35 = load i8*, i8** %background33, align 8
  %36 = load i32, i32* %pcount, align 4
  %mul34 = mul nsw i32 4, %36
  %conv35 = sext i32 %mul34 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %conv35, i1 false)
  %37 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %history36 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %37, i32 0, i32 4
  %38 = load i8*, i8** %history36, align 8
  %39 = load i32, i32* %pcount, align 4
  %conv37 = sext i32 %39 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 0, i64 %conv37, i1 false)
  store i32 1, i32* %first_frame, align 4
  br label %if.end98

if.else:                                          ; preds = %entry
  %40 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %eflags = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %40, i32 0, i32 9
  %41 = load i32, i32* %eflags, align 8
  %and = and i32 %41, 28
  %shr = ashr i32 %and, 2
  store i32 %shr, i32* %dispose, align 4
  %42 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %w38 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %42, i32 0, i32 0
  %43 = load i32, i32* %w38, align 8
  %44 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %h39 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %44, i32 0, i32 1
  %45 = load i32, i32* %h39, align 4
  %mul40 = mul nsw i32 %43, %45
  store i32 %mul40, i32* %pcount, align 4
  %46 = load i32, i32* %dispose, align 4
  %cmp41 = icmp eq i32 %46, 3
  br i1 %cmp41, label %land.lhs.true, label %if.end46

land.lhs.true:                                    ; preds = %if.else
  %47 = load i8*, i8** %two_back.addr, align 8
  %cmp43 = icmp eq i8* %47, null
  br i1 %cmp43, label %if.then45, label %if.end46

if.then45:                                        ; preds = %land.lhs.true
  store i32 2, i32* %dispose, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then45, %land.lhs.true, %if.else
  %48 = load i32, i32* %dispose, align 4
  %cmp47 = icmp eq i32 %48, 3
  br i1 %cmp47, label %if.then49, label %if.else63

if.then49:                                        ; preds = %if.end46
  store i32 0, i32* %pi, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then49
  %49 = load i32, i32* %pi, align 4
  %50 = load i32, i32* %pcount, align 4
  %cmp50 = icmp slt i32 %49, %50
  br i1 %cmp50, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %51 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %history52 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %51, i32 0, i32 4
  %52 = load i8*, i8** %history52, align 8
  %53 = load i32, i32* %pi, align 4
  %idxprom = sext i32 %53 to i64
  %arrayidx = getelementptr inbounds i8, i8* %52, i64 %idxprom
  %54 = load i8, i8* %arrayidx, align 1
  %tobool53 = icmp ne i8 %54, 0
  br i1 %tobool53, label %if.then54, label %if.end62

if.then54:                                        ; preds = %for.body
  %55 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out55 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %55, i32 0, i32 2
  %56 = load i8*, i8** %out55, align 8
  %57 = load i32, i32* %pi, align 4
  %mul56 = mul nsw i32 %57, 4
  %idxprom57 = sext i32 %mul56 to i64
  %arrayidx58 = getelementptr inbounds i8, i8* %56, i64 %idxprom57
  %58 = load i8*, i8** %two_back.addr, align 8
  %59 = load i32, i32* %pi, align 4
  %mul59 = mul nsw i32 %59, 4
  %idxprom60 = sext i32 %mul59 to i64
  %arrayidx61 = getelementptr inbounds i8, i8* %58, i64 %idxprom60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx58, i8* align 1 %arrayidx61, i64 4, i1 false)
  br label %if.end62

if.end62:                                         ; preds = %if.then54, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end62
  %60 = load i32, i32* %pi, align 4
  %inc = add nsw i32 %60, 1
  store i32 %inc, i32* %pi, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end90

if.else63:                                        ; preds = %if.end46
  %61 = load i32, i32* %dispose, align 4
  %cmp64 = icmp eq i32 %61, 2
  br i1 %cmp64, label %if.then66, label %if.else88

if.then66:                                        ; preds = %if.else63
  store i32 0, i32* %pi, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc85, %if.then66
  %62 = load i32, i32* %pi, align 4
  %63 = load i32, i32* %pcount, align 4
  %cmp68 = icmp slt i32 %62, %63
  br i1 %cmp68, label %for.body70, label %for.end87

for.body70:                                       ; preds = %for.cond67
  %64 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %history71 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %64, i32 0, i32 4
  %65 = load i8*, i8** %history71, align 8
  %66 = load i32, i32* %pi, align 4
  %idxprom72 = sext i32 %66 to i64
  %arrayidx73 = getelementptr inbounds i8, i8* %65, i64 %idxprom72
  %67 = load i8, i8* %arrayidx73, align 1
  %tobool74 = icmp ne i8 %67, 0
  br i1 %tobool74, label %if.then75, label %if.end84

if.then75:                                        ; preds = %for.body70
  %68 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out76 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %68, i32 0, i32 2
  %69 = load i8*, i8** %out76, align 8
  %70 = load i32, i32* %pi, align 4
  %mul77 = mul nsw i32 %70, 4
  %idxprom78 = sext i32 %mul77 to i64
  %arrayidx79 = getelementptr inbounds i8, i8* %69, i64 %idxprom78
  %71 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %background80 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %71, i32 0, i32 3
  %72 = load i8*, i8** %background80, align 8
  %73 = load i32, i32* %pi, align 4
  %mul81 = mul nsw i32 %73, 4
  %idxprom82 = sext i32 %mul81 to i64
  %arrayidx83 = getelementptr inbounds i8, i8* %72, i64 %idxprom82
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx79, i8* align 1 %arrayidx83, i64 4, i1 false)
  br label %if.end84

if.end84:                                         ; preds = %if.then75, %for.body70
  br label %for.inc85

for.inc85:                                        ; preds = %if.end84
  %74 = load i32, i32* %pi, align 4
  %inc86 = add nsw i32 %74, 1
  store i32 %inc86, i32* %pi, align 4
  br label %for.cond67

for.end87:                                        ; preds = %for.cond67
  br label %if.end89

if.else88:                                        ; preds = %if.else63
  br label %if.end89

if.end89:                                         ; preds = %if.else88, %for.end87
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %for.end
  %75 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %background91 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %75, i32 0, i32 3
  %76 = load i8*, i8** %background91, align 8
  %77 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out92 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %77, i32 0, i32 2
  %78 = load i8*, i8** %out92, align 8
  %79 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %w93 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %79, i32 0, i32 0
  %80 = load i32, i32* %w93, align 8
  %mul94 = mul nsw i32 4, %80
  %81 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %h95 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %81, i32 0, i32 1
  %82 = load i32, i32* %h95, align 4
  %mul96 = mul nsw i32 %mul94, %82
  %conv97 = sext i32 %mul96 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %78, i64 %conv97, i1 false)
  br label %if.end98

if.end98:                                         ; preds = %if.end90, %if.end29
  %83 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %history99 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %83, i32 0, i32 4
  %84 = load i8*, i8** %history99, align 8
  %85 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %w100 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %85, i32 0, i32 0
  %86 = load i32, i32* %w100, align 8
  %87 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %h101 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %87, i32 0, i32 1
  %88 = load i32, i32* %h101, align 4
  %mul102 = mul nsw i32 %86, %88
  %conv103 = sext i32 %mul102 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 0, i64 %conv103, i1 false)
  br label %for.cond104

for.cond104:                                      ; preds = %sw.epilog, %if.end98
  %89 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call105 = call zeroext i8 @stbi__get8(%struct.stbi__context* %89)
  %conv106 = zext i8 %call105 to i32
  store i32 %conv106, i32* %tag, align 4
  %90 = load i32, i32* %tag, align 4
  switch i32 %90, label %sw.default [
    i32 44, label %sw.bb
    i32 33, label %sw.bb224
    i32 59, label %sw.bb277
  ]

sw.bb:                                            ; preds = %for.cond104
  %91 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call109 = call i32 @stbi__get16le(%struct.stbi__context* %91)
  store i32 %call109, i32* %x, align 4
  %92 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call110 = call i32 @stbi__get16le(%struct.stbi__context* %92)
  store i32 %call110, i32* %y, align 4
  %93 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call111 = call i32 @stbi__get16le(%struct.stbi__context* %93)
  store i32 %call111, i32* %w107, align 4
  %94 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call112 = call i32 @stbi__get16le(%struct.stbi__context* %94)
  store i32 %call112, i32* %h108, align 4
  %95 = load i32, i32* %x, align 4
  %96 = load i32, i32* %w107, align 4
  %add = add nsw i32 %95, %96
  %97 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %w113 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %97, i32 0, i32 0
  %98 = load i32, i32* %w113, align 8
  %cmp114 = icmp sgt i32 %add, %98
  br i1 %cmp114, label %if.then121, label %lor.lhs.false116

lor.lhs.false116:                                 ; preds = %sw.bb
  %99 = load i32, i32* %y, align 4
  %100 = load i32, i32* %h108, align 4
  %add117 = add nsw i32 %99, %100
  %101 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %h118 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %101, i32 0, i32 1
  %102 = load i32, i32* %h118, align 4
  %cmp119 = icmp sgt i32 %add117, %102
  br i1 %cmp119, label %if.then121, label %if.end125

if.then121:                                       ; preds = %lor.lhs.false116, %sw.bb
  %call122 = call i32 @stbi__err(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.105, i64 0, i64 0))
  %tobool123 = icmp ne i32 %call122, 0
  %103 = zext i1 %tobool123 to i64
  %cond124 = select i1 %tobool123, i8* null, i8* null
  %104 = ptrtoint i8* %cond124 to i64
  %105 = inttoptr i64 %104 to i8*
  store i8* %105, i8** %retval, align 8
  br label %return

if.end125:                                        ; preds = %lor.lhs.false116
  %106 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %w126 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %106, i32 0, i32 0
  %107 = load i32, i32* %w126, align 8
  %mul127 = mul nsw i32 %107, 4
  %108 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %line_size = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %108, i32 0, i32 23
  store i32 %mul127, i32* %line_size, align 4
  %109 = load i32, i32* %x, align 4
  %mul128 = mul nsw i32 %109, 4
  %110 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %start_x = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %110, i32 0, i32 17
  store i32 %mul128, i32* %start_x, align 4
  %111 = load i32, i32* %y, align 4
  %112 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %line_size129 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %112, i32 0, i32 23
  %113 = load i32, i32* %line_size129, align 4
  %mul130 = mul nsw i32 %111, %113
  %114 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %start_y = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %114, i32 0, i32 18
  store i32 %mul130, i32* %start_y, align 8
  %115 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %start_x131 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %115, i32 0, i32 17
  %116 = load i32, i32* %start_x131, align 4
  %117 = load i32, i32* %w107, align 4
  %mul132 = mul nsw i32 %117, 4
  %add133 = add nsw i32 %116, %mul132
  %118 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %max_x = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %118, i32 0, i32 19
  store i32 %add133, i32* %max_x, align 4
  %119 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %start_y134 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %119, i32 0, i32 18
  %120 = load i32, i32* %start_y134, align 8
  %121 = load i32, i32* %h108, align 4
  %122 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %line_size135 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %122, i32 0, i32 23
  %123 = load i32, i32* %line_size135, align 4
  %mul136 = mul nsw i32 %121, %123
  %add137 = add nsw i32 %120, %mul136
  %124 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %max_y = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %124, i32 0, i32 20
  store i32 %add137, i32* %max_y, align 8
  %125 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %start_x138 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %125, i32 0, i32 17
  %126 = load i32, i32* %start_x138, align 4
  %127 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_x = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %127, i32 0, i32 21
  store i32 %126, i32* %cur_x, align 4
  %128 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %start_y139 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %128, i32 0, i32 18
  %129 = load i32, i32* %start_y139, align 8
  %130 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_y = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %130, i32 0, i32 22
  store i32 %129, i32* %cur_y, align 8
  %131 = load i32, i32* %w107, align 4
  %cmp140 = icmp eq i32 %131, 0
  br i1 %cmp140, label %if.then142, label %if.end145

if.then142:                                       ; preds = %if.end125
  %132 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %max_y143 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %132, i32 0, i32 20
  %133 = load i32, i32* %max_y143, align 8
  %134 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_y144 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %134, i32 0, i32 22
  store i32 %133, i32* %cur_y144, align 8
  br label %if.end145

if.end145:                                        ; preds = %if.then142, %if.end125
  %135 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call146 = call zeroext i8 @stbi__get8(%struct.stbi__context* %135)
  %conv147 = zext i8 %call146 to i32
  %136 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %lflags = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %136, i32 0, i32 16
  store i32 %conv147, i32* %lflags, align 8
  %137 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %lflags148 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %137, i32 0, i32 16
  %138 = load i32, i32* %lflags148, align 8
  %and149 = and i32 %138, 64
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %if.then151, label %if.else154

if.then151:                                       ; preds = %if.end145
  %139 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %line_size152 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %139, i32 0, i32 23
  %140 = load i32, i32* %line_size152, align 4
  %mul153 = mul nsw i32 8, %140
  %141 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %step = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %141, i32 0, i32 15
  store i32 %mul153, i32* %step, align 4
  %142 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %parse = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %142, i32 0, i32 14
  store i32 3, i32* %parse, align 8
  br label %if.end158

if.else154:                                       ; preds = %if.end145
  %143 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %line_size155 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %143, i32 0, i32 23
  %144 = load i32, i32* %line_size155, align 4
  %145 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %step156 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %145, i32 0, i32 15
  store i32 %144, i32* %step156, align 4
  %146 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %parse157 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %146, i32 0, i32 14
  store i32 0, i32* %parse157, align 8
  br label %if.end158

if.end158:                                        ; preds = %if.else154, %if.then151
  %147 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %lflags159 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %147, i32 0, i32 16
  %148 = load i32, i32* %lflags159, align 8
  %and160 = and i32 %148, 128
  %tobool161 = icmp ne i32 %and160, 0
  br i1 %tobool161, label %if.then162, label %if.else171

if.then162:                                       ; preds = %if.end158
  %149 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %150 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %lpal = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %150, i32 0, i32 11
  %arraydecay = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %lpal, i64 0, i64 0
  %151 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %lflags163 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %151, i32 0, i32 16
  %152 = load i32, i32* %lflags163, align 8
  %and164 = and i32 %152, 7
  %shl = shl i32 2, %and164
  %153 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %eflags165 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %153, i32 0, i32 9
  %154 = load i32, i32* %eflags165, align 8
  %and166 = and i32 %154, 1
  %tobool167 = icmp ne i32 %and166, 0
  br i1 %tobool167, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then162
  %155 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %transparent = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %155, i32 0, i32 8
  %156 = load i32, i32* %transparent, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then162
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond168 = phi i32 [ %156, %cond.true ], [ -1, %cond.false ]
  call void @stbi__gif_parse_colortable(%struct.stbi__context* %149, [4 x i8]* %arraydecay, i32 %shl, i32 %cond168)
  %157 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %lpal169 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %157, i32 0, i32 11
  %arraydecay170 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %lpal169, i64 0, i64 0
  %158 = bitcast [4 x i8]* %arraydecay170 to i8*
  %159 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %color_table = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %159, i32 0, i32 13
  store i8* %158, i8** %color_table, align 8
  br label %if.end182

if.else171:                                       ; preds = %if.end158
  %160 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %flags = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %160, i32 0, i32 5
  %161 = load i32, i32* %flags, align 8
  %and172 = and i32 %161, 128
  %tobool173 = icmp ne i32 %and172, 0
  br i1 %tobool173, label %if.then174, label %if.else177

if.then174:                                       ; preds = %if.else171
  %162 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %pal = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %162, i32 0, i32 10
  %arraydecay175 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 0
  %163 = bitcast [4 x i8]* %arraydecay175 to i8*
  %164 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %color_table176 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %164, i32 0, i32 13
  store i8* %163, i8** %color_table176, align 8
  br label %if.end181

if.else177:                                       ; preds = %if.else171
  %call178 = call i32 @stbi__err(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.106, i64 0, i64 0))
  %tobool179 = icmp ne i32 %call178, 0
  %165 = zext i1 %tobool179 to i64
  %cond180 = select i1 %tobool179, i8* null, i8* null
  %166 = ptrtoint i8* %cond180 to i64
  %167 = inttoptr i64 %166 to i8*
  store i8* %167, i8** %retval, align 8
  br label %return

if.end181:                                        ; preds = %if.then174
  br label %if.end182

if.end182:                                        ; preds = %if.end181, %cond.end
  %168 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %169 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %call183 = call i8* @stbi__process_gif_raster(%struct.stbi__context* %168, %struct.stbi__gif* %169)
  store i8* %call183, i8** %o, align 8
  %170 = load i8*, i8** %o, align 8
  %tobool184 = icmp ne i8* %170, null
  br i1 %tobool184, label %if.end186, label %if.then185

if.then185:                                       ; preds = %if.end182
  store i8* null, i8** %retval, align 8
  br label %return

if.end186:                                        ; preds = %if.end182
  %171 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %w187 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %171, i32 0, i32 0
  %172 = load i32, i32* %w187, align 8
  %173 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %h188 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %173, i32 0, i32 1
  %174 = load i32, i32* %h188, align 4
  %mul189 = mul nsw i32 %172, %174
  store i32 %mul189, i32* %pcount, align 4
  %175 = load i32, i32* %first_frame, align 4
  %tobool190 = icmp ne i32 %175, 0
  br i1 %tobool190, label %land.lhs.true191, label %if.end223

land.lhs.true191:                                 ; preds = %if.end186
  %176 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %bgindex = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %176, i32 0, i32 6
  %177 = load i32, i32* %bgindex, align 4
  %cmp192 = icmp sgt i32 %177, 0
  br i1 %cmp192, label %if.then194, label %if.end223

if.then194:                                       ; preds = %land.lhs.true191
  store i32 0, i32* %pi, align 4
  br label %for.cond195

for.cond195:                                      ; preds = %for.inc220, %if.then194
  %178 = load i32, i32* %pi, align 4
  %179 = load i32, i32* %pcount, align 4
  %cmp196 = icmp slt i32 %178, %179
  br i1 %cmp196, label %for.body198, label %for.end222

for.body198:                                      ; preds = %for.cond195
  %180 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %history199 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %180, i32 0, i32 4
  %181 = load i8*, i8** %history199, align 8
  %182 = load i32, i32* %pi, align 4
  %idxprom200 = sext i32 %182 to i64
  %arrayidx201 = getelementptr inbounds i8, i8* %181, i64 %idxprom200
  %183 = load i8, i8* %arrayidx201, align 1
  %conv202 = zext i8 %183 to i32
  %cmp203 = icmp eq i32 %conv202, 0
  br i1 %cmp203, label %if.then205, label %if.end219

if.then205:                                       ; preds = %for.body198
  %184 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %pal206 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %184, i32 0, i32 10
  %185 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %bgindex207 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %185, i32 0, i32 6
  %186 = load i32, i32* %bgindex207, align 4
  %idxprom208 = sext i32 %186 to i64
  %arrayidx209 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal206, i64 0, i64 %idxprom208
  %arrayidx210 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx209, i64 0, i64 3
  store i8 -1, i8* %arrayidx210, align 1
  %187 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out211 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %187, i32 0, i32 2
  %188 = load i8*, i8** %out211, align 8
  %189 = load i32, i32* %pi, align 4
  %mul212 = mul nsw i32 %189, 4
  %idxprom213 = sext i32 %mul212 to i64
  %arrayidx214 = getelementptr inbounds i8, i8* %188, i64 %idxprom213
  %190 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %pal215 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %190, i32 0, i32 10
  %191 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %bgindex216 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %191, i32 0, i32 6
  %192 = load i32, i32* %bgindex216, align 4
  %idxprom217 = sext i32 %192 to i64
  %arrayidx218 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal215, i64 0, i64 %idxprom217
  %193 = bitcast [4 x i8]* %arrayidx218 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx214, i8* align 4 %193, i64 4, i1 false)
  br label %if.end219

if.end219:                                        ; preds = %if.then205, %for.body198
  br label %for.inc220

for.inc220:                                       ; preds = %if.end219
  %194 = load i32, i32* %pi, align 4
  %inc221 = add nsw i32 %194, 1
  store i32 %inc221, i32* %pi, align 4
  br label %for.cond195

for.end222:                                       ; preds = %for.cond195
  br label %if.end223

if.end223:                                        ; preds = %for.end222, %land.lhs.true191, %if.end186
  %195 = load i8*, i8** %o, align 8
  store i8* %195, i8** %retval, align 8
  br label %return

sw.bb224:                                         ; preds = %for.cond104
  %196 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call225 = call zeroext i8 @stbi__get8(%struct.stbi__context* %196)
  %conv226 = zext i8 %call225 to i32
  store i32 %conv226, i32* %ext, align 4
  %197 = load i32, i32* %ext, align 4
  %cmp227 = icmp eq i32 %197, 249
  br i1 %cmp227, label %if.then229, label %if.end272

if.then229:                                       ; preds = %sw.bb224
  %198 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call230 = call zeroext i8 @stbi__get8(%struct.stbi__context* %198)
  %conv231 = zext i8 %call230 to i32
  store i32 %conv231, i32* %len, align 4
  %199 = load i32, i32* %len, align 4
  %cmp232 = icmp eq i32 %199, 4
  br i1 %cmp232, label %if.then234, label %if.else270

if.then234:                                       ; preds = %if.then229
  %200 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call235 = call zeroext i8 @stbi__get8(%struct.stbi__context* %200)
  %conv236 = zext i8 %call235 to i32
  %201 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %eflags237 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %201, i32 0, i32 9
  store i32 %conv236, i32* %eflags237, align 8
  %202 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call238 = call i32 @stbi__get16le(%struct.stbi__context* %202)
  %mul239 = mul nsw i32 10, %call238
  %203 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %delay = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %203, i32 0, i32 24
  store i32 %mul239, i32* %delay, align 8
  %204 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %transparent240 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %204, i32 0, i32 8
  %205 = load i32, i32* %transparent240, align 4
  %cmp241 = icmp sge i32 %205, 0
  br i1 %cmp241, label %if.then243, label %if.end249

if.then243:                                       ; preds = %if.then234
  %206 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %pal244 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %206, i32 0, i32 10
  %207 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %transparent245 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %207, i32 0, i32 8
  %208 = load i32, i32* %transparent245, align 4
  %idxprom246 = sext i32 %208 to i64
  %arrayidx247 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal244, i64 0, i64 %idxprom246
  %arrayidx248 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx247, i64 0, i64 3
  store i8 -1, i8* %arrayidx248, align 1
  br label %if.end249

if.end249:                                        ; preds = %if.then243, %if.then234
  %209 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %eflags250 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %209, i32 0, i32 9
  %210 = load i32, i32* %eflags250, align 8
  %and251 = and i32 %210, 1
  %tobool252 = icmp ne i32 %and251, 0
  br i1 %tobool252, label %if.then253, label %if.else267

if.then253:                                       ; preds = %if.end249
  %211 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call254 = call zeroext i8 @stbi__get8(%struct.stbi__context* %211)
  %conv255 = zext i8 %call254 to i32
  %212 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %transparent256 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %212, i32 0, i32 8
  store i32 %conv255, i32* %transparent256, align 4
  %213 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %transparent257 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %213, i32 0, i32 8
  %214 = load i32, i32* %transparent257, align 4
  %cmp258 = icmp sge i32 %214, 0
  br i1 %cmp258, label %if.then260, label %if.end266

if.then260:                                       ; preds = %if.then253
  %215 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %pal261 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %215, i32 0, i32 10
  %216 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %transparent262 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %216, i32 0, i32 8
  %217 = load i32, i32* %transparent262, align 4
  %idxprom263 = sext i32 %217 to i64
  %arrayidx264 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal261, i64 0, i64 %idxprom263
  %arrayidx265 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx264, i64 0, i64 3
  store i8 0, i8* %arrayidx265, align 1
  br label %if.end266

if.end266:                                        ; preds = %if.then260, %if.then253
  br label %if.end269

if.else267:                                       ; preds = %if.end249
  %218 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %218, i32 1)
  %219 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %transparent268 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %219, i32 0, i32 8
  store i32 -1, i32* %transparent268, align 4
  br label %if.end269

if.end269:                                        ; preds = %if.else267, %if.end266
  br label %if.end271

if.else270:                                       ; preds = %if.then229
  %220 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %221 = load i32, i32* %len, align 4
  call void @stbi__skip(%struct.stbi__context* %220, i32 %221)
  br label %sw.epilog

if.end271:                                        ; preds = %if.end269
  br label %if.end272

if.end272:                                        ; preds = %if.end271, %sw.bb224
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end272
  %222 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call273 = call zeroext i8 @stbi__get8(%struct.stbi__context* %222)
  %conv274 = zext i8 %call273 to i32
  store i32 %conv274, i32* %len, align 4
  %cmp275 = icmp ne i32 %conv274, 0
  br i1 %cmp275, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %223 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %224 = load i32, i32* %len, align 4
  call void @stbi__skip(%struct.stbi__context* %223, i32 %224)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %sw.epilog

sw.bb277:                                         ; preds = %for.cond104
  %225 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %226 = bitcast %struct.stbi__context* %225 to i8*
  store i8* %226, i8** %retval, align 8
  br label %return

sw.default:                                       ; preds = %for.cond104
  %call278 = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.107, i64 0, i64 0))
  %tobool279 = icmp ne i32 %call278, 0
  %227 = zext i1 %tobool279 to i64
  %cond280 = select i1 %tobool279, i8* null, i8* null
  %228 = ptrtoint i8* %cond280 to i64
  %229 = inttoptr i64 %228 to i8*
  store i8* %229, i8** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %while.end, %if.else270
  br label %for.cond104

return:                                           ; preds = %sw.default, %sw.bb277, %if.end223, %if.then185, %if.else177, %if.then121, %if.then25, %if.then4, %if.then1
  %230 = load i8*, i8** %retval, align 8
  ret i8* %230
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__gif_header(%struct.stbi__context* %s, %struct.stbi__gif* %g, i32* %comp, i32 %is_info) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %g.addr = alloca %struct.stbi__gif*, align 8
  %comp.addr = alloca i32*, align 8
  %is_info.addr = alloca i32, align 4
  %version = alloca i8, align 1
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store %struct.stbi__gif* %g, %struct.stbi__gif** %g.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %is_info, i32* %is_info.addr, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  %conv = zext i8 %call to i32
  %cmp = icmp ne i32 %conv, 71
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call2 = call zeroext i8 @stbi__get8(%struct.stbi__context* %1)
  %conv3 = zext i8 %call2 to i32
  %cmp4 = icmp ne i32 %conv3, 73
  br i1 %cmp4, label %if.then, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call7 = call zeroext i8 @stbi__get8(%struct.stbi__context* %2)
  %conv8 = zext i8 %call7 to i32
  %cmp9 = icmp ne i32 %conv8, 70
  br i1 %cmp9, label %if.then, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false6
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call12 = call zeroext i8 @stbi__get8(%struct.stbi__context* %3)
  %conv13 = zext i8 %call12 to i32
  %cmp14 = icmp ne i32 %conv13, 56
  br i1 %cmp14, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false6, %lor.lhs.false, %entry
  %call16 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i64 0, i64 0))
  store i32 %call16, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false11
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call17 = call zeroext i8 @stbi__get8(%struct.stbi__context* %4)
  store i8 %call17, i8* %version, align 1
  %5 = load i8, i8* %version, align 1
  %conv18 = zext i8 %5 to i32
  %cmp19 = icmp ne i32 %conv18, 55
  br i1 %cmp19, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %if.end
  %6 = load i8, i8* %version, align 1
  %conv21 = zext i8 %6 to i32
  %cmp22 = icmp ne i32 %conv21, 57
  br i1 %cmp22, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i64 0, i64 0))
  store i32 %call25, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %land.lhs.true, %if.end
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call27 = call zeroext i8 @stbi__get8(%struct.stbi__context* %7)
  %conv28 = zext i8 %call27 to i32
  %cmp29 = icmp ne i32 %conv28, 97
  br i1 %cmp29, label %if.then31, label %if.end33

if.then31:                                        ; preds = %if.end26
  %call32 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i64 0, i64 0))
  store i32 %call32, i32* %retval, align 4
  br label %return

if.end33:                                         ; preds = %if.end26
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.109, i64 0, i64 0), i8** @stbi__g_failure_reason, align 8
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call34 = call i32 @stbi__get16le(%struct.stbi__context* %8)
  %9 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %w = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %9, i32 0, i32 0
  store i32 %call34, i32* %w, align 8
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call35 = call i32 @stbi__get16le(%struct.stbi__context* %10)
  %11 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %h = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %11, i32 0, i32 1
  store i32 %call35, i32* %h, align 4
  %12 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call36 = call zeroext i8 @stbi__get8(%struct.stbi__context* %12)
  %conv37 = zext i8 %call36 to i32
  %13 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %flags = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %13, i32 0, i32 5
  store i32 %conv37, i32* %flags, align 8
  %14 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call38 = call zeroext i8 @stbi__get8(%struct.stbi__context* %14)
  %conv39 = zext i8 %call38 to i32
  %15 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %bgindex = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %15, i32 0, i32 6
  store i32 %conv39, i32* %bgindex, align 4
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call40 = call zeroext i8 @stbi__get8(%struct.stbi__context* %16)
  %conv41 = zext i8 %call40 to i32
  %17 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %ratio = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %17, i32 0, i32 7
  store i32 %conv41, i32* %ratio, align 8
  %18 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %transparent = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %18, i32 0, i32 8
  store i32 -1, i32* %transparent, align 4
  %19 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %w42 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %19, i32 0, i32 0
  %20 = load i32, i32* %w42, align 8
  %cmp43 = icmp sgt i32 %20, 16777216
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.end33
  %call46 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  store i32 %call46, i32* %retval, align 4
  br label %return

if.end47:                                         ; preds = %if.end33
  %21 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %h48 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %21, i32 0, i32 1
  %22 = load i32, i32* %h48, align 4
  %cmp49 = icmp sgt i32 %22, 16777216
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.end47
  %call52 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  store i32 %call52, i32* %retval, align 4
  br label %return

if.end53:                                         ; preds = %if.end47
  %23 = load i32*, i32** %comp.addr, align 8
  %cmp54 = icmp ne i32* %23, null
  br i1 %cmp54, label %if.then56, label %if.end57

if.then56:                                        ; preds = %if.end53
  %24 = load i32*, i32** %comp.addr, align 8
  store i32 4, i32* %24, align 4
  br label %if.end57

if.end57:                                         ; preds = %if.then56, %if.end53
  %25 = load i32, i32* %is_info.addr, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.end57
  store i32 1, i32* %retval, align 4
  br label %return

if.end59:                                         ; preds = %if.end57
  %26 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %flags60 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %26, i32 0, i32 5
  %27 = load i32, i32* %flags60, align 8
  %and = and i32 %27, 128
  %tobool61 = icmp ne i32 %and, 0
  br i1 %tobool61, label %if.then62, label %if.end65

if.then62:                                        ; preds = %if.end59
  %28 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %29 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %pal = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %29, i32 0, i32 10
  %arraydecay = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* %pal, i64 0, i64 0
  %30 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %flags63 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %30, i32 0, i32 5
  %31 = load i32, i32* %flags63, align 8
  %and64 = and i32 %31, 7
  %shl = shl i32 2, %and64
  call void @stbi__gif_parse_colortable(%struct.stbi__context* %28, [4 x i8]* %arraydecay, i32 %shl, i32 -1)
  br label %if.end65

if.end65:                                         ; preds = %if.then62, %if.end59
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end65, %if.then58, %if.then51, %if.then45, %if.then31, %if.then24, %if.then
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__gif_parse_colortable(%struct.stbi__context* %s, [4 x i8]* %pal, i32 %num_entries, i32 %transp) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %pal.addr = alloca [4 x i8]*, align 8
  %num_entries.addr = alloca i32, align 4
  %transp.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store [4 x i8]* %pal, [4 x i8]** %pal.addr, align 8
  store i32 %num_entries, i32* %num_entries.addr, align 4
  store i32 %transp, i32* %transp.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %num_entries.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %2)
  %3 = load [4 x i8]*, [4 x i8]** %pal.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 %idxprom
  %arrayidx1 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 2
  store i8 %call, i8* %arrayidx1, align 1
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call2 = call zeroext i8 @stbi__get8(%struct.stbi__context* %5)
  %6 = load [4 x i8]*, [4 x i8]** %pal.addr, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %7 to i64
  %arrayidx4 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 %idxprom3
  %arrayidx5 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx4, i64 0, i64 1
  store i8 %call2, i8* %arrayidx5, align 1
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call6 = call zeroext i8 @stbi__get8(%struct.stbi__context* %8)
  %9 = load [4 x i8]*, [4 x i8]** %pal.addr, align 8
  %10 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %10 to i64
  %arrayidx8 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 %idxprom7
  %arrayidx9 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx8, i64 0, i64 0
  store i8 %call6, i8* %arrayidx9, align 1
  %11 = load i32, i32* %transp.addr, align 4
  %12 = load i32, i32* %i, align 4
  %cmp10 = icmp eq i32 %11, %12
  %13 = zext i1 %cmp10 to i64
  %cond = select i1 %cmp10, i32 0, i32 255
  %conv = trunc i32 %cond to i8
  %14 = load [4 x i8]*, [4 x i8]** %pal.addr, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %15 to i64
  %arrayidx12 = getelementptr inbounds [4 x i8], [4 x i8]* %14, i64 %idxprom11
  %arrayidx13 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx12, i64 0, i64 3
  store i8 %conv, i8* %arrayidx13, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__process_gif_raster(%struct.stbi__context* %s, %struct.stbi__gif* %g) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %g.addr = alloca %struct.stbi__gif*, align 8
  %lzw_cs = alloca i8, align 1
  %len = alloca i32, align 4
  %init_code = alloca i32, align 4
  %first = alloca i32, align 4
  %codesize = alloca i32, align 4
  %codemask = alloca i32, align 4
  %avail = alloca i32, align 4
  %oldcode = alloca i32, align 4
  %bits = alloca i32, align 4
  %valid_bits = alloca i32, align 4
  %clear = alloca i32, align 4
  %p = alloca %struct.stbi__gif_lzw*, align 8
  %code = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store %struct.stbi__gif* %g, %struct.stbi__gif** %g.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  store i8 %call, i8* %lzw_cs, align 1
  %1 = load i8, i8* %lzw_cs, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp sgt i32 %conv, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8, i8* %lzw_cs, align 1
  %conv2 = zext i8 %2 to i32
  %shl = shl i32 1, %conv2
  store i32 %shl, i32* %clear, align 4
  store i32 1, i32* %first, align 4
  %3 = load i8, i8* %lzw_cs, align 1
  %conv3 = zext i8 %3 to i32
  %add = add nsw i32 %conv3, 1
  store i32 %add, i32* %codesize, align 4
  %4 = load i32, i32* %codesize, align 4
  %shl4 = shl i32 1, %4
  %sub = sub nsw i32 %shl4, 1
  store i32 %sub, i32* %codemask, align 4
  store i32 0, i32* %bits, align 4
  store i32 0, i32* %valid_bits, align 4
  store i32 0, i32* %init_code, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %init_code, align 4
  %6 = load i32, i32* %clear, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %codes = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %7, i32 0, i32 12
  %8 = load i32, i32* %init_code, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [8192 x %struct.stbi__gif_lzw], [8192 x %struct.stbi__gif_lzw]* %codes, i64 0, i64 %idxprom
  %prefix = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %arrayidx, i32 0, i32 0
  store i16 -1, i16* %prefix, align 4
  %9 = load i32, i32* %init_code, align 4
  %conv7 = trunc i32 %9 to i8
  %10 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %codes8 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %10, i32 0, i32 12
  %11 = load i32, i32* %init_code, align 4
  %idxprom9 = sext i32 %11 to i64
  %arrayidx10 = getelementptr inbounds [8192 x %struct.stbi__gif_lzw], [8192 x %struct.stbi__gif_lzw]* %codes8, i64 0, i64 %idxprom9
  %first11 = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %arrayidx10, i32 0, i32 1
  store i8 %conv7, i8* %first11, align 2
  %12 = load i32, i32* %init_code, align 4
  %conv12 = trunc i32 %12 to i8
  %13 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %codes13 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %13, i32 0, i32 12
  %14 = load i32, i32* %init_code, align 4
  %idxprom14 = sext i32 %14 to i64
  %arrayidx15 = getelementptr inbounds [8192 x %struct.stbi__gif_lzw], [8192 x %struct.stbi__gif_lzw]* %codes13, i64 0, i64 %idxprom14
  %suffix = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %arrayidx15, i32 0, i32 2
  store i8 %conv12, i8* %suffix, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %init_code, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %init_code, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %clear, align 4
  %add16 = add nsw i32 %16, 2
  store i32 %add16, i32* %avail, align 4
  store i32 -1, i32* %oldcode, align 4
  store i32 0, i32* %len, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %if.end122, %for.end
  %17 = load i32, i32* %valid_bits, align 4
  %18 = load i32, i32* %codesize, align 4
  %cmp18 = icmp slt i32 %17, %18
  br i1 %cmp18, label %if.then20, label %if.else

if.then20:                                        ; preds = %for.cond17
  %19 = load i32, i32* %len, align 4
  %cmp21 = icmp eq i32 %19, 0
  br i1 %cmp21, label %if.then23, label %if.end30

if.then23:                                        ; preds = %if.then20
  %20 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call24 = call zeroext i8 @stbi__get8(%struct.stbi__context* %20)
  %conv25 = zext i8 %call24 to i32
  store i32 %conv25, i32* %len, align 4
  %21 = load i32, i32* %len, align 4
  %cmp26 = icmp eq i32 %21, 0
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.then23
  %22 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %22, i32 0, i32 2
  %23 = load i8*, i8** %out, align 8
  store i8* %23, i8** %retval, align 8
  br label %return

if.end29:                                         ; preds = %if.then23
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then20
  %24 = load i32, i32* %len, align 4
  %dec = add nsw i32 %24, -1
  store i32 %dec, i32* %len, align 4
  %25 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call31 = call zeroext i8 @stbi__get8(%struct.stbi__context* %25)
  %conv32 = zext i8 %call31 to i32
  %26 = load i32, i32* %valid_bits, align 4
  %shl33 = shl i32 %conv32, %26
  %27 = load i32, i32* %bits, align 4
  %or = or i32 %27, %shl33
  store i32 %or, i32* %bits, align 4
  %28 = load i32, i32* %valid_bits, align 4
  %add34 = add nsw i32 %28, 8
  store i32 %add34, i32* %valid_bits, align 4
  br label %if.end122

if.else:                                          ; preds = %for.cond17
  %29 = load i32, i32* %bits, align 4
  %30 = load i32, i32* %codemask, align 4
  %and = and i32 %29, %30
  store i32 %and, i32* %code, align 4
  %31 = load i32, i32* %codesize, align 4
  %32 = load i32, i32* %bits, align 4
  %shr = ashr i32 %32, %31
  store i32 %shr, i32* %bits, align 4
  %33 = load i32, i32* %codesize, align 4
  %34 = load i32, i32* %valid_bits, align 4
  %sub35 = sub nsw i32 %34, %33
  store i32 %sub35, i32* %valid_bits, align 4
  %35 = load i32, i32* %code, align 4
  %36 = load i32, i32* %clear, align 4
  %cmp36 = icmp eq i32 %35, %36
  br i1 %cmp36, label %if.then38, label %if.else44

if.then38:                                        ; preds = %if.else
  %37 = load i8, i8* %lzw_cs, align 1
  %conv39 = zext i8 %37 to i32
  %add40 = add nsw i32 %conv39, 1
  store i32 %add40, i32* %codesize, align 4
  %38 = load i32, i32* %codesize, align 4
  %shl41 = shl i32 1, %38
  %sub42 = sub nsw i32 %shl41, 1
  store i32 %sub42, i32* %codemask, align 4
  %39 = load i32, i32* %clear, align 4
  %add43 = add nsw i32 %39, 2
  store i32 %add43, i32* %avail, align 4
  store i32 -1, i32* %oldcode, align 4
  store i32 0, i32* %first, align 4
  br label %if.end121

if.else44:                                        ; preds = %if.else
  %40 = load i32, i32* %code, align 4
  %41 = load i32, i32* %clear, align 4
  %add45 = add nsw i32 %41, 1
  %cmp46 = icmp eq i32 %40, %add45
  br i1 %cmp46, label %if.then48, label %if.else54

if.then48:                                        ; preds = %if.else44
  %42 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %43 = load i32, i32* %len, align 4
  call void @stbi__skip(%struct.stbi__context* %42, i32 %43)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then48
  %44 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call49 = call zeroext i8 @stbi__get8(%struct.stbi__context* %44)
  %conv50 = zext i8 %call49 to i32
  store i32 %conv50, i32* %len, align 4
  %cmp51 = icmp sgt i32 %conv50, 0
  br i1 %cmp51, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %45 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %46 = load i32, i32* %len, align 4
  call void @stbi__skip(%struct.stbi__context* %45, i32 %46)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %47 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out53 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %47, i32 0, i32 2
  %48 = load i8*, i8** %out53, align 8
  store i8* %48, i8** %retval, align 8
  br label %return

if.else54:                                        ; preds = %if.else44
  %49 = load i32, i32* %code, align 4
  %50 = load i32, i32* %avail, align 4
  %cmp55 = icmp sle i32 %49, %50
  br i1 %cmp55, label %if.then57, label %if.else115

if.then57:                                        ; preds = %if.else54
  %51 = load i32, i32* %first, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then58, label %if.end61

if.then58:                                        ; preds = %if.then57
  %call59 = call i32 @stbi__err(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.110, i64 0, i64 0))
  %tobool60 = icmp ne i32 %call59, 0
  %52 = zext i1 %tobool60 to i64
  %cond = select i1 %tobool60, i8* null, i8* null
  %53 = ptrtoint i8* %cond to i64
  %54 = inttoptr i64 %53 to i8*
  store i8* %54, i8** %retval, align 8
  br label %return

if.end61:                                         ; preds = %if.then57
  %55 = load i32, i32* %oldcode, align 4
  %cmp62 = icmp sge i32 %55, 0
  br i1 %cmp62, label %if.then64, label %if.else95

if.then64:                                        ; preds = %if.end61
  %56 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %codes65 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %56, i32 0, i32 12
  %57 = load i32, i32* %avail, align 4
  %inc66 = add nsw i32 %57, 1
  store i32 %inc66, i32* %avail, align 4
  %idxprom67 = sext i32 %57 to i64
  %arrayidx68 = getelementptr inbounds [8192 x %struct.stbi__gif_lzw], [8192 x %struct.stbi__gif_lzw]* %codes65, i64 0, i64 %idxprom67
  store %struct.stbi__gif_lzw* %arrayidx68, %struct.stbi__gif_lzw** %p, align 8
  %58 = load i32, i32* %avail, align 4
  %cmp69 = icmp sgt i32 %58, 8192
  br i1 %cmp69, label %if.then71, label %if.end75

if.then71:                                        ; preds = %if.then64
  %call72 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.111, i64 0, i64 0))
  %tobool73 = icmp ne i32 %call72, 0
  %59 = zext i1 %tobool73 to i64
  %cond74 = select i1 %tobool73, i8* null, i8* null
  %60 = ptrtoint i8* %cond74 to i64
  %61 = inttoptr i64 %60 to i8*
  store i8* %61, i8** %retval, align 8
  br label %return

if.end75:                                         ; preds = %if.then64
  %62 = load i32, i32* %oldcode, align 4
  %conv76 = trunc i32 %62 to i16
  %63 = load %struct.stbi__gif_lzw*, %struct.stbi__gif_lzw** %p, align 8
  %prefix77 = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %63, i32 0, i32 0
  store i16 %conv76, i16* %prefix77, align 2
  %64 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %codes78 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %64, i32 0, i32 12
  %65 = load i32, i32* %oldcode, align 4
  %idxprom79 = sext i32 %65 to i64
  %arrayidx80 = getelementptr inbounds [8192 x %struct.stbi__gif_lzw], [8192 x %struct.stbi__gif_lzw]* %codes78, i64 0, i64 %idxprom79
  %first81 = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %arrayidx80, i32 0, i32 1
  %66 = load i8, i8* %first81, align 2
  %67 = load %struct.stbi__gif_lzw*, %struct.stbi__gif_lzw** %p, align 8
  %first82 = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %67, i32 0, i32 1
  store i8 %66, i8* %first82, align 2
  %68 = load i32, i32* %code, align 4
  %69 = load i32, i32* %avail, align 4
  %cmp83 = icmp eq i32 %68, %69
  br i1 %cmp83, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end75
  %70 = load %struct.stbi__gif_lzw*, %struct.stbi__gif_lzw** %p, align 8
  %first85 = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %70, i32 0, i32 1
  %71 = load i8, i8* %first85, align 2
  %conv86 = zext i8 %71 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end75
  %72 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %codes87 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %72, i32 0, i32 12
  %73 = load i32, i32* %code, align 4
  %idxprom88 = sext i32 %73 to i64
  %arrayidx89 = getelementptr inbounds [8192 x %struct.stbi__gif_lzw], [8192 x %struct.stbi__gif_lzw]* %codes87, i64 0, i64 %idxprom88
  %first90 = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %arrayidx89, i32 0, i32 1
  %74 = load i8, i8* %first90, align 2
  %conv91 = zext i8 %74 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond92 = phi i32 [ %conv86, %cond.true ], [ %conv91, %cond.false ]
  %conv93 = trunc i32 %cond92 to i8
  %75 = load %struct.stbi__gif_lzw*, %struct.stbi__gif_lzw** %p, align 8
  %suffix94 = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %75, i32 0, i32 2
  store i8 %conv93, i8* %suffix94, align 1
  br label %if.end103

if.else95:                                        ; preds = %if.end61
  %76 = load i32, i32* %code, align 4
  %77 = load i32, i32* %avail, align 4
  %cmp96 = icmp eq i32 %76, %77
  br i1 %cmp96, label %if.then98, label %if.end102

if.then98:                                        ; preds = %if.else95
  %call99 = call i32 @stbi__err(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.112, i64 0, i64 0))
  %tobool100 = icmp ne i32 %call99, 0
  %78 = zext i1 %tobool100 to i64
  %cond101 = select i1 %tobool100, i8* null, i8* null
  %79 = ptrtoint i8* %cond101 to i64
  %80 = inttoptr i64 %79 to i8*
  store i8* %80, i8** %retval, align 8
  br label %return

if.end102:                                        ; preds = %if.else95
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %cond.end
  %81 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %82 = load i32, i32* %code, align 4
  %conv104 = trunc i32 %82 to i16
  call void @stbi__out_gif_code(%struct.stbi__gif* %81, i16 zeroext %conv104)
  %83 = load i32, i32* %avail, align 4
  %84 = load i32, i32* %codemask, align 4
  %and105 = and i32 %83, %84
  %cmp106 = icmp eq i32 %and105, 0
  br i1 %cmp106, label %land.lhs.true, label %if.end114

land.lhs.true:                                    ; preds = %if.end103
  %85 = load i32, i32* %avail, align 4
  %cmp108 = icmp sle i32 %85, 4095
  br i1 %cmp108, label %if.then110, label %if.end114

if.then110:                                       ; preds = %land.lhs.true
  %86 = load i32, i32* %codesize, align 4
  %inc111 = add nsw i32 %86, 1
  store i32 %inc111, i32* %codesize, align 4
  %87 = load i32, i32* %codesize, align 4
  %shl112 = shl i32 1, %87
  %sub113 = sub nsw i32 %shl112, 1
  store i32 %sub113, i32* %codemask, align 4
  br label %if.end114

if.end114:                                        ; preds = %if.then110, %land.lhs.true, %if.end103
  %88 = load i32, i32* %code, align 4
  store i32 %88, i32* %oldcode, align 4
  br label %if.end119

if.else115:                                       ; preds = %if.else54
  %call116 = call i32 @stbi__err(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.112, i64 0, i64 0))
  %tobool117 = icmp ne i32 %call116, 0
  %89 = zext i1 %tobool117 to i64
  %cond118 = select i1 %tobool117, i8* null, i8* null
  %90 = ptrtoint i8* %cond118 to i64
  %91 = inttoptr i64 %90 to i8*
  store i8* %91, i8** %retval, align 8
  br label %return

if.end119:                                        ; preds = %if.end114
  br label %if.end120

if.end120:                                        ; preds = %if.end119
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %if.then38
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %if.end30
  br label %for.cond17

return:                                           ; preds = %if.else115, %if.then98, %if.then71, %if.then58, %while.end, %if.then28, %if.then
  %92 = load i8*, i8** %retval, align 8
  ret i8* %92
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__out_gif_code(%struct.stbi__gif* %g, i16 zeroext %code) #0 {
entry:
  %g.addr = alloca %struct.stbi__gif*, align 8
  %code.addr = alloca i16, align 2
  %p = alloca i8*, align 8
  %c = alloca i8*, align 8
  %idx = alloca i32, align 4
  store %struct.stbi__gif* %g, %struct.stbi__gif** %g.addr, align 8
  store i16 %code, i16* %code.addr, align 2
  %0 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %codes = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %0, i32 0, i32 12
  %1 = load i16, i16* %code.addr, align 2
  %idxprom = zext i16 %1 to i64
  %arrayidx = getelementptr inbounds [8192 x %struct.stbi__gif_lzw], [8192 x %struct.stbi__gif_lzw]* %codes, i64 0, i64 %idxprom
  %prefix = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %arrayidx, i32 0, i32 0
  %2 = load i16, i16* %prefix, align 4
  %conv = sext i16 %2 to i32
  %cmp = icmp sge i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %4 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %codes2 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %4, i32 0, i32 12
  %5 = load i16, i16* %code.addr, align 2
  %idxprom3 = zext i16 %5 to i64
  %arrayidx4 = getelementptr inbounds [8192 x %struct.stbi__gif_lzw], [8192 x %struct.stbi__gif_lzw]* %codes2, i64 0, i64 %idxprom3
  %prefix5 = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %arrayidx4, i32 0, i32 0
  %6 = load i16, i16* %prefix5, align 4
  call void @stbi__out_gif_code(%struct.stbi__gif* %3, i16 zeroext %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_y = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %7, i32 0, i32 22
  %8 = load i32, i32* %cur_y, align 8
  %9 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %max_y = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %9, i32 0, i32 20
  %10 = load i32, i32* %max_y, align 8
  %cmp6 = icmp sge i32 %8, %10
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  br label %if.end57

if.end9:                                          ; preds = %if.end
  %11 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_x = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %11, i32 0, i32 21
  %12 = load i32, i32* %cur_x, align 4
  %13 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_y10 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %13, i32 0, i32 22
  %14 = load i32, i32* %cur_y10, align 8
  %add = add nsw i32 %12, %14
  store i32 %add, i32* %idx, align 4
  %15 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %out = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %15, i32 0, i32 2
  %16 = load i8*, i8** %out, align 8
  %17 = load i32, i32* %idx, align 4
  %idxprom11 = sext i32 %17 to i64
  %arrayidx12 = getelementptr inbounds i8, i8* %16, i64 %idxprom11
  store i8* %arrayidx12, i8** %p, align 8
  %18 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %history = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %18, i32 0, i32 4
  %19 = load i8*, i8** %history, align 8
  %20 = load i32, i32* %idx, align 4
  %div = sdiv i32 %20, 4
  %idxprom13 = sext i32 %div to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %19, i64 %idxprom13
  store i8 1, i8* %arrayidx14, align 1
  %21 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %color_table = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %21, i32 0, i32 13
  %22 = load i8*, i8** %color_table, align 8
  %23 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %codes15 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %23, i32 0, i32 12
  %24 = load i16, i16* %code.addr, align 2
  %idxprom16 = zext i16 %24 to i64
  %arrayidx17 = getelementptr inbounds [8192 x %struct.stbi__gif_lzw], [8192 x %struct.stbi__gif_lzw]* %codes15, i64 0, i64 %idxprom16
  %suffix = getelementptr inbounds %struct.stbi__gif_lzw, %struct.stbi__gif_lzw* %arrayidx17, i32 0, i32 2
  %25 = load i8, i8* %suffix, align 1
  %conv18 = zext i8 %25 to i32
  %mul = mul nsw i32 %conv18, 4
  %idxprom19 = sext i32 %mul to i64
  %arrayidx20 = getelementptr inbounds i8, i8* %22, i64 %idxprom19
  store i8* %arrayidx20, i8** %c, align 8
  %26 = load i8*, i8** %c, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %26, i64 3
  %27 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %27 to i32
  %cmp23 = icmp sgt i32 %conv22, 128
  br i1 %cmp23, label %if.then25, label %if.end34

if.then25:                                        ; preds = %if.end9
  %28 = load i8*, i8** %c, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %28, i64 2
  %29 = load i8, i8* %arrayidx26, align 1
  %30 = load i8*, i8** %p, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %30, i64 0
  store i8 %29, i8* %arrayidx27, align 1
  %31 = load i8*, i8** %c, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %31, i64 1
  %32 = load i8, i8* %arrayidx28, align 1
  %33 = load i8*, i8** %p, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %33, i64 1
  store i8 %32, i8* %arrayidx29, align 1
  %34 = load i8*, i8** %c, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %34, i64 0
  %35 = load i8, i8* %arrayidx30, align 1
  %36 = load i8*, i8** %p, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %36, i64 2
  store i8 %35, i8* %arrayidx31, align 1
  %37 = load i8*, i8** %c, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %37, i64 3
  %38 = load i8, i8* %arrayidx32, align 1
  %39 = load i8*, i8** %p, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %39, i64 3
  store i8 %38, i8* %arrayidx33, align 1
  br label %if.end34

if.end34:                                         ; preds = %if.then25, %if.end9
  %40 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_x35 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %40, i32 0, i32 21
  %41 = load i32, i32* %cur_x35, align 4
  %add36 = add nsw i32 %41, 4
  store i32 %add36, i32* %cur_x35, align 4
  %42 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_x37 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %42, i32 0, i32 21
  %43 = load i32, i32* %cur_x37, align 4
  %44 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %max_x = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %44, i32 0, i32 19
  %45 = load i32, i32* %max_x, align 4
  %cmp38 = icmp sge i32 %43, %45
  br i1 %cmp38, label %if.then40, label %if.end57

if.then40:                                        ; preds = %if.end34
  %46 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %start_x = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %46, i32 0, i32 17
  %47 = load i32, i32* %start_x, align 4
  %48 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_x41 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %48, i32 0, i32 21
  store i32 %47, i32* %cur_x41, align 4
  %49 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %step = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %49, i32 0, i32 15
  %50 = load i32, i32* %step, align 4
  %51 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_y42 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %51, i32 0, i32 22
  %52 = load i32, i32* %cur_y42, align 8
  %add43 = add nsw i32 %52, %50
  store i32 %add43, i32* %cur_y42, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then40
  %53 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_y44 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %53, i32 0, i32 22
  %54 = load i32, i32* %cur_y44, align 8
  %55 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %max_y45 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %55, i32 0, i32 20
  %56 = load i32, i32* %max_y45, align 8
  %cmp46 = icmp sge i32 %54, %56
  br i1 %cmp46, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %57 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %parse = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %57, i32 0, i32 14
  %58 = load i32, i32* %parse, align 8
  %cmp48 = icmp sgt i32 %58, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %59 = phi i1 [ false, %while.cond ], [ %cmp48, %land.rhs ]
  br i1 %59, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %60 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %parse50 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %60, i32 0, i32 14
  %61 = load i32, i32* %parse50, align 8
  %shl = shl i32 1, %61
  %62 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %line_size = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %62, i32 0, i32 23
  %63 = load i32, i32* %line_size, align 4
  %mul51 = mul nsw i32 %shl, %63
  %64 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %step52 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %64, i32 0, i32 15
  store i32 %mul51, i32* %step52, align 4
  %65 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %start_y = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %65, i32 0, i32 18
  %66 = load i32, i32* %start_y, align 8
  %67 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %step53 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %67, i32 0, i32 15
  %68 = load i32, i32* %step53, align 4
  %shr = ashr i32 %68, 1
  %add54 = add nsw i32 %66, %shr
  %69 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %cur_y55 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %69, i32 0, i32 22
  store i32 %add54, i32* %cur_y55, align 8
  %70 = load %struct.stbi__gif*, %struct.stbi__gif** %g.addr, align 8
  %parse56 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %70, i32 0, i32 14
  %71 = load i32, i32* %parse56, align 8
  %dec = add nsw i32 %71, -1
  store i32 %dec, i32* %parse56, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end57

if.end57:                                         ; preds = %if.then8, %while.end, %if.end34
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__gif_test_raw(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %sz = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  %conv = zext i8 %call to i32
  %cmp = icmp ne i32 %conv, 71
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call2 = call zeroext i8 @stbi__get8(%struct.stbi__context* %1)
  %conv3 = zext i8 %call2 to i32
  %cmp4 = icmp ne i32 %conv3, 73
  br i1 %cmp4, label %if.then, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call7 = call zeroext i8 @stbi__get8(%struct.stbi__context* %2)
  %conv8 = zext i8 %call7 to i32
  %cmp9 = icmp ne i32 %conv8, 70
  br i1 %cmp9, label %if.then, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false6
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call12 = call zeroext i8 @stbi__get8(%struct.stbi__context* %3)
  %conv13 = zext i8 %call12 to i32
  %cmp14 = icmp ne i32 %conv13, 56
  br i1 %cmp14, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false6, %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false11
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call16 = call zeroext i8 @stbi__get8(%struct.stbi__context* %4)
  %conv17 = zext i8 %call16 to i32
  store i32 %conv17, i32* %sz, align 4
  %5 = load i32, i32* %sz, align 4
  %cmp18 = icmp ne i32 %5, 57
  br i1 %cmp18, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %if.end
  %6 = load i32, i32* %sz, align 4
  %cmp20 = icmp ne i32 %6, 55
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %land.lhs.true, %if.end
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call24 = call zeroext i8 @stbi__get8(%struct.stbi__context* %7)
  %conv25 = zext i8 %call24 to i32
  %cmp26 = icmp ne i32 %conv25, 97
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end23
  store i32 0, i32* %retval, align 4
  br label %return

if.end29:                                         ; preds = %if.end23
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end29, %if.then28, %if.then22, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__bmp_parse_header(%struct.stbi__context* %s, %struct.stbi__bmp_data* %info) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %info.addr = alloca %struct.stbi__bmp_data*, align 8
  %hsz = alloca i32, align 4
  %compress = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store %struct.stbi__bmp_data* %info, %struct.stbi__bmp_data** %info.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  %conv = zext i8 %call to i32
  %cmp = icmp ne i32 %conv, 66
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call2 = call zeroext i8 @stbi__get8(%struct.stbi__context* %1)
  %conv3 = zext i8 %call2 to i32
  %cmp4 = icmp ne i32 %conv3, 77
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call6 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.99, i64 0, i64 0))
  %tobool = icmp ne i32 %call6, 0
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %3 = ptrtoint i8* %cond to i64
  %4 = inttoptr i64 %3 to i8*
  store i8* %4, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call7 = call i32 @stbi__get32le(%struct.stbi__context* %5)
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call8 = call i32 @stbi__get16le(%struct.stbi__context* %6)
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call9 = call i32 @stbi__get16le(%struct.stbi__context* %7)
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call10 = call i32 @stbi__get32le(%struct.stbi__context* %8)
  %9 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %offset = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %9, i32 0, i32 1
  store i32 %call10, i32* %offset, align 4
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call11 = call i32 @stbi__get32le(%struct.stbi__context* %10)
  store i32 %call11, i32* %hsz, align 4
  %11 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %hsz12 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %11, i32 0, i32 2
  store i32 %call11, i32* %hsz12, align 4
  %12 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %ma = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %12, i32 0, i32 6
  store i32 0, i32* %ma, align 4
  %13 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mb = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %13, i32 0, i32 5
  store i32 0, i32* %mb, align 4
  %14 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mg = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %14, i32 0, i32 4
  store i32 0, i32* %mg, align 4
  %15 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mr = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %15, i32 0, i32 3
  store i32 0, i32* %mr, align 4
  %16 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %extra_read = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %16, i32 0, i32 8
  store i32 14, i32* %extra_read, align 4
  %17 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %offset13 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %17, i32 0, i32 1
  %18 = load i32, i32* %offset13, align 4
  %cmp14 = icmp slt i32 %18, 0
  br i1 %cmp14, label %if.then16, label %if.end20

if.then16:                                        ; preds = %if.end
  %call17 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i64 0, i64 0))
  %tobool18 = icmp ne i32 %call17, 0
  %19 = zext i1 %tobool18 to i64
  %cond19 = select i1 %tobool18, i8* null, i8* null
  %20 = ptrtoint i8* %cond19 to i64
  %21 = inttoptr i64 %20 to i8*
  store i8* %21, i8** %retval, align 8
  br label %return

if.end20:                                         ; preds = %if.end
  %22 = load i32, i32* %hsz, align 4
  %cmp21 = icmp ne i32 %22, 12
  br i1 %cmp21, label %land.lhs.true, label %if.end38

land.lhs.true:                                    ; preds = %if.end20
  %23 = load i32, i32* %hsz, align 4
  %cmp23 = icmp ne i32 %23, 40
  br i1 %cmp23, label %land.lhs.true25, label %if.end38

land.lhs.true25:                                  ; preds = %land.lhs.true
  %24 = load i32, i32* %hsz, align 4
  %cmp26 = icmp ne i32 %24, 56
  br i1 %cmp26, label %land.lhs.true28, label %if.end38

land.lhs.true28:                                  ; preds = %land.lhs.true25
  %25 = load i32, i32* %hsz, align 4
  %cmp29 = icmp ne i32 %25, 108
  br i1 %cmp29, label %land.lhs.true31, label %if.end38

land.lhs.true31:                                  ; preds = %land.lhs.true28
  %26 = load i32, i32* %hsz, align 4
  %cmp32 = icmp ne i32 %26, 124
  br i1 %cmp32, label %if.then34, label %if.end38

if.then34:                                        ; preds = %land.lhs.true31
  %call35 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.101, i64 0, i64 0))
  %tobool36 = icmp ne i32 %call35, 0
  %27 = zext i1 %tobool36 to i64
  %cond37 = select i1 %tobool36, i8* null, i8* null
  %28 = ptrtoint i8* %cond37 to i64
  %29 = inttoptr i64 %28 to i8*
  store i8* %29, i8** %retval, align 8
  br label %return

if.end38:                                         ; preds = %land.lhs.true31, %land.lhs.true28, %land.lhs.true25, %land.lhs.true, %if.end20
  %30 = load i32, i32* %hsz, align 4
  %cmp39 = icmp eq i32 %30, 12
  br i1 %cmp39, label %if.then41, label %if.else

if.then41:                                        ; preds = %if.end38
  %31 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call42 = call i32 @stbi__get16le(%struct.stbi__context* %31)
  %32 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %32, i32 0, i32 0
  store i32 %call42, i32* %img_x, align 8
  %33 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call43 = call i32 @stbi__get16le(%struct.stbi__context* %33)
  %34 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %34, i32 0, i32 1
  store i32 %call43, i32* %img_y, align 4
  br label %if.end48

if.else:                                          ; preds = %if.end38
  %35 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call44 = call i32 @stbi__get32le(%struct.stbi__context* %35)
  %36 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x45 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %36, i32 0, i32 0
  store i32 %call44, i32* %img_x45, align 8
  %37 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call46 = call i32 @stbi__get32le(%struct.stbi__context* %37)
  %38 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y47 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %38, i32 0, i32 1
  store i32 %call46, i32* %img_y47, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.else, %if.then41
  %39 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call49 = call i32 @stbi__get16le(%struct.stbi__context* %39)
  %cmp50 = icmp ne i32 %call49, 1
  br i1 %cmp50, label %if.then52, label %if.end56

if.then52:                                        ; preds = %if.end48
  %call53 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i64 0, i64 0))
  %tobool54 = icmp ne i32 %call53, 0
  %40 = zext i1 %tobool54 to i64
  %cond55 = select i1 %tobool54, i8* null, i8* null
  %41 = ptrtoint i8* %cond55 to i64
  %42 = inttoptr i64 %41 to i8*
  store i8* %42, i8** %retval, align 8
  br label %return

if.end56:                                         ; preds = %if.end48
  %43 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call57 = call i32 @stbi__get16le(%struct.stbi__context* %43)
  %44 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %bpp = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %44, i32 0, i32 0
  store i32 %call57, i32* %bpp, align 4
  %45 = load i32, i32* %hsz, align 4
  %cmp58 = icmp ne i32 %45, 12
  br i1 %cmp58, label %if.then60, label %if.end179

if.then60:                                        ; preds = %if.end56
  %46 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call61 = call i32 @stbi__get32le(%struct.stbi__context* %46)
  store i32 %call61, i32* %compress, align 4
  %47 = load i32, i32* %compress, align 4
  %cmp62 = icmp eq i32 %47, 1
  br i1 %cmp62, label %if.then67, label %lor.lhs.false64

lor.lhs.false64:                                  ; preds = %if.then60
  %48 = load i32, i32* %compress, align 4
  %cmp65 = icmp eq i32 %48, 2
  br i1 %cmp65, label %if.then67, label %if.end71

if.then67:                                        ; preds = %lor.lhs.false64, %if.then60
  %call68 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.102, i64 0, i64 0))
  %tobool69 = icmp ne i32 %call68, 0
  %49 = zext i1 %tobool69 to i64
  %cond70 = select i1 %tobool69, i8* null, i8* null
  %50 = ptrtoint i8* %cond70 to i64
  %51 = inttoptr i64 %50 to i8*
  store i8* %51, i8** %retval, align 8
  br label %return

if.end71:                                         ; preds = %lor.lhs.false64
  %52 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call72 = call i32 @stbi__get32le(%struct.stbi__context* %52)
  %53 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call73 = call i32 @stbi__get32le(%struct.stbi__context* %53)
  %54 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call74 = call i32 @stbi__get32le(%struct.stbi__context* %54)
  %55 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call75 = call i32 @stbi__get32le(%struct.stbi__context* %55)
  %56 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call76 = call i32 @stbi__get32le(%struct.stbi__context* %56)
  %57 = load i32, i32* %hsz, align 4
  %cmp77 = icmp eq i32 %57, 40
  br i1 %cmp77, label %if.then82, label %lor.lhs.false79

lor.lhs.false79:                                  ; preds = %if.end71
  %58 = load i32, i32* %hsz, align 4
  %cmp80 = icmp eq i32 %58, 56
  br i1 %cmp80, label %if.then82, label %if.else147

if.then82:                                        ; preds = %lor.lhs.false79, %if.end71
  %59 = load i32, i32* %hsz, align 4
  %cmp83 = icmp eq i32 %59, 56
  br i1 %cmp83, label %if.then85, label %if.end90

if.then85:                                        ; preds = %if.then82
  %60 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call86 = call i32 @stbi__get32le(%struct.stbi__context* %60)
  %61 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call87 = call i32 @stbi__get32le(%struct.stbi__context* %61)
  %62 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call88 = call i32 @stbi__get32le(%struct.stbi__context* %62)
  %63 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call89 = call i32 @stbi__get32le(%struct.stbi__context* %63)
  br label %if.end90

if.end90:                                         ; preds = %if.then85, %if.then82
  %64 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %bpp91 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %64, i32 0, i32 0
  %65 = load i32, i32* %bpp91, align 4
  %cmp92 = icmp eq i32 %65, 16
  br i1 %cmp92, label %if.then98, label %lor.lhs.false94

lor.lhs.false94:                                  ; preds = %if.end90
  %66 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %bpp95 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %66, i32 0, i32 0
  %67 = load i32, i32* %bpp95, align 4
  %cmp96 = icmp eq i32 %67, 32
  br i1 %cmp96, label %if.then98, label %if.end146

if.then98:                                        ; preds = %lor.lhs.false94, %if.end90
  %68 = load i32, i32* %compress, align 4
  %cmp99 = icmp eq i32 %68, 0
  br i1 %cmp99, label %if.then101, label %if.else115

if.then101:                                       ; preds = %if.then98
  %69 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %bpp102 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %69, i32 0, i32 0
  %70 = load i32, i32* %bpp102, align 4
  %cmp103 = icmp eq i32 %70, 32
  br i1 %cmp103, label %if.then105, label %if.else110

if.then105:                                       ; preds = %if.then101
  %71 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mr106 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %71, i32 0, i32 3
  store i32 16711680, i32* %mr106, align 4
  %72 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mg107 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %72, i32 0, i32 4
  store i32 65280, i32* %mg107, align 4
  %73 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mb108 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %73, i32 0, i32 5
  store i32 255, i32* %mb108, align 4
  %74 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %ma109 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %74, i32 0, i32 6
  store i32 -16777216, i32* %ma109, align 4
  %75 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %all_a = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %75, i32 0, i32 7
  store i32 0, i32* %all_a, align 4
  br label %if.end114

if.else110:                                       ; preds = %if.then101
  %76 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mr111 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %76, i32 0, i32 3
  store i32 31744, i32* %mr111, align 4
  %77 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mg112 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %77, i32 0, i32 4
  store i32 992, i32* %mg112, align 4
  %78 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mb113 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %78, i32 0, i32 5
  store i32 31, i32* %mb113, align 4
  br label %if.end114

if.end114:                                        ; preds = %if.else110, %if.then105
  br label %if.end145

if.else115:                                       ; preds = %if.then98
  %79 = load i32, i32* %compress, align 4
  %cmp116 = icmp eq i32 %79, 3
  br i1 %cmp116, label %if.then118, label %if.else140

if.then118:                                       ; preds = %if.else115
  %80 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call119 = call i32 @stbi__get32le(%struct.stbi__context* %80)
  %81 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mr120 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %81, i32 0, i32 3
  store i32 %call119, i32* %mr120, align 4
  %82 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call121 = call i32 @stbi__get32le(%struct.stbi__context* %82)
  %83 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mg122 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %83, i32 0, i32 4
  store i32 %call121, i32* %mg122, align 4
  %84 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call123 = call i32 @stbi__get32le(%struct.stbi__context* %84)
  %85 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mb124 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %85, i32 0, i32 5
  store i32 %call123, i32* %mb124, align 4
  %86 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %extra_read125 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %86, i32 0, i32 8
  %87 = load i32, i32* %extra_read125, align 4
  %add = add nsw i32 %87, 12
  store i32 %add, i32* %extra_read125, align 4
  %88 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mr126 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %88, i32 0, i32 3
  %89 = load i32, i32* %mr126, align 4
  %90 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mg127 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %90, i32 0, i32 4
  %91 = load i32, i32* %mg127, align 4
  %cmp128 = icmp eq i32 %89, %91
  br i1 %cmp128, label %land.lhs.true130, label %if.end139

land.lhs.true130:                                 ; preds = %if.then118
  %92 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mg131 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %92, i32 0, i32 4
  %93 = load i32, i32* %mg131, align 4
  %94 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mb132 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %94, i32 0, i32 5
  %95 = load i32, i32* %mb132, align 4
  %cmp133 = icmp eq i32 %93, %95
  br i1 %cmp133, label %if.then135, label %if.end139

if.then135:                                       ; preds = %land.lhs.true130
  %call136 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i64 0, i64 0))
  %tobool137 = icmp ne i32 %call136, 0
  %96 = zext i1 %tobool137 to i64
  %cond138 = select i1 %tobool137, i8* null, i8* null
  %97 = ptrtoint i8* %cond138 to i64
  %98 = inttoptr i64 %97 to i8*
  store i8* %98, i8** %retval, align 8
  br label %return

if.end139:                                        ; preds = %land.lhs.true130, %if.then118
  br label %if.end144

if.else140:                                       ; preds = %if.else115
  %call141 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i64 0, i64 0))
  %tobool142 = icmp ne i32 %call141, 0
  %99 = zext i1 %tobool142 to i64
  %cond143 = select i1 %tobool142, i8* null, i8* null
  %100 = ptrtoint i8* %cond143 to i64
  %101 = inttoptr i64 %100 to i8*
  store i8* %101, i8** %retval, align 8
  br label %return

if.end144:                                        ; preds = %if.end139
  br label %if.end145

if.end145:                                        ; preds = %if.end144, %if.end114
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %lor.lhs.false94
  br label %if.end178

if.else147:                                       ; preds = %lor.lhs.false79
  %102 = load i32, i32* %hsz, align 4
  %cmp148 = icmp ne i32 %102, 108
  br i1 %cmp148, label %land.lhs.true150, label %if.end157

land.lhs.true150:                                 ; preds = %if.else147
  %103 = load i32, i32* %hsz, align 4
  %cmp151 = icmp ne i32 %103, 124
  br i1 %cmp151, label %if.then153, label %if.end157

if.then153:                                       ; preds = %land.lhs.true150
  %call154 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i64 0, i64 0))
  %tobool155 = icmp ne i32 %call154, 0
  %104 = zext i1 %tobool155 to i64
  %cond156 = select i1 %tobool155, i8* null, i8* null
  %105 = ptrtoint i8* %cond156 to i64
  %106 = inttoptr i64 %105 to i8*
  store i8* %106, i8** %retval, align 8
  br label %return

if.end157:                                        ; preds = %land.lhs.true150, %if.else147
  %107 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call158 = call i32 @stbi__get32le(%struct.stbi__context* %107)
  %108 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mr159 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %108, i32 0, i32 3
  store i32 %call158, i32* %mr159, align 4
  %109 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call160 = call i32 @stbi__get32le(%struct.stbi__context* %109)
  %110 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mg161 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %110, i32 0, i32 4
  store i32 %call160, i32* %mg161, align 4
  %111 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call162 = call i32 @stbi__get32le(%struct.stbi__context* %111)
  %112 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %mb163 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %112, i32 0, i32 5
  store i32 %call162, i32* %mb163, align 4
  %113 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call164 = call i32 @stbi__get32le(%struct.stbi__context* %113)
  %114 = load %struct.stbi__bmp_data*, %struct.stbi__bmp_data** %info.addr, align 8
  %ma165 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %114, i32 0, i32 6
  store i32 %call164, i32* %ma165, align 4
  %115 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call166 = call i32 @stbi__get32le(%struct.stbi__context* %115)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end157
  %116 = load i32, i32* %i, align 4
  %cmp167 = icmp slt i32 %116, 12
  br i1 %cmp167, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %117 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call169 = call i32 @stbi__get32le(%struct.stbi__context* %117)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %118 = load i32, i32* %i, align 4
  %inc = add nsw i32 %118, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %119 = load i32, i32* %hsz, align 4
  %cmp170 = icmp eq i32 %119, 124
  br i1 %cmp170, label %if.then172, label %if.end177

if.then172:                                       ; preds = %for.end
  %120 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call173 = call i32 @stbi__get32le(%struct.stbi__context* %120)
  %121 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call174 = call i32 @stbi__get32le(%struct.stbi__context* %121)
  %122 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call175 = call i32 @stbi__get32le(%struct.stbi__context* %122)
  %123 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call176 = call i32 @stbi__get32le(%struct.stbi__context* %123)
  br label %if.end177

if.end177:                                        ; preds = %if.then172, %for.end
  br label %if.end178

if.end178:                                        ; preds = %if.end177, %if.end146
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.end56
  store i8* inttoptr (i64 1 to i8*), i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end179, %if.then153, %if.else140, %if.then135, %if.then67, %if.then52, %if.then34, %if.then16, %if.then
  %124 = load i8*, i8** %retval, align 8
  ret i8* %124
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #7

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__high_bit(i32 %z) #0 {
entry:
  %retval = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 0, i32* %n, align 4
  %0 = load i32, i32* %z.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %z.addr, align 4
  %cmp1 = icmp uge i32 %1, 65536
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %2 = load i32, i32* %n, align 4
  %add = add nsw i32 %2, 16
  store i32 %add, i32* %n, align 4
  %3 = load i32, i32* %z.addr, align 4
  %shr = lshr i32 %3, 16
  store i32 %shr, i32* %z.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, i32* %z.addr, align 4
  %cmp4 = icmp uge i32 %4, 256
  br i1 %cmp4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end3
  %5 = load i32, i32* %n, align 4
  %add6 = add nsw i32 %5, 8
  store i32 %add6, i32* %n, align 4
  %6 = load i32, i32* %z.addr, align 4
  %shr7 = lshr i32 %6, 8
  store i32 %shr7, i32* %z.addr, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end3
  %7 = load i32, i32* %z.addr, align 4
  %cmp9 = icmp uge i32 %7, 16
  br i1 %cmp9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %if.end8
  %8 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %8, 4
  store i32 %add11, i32* %n, align 4
  %9 = load i32, i32* %z.addr, align 4
  %shr12 = lshr i32 %9, 4
  store i32 %shr12, i32* %z.addr, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %if.end8
  %10 = load i32, i32* %z.addr, align 4
  %cmp14 = icmp uge i32 %10, 4
  br i1 %cmp14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %if.end13
  %11 = load i32, i32* %n, align 4
  %add16 = add nsw i32 %11, 2
  store i32 %add16, i32* %n, align 4
  %12 = load i32, i32* %z.addr, align 4
  %shr17 = lshr i32 %12, 2
  store i32 %shr17, i32* %z.addr, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then15, %if.end13
  %13 = load i32, i32* %z.addr, align 4
  %cmp19 = icmp uge i32 %13, 2
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end18
  %14 = load i32, i32* %n, align 4
  %add21 = add nsw i32 %14, 1
  store i32 %add21, i32* %n, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %if.end18
  %15 = load i32, i32* %n, align 4
  store i32 %15, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end22, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__bitcount(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %and = and i32 %0, 1431655765
  %1 = load i32, i32* %a.addr, align 4
  %shr = lshr i32 %1, 1
  %and1 = and i32 %shr, 1431655765
  %add = add i32 %and, %and1
  store i32 %add, i32* %a.addr, align 4
  %2 = load i32, i32* %a.addr, align 4
  %and2 = and i32 %2, 858993459
  %3 = load i32, i32* %a.addr, align 4
  %shr3 = lshr i32 %3, 2
  %and4 = and i32 %shr3, 858993459
  %add5 = add i32 %and2, %and4
  store i32 %add5, i32* %a.addr, align 4
  %4 = load i32, i32* %a.addr, align 4
  %5 = load i32, i32* %a.addr, align 4
  %shr6 = lshr i32 %5, 4
  %add7 = add i32 %4, %shr6
  %and8 = and i32 %add7, 252645135
  store i32 %and8, i32* %a.addr, align 4
  %6 = load i32, i32* %a.addr, align 4
  %7 = load i32, i32* %a.addr, align 4
  %shr9 = lshr i32 %7, 8
  %add10 = add i32 %6, %shr9
  store i32 %add10, i32* %a.addr, align 4
  %8 = load i32, i32* %a.addr, align 4
  %9 = load i32, i32* %a.addr, align 4
  %shr11 = lshr i32 %9, 16
  %add12 = add i32 %8, %shr11
  store i32 %add12, i32* %a.addr, align 4
  %10 = load i32, i32* %a.addr, align 4
  %and13 = and i32 %10, 255
  ret i32 %and13
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__get32le(%struct.stbi__context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %z = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__get16le(%struct.stbi__context* %0)
  store i32 %call, i32* %z, align 4
  %1 = load i32, i32* %z, align 4
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call i32 @stbi__get16le(%struct.stbi__context* %2)
  %shl = shl i32 %call1, 16
  %add = add i32 %1, %shl
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__shiftsigned(i32 %v, i32 %shift, i32 %bits) #0 {
entry:
  %v.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %bits.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %shift, i32* %shift.addr, align 4
  store i32 %bits, i32* %bits.addr, align 4
  %0 = load i32, i32* %shift.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %shift.addr, align 4
  %sub = sub nsw i32 0, %1
  %2 = load i32, i32* %v.addr, align 4
  %shl = shl i32 %2, %sub
  store i32 %shl, i32* %v.addr, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %shift.addr, align 4
  %4 = load i32, i32* %v.addr, align 4
  %shr = lshr i32 %4, %3
  store i32 %shr, i32* %v.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %v.addr, align 4
  %cmp1 = icmp ult i32 %5, 256
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.end
  br label %if.end4

if.else3:                                         ; preds = %if.end
  call void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.103, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 5262, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @__PRETTY_FUNCTION__.stbi__shiftsigned, i64 0, i64 0)) #11
  unreachable

if.end4:                                          ; preds = %if.then2
  %6 = load i32, i32* %bits.addr, align 4
  %sub5 = sub nsw i32 8, %6
  %7 = load i32, i32* %v.addr, align 4
  %shr6 = lshr i32 %7, %sub5
  store i32 %shr6, i32* %v.addr, align 4
  %8 = load i32, i32* %bits.addr, align 4
  %cmp7 = icmp sge i32 %8, 0
  br i1 %cmp7, label %land.lhs.true, label %if.else10

land.lhs.true:                                    ; preds = %if.end4
  %9 = load i32, i32* %bits.addr, align 4
  %cmp8 = icmp sle i32 %9, 8
  br i1 %cmp8, label %if.then9, label %if.else10

if.then9:                                         ; preds = %land.lhs.true
  br label %if.end11

if.else10:                                        ; preds = %land.lhs.true, %if.end4
  call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.104, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 5264, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @__PRETTY_FUNCTION__.stbi__shiftsigned, i64 0, i64 0)) #11
  unreachable

if.end11:                                         ; preds = %if.then9
  %10 = load i32, i32* %v.addr, align 4
  %11 = load i32, i32* %bits.addr, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [9 x i32], [9 x i32]* @stbi__shiftsigned.mul_table, i64 0, i64 %idxprom
  %12 = load i32, i32* %arrayidx, align 4
  %mul = mul i32 %10, %12
  %13 = load i32, i32* %bits.addr, align 4
  %idxprom12 = sext i32 %13 to i64
  %arrayidx13 = getelementptr inbounds [9 x i32], [9 x i32]* @stbi__shiftsigned.shift_table, i64 0, i64 %idxprom12
  %14 = load i32, i32* %arrayidx13, align 4
  %shr14 = ashr i32 %mul, %14
  ret i32 %shr14
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__bmp_test_raw(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %r = alloca i32, align 4
  %sz = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  %conv = zext i8 %call to i32
  %cmp = icmp ne i32 %conv, 66
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call2 = call zeroext i8 @stbi__get8(%struct.stbi__context* %1)
  %conv3 = zext i8 %call2 to i32
  %cmp4 = icmp ne i32 %conv3, 77
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.end
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call8 = call i32 @stbi__get32le(%struct.stbi__context* %2)
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call9 = call i32 @stbi__get16le(%struct.stbi__context* %3)
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call10 = call i32 @stbi__get16le(%struct.stbi__context* %4)
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call11 = call i32 @stbi__get32le(%struct.stbi__context* %5)
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call12 = call i32 @stbi__get32le(%struct.stbi__context* %6)
  store i32 %call12, i32* %sz, align 4
  %7 = load i32, i32* %sz, align 4
  %cmp13 = icmp eq i32 %7, 12
  br i1 %cmp13, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end7
  %8 = load i32, i32* %sz, align 4
  %cmp15 = icmp eq i32 %8, 40
  br i1 %cmp15, label %lor.end, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %lor.lhs.false
  %9 = load i32, i32* %sz, align 4
  %cmp18 = icmp eq i32 %9, 56
  br i1 %cmp18, label %lor.end, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %lor.lhs.false17
  %10 = load i32, i32* %sz, align 4
  %cmp21 = icmp eq i32 %10, 108
  br i1 %cmp21, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false20
  %11 = load i32, i32* %sz, align 4
  %cmp23 = icmp eq i32 %11, 124
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false20, %lor.lhs.false17, %lor.lhs.false, %if.end7
  %12 = phi i1 [ true, %lor.lhs.false20 ], [ true, %lor.lhs.false17 ], [ true, %lor.lhs.false ], [ true, %if.end7 ], [ %cmp23, %lor.rhs ]
  %lor.ext = zext i1 %12 to i32
  store i32 %lor.ext, i32* %r, align 4
  %13 = load i32, i32* %r, align 4
  store i32 %13, i32* %retval, align 4
  br label %return

return:                                           ; preds = %lor.end, %if.then6, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__do_png(%struct.stbi__png* %p, i32* %x, i32* %y, i32* %n, i32 %req_comp, %struct.stbi__result_info* %ri) #0 {
entry:
  %retval = alloca i8*, align 8
  %p.addr = alloca %struct.stbi__png*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %n.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri.addr = alloca %struct.stbi__result_info*, align 8
  %result = alloca i8*, align 8
  store %struct.stbi__png* %p, %struct.stbi__png** %p.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %n, i32** %n.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store %struct.stbi__result_info* %ri, %struct.stbi__result_info** %ri.addr, align 8
  store i8* null, i8** %result, align 8
  %0 = load i32, i32* %req_comp.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %req_comp.addr, align 4
  %cmp1 = icmp sgt i32 %1, 4
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.54, i64 0, i64 0))
  %tobool = icmp ne i32 %call, 0
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %3 = ptrtoint i8* %cond to i64
  %4 = inttoptr i64 %3 to i8*
  store i8* %4, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %6 = load i32, i32* %req_comp.addr, align 4
  %call2 = call i32 @stbi__parse_png_file(%struct.stbi__png* %5, i32 0, i32 %6)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end52

if.then4:                                         ; preds = %if.end
  %7 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %depth = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %7, i32 0, i32 4
  %8 = load i32, i32* %depth, align 8
  %cmp5 = icmp sle i32 %8, 8
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  %9 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %bits_per_channel = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %9, i32 0, i32 0
  store i32 8, i32* %bits_per_channel, align 4
  br label %if.end16

if.else:                                          ; preds = %if.then4
  %10 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %depth7 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %10, i32 0, i32 4
  %11 = load i32, i32* %depth7, align 8
  %cmp8 = icmp eq i32 %11, 16
  br i1 %cmp8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %12 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %bits_per_channel10 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %12, i32 0, i32 0
  store i32 16, i32* %bits_per_channel10, align 4
  br label %if.end15

if.else11:                                        ; preds = %if.else
  %call12 = call i32 @stbi__err(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.66, i64 0, i64 0))
  %tobool13 = icmp ne i32 %call12, 0
  %13 = zext i1 %tobool13 to i64
  %cond14 = select i1 %tobool13, i8* null, i8* null
  %14 = ptrtoint i8* %cond14 to i64
  %15 = inttoptr i64 %14 to i8*
  store i8* %15, i8** %retval, align 8
  br label %return

if.end15:                                         ; preds = %if.then9
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then6
  %16 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %out = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %16, i32 0, i32 3
  %17 = load i8*, i8** %out, align 8
  store i8* %17, i8** %result, align 8
  %18 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %out17 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %18, i32 0, i32 3
  store i8* null, i8** %out17, align 8
  %19 = load i32, i32* %req_comp.addr, align 4
  %tobool18 = icmp ne i32 %19, 0
  br i1 %tobool18, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %if.end16
  %20 = load i32, i32* %req_comp.addr, align 4
  %21 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %21, i32 0, i32 0
  %22 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %22, i32 0, i32 3
  %23 = load i32, i32* %img_out_n, align 4
  %cmp19 = icmp ne i32 %20, %23
  br i1 %cmp19, label %if.then20, label %if.end43

if.then20:                                        ; preds = %land.lhs.true
  %24 = load %struct.stbi__result_info*, %struct.stbi__result_info** %ri.addr, align 8
  %bits_per_channel21 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %24, i32 0, i32 0
  %25 = load i32, i32* %bits_per_channel21, align 4
  %cmp22 = icmp eq i32 %25, 8
  br i1 %cmp22, label %if.then23, label %if.else29

if.then23:                                        ; preds = %if.then20
  %26 = load i8*, i8** %result, align 8
  %27 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s24 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %27, i32 0, i32 0
  %28 = load %struct.stbi__context*, %struct.stbi__context** %s24, align 8
  %img_out_n25 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %28, i32 0, i32 3
  %29 = load i32, i32* %img_out_n25, align 4
  %30 = load i32, i32* %req_comp.addr, align 4
  %31 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s26 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %31, i32 0, i32 0
  %32 = load %struct.stbi__context*, %struct.stbi__context** %s26, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %32, i32 0, i32 0
  %33 = load i32, i32* %img_x, align 8
  %34 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s27 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %34, i32 0, i32 0
  %35 = load %struct.stbi__context*, %struct.stbi__context** %s27, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %35, i32 0, i32 1
  %36 = load i32, i32* %img_y, align 4
  %call28 = call i8* @stbi__convert_format(i8* %26, i32 %29, i32 %30, i32 %33, i32 %36)
  store i8* %call28, i8** %result, align 8
  br label %if.end37

if.else29:                                        ; preds = %if.then20
  %37 = load i8*, i8** %result, align 8
  %38 = bitcast i8* %37 to i16*
  %39 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s30 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %39, i32 0, i32 0
  %40 = load %struct.stbi__context*, %struct.stbi__context** %s30, align 8
  %img_out_n31 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %40, i32 0, i32 3
  %41 = load i32, i32* %img_out_n31, align 4
  %42 = load i32, i32* %req_comp.addr, align 4
  %43 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s32 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %43, i32 0, i32 0
  %44 = load %struct.stbi__context*, %struct.stbi__context** %s32, align 8
  %img_x33 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %44, i32 0, i32 0
  %45 = load i32, i32* %img_x33, align 8
  %46 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s34 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %46, i32 0, i32 0
  %47 = load %struct.stbi__context*, %struct.stbi__context** %s34, align 8
  %img_y35 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %47, i32 0, i32 1
  %48 = load i32, i32* %img_y35, align 4
  %call36 = call i16* @stbi__convert_format16(i16* %38, i32 %41, i32 %42, i32 %45, i32 %48)
  %49 = bitcast i16* %call36 to i8*
  store i8* %49, i8** %result, align 8
  br label %if.end37

if.end37:                                         ; preds = %if.else29, %if.then23
  %50 = load i32, i32* %req_comp.addr, align 4
  %51 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s38 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %51, i32 0, i32 0
  %52 = load %struct.stbi__context*, %struct.stbi__context** %s38, align 8
  %img_out_n39 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %52, i32 0, i32 3
  store i32 %50, i32* %img_out_n39, align 4
  %53 = load i8*, i8** %result, align 8
  %cmp40 = icmp eq i8* %53, null
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end37
  %54 = load i8*, i8** %result, align 8
  store i8* %54, i8** %retval, align 8
  br label %return

if.end42:                                         ; preds = %if.end37
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %land.lhs.true, %if.end16
  %55 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s44 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %55, i32 0, i32 0
  %56 = load %struct.stbi__context*, %struct.stbi__context** %s44, align 8
  %img_x45 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %56, i32 0, i32 0
  %57 = load i32, i32* %img_x45, align 8
  %58 = load i32*, i32** %x.addr, align 8
  store i32 %57, i32* %58, align 4
  %59 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s46 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %59, i32 0, i32 0
  %60 = load %struct.stbi__context*, %struct.stbi__context** %s46, align 8
  %img_y47 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %60, i32 0, i32 1
  %61 = load i32, i32* %img_y47, align 4
  %62 = load i32*, i32** %y.addr, align 8
  store i32 %61, i32* %62, align 4
  %63 = load i32*, i32** %n.addr, align 8
  %tobool48 = icmp ne i32* %63, null
  br i1 %tobool48, label %if.then49, label %if.end51

if.then49:                                        ; preds = %if.end43
  %64 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s50 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %64, i32 0, i32 0
  %65 = load %struct.stbi__context*, %struct.stbi__context** %s50, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %65, i32 0, i32 2
  %66 = load i32, i32* %img_n, align 8
  %67 = load i32*, i32** %n.addr, align 8
  store i32 %66, i32* %67, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then49, %if.end43
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end
  %68 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %out53 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %68, i32 0, i32 3
  %69 = load i8*, i8** %out53, align 8
  call void @free(i8* %69) #10
  %70 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %out54 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %70, i32 0, i32 3
  store i8* null, i8** %out54, align 8
  %71 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %expanded = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %71, i32 0, i32 2
  %72 = load i8*, i8** %expanded, align 8
  call void @free(i8* %72) #10
  %73 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %expanded55 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %73, i32 0, i32 2
  store i8* null, i8** %expanded55, align 8
  %74 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %idata = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %74, i32 0, i32 1
  %75 = load i8*, i8** %idata, align 8
  call void @free(i8* %75) #10
  %76 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %idata56 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %76, i32 0, i32 1
  store i8* null, i8** %idata56, align 8
  %77 = load i8*, i8** %result, align 8
  store i8* %77, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end52, %if.then41, %if.else11, %if.then
  %78 = load i8*, i8** %retval, align 8
  ret i8* %78
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__parse_png_file(%struct.stbi__png* %z, i32 %scan, i32 %req_comp) #0 {
entry:
  %retval = alloca i32, align 4
  %z.addr = alloca %struct.stbi__png*, align 8
  %scan.addr = alloca i32, align 4
  %req_comp.addr = alloca i32, align 4
  %palette = alloca [1024 x i8], align 16
  %pal_img_n = alloca i8, align 1
  %has_trans = alloca i8, align 1
  %tc = alloca [3 x i8], align 1
  %tc16 = alloca [3 x i16], align 2
  %ioff = alloca i32, align 4
  %idata_limit = alloca i32, align 4
  %i = alloca i32, align 4
  %pal_len = alloca i32, align 4
  %first = alloca i32, align 4
  %k = alloca i32, align 4
  %interlace = alloca i32, align 4
  %color = alloca i32, align 4
  %is_iphone = alloca i32, align 4
  %s = alloca %struct.stbi__context*, align 8
  %c = alloca %struct.stbi__pngchunk, align 4
  %comp = alloca i32, align 4
  %filter = alloca i32, align 4
  %idata_limit_old = alloca i32, align 4
  %p = alloca i8*, align 8
  %raw_len = alloca i32, align 4
  %bpl = alloca i32, align 4
  store %struct.stbi__png* %z, %struct.stbi__png** %z.addr, align 8
  store i32 %scan, i32* %scan.addr, align 4
  store i32 %req_comp, i32* %req_comp.addr, align 4
  store i8 0, i8* %pal_img_n, align 1
  store i8 0, i8* %has_trans, align 1
  %0 = bitcast [3 x i8]* %tc to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 3, i1 false)
  store i32 0, i32* %ioff, align 4
  store i32 0, i32* %idata_limit, align 4
  store i32 0, i32* %pal_len, align 4
  store i32 1, i32* %first, align 4
  store i32 0, i32* %interlace, align 4
  store i32 0, i32* %color, align 4
  store i32 0, i32* %is_iphone, align 4
  %1 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %1, i32 0, i32 0
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s1, align 8
  store %struct.stbi__context* %2, %struct.stbi__context** %s, align 8
  %3 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %expanded = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %3, i32 0, i32 2
  store i8* null, i8** %expanded, align 8
  %4 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %idata = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %4, i32 0, i32 1
  store i8* null, i8** %idata, align 8
  %5 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %out = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %5, i32 0, i32 3
  store i8* null, i8** %out, align 8
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call = call i32 @stbi__check_png_header(%struct.stbi__context* %6)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %scan.addr, align 4
  %cmp = icmp eq i32 %7, 1
  br i1 %cmp, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %if.end3
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call4 = call i64 @stbi__get_chunk_header(%struct.stbi__context* %8)
  %9 = bitcast %struct.stbi__pngchunk* %c to i64*
  store i64 %call4, i64* %9, align 4
  %type = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 1
  %10 = load i32, i32* %type, align 4
  switch i32 %10, label %sw.default [
    i32 1130840649, label %sw.bb
    i32 1229472850, label %sw.bb5
    i32 1347179589, label %sw.bb131
    i32 1951551059, label %sw.bb170
    i32 1229209940, label %sw.bb265
    i32 1229278788, label %sw.bb327
  ]

sw.bb:                                            ; preds = %for.cond
  store i32 1, i32* %is_iphone, align 4
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %length = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %12 = load i32, i32* %length, align 4
  call void @stbi__skip(%struct.stbi__context* %11, i32 %12)
  br label %sw.epilog

sw.bb5:                                           ; preds = %for.cond
  %13 = load i32, i32* %first, align 4
  %tobool6 = icmp ne i32 %13, 0
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %sw.bb5
  %call8 = call i32 @stbi__err(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.67, i64 0, i64 0))
  store i32 %call8, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %sw.bb5
  store i32 0, i32* %first, align 4
  %length10 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %14 = load i32, i32* %length10, align 4
  %cmp11 = icmp ne i32 %14, 13
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.end9
  %call13 = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.68, i64 0, i64 0))
  store i32 %call13, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end9
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call15 = call i32 @stbi__get32be(%struct.stbi__context* %15)
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %16, i32 0, i32 0
  store i32 %call15, i32* %img_x, align 8
  %17 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call16 = call i32 @stbi__get32be(%struct.stbi__context* %17)
  %18 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %18, i32 0, i32 1
  store i32 %call16, i32* %img_y, align 4
  %19 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y17 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %19, i32 0, i32 1
  %20 = load i32, i32* %img_y17, align 4
  %cmp18 = icmp ugt i32 %20, 16777216
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end14
  %call20 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  store i32 %call20, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end14
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x22 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %21, i32 0, i32 0
  %22 = load i32, i32* %img_x22, align 8
  %cmp23 = icmp ugt i32 %22, 16777216
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end21
  %call25 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  store i32 %call25, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %if.end21
  %23 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call27 = call zeroext i8 @stbi__get8(%struct.stbi__context* %23)
  %conv = zext i8 %call27 to i32
  %24 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %24, i32 0, i32 4
  store i32 %conv, i32* %depth, align 8
  %25 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth28 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %25, i32 0, i32 4
  %26 = load i32, i32* %depth28, align 8
  %cmp29 = icmp ne i32 %26, 1
  br i1 %cmp29, label %land.lhs.true, label %if.end48

land.lhs.true:                                    ; preds = %if.end26
  %27 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth31 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %27, i32 0, i32 4
  %28 = load i32, i32* %depth31, align 8
  %cmp32 = icmp ne i32 %28, 2
  br i1 %cmp32, label %land.lhs.true34, label %if.end48

land.lhs.true34:                                  ; preds = %land.lhs.true
  %29 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth35 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %29, i32 0, i32 4
  %30 = load i32, i32* %depth35, align 8
  %cmp36 = icmp ne i32 %30, 4
  br i1 %cmp36, label %land.lhs.true38, label %if.end48

land.lhs.true38:                                  ; preds = %land.lhs.true34
  %31 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth39 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %31, i32 0, i32 4
  %32 = load i32, i32* %depth39, align 8
  %cmp40 = icmp ne i32 %32, 8
  br i1 %cmp40, label %land.lhs.true42, label %if.end48

land.lhs.true42:                                  ; preds = %land.lhs.true38
  %33 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth43 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %33, i32 0, i32 4
  %34 = load i32, i32* %depth43, align 8
  %cmp44 = icmp ne i32 %34, 16
  br i1 %cmp44, label %if.then46, label %if.end48

if.then46:                                        ; preds = %land.lhs.true42
  %call47 = call i32 @stbi__err(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.69, i64 0, i64 0))
  store i32 %call47, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %land.lhs.true42, %land.lhs.true38, %land.lhs.true34, %land.lhs.true, %if.end26
  %35 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call49 = call zeroext i8 @stbi__get8(%struct.stbi__context* %35)
  %conv50 = zext i8 %call49 to i32
  store i32 %conv50, i32* %color, align 4
  %36 = load i32, i32* %color, align 4
  %cmp51 = icmp sgt i32 %36, 6
  br i1 %cmp51, label %if.then53, label %if.end55

if.then53:                                        ; preds = %if.end48
  %call54 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i64 0, i64 0))
  store i32 %call54, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end48
  %37 = load i32, i32* %color, align 4
  %cmp56 = icmp eq i32 %37, 3
  br i1 %cmp56, label %land.lhs.true58, label %if.end64

land.lhs.true58:                                  ; preds = %if.end55
  %38 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth59 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %38, i32 0, i32 4
  %39 = load i32, i32* %depth59, align 8
  %cmp60 = icmp eq i32 %39, 16
  br i1 %cmp60, label %if.then62, label %if.end64

if.then62:                                        ; preds = %land.lhs.true58
  %call63 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i64 0, i64 0))
  store i32 %call63, i32* %retval, align 4
  br label %return

if.end64:                                         ; preds = %land.lhs.true58, %if.end55
  %40 = load i32, i32* %color, align 4
  %cmp65 = icmp eq i32 %40, 3
  br i1 %cmp65, label %if.then67, label %if.else

if.then67:                                        ; preds = %if.end64
  store i8 3, i8* %pal_img_n, align 1
  br label %if.end72

if.else:                                          ; preds = %if.end64
  %41 = load i32, i32* %color, align 4
  %and = and i32 %41, 1
  %tobool68 = icmp ne i32 %and, 0
  br i1 %tobool68, label %if.then69, label %if.end71

if.then69:                                        ; preds = %if.else
  %call70 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i64 0, i64 0))
  store i32 %call70, i32* %retval, align 4
  br label %return

if.end71:                                         ; preds = %if.else
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then67
  %42 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call73 = call zeroext i8 @stbi__get8(%struct.stbi__context* %42)
  %conv74 = zext i8 %call73 to i32
  store i32 %conv74, i32* %comp, align 4
  %43 = load i32, i32* %comp, align 4
  %tobool75 = icmp ne i32 %43, 0
  br i1 %tobool75, label %if.then76, label %if.end78

if.then76:                                        ; preds = %if.end72
  %call77 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.71, i64 0, i64 0))
  store i32 %call77, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end72
  %44 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call79 = call zeroext i8 @stbi__get8(%struct.stbi__context* %44)
  %conv80 = zext i8 %call79 to i32
  store i32 %conv80, i32* %filter, align 4
  %45 = load i32, i32* %filter, align 4
  %tobool81 = icmp ne i32 %45, 0
  br i1 %tobool81, label %if.then82, label %if.end84

if.then82:                                        ; preds = %if.end78
  %call83 = call i32 @stbi__err(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.72, i64 0, i64 0))
  store i32 %call83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %if.end78
  %46 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call85 = call zeroext i8 @stbi__get8(%struct.stbi__context* %46)
  %conv86 = zext i8 %call85 to i32
  store i32 %conv86, i32* %interlace, align 4
  %47 = load i32, i32* %interlace, align 4
  %cmp87 = icmp sgt i32 %47, 1
  br i1 %cmp87, label %if.then89, label %if.end91

if.then89:                                        ; preds = %if.end84
  %call90 = call i32 @stbi__err(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.73, i64 0, i64 0))
  store i32 %call90, i32* %retval, align 4
  br label %return

if.end91:                                         ; preds = %if.end84
  %48 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x92 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %48, i32 0, i32 0
  %49 = load i32, i32* %img_x92, align 8
  %tobool93 = icmp ne i32 %49, 0
  br i1 %tobool93, label %lor.lhs.false, label %if.then96

lor.lhs.false:                                    ; preds = %if.end91
  %50 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y94 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %50, i32 0, i32 1
  %51 = load i32, i32* %img_y94, align 4
  %tobool95 = icmp ne i32 %51, 0
  br i1 %tobool95, label %if.end98, label %if.then96

if.then96:                                        ; preds = %lor.lhs.false, %if.end91
  %call97 = call i32 @stbi__err(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.74, i64 0, i64 0))
  store i32 %call97, i32* %retval, align 4
  br label %return

if.end98:                                         ; preds = %lor.lhs.false
  %52 = load i8, i8* %pal_img_n, align 1
  %tobool99 = icmp ne i8 %52, 0
  br i1 %tobool99, label %if.else119, label %if.then100

if.then100:                                       ; preds = %if.end98
  %53 = load i32, i32* %color, align 4
  %and101 = and i32 %53, 2
  %tobool102 = icmp ne i32 %and101, 0
  %54 = zext i1 %tobool102 to i64
  %cond = select i1 %tobool102, i32 3, i32 1
  %55 = load i32, i32* %color, align 4
  %and103 = and i32 %55, 4
  %tobool104 = icmp ne i32 %and103, 0
  %56 = zext i1 %tobool104 to i64
  %cond105 = select i1 %tobool104, i32 1, i32 0
  %add = add nsw i32 %cond, %cond105
  %57 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %57, i32 0, i32 2
  store i32 %add, i32* %img_n, align 8
  %58 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x106 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %58, i32 0, i32 0
  %59 = load i32, i32* %img_x106, align 8
  %div = udiv i32 1073741824, %59
  %60 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n107 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %60, i32 0, i32 2
  %61 = load i32, i32* %img_n107, align 8
  %div108 = udiv i32 %div, %61
  %62 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y109 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %62, i32 0, i32 1
  %63 = load i32, i32* %img_y109, align 4
  %cmp110 = icmp ult i32 %div108, %63
  br i1 %cmp110, label %if.then112, label %if.end114

if.then112:                                       ; preds = %if.then100
  %call113 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  store i32 %call113, i32* %retval, align 4
  br label %return

if.end114:                                        ; preds = %if.then100
  %64 = load i32, i32* %scan.addr, align 4
  %cmp115 = icmp eq i32 %64, 2
  br i1 %cmp115, label %if.then117, label %if.end118

if.then117:                                       ; preds = %if.end114
  store i32 1, i32* %retval, align 4
  br label %return

if.end118:                                        ; preds = %if.end114
  br label %if.end130

if.else119:                                       ; preds = %if.end98
  %65 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n120 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %65, i32 0, i32 2
  store i32 1, i32* %img_n120, align 8
  %66 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x121 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %66, i32 0, i32 0
  %67 = load i32, i32* %img_x121, align 8
  %div122 = udiv i32 1073741824, %67
  %div123 = udiv i32 %div122, 4
  %68 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y124 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %68, i32 0, i32 1
  %69 = load i32, i32* %img_y124, align 4
  %cmp125 = icmp ult i32 %div123, %69
  br i1 %cmp125, label %if.then127, label %if.end129

if.then127:                                       ; preds = %if.else119
  %call128 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  store i32 %call128, i32* %retval, align 4
  br label %return

if.end129:                                        ; preds = %if.else119
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.end118
  br label %sw.epilog

sw.bb131:                                         ; preds = %for.cond
  %70 = load i32, i32* %first, align 4
  %tobool132 = icmp ne i32 %70, 0
  br i1 %tobool132, label %if.then133, label %if.end135

if.then133:                                       ; preds = %sw.bb131
  %call134 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.75, i64 0, i64 0))
  store i32 %call134, i32* %retval, align 4
  br label %return

if.end135:                                        ; preds = %sw.bb131
  %length136 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %71 = load i32, i32* %length136, align 4
  %cmp137 = icmp ugt i32 %71, 768
  br i1 %cmp137, label %if.then139, label %if.end141

if.then139:                                       ; preds = %if.end135
  %call140 = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.76, i64 0, i64 0))
  store i32 %call140, i32* %retval, align 4
  br label %return

if.end141:                                        ; preds = %if.end135
  %length142 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %72 = load i32, i32* %length142, align 4
  %div143 = udiv i32 %72, 3
  store i32 %div143, i32* %pal_len, align 4
  %73 = load i32, i32* %pal_len, align 4
  %mul = mul i32 %73, 3
  %length144 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %74 = load i32, i32* %length144, align 4
  %cmp145 = icmp ne i32 %mul, %74
  br i1 %cmp145, label %if.then147, label %if.end149

if.then147:                                       ; preds = %if.end141
  %call148 = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.76, i64 0, i64 0))
  store i32 %call148, i32* %retval, align 4
  br label %return

if.end149:                                        ; preds = %if.end141
  store i32 0, i32* %i, align 4
  br label %for.cond150

for.cond150:                                      ; preds = %for.inc, %if.end149
  %75 = load i32, i32* %i, align 4
  %76 = load i32, i32* %pal_len, align 4
  %cmp151 = icmp ult i32 %75, %76
  br i1 %cmp151, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond150
  %77 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call153 = call zeroext i8 @stbi__get8(%struct.stbi__context* %77)
  %78 = load i32, i32* %i, align 4
  %mul154 = mul i32 %78, 4
  %add155 = add i32 %mul154, 0
  %idxprom = zext i32 %add155 to i64
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %palette, i64 0, i64 %idxprom
  store i8 %call153, i8* %arrayidx, align 1
  %79 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call156 = call zeroext i8 @stbi__get8(%struct.stbi__context* %79)
  %80 = load i32, i32* %i, align 4
  %mul157 = mul i32 %80, 4
  %add158 = add i32 %mul157, 1
  %idxprom159 = zext i32 %add158 to i64
  %arrayidx160 = getelementptr inbounds [1024 x i8], [1024 x i8]* %palette, i64 0, i64 %idxprom159
  store i8 %call156, i8* %arrayidx160, align 1
  %81 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call161 = call zeroext i8 @stbi__get8(%struct.stbi__context* %81)
  %82 = load i32, i32* %i, align 4
  %mul162 = mul i32 %82, 4
  %add163 = add i32 %mul162, 2
  %idxprom164 = zext i32 %add163 to i64
  %arrayidx165 = getelementptr inbounds [1024 x i8], [1024 x i8]* %palette, i64 0, i64 %idxprom164
  store i8 %call161, i8* %arrayidx165, align 1
  %83 = load i32, i32* %i, align 4
  %mul166 = mul i32 %83, 4
  %add167 = add i32 %mul166, 3
  %idxprom168 = zext i32 %add167 to i64
  %arrayidx169 = getelementptr inbounds [1024 x i8], [1024 x i8]* %palette, i64 0, i64 %idxprom168
  store i8 -1, i8* %arrayidx169, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %84 = load i32, i32* %i, align 4
  %inc = add i32 %84, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond150

for.end:                                          ; preds = %for.cond150
  br label %sw.epilog

sw.bb170:                                         ; preds = %for.cond
  %85 = load i32, i32* %first, align 4
  %tobool171 = icmp ne i32 %85, 0
  br i1 %tobool171, label %if.then172, label %if.end174

if.then172:                                       ; preds = %sw.bb170
  %call173 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.75, i64 0, i64 0))
  store i32 %call173, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %sw.bb170
  %86 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %idata175 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %86, i32 0, i32 1
  %87 = load i8*, i8** %idata175, align 8
  %tobool176 = icmp ne i8* %87, null
  br i1 %tobool176, label %if.then177, label %if.end179

if.then177:                                       ; preds = %if.end174
  %call178 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.77, i64 0, i64 0))
  store i32 %call178, i32* %retval, align 4
  br label %return

if.end179:                                        ; preds = %if.end174
  %88 = load i8, i8* %pal_img_n, align 1
  %tobool180 = icmp ne i8 %88, 0
  br i1 %tobool180, label %if.then181, label %if.else211

if.then181:                                       ; preds = %if.end179
  %89 = load i32, i32* %scan.addr, align 4
  %cmp182 = icmp eq i32 %89, 2
  br i1 %cmp182, label %if.then184, label %if.end186

if.then184:                                       ; preds = %if.then181
  %90 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n185 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %90, i32 0, i32 2
  store i32 4, i32* %img_n185, align 8
  store i32 1, i32* %retval, align 4
  br label %return

if.end186:                                        ; preds = %if.then181
  %91 = load i32, i32* %pal_len, align 4
  %cmp187 = icmp eq i32 %91, 0
  br i1 %cmp187, label %if.then189, label %if.end191

if.then189:                                       ; preds = %if.end186
  %call190 = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.78, i64 0, i64 0))
  store i32 %call190, i32* %retval, align 4
  br label %return

if.end191:                                        ; preds = %if.end186
  %length192 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %92 = load i32, i32* %length192, align 4
  %93 = load i32, i32* %pal_len, align 4
  %cmp193 = icmp ugt i32 %92, %93
  br i1 %cmp193, label %if.then195, label %if.end197

if.then195:                                       ; preds = %if.end191
  %call196 = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.79, i64 0, i64 0))
  store i32 %call196, i32* %retval, align 4
  br label %return

if.end197:                                        ; preds = %if.end191
  store i8 4, i8* %pal_img_n, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond198

for.cond198:                                      ; preds = %for.inc208, %if.end197
  %94 = load i32, i32* %i, align 4
  %length199 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %95 = load i32, i32* %length199, align 4
  %cmp200 = icmp ult i32 %94, %95
  br i1 %cmp200, label %for.body202, label %for.end210

for.body202:                                      ; preds = %for.cond198
  %96 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call203 = call zeroext i8 @stbi__get8(%struct.stbi__context* %96)
  %97 = load i32, i32* %i, align 4
  %mul204 = mul i32 %97, 4
  %add205 = add i32 %mul204, 3
  %idxprom206 = zext i32 %add205 to i64
  %arrayidx207 = getelementptr inbounds [1024 x i8], [1024 x i8]* %palette, i64 0, i64 %idxprom206
  store i8 %call203, i8* %arrayidx207, align 1
  br label %for.inc208

for.inc208:                                       ; preds = %for.body202
  %98 = load i32, i32* %i, align 4
  %inc209 = add i32 %98, 1
  store i32 %inc209, i32* %i, align 4
  br label %for.cond198

for.end210:                                       ; preds = %for.cond198
  br label %if.end264

if.else211:                                       ; preds = %if.end179
  %99 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n212 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %99, i32 0, i32 2
  %100 = load i32, i32* %img_n212, align 8
  %and213 = and i32 %100, 1
  %tobool214 = icmp ne i32 %and213, 0
  br i1 %tobool214, label %if.end217, label %if.then215

if.then215:                                       ; preds = %if.else211
  %call216 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.80, i64 0, i64 0))
  store i32 %call216, i32* %retval, align 4
  br label %return

if.end217:                                        ; preds = %if.else211
  %length218 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %101 = load i32, i32* %length218, align 4
  %102 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n219 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %102, i32 0, i32 2
  %103 = load i32, i32* %img_n219, align 8
  %mul220 = mul i32 %103, 2
  %cmp221 = icmp ne i32 %101, %mul220
  br i1 %cmp221, label %if.then223, label %if.end225

if.then223:                                       ; preds = %if.end217
  %call224 = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.79, i64 0, i64 0))
  store i32 %call224, i32* %retval, align 4
  br label %return

if.end225:                                        ; preds = %if.end217
  store i8 1, i8* %has_trans, align 1
  %104 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth226 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %104, i32 0, i32 4
  %105 = load i32, i32* %depth226, align 8
  %cmp227 = icmp eq i32 %105, 16
  br i1 %cmp227, label %if.then229, label %if.else242

if.then229:                                       ; preds = %if.end225
  store i32 0, i32* %k, align 4
  br label %for.cond230

for.cond230:                                      ; preds = %for.inc239, %if.then229
  %106 = load i32, i32* %k, align 4
  %107 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n231 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %107, i32 0, i32 2
  %108 = load i32, i32* %img_n231, align 8
  %cmp232 = icmp slt i32 %106, %108
  br i1 %cmp232, label %for.body234, label %for.end241

for.body234:                                      ; preds = %for.cond230
  %109 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call235 = call i32 @stbi__get16be(%struct.stbi__context* %109)
  %conv236 = trunc i32 %call235 to i16
  %110 = load i32, i32* %k, align 4
  %idxprom237 = sext i32 %110 to i64
  %arrayidx238 = getelementptr inbounds [3 x i16], [3 x i16]* %tc16, i64 0, i64 %idxprom237
  store i16 %conv236, i16* %arrayidx238, align 2
  br label %for.inc239

for.inc239:                                       ; preds = %for.body234
  %111 = load i32, i32* %k, align 4
  %inc240 = add nsw i32 %111, 1
  store i32 %inc240, i32* %k, align 4
  br label %for.cond230

for.end241:                                       ; preds = %for.cond230
  br label %if.end263

if.else242:                                       ; preds = %if.end225
  store i32 0, i32* %k, align 4
  br label %for.cond243

for.cond243:                                      ; preds = %for.inc260, %if.else242
  %112 = load i32, i32* %k, align 4
  %113 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n244 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %113, i32 0, i32 2
  %114 = load i32, i32* %img_n244, align 8
  %cmp245 = icmp slt i32 %112, %114
  br i1 %cmp245, label %for.body247, label %for.end262

for.body247:                                      ; preds = %for.cond243
  %115 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call248 = call i32 @stbi__get16be(%struct.stbi__context* %115)
  %and249 = and i32 %call248, 255
  %conv250 = trunc i32 %and249 to i8
  %conv251 = zext i8 %conv250 to i32
  %116 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth252 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %116, i32 0, i32 4
  %117 = load i32, i32* %depth252, align 8
  %idxprom253 = sext i32 %117 to i64
  %arrayidx254 = getelementptr inbounds [9 x i8], [9 x i8]* @stbi__depth_scale_table, i64 0, i64 %idxprom253
  %118 = load i8, i8* %arrayidx254, align 1
  %conv255 = zext i8 %118 to i32
  %mul256 = mul nsw i32 %conv251, %conv255
  %conv257 = trunc i32 %mul256 to i8
  %119 = load i32, i32* %k, align 4
  %idxprom258 = sext i32 %119 to i64
  %arrayidx259 = getelementptr inbounds [3 x i8], [3 x i8]* %tc, i64 0, i64 %idxprom258
  store i8 %conv257, i8* %arrayidx259, align 1
  br label %for.inc260

for.inc260:                                       ; preds = %for.body247
  %120 = load i32, i32* %k, align 4
  %inc261 = add nsw i32 %120, 1
  store i32 %inc261, i32* %k, align 4
  br label %for.cond243

for.end262:                                       ; preds = %for.cond243
  br label %if.end263

if.end263:                                        ; preds = %for.end262, %for.end241
  br label %if.end264

if.end264:                                        ; preds = %if.end263, %for.end210
  br label %sw.epilog

sw.bb265:                                         ; preds = %for.cond
  %121 = load i32, i32* %first, align 4
  %tobool266 = icmp ne i32 %121, 0
  br i1 %tobool266, label %if.then267, label %if.end269

if.then267:                                       ; preds = %sw.bb265
  %call268 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.75, i64 0, i64 0))
  store i32 %call268, i32* %retval, align 4
  br label %return

if.end269:                                        ; preds = %sw.bb265
  %122 = load i8, i8* %pal_img_n, align 1
  %conv270 = zext i8 %122 to i32
  %tobool271 = icmp ne i32 %conv270, 0
  br i1 %tobool271, label %land.lhs.true272, label %if.end276

land.lhs.true272:                                 ; preds = %if.end269
  %123 = load i32, i32* %pal_len, align 4
  %tobool273 = icmp ne i32 %123, 0
  br i1 %tobool273, label %if.end276, label %if.then274

if.then274:                                       ; preds = %land.lhs.true272
  %call275 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.81, i64 0, i64 0))
  store i32 %call275, i32* %retval, align 4
  br label %return

if.end276:                                        ; preds = %land.lhs.true272, %if.end269
  %124 = load i32, i32* %scan.addr, align 4
  %cmp277 = icmp eq i32 %124, 2
  br i1 %cmp277, label %if.then279, label %if.end282

if.then279:                                       ; preds = %if.end276
  %125 = load i8, i8* %pal_img_n, align 1
  %conv280 = zext i8 %125 to i32
  %126 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n281 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %126, i32 0, i32 2
  store i32 %conv280, i32* %img_n281, align 8
  store i32 1, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %if.end276
  %127 = load i32, i32* %ioff, align 4
  %length283 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %128 = load i32, i32* %length283, align 4
  %add284 = add i32 %127, %128
  %129 = load i32, i32* %ioff, align 4
  %cmp285 = icmp slt i32 %add284, %129
  br i1 %cmp285, label %if.then287, label %if.end288

if.then287:                                       ; preds = %if.end282
  store i32 0, i32* %retval, align 4
  br label %return

if.end288:                                        ; preds = %if.end282
  %130 = load i32, i32* %ioff, align 4
  %length289 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %131 = load i32, i32* %length289, align 4
  %add290 = add i32 %130, %131
  %132 = load i32, i32* %idata_limit, align 4
  %cmp291 = icmp ugt i32 %add290, %132
  br i1 %cmp291, label %if.then293, label %if.end317

if.then293:                                       ; preds = %if.end288
  %133 = load i32, i32* %idata_limit, align 4
  store i32 %133, i32* %idata_limit_old, align 4
  %134 = load i32, i32* %idata_limit, align 4
  %cmp294 = icmp eq i32 %134, 0
  br i1 %cmp294, label %if.then296, label %if.end302

if.then296:                                       ; preds = %if.then293
  %length297 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %135 = load i32, i32* %length297, align 4
  %cmp298 = icmp ugt i32 %135, 4096
  br i1 %cmp298, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then296
  %length300 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %136 = load i32, i32* %length300, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then296
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond301 = phi i32 [ %136, %cond.true ], [ 4096, %cond.false ]
  store i32 %cond301, i32* %idata_limit, align 4
  br label %if.end302

if.end302:                                        ; preds = %cond.end, %if.then293
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end302
  %137 = load i32, i32* %ioff, align 4
  %length303 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %138 = load i32, i32* %length303, align 4
  %add304 = add i32 %137, %138
  %139 = load i32, i32* %idata_limit, align 4
  %cmp305 = icmp ugt i32 %add304, %139
  br i1 %cmp305, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %140 = load i32, i32* %idata_limit, align 4
  %mul307 = mul i32 %140, 2
  store i32 %mul307, i32* %idata_limit, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %141 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %idata308 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %141, i32 0, i32 1
  %142 = load i8*, i8** %idata308, align 8
  %143 = load i32, i32* %idata_limit, align 4
  %conv309 = zext i32 %143 to i64
  %call310 = call i8* @realloc(i8* %142, i64 %conv309) #10
  store i8* %call310, i8** %p, align 8
  %144 = load i8*, i8** %p, align 8
  %cmp311 = icmp eq i8* %144, null
  br i1 %cmp311, label %if.then313, label %if.end315

if.then313:                                       ; preds = %while.end
  %call314 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  store i32 %call314, i32* %retval, align 4
  br label %return

if.end315:                                        ; preds = %while.end
  %145 = load i8*, i8** %p, align 8
  %146 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %idata316 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %146, i32 0, i32 1
  store i8* %145, i8** %idata316, align 8
  br label %if.end317

if.end317:                                        ; preds = %if.end315, %if.end288
  %147 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %148 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %idata318 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %148, i32 0, i32 1
  %149 = load i8*, i8** %idata318, align 8
  %150 = load i32, i32* %ioff, align 4
  %idx.ext = zext i32 %150 to i64
  %add.ptr = getelementptr inbounds i8, i8* %149, i64 %idx.ext
  %length319 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %151 = load i32, i32* %length319, align 4
  %call320 = call i32 @stbi__getn(%struct.stbi__context* %147, i8* %add.ptr, i32 %151)
  %tobool321 = icmp ne i32 %call320, 0
  br i1 %tobool321, label %if.end324, label %if.then322

if.then322:                                       ; preds = %if.end317
  %call323 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i64 0, i64 0))
  store i32 %call323, i32* %retval, align 4
  br label %return

if.end324:                                        ; preds = %if.end317
  %length325 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %152 = load i32, i32* %length325, align 4
  %153 = load i32, i32* %ioff, align 4
  %add326 = add i32 %153, %152
  store i32 %add326, i32* %ioff, align 4
  br label %sw.epilog

sw.bb327:                                         ; preds = %for.cond
  %154 = load i32, i32* %first, align 4
  %tobool328 = icmp ne i32 %154, 0
  br i1 %tobool328, label %if.then329, label %if.end331

if.then329:                                       ; preds = %sw.bb327
  %call330 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.75, i64 0, i64 0))
  store i32 %call330, i32* %retval, align 4
  br label %return

if.end331:                                        ; preds = %sw.bb327
  %155 = load i32, i32* %scan.addr, align 4
  %cmp332 = icmp ne i32 %155, 0
  br i1 %cmp332, label %if.then334, label %if.end335

if.then334:                                       ; preds = %if.end331
  store i32 1, i32* %retval, align 4
  br label %return

if.end335:                                        ; preds = %if.end331
  %156 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %idata336 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %156, i32 0, i32 1
  %157 = load i8*, i8** %idata336, align 8
  %cmp337 = icmp eq i8* %157, null
  br i1 %cmp337, label %if.then339, label %if.end341

if.then339:                                       ; preds = %if.end335
  %call340 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.83, i64 0, i64 0))
  store i32 %call340, i32* %retval, align 4
  br label %return

if.end341:                                        ; preds = %if.end335
  %158 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x342 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %158, i32 0, i32 0
  %159 = load i32, i32* %img_x342, align 8
  %160 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth343 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %160, i32 0, i32 4
  %161 = load i32, i32* %depth343, align 8
  %mul344 = mul i32 %159, %161
  %add345 = add i32 %mul344, 7
  %div346 = udiv i32 %add345, 8
  store i32 %div346, i32* %bpl, align 4
  %162 = load i32, i32* %bpl, align 4
  %163 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y347 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %163, i32 0, i32 1
  %164 = load i32, i32* %img_y347, align 4
  %mul348 = mul i32 %162, %164
  %165 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n349 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %165, i32 0, i32 2
  %166 = load i32, i32* %img_n349, align 8
  %mul350 = mul i32 %mul348, %166
  %167 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y351 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %167, i32 0, i32 1
  %168 = load i32, i32* %img_y351, align 4
  %add352 = add i32 %mul350, %168
  store i32 %add352, i32* %raw_len, align 4
  %169 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %idata353 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %169, i32 0, i32 1
  %170 = load i8*, i8** %idata353, align 8
  %171 = load i32, i32* %ioff, align 4
  %172 = load i32, i32* %raw_len, align 4
  %173 = load i32, i32* %is_iphone, align 4
  %tobool354 = icmp ne i32 %173, 0
  %lnot = xor i1 %tobool354, true
  %lnot.ext = zext i1 %lnot to i32
  %call355 = call i8* @stbi_zlib_decode_malloc_guesssize_headerflag(i8* %170, i32 %171, i32 %172, i32* %raw_len, i32 %lnot.ext)
  %174 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %expanded356 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %174, i32 0, i32 2
  store i8* %call355, i8** %expanded356, align 8
  %175 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %expanded357 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %175, i32 0, i32 2
  %176 = load i8*, i8** %expanded357, align 8
  %cmp358 = icmp eq i8* %176, null
  br i1 %cmp358, label %if.then360, label %if.end361

if.then360:                                       ; preds = %if.end341
  store i32 0, i32* %retval, align 4
  br label %return

if.end361:                                        ; preds = %if.end341
  %177 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %idata362 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %177, i32 0, i32 1
  %178 = load i8*, i8** %idata362, align 8
  call void @free(i8* %178) #10
  %179 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %idata363 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %179, i32 0, i32 1
  store i8* null, i8** %idata363, align 8
  %180 = load i32, i32* %req_comp.addr, align 4
  %181 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n364 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %181, i32 0, i32 2
  %182 = load i32, i32* %img_n364, align 8
  %add365 = add nsw i32 %182, 1
  %cmp366 = icmp eq i32 %180, %add365
  br i1 %cmp366, label %land.lhs.true368, label %lor.lhs.false373

land.lhs.true368:                                 ; preds = %if.end361
  %183 = load i32, i32* %req_comp.addr, align 4
  %cmp369 = icmp ne i32 %183, 3
  br i1 %cmp369, label %land.lhs.true371, label %lor.lhs.false373

land.lhs.true371:                                 ; preds = %land.lhs.true368
  %184 = load i8, i8* %pal_img_n, align 1
  %tobool372 = icmp ne i8 %184, 0
  br i1 %tobool372, label %lor.lhs.false373, label %if.then376

lor.lhs.false373:                                 ; preds = %land.lhs.true371, %land.lhs.true368, %if.end361
  %185 = load i8, i8* %has_trans, align 1
  %conv374 = zext i8 %185 to i32
  %tobool375 = icmp ne i32 %conv374, 0
  br i1 %tobool375, label %if.then376, label %if.else379

if.then376:                                       ; preds = %lor.lhs.false373, %land.lhs.true371
  %186 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n377 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %186, i32 0, i32 2
  %187 = load i32, i32* %img_n377, align 8
  %add378 = add nsw i32 %187, 1
  %188 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %188, i32 0, i32 3
  store i32 %add378, i32* %img_out_n, align 4
  br label %if.end382

if.else379:                                       ; preds = %lor.lhs.false373
  %189 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n380 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %189, i32 0, i32 2
  %190 = load i32, i32* %img_n380, align 8
  %191 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n381 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %191, i32 0, i32 3
  store i32 %190, i32* %img_out_n381, align 4
  br label %if.end382

if.end382:                                        ; preds = %if.else379, %if.then376
  %192 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %193 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %expanded383 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %193, i32 0, i32 2
  %194 = load i8*, i8** %expanded383, align 8
  %195 = load i32, i32* %raw_len, align 4
  %196 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n384 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %196, i32 0, i32 3
  %197 = load i32, i32* %img_out_n384, align 4
  %198 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth385 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %198, i32 0, i32 4
  %199 = load i32, i32* %depth385, align 8
  %200 = load i32, i32* %color, align 4
  %201 = load i32, i32* %interlace, align 4
  %call386 = call i32 @stbi__create_png_image(%struct.stbi__png* %192, i8* %194, i32 %195, i32 %197, i32 %199, i32 %200, i32 %201)
  %tobool387 = icmp ne i32 %call386, 0
  br i1 %tobool387, label %if.end389, label %if.then388

if.then388:                                       ; preds = %if.end382
  store i32 0, i32* %retval, align 4
  br label %return

if.end389:                                        ; preds = %if.end382
  %202 = load i8, i8* %has_trans, align 1
  %tobool390 = icmp ne i8 %202, 0
  br i1 %tobool390, label %if.then391, label %if.end409

if.then391:                                       ; preds = %if.end389
  %203 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %depth392 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %203, i32 0, i32 4
  %204 = load i32, i32* %depth392, align 8
  %cmp393 = icmp eq i32 %204, 16
  br i1 %cmp393, label %if.then395, label %if.else401

if.then395:                                       ; preds = %if.then391
  %205 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %tc16, i64 0, i64 0
  %206 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n396 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %206, i32 0, i32 3
  %207 = load i32, i32* %img_out_n396, align 4
  %call397 = call i32 @stbi__compute_transparency16(%struct.stbi__png* %205, i16* %arraydecay, i32 %207)
  %tobool398 = icmp ne i32 %call397, 0
  br i1 %tobool398, label %if.end400, label %if.then399

if.then399:                                       ; preds = %if.then395
  store i32 0, i32* %retval, align 4
  br label %return

if.end400:                                        ; preds = %if.then395
  br label %if.end408

if.else401:                                       ; preds = %if.then391
  %208 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %arraydecay402 = getelementptr inbounds [3 x i8], [3 x i8]* %tc, i64 0, i64 0
  %209 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n403 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %209, i32 0, i32 3
  %210 = load i32, i32* %img_out_n403, align 4
  %call404 = call i32 @stbi__compute_transparency(%struct.stbi__png* %208, i8* %arraydecay402, i32 %210)
  %tobool405 = icmp ne i32 %call404, 0
  br i1 %tobool405, label %if.end407, label %if.then406

if.then406:                                       ; preds = %if.else401
  store i32 0, i32* %retval, align 4
  br label %return

if.end407:                                        ; preds = %if.else401
  br label %if.end408

if.end408:                                        ; preds = %if.end407, %if.end400
  br label %if.end409

if.end409:                                        ; preds = %if.end408, %if.end389
  %211 = load i32, i32* %is_iphone, align 4
  %tobool410 = icmp ne i32 %211, 0
  br i1 %tobool410, label %land.lhs.true411, label %if.end418

land.lhs.true411:                                 ; preds = %if.end409
  %212 = load i32, i32* @stbi__de_iphone_flag, align 4
  %tobool412 = icmp ne i32 %212, 0
  br i1 %tobool412, label %land.lhs.true413, label %if.end418

land.lhs.true413:                                 ; preds = %land.lhs.true411
  %213 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n414 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %213, i32 0, i32 3
  %214 = load i32, i32* %img_out_n414, align 4
  %cmp415 = icmp sgt i32 %214, 2
  br i1 %cmp415, label %if.then417, label %if.end418

if.then417:                                       ; preds = %land.lhs.true413
  %215 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  call void @stbi__de_iphone(%struct.stbi__png* %215)
  br label %if.end418

if.end418:                                        ; preds = %if.then417, %land.lhs.true413, %land.lhs.true411, %if.end409
  %216 = load i8, i8* %pal_img_n, align 1
  %tobool419 = icmp ne i8 %216, 0
  br i1 %tobool419, label %if.then420, label %if.else436

if.then420:                                       ; preds = %if.end418
  %217 = load i8, i8* %pal_img_n, align 1
  %conv421 = zext i8 %217 to i32
  %218 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n422 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %218, i32 0, i32 2
  store i32 %conv421, i32* %img_n422, align 8
  %219 = load i8, i8* %pal_img_n, align 1
  %conv423 = zext i8 %219 to i32
  %220 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n424 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %220, i32 0, i32 3
  store i32 %conv423, i32* %img_out_n424, align 4
  %221 = load i32, i32* %req_comp.addr, align 4
  %cmp425 = icmp sge i32 %221, 3
  br i1 %cmp425, label %if.then427, label %if.end429

if.then427:                                       ; preds = %if.then420
  %222 = load i32, i32* %req_comp.addr, align 4
  %223 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n428 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %223, i32 0, i32 3
  store i32 %222, i32* %img_out_n428, align 4
  br label %if.end429

if.end429:                                        ; preds = %if.then427, %if.then420
  %224 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %arraydecay430 = getelementptr inbounds [1024 x i8], [1024 x i8]* %palette, i64 0, i64 0
  %225 = load i32, i32* %pal_len, align 4
  %226 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n431 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %226, i32 0, i32 3
  %227 = load i32, i32* %img_out_n431, align 4
  %call432 = call i32 @stbi__expand_png_palette(%struct.stbi__png* %224, i8* %arraydecay430, i32 %225, i32 %227)
  %tobool433 = icmp ne i32 %call432, 0
  br i1 %tobool433, label %if.end435, label %if.then434

if.then434:                                       ; preds = %if.end429
  store i32 0, i32* %retval, align 4
  br label %return

if.end435:                                        ; preds = %if.end429
  br label %if.end442

if.else436:                                       ; preds = %if.end418
  %228 = load i8, i8* %has_trans, align 1
  %tobool437 = icmp ne i8 %228, 0
  br i1 %tobool437, label %if.then438, label %if.end441

if.then438:                                       ; preds = %if.else436
  %229 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n439 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %229, i32 0, i32 2
  %230 = load i32, i32* %img_n439, align 8
  %inc440 = add nsw i32 %230, 1
  store i32 %inc440, i32* %img_n439, align 8
  br label %if.end441

if.end441:                                        ; preds = %if.then438, %if.else436
  br label %if.end442

if.end442:                                        ; preds = %if.end441, %if.end435
  %231 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %expanded443 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %231, i32 0, i32 2
  %232 = load i8*, i8** %expanded443, align 8
  call void @free(i8* %232) #10
  %233 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %expanded444 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %233, i32 0, i32 2
  store i8* null, i8** %expanded444, align 8
  %234 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call445 = call i32 @stbi__get32be(%struct.stbi__context* %234)
  store i32 1, i32* %retval, align 4
  br label %return

sw.default:                                       ; preds = %for.cond
  %235 = load i32, i32* %first, align 4
  %tobool446 = icmp ne i32 %235, 0
  br i1 %tobool446, label %if.then447, label %if.end449

if.then447:                                       ; preds = %sw.default
  %call448 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.75, i64 0, i64 0))
  store i32 %call448, i32* %retval, align 4
  br label %return

if.end449:                                        ; preds = %sw.default
  %type450 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 1
  %236 = load i32, i32* %type450, align 4
  %and451 = and i32 %236, 536870912
  %cmp452 = icmp eq i32 %and451, 0
  br i1 %cmp452, label %if.then454, label %if.end471

if.then454:                                       ; preds = %if.end449
  %type455 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 1
  %237 = load i32, i32* %type455, align 4
  %shr = lshr i32 %237, 24
  %and456 = and i32 %shr, 255
  %conv457 = trunc i32 %and456 to i8
  store i8 %conv457, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @stbi__parse_png_file.invalid_chunk, i64 0, i64 0), align 16
  %type458 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 1
  %238 = load i32, i32* %type458, align 4
  %shr459 = lshr i32 %238, 16
  %and460 = and i32 %shr459, 255
  %conv461 = trunc i32 %and460 to i8
  store i8 %conv461, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @stbi__parse_png_file.invalid_chunk, i64 0, i64 1), align 1
  %type462 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 1
  %239 = load i32, i32* %type462, align 4
  %shr463 = lshr i32 %239, 8
  %and464 = and i32 %shr463, 255
  %conv465 = trunc i32 %and464 to i8
  store i8 %conv465, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @stbi__parse_png_file.invalid_chunk, i64 0, i64 2), align 2
  %type466 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 1
  %240 = load i32, i32* %type466, align 4
  %shr467 = lshr i32 %240, 0
  %and468 = and i32 %shr467, 255
  %conv469 = trunc i32 %and468 to i8
  store i8 %conv469, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @stbi__parse_png_file.invalid_chunk, i64 0, i64 3), align 1
  %call470 = call i32 @stbi__err(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @stbi__parse_png_file.invalid_chunk, i64 0, i64 0))
  store i32 %call470, i32* %retval, align 4
  br label %return

if.end471:                                        ; preds = %if.end449
  %241 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %length472 = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %c, i32 0, i32 0
  %242 = load i32, i32* %length472, align 4
  call void @stbi__skip(%struct.stbi__context* %241, i32 %242)
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end471, %if.end324, %if.end264, %for.end, %if.end130, %sw.bb
  %243 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call473 = call i32 @stbi__get32be(%struct.stbi__context* %243)
  br label %for.cond

return:                                           ; preds = %if.then454, %if.then447, %if.end442, %if.then434, %if.then406, %if.then399, %if.then388, %if.then360, %if.then339, %if.then334, %if.then329, %if.then322, %if.then313, %if.then287, %if.then279, %if.then274, %if.then267, %if.then223, %if.then215, %if.then195, %if.then189, %if.then184, %if.then177, %if.then172, %if.then147, %if.then139, %if.then133, %if.then127, %if.then117, %if.then112, %if.then96, %if.then89, %if.then82, %if.then76, %if.then69, %if.then62, %if.then53, %if.then46, %if.then24, %if.then19, %if.then12, %if.then7, %if.then2, %if.then
  %244 = load i32, i32* %retval, align 4
  ret i32 %244
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__check_png_header(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %i = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %1)
  %conv = zext i8 %call to i32
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* @stbi__check_png_header.png_sig, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv1 = zext i8 %3 to i32
  %cmp2 = icmp ne i32 %conv, %conv1
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call4 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.65, i64 0, i64 0))
  store i32 %call4, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define internal i64 @stbi__get_chunk_header(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca %struct.stbi__pngchunk, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__get32be(%struct.stbi__context* %0)
  %length = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %retval, i32 0, i32 0
  store i32 %call, i32* %length, align 4
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call i32 @stbi__get32be(%struct.stbi__context* %1)
  %type = getelementptr inbounds %struct.stbi__pngchunk, %struct.stbi__pngchunk* %retval, i32 0, i32 1
  store i32 %call1, i32* %type, align 4
  %2 = bitcast %struct.stbi__pngchunk* %retval to i64*
  %3 = load i64, i64* %2, align 4
  ret i64 %3
}

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #1

; Function Attrs: noinline nounwind optnone
define i8* @stbi_zlib_decode_malloc_guesssize_headerflag(i8* %buffer, i32 %len, i32 %initial_size, i32* %outlen, i32 %parse_header) #0 {
entry:
  %retval = alloca i8*, align 8
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %initial_size.addr = alloca i32, align 4
  %outlen.addr = alloca i32*, align 8
  %parse_header.addr = alloca i32, align 4
  %a = alloca %struct.stbi__zbuf, align 8
  %p = alloca i8*, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 %initial_size, i32* %initial_size.addr, align 4
  store i32* %outlen, i32** %outlen.addr, align 8
  store i32 %parse_header, i32* %parse_header.addr, align 4
  %0 = load i32, i32* %initial_size.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call i8* @stbi__malloc(i64 %conv)
  store i8* %call, i8** %p, align 8
  %1 = load i8*, i8** %p, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %buffer.addr, align 8
  %zbuffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 0
  store i8* %2, i8** %zbuffer, align 8
  %3 = load i8*, i8** %buffer.addr, align 8
  %4 = load i32, i32* %len.addr, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext
  %zbuffer_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 1
  store i8* %add.ptr, i8** %zbuffer_end, align 8
  %5 = load i8*, i8** %p, align 8
  %6 = load i32, i32* %initial_size.addr, align 4
  %7 = load i32, i32* %parse_header.addr, align 4
  %call2 = call i32 @stbi__do_zlib(%struct.stbi__zbuf* %a, i8* %5, i32 %6, i32 1, i32 %7)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %8 = load i32*, i32** %outlen.addr, align 8
  %tobool4 = icmp ne i32* %8, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then3
  %zout = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 4
  %9 = load i8*, i8** %zout, align 8
  %zout_start = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %10 = load i8*, i8** %zout_start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv6 = trunc i64 %sub.ptr.sub to i32
  %11 = load i32*, i32** %outlen.addr, align 8
  store i32 %conv6, i32* %11, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then3
  %zout_start8 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %12 = load i8*, i8** %zout_start8, align 8
  store i8* %12, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end
  %zout_start9 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %13 = load i8*, i8** %zout_start9, align 8
  call void @free(i8* %13) #10
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.end7, %if.then
  %14 = load i8*, i8** %retval, align 8
  ret i8* %14
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__create_png_image(%struct.stbi__png* %a, i8* %image_data, i32 %image_data_len, i32 %out_n, i32 %depth, i32 %color, i32 %interlaced) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.stbi__png*, align 8
  %image_data.addr = alloca i8*, align 8
  %image_data_len.addr = alloca i32, align 4
  %out_n.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %color.addr = alloca i32, align 4
  %interlaced.addr = alloca i32, align 4
  %bytes = alloca i32, align 4
  %out_bytes = alloca i32, align 4
  %final = alloca i8*, align 8
  %p = alloca i32, align 4
  %xorig = alloca [7 x i32], align 16
  %yorig = alloca [7 x i32], align 16
  %xspc = alloca [7 x i32], align 16
  %yspc = alloca [7 x i32], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %img_len = alloca i32, align 4
  %out_y = alloca i32, align 4
  %out_x = alloca i32, align 4
  store %struct.stbi__png* %a, %struct.stbi__png** %a.addr, align 8
  store i8* %image_data, i8** %image_data.addr, align 8
  store i32 %image_data_len, i32* %image_data_len.addr, align 4
  store i32 %out_n, i32* %out_n.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %color, i32* %color.addr, align 4
  store i32 %interlaced, i32* %interlaced.addr, align 4
  %0 = load i32, i32* %depth.addr, align 4
  %cmp = icmp eq i32 %0, 16
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 2, i32 1
  store i32 %cond, i32* %bytes, align 4
  %2 = load i32, i32* %out_n.addr, align 4
  %3 = load i32, i32* %bytes, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %out_bytes, align 4
  %4 = load i32, i32* %interlaced.addr, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %5 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %6 = load i8*, i8** %image_data.addr, align 8
  %7 = load i32, i32* %image_data_len.addr, align 4
  %8 = load i32, i32* %out_n.addr, align 4
  %9 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %9, i32 0, i32 0
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %10, i32 0, i32 0
  %11 = load i32, i32* %img_x, align 8
  %12 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %12, i32 0, i32 0
  %13 = load %struct.stbi__context*, %struct.stbi__context** %s1, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %13, i32 0, i32 1
  %14 = load i32, i32* %img_y, align 4
  %15 = load i32, i32* %depth.addr, align 4
  %16 = load i32, i32* %color.addr, align 4
  %call = call i32 @stbi__create_png_image_raw(%struct.stbi__png* %5, i8* %6, i32 %7, i32 %8, i32 %11, i32 %14, i32 %15, i32 %16)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %17 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s2 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %17, i32 0, i32 0
  %18 = load %struct.stbi__context*, %struct.stbi__context** %s2, align 8
  %img_x3 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %18, i32 0, i32 0
  %19 = load i32, i32* %img_x3, align 8
  %20 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s4 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %20, i32 0, i32 0
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s4, align 8
  %img_y5 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %21, i32 0, i32 1
  %22 = load i32, i32* %img_y5, align 4
  %23 = load i32, i32* %out_bytes, align 4
  %call6 = call i8* @stbi__malloc_mad3(i32 %19, i32 %22, i32 %23, i32 0)
  store i8* %call6, i8** %final, align 8
  store i32 0, i32* %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc78, %if.end
  %24 = load i32, i32* %p, align 4
  %cmp7 = icmp slt i32 %24, 7
  br i1 %cmp7, label %for.body, label %for.end80

for.body:                                         ; preds = %for.cond
  %25 = bitcast [7 x i32]* %xorig to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %25, i8* align 16 bitcast ([7 x i32]* @__const.stbi__create_png_image.xorig to i8*), i64 28, i1 false)
  %26 = bitcast [7 x i32]* %yorig to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %26, i8* align 16 bitcast ([7 x i32]* @__const.stbi__create_png_image.yorig to i8*), i64 28, i1 false)
  %27 = bitcast [7 x i32]* %xspc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %27, i8* align 16 bitcast ([7 x i32]* @__const.stbi__create_png_image.xspc to i8*), i64 28, i1 false)
  %28 = bitcast [7 x i32]* %yspc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %28, i8* align 16 bitcast ([7 x i32]* @__const.stbi__create_png_image.yspc to i8*), i64 28, i1 false)
  %29 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s8 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %29, i32 0, i32 0
  %30 = load %struct.stbi__context*, %struct.stbi__context** %s8, align 8
  %img_x9 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %30, i32 0, i32 0
  %31 = load i32, i32* %img_x9, align 8
  %32 = load i32, i32* %p, align 4
  %idxprom = sext i32 %32 to i64
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* %xorig, i64 0, i64 %idxprom
  %33 = load i32, i32* %arrayidx, align 4
  %sub = sub i32 %31, %33
  %34 = load i32, i32* %p, align 4
  %idxprom10 = sext i32 %34 to i64
  %arrayidx11 = getelementptr inbounds [7 x i32], [7 x i32]* %xspc, i64 0, i64 %idxprom10
  %35 = load i32, i32* %arrayidx11, align 4
  %add = add i32 %sub, %35
  %sub12 = sub i32 %add, 1
  %36 = load i32, i32* %p, align 4
  %idxprom13 = sext i32 %36 to i64
  %arrayidx14 = getelementptr inbounds [7 x i32], [7 x i32]* %xspc, i64 0, i64 %idxprom13
  %37 = load i32, i32* %arrayidx14, align 4
  %div = udiv i32 %sub12, %37
  store i32 %div, i32* %x, align 4
  %38 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s15 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %38, i32 0, i32 0
  %39 = load %struct.stbi__context*, %struct.stbi__context** %s15, align 8
  %img_y16 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %39, i32 0, i32 1
  %40 = load i32, i32* %img_y16, align 4
  %41 = load i32, i32* %p, align 4
  %idxprom17 = sext i32 %41 to i64
  %arrayidx18 = getelementptr inbounds [7 x i32], [7 x i32]* %yorig, i64 0, i64 %idxprom17
  %42 = load i32, i32* %arrayidx18, align 4
  %sub19 = sub i32 %40, %42
  %43 = load i32, i32* %p, align 4
  %idxprom20 = sext i32 %43 to i64
  %arrayidx21 = getelementptr inbounds [7 x i32], [7 x i32]* %yspc, i64 0, i64 %idxprom20
  %44 = load i32, i32* %arrayidx21, align 4
  %add22 = add i32 %sub19, %44
  %sub23 = sub i32 %add22, 1
  %45 = load i32, i32* %p, align 4
  %idxprom24 = sext i32 %45 to i64
  %arrayidx25 = getelementptr inbounds [7 x i32], [7 x i32]* %yspc, i64 0, i64 %idxprom24
  %46 = load i32, i32* %arrayidx25, align 4
  %div26 = udiv i32 %sub23, %46
  store i32 %div26, i32* %y, align 4
  %47 = load i32, i32* %x, align 4
  %tobool27 = icmp ne i32 %47, 0
  br i1 %tobool27, label %land.lhs.true, label %if.end77

land.lhs.true:                                    ; preds = %for.body
  %48 = load i32, i32* %y, align 4
  %tobool28 = icmp ne i32 %48, 0
  br i1 %tobool28, label %if.then29, label %if.end77

if.then29:                                        ; preds = %land.lhs.true
  %49 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s30 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %49, i32 0, i32 0
  %50 = load %struct.stbi__context*, %struct.stbi__context** %s30, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %50, i32 0, i32 2
  %51 = load i32, i32* %img_n, align 8
  %52 = load i32, i32* %x, align 4
  %mul31 = mul nsw i32 %51, %52
  %53 = load i32, i32* %depth.addr, align 4
  %mul32 = mul nsw i32 %mul31, %53
  %add33 = add nsw i32 %mul32, 7
  %shr = ashr i32 %add33, 3
  %add34 = add nsw i32 %shr, 1
  %54 = load i32, i32* %y, align 4
  %mul35 = mul nsw i32 %add34, %54
  store i32 %mul35, i32* %img_len, align 4
  %55 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %56 = load i8*, i8** %image_data.addr, align 8
  %57 = load i32, i32* %image_data_len.addr, align 4
  %58 = load i32, i32* %out_n.addr, align 4
  %59 = load i32, i32* %x, align 4
  %60 = load i32, i32* %y, align 4
  %61 = load i32, i32* %depth.addr, align 4
  %62 = load i32, i32* %color.addr, align 4
  %call36 = call i32 @stbi__create_png_image_raw(%struct.stbi__png* %55, i8* %56, i32 %57, i32 %58, i32 %59, i32 %60, i32 %61, i32 %62)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.end39, label %if.then38

if.then38:                                        ; preds = %if.then29
  %63 = load i8*, i8** %final, align 8
  call void @free(i8* %63) #10
  store i32 0, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.then29
  store i32 0, i32* %j, align 4
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc70, %if.end39
  %64 = load i32, i32* %j, align 4
  %65 = load i32, i32* %y, align 4
  %cmp41 = icmp slt i32 %64, %65
  br i1 %cmp41, label %for.body42, label %for.end72

for.body42:                                       ; preds = %for.cond40
  store i32 0, i32* %i, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc, %for.body42
  %66 = load i32, i32* %i, align 4
  %67 = load i32, i32* %x, align 4
  %cmp44 = icmp slt i32 %66, %67
  br i1 %cmp44, label %for.body45, label %for.end

for.body45:                                       ; preds = %for.cond43
  %68 = load i32, i32* %j, align 4
  %69 = load i32, i32* %p, align 4
  %idxprom46 = sext i32 %69 to i64
  %arrayidx47 = getelementptr inbounds [7 x i32], [7 x i32]* %yspc, i64 0, i64 %idxprom46
  %70 = load i32, i32* %arrayidx47, align 4
  %mul48 = mul nsw i32 %68, %70
  %71 = load i32, i32* %p, align 4
  %idxprom49 = sext i32 %71 to i64
  %arrayidx50 = getelementptr inbounds [7 x i32], [7 x i32]* %yorig, i64 0, i64 %idxprom49
  %72 = load i32, i32* %arrayidx50, align 4
  %add51 = add nsw i32 %mul48, %72
  store i32 %add51, i32* %out_y, align 4
  %73 = load i32, i32* %i, align 4
  %74 = load i32, i32* %p, align 4
  %idxprom52 = sext i32 %74 to i64
  %arrayidx53 = getelementptr inbounds [7 x i32], [7 x i32]* %xspc, i64 0, i64 %idxprom52
  %75 = load i32, i32* %arrayidx53, align 4
  %mul54 = mul nsw i32 %73, %75
  %76 = load i32, i32* %p, align 4
  %idxprom55 = sext i32 %76 to i64
  %arrayidx56 = getelementptr inbounds [7 x i32], [7 x i32]* %xorig, i64 0, i64 %idxprom55
  %77 = load i32, i32* %arrayidx56, align 4
  %add57 = add nsw i32 %mul54, %77
  store i32 %add57, i32* %out_x, align 4
  %78 = load i8*, i8** %final, align 8
  %79 = load i32, i32* %out_y, align 4
  %80 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s58 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %80, i32 0, i32 0
  %81 = load %struct.stbi__context*, %struct.stbi__context** %s58, align 8
  %img_x59 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %81, i32 0, i32 0
  %82 = load i32, i32* %img_x59, align 8
  %mul60 = mul i32 %79, %82
  %83 = load i32, i32* %out_bytes, align 4
  %mul61 = mul i32 %mul60, %83
  %idx.ext = zext i32 %mul61 to i64
  %add.ptr = getelementptr inbounds i8, i8* %78, i64 %idx.ext
  %84 = load i32, i32* %out_x, align 4
  %85 = load i32, i32* %out_bytes, align 4
  %mul62 = mul nsw i32 %84, %85
  %idx.ext63 = sext i32 %mul62 to i64
  %add.ptr64 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext63
  %86 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %86, i32 0, i32 3
  %87 = load i8*, i8** %out, align 8
  %88 = load i32, i32* %j, align 4
  %89 = load i32, i32* %x, align 4
  %mul65 = mul nsw i32 %88, %89
  %90 = load i32, i32* %i, align 4
  %add66 = add nsw i32 %mul65, %90
  %91 = load i32, i32* %out_bytes, align 4
  %mul67 = mul nsw i32 %add66, %91
  %idx.ext68 = sext i32 %mul67 to i64
  %add.ptr69 = getelementptr inbounds i8, i8* %87, i64 %idx.ext68
  %92 = load i32, i32* %out_bytes, align 4
  %conv = sext i32 %92 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr64, i8* align 1 %add.ptr69, i64 %conv, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body45
  %93 = load i32, i32* %i, align 4
  %inc = add nsw i32 %93, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond43

for.end:                                          ; preds = %for.cond43
  br label %for.inc70

for.inc70:                                        ; preds = %for.end
  %94 = load i32, i32* %j, align 4
  %inc71 = add nsw i32 %94, 1
  store i32 %inc71, i32* %j, align 4
  br label %for.cond40

for.end72:                                        ; preds = %for.cond40
  %95 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out73 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %95, i32 0, i32 3
  %96 = load i8*, i8** %out73, align 8
  call void @free(i8* %96) #10
  %97 = load i32, i32* %img_len, align 4
  %98 = load i8*, i8** %image_data.addr, align 8
  %idx.ext74 = zext i32 %97 to i64
  %add.ptr75 = getelementptr inbounds i8, i8* %98, i64 %idx.ext74
  store i8* %add.ptr75, i8** %image_data.addr, align 8
  %99 = load i32, i32* %img_len, align 4
  %100 = load i32, i32* %image_data_len.addr, align 4
  %sub76 = sub i32 %100, %99
  store i32 %sub76, i32* %image_data_len.addr, align 4
  br label %if.end77

if.end77:                                         ; preds = %for.end72, %land.lhs.true, %for.body
  br label %for.inc78

for.inc78:                                        ; preds = %if.end77
  %101 = load i32, i32* %p, align 4
  %inc79 = add nsw i32 %101, 1
  store i32 %inc79, i32* %p, align 4
  br label %for.cond

for.end80:                                        ; preds = %for.cond
  %102 = load i8*, i8** %final, align 8
  %103 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out81 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %103, i32 0, i32 3
  store i8* %102, i8** %out81, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end80, %if.then38, %if.then
  %104 = load i32, i32* %retval, align 4
  ret i32 %104
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__compute_transparency16(%struct.stbi__png* %z, i16* %tc, i32 %out_n) #0 {
entry:
  %z.addr = alloca %struct.stbi__png*, align 8
  %tc.addr = alloca i16*, align 8
  %out_n.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context*, align 8
  %i = alloca i32, align 4
  %pixel_count = alloca i32, align 4
  %p = alloca i16*, align 8
  store %struct.stbi__png* %z, %struct.stbi__png** %z.addr, align 8
  store i16* %tc, i16** %tc.addr, align 8
  store i32 %out_n, i32* %out_n.addr, align 4
  %0 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %0, i32 0, i32 0
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s1, align 8
  store %struct.stbi__context* %1, %struct.stbi__context** %s, align 8
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 0
  %3 = load i32, i32* %img_x, align 8
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 1
  %5 = load i32, i32* %img_y, align 4
  %mul = mul i32 %3, %5
  store i32 %mul, i32* %pixel_count, align 4
  %6 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %out = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %6, i32 0, i32 3
  %7 = load i8*, i8** %out, align 8
  %8 = bitcast i8* %7 to i16*
  store i16* %8, i16** %p, align 8
  %9 = load i32, i32* %out_n.addr, align 4
  %cmp = icmp eq i32 %9, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %10 = load i32, i32* %out_n.addr, align 4
  %cmp2 = icmp eq i32 %10, 4
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  call void @__assert_fail(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.90, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 4828, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @__PRETTY_FUNCTION__.stbi__compute_transparency16, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %11 = load i32, i32* %out_n.addr, align 4
  %cmp3 = icmp eq i32 %11, 2
  br i1 %cmp3, label %if.then4, label %if.else12

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %pixel_count, align 4
  %cmp5 = icmp ult i32 %12, %13
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i16*, i16** %p, align 8
  %arrayidx = getelementptr inbounds i16, i16* %14, i64 0
  %15 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %15 to i32
  %16 = load i16*, i16** %tc.addr, align 8
  %arrayidx6 = getelementptr inbounds i16, i16* %16, i64 0
  %17 = load i16, i16* %arrayidx6, align 2
  %conv7 = zext i16 %17 to i32
  %cmp8 = icmp eq i32 %conv, %conv7
  %18 = zext i1 %cmp8 to i64
  %cond = select i1 %cmp8, i32 0, i32 65535
  %conv10 = trunc i32 %cond to i16
  %19 = load i16*, i16** %p, align 8
  %arrayidx11 = getelementptr inbounds i16, i16* %19, i64 1
  store i16 %conv10, i16* %arrayidx11, align 2
  %20 = load i16*, i16** %p, align 8
  %add.ptr = getelementptr inbounds i16, i16* %20, i64 2
  store i16* %add.ptr, i16** %p, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end43

if.else12:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc40, %if.else12
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %pixel_count, align 4
  %cmp14 = icmp ult i32 %22, %23
  br i1 %cmp14, label %for.body16, label %for.end42

for.body16:                                       ; preds = %for.cond13
  %24 = load i16*, i16** %p, align 8
  %arrayidx17 = getelementptr inbounds i16, i16* %24, i64 0
  %25 = load i16, i16* %arrayidx17, align 2
  %conv18 = zext i16 %25 to i32
  %26 = load i16*, i16** %tc.addr, align 8
  %arrayidx19 = getelementptr inbounds i16, i16* %26, i64 0
  %27 = load i16, i16* %arrayidx19, align 2
  %conv20 = zext i16 %27 to i32
  %cmp21 = icmp eq i32 %conv18, %conv20
  br i1 %cmp21, label %land.lhs.true, label %if.end38

land.lhs.true:                                    ; preds = %for.body16
  %28 = load i16*, i16** %p, align 8
  %arrayidx23 = getelementptr inbounds i16, i16* %28, i64 1
  %29 = load i16, i16* %arrayidx23, align 2
  %conv24 = zext i16 %29 to i32
  %30 = load i16*, i16** %tc.addr, align 8
  %arrayidx25 = getelementptr inbounds i16, i16* %30, i64 1
  %31 = load i16, i16* %arrayidx25, align 2
  %conv26 = zext i16 %31 to i32
  %cmp27 = icmp eq i32 %conv24, %conv26
  br i1 %cmp27, label %land.lhs.true29, label %if.end38

land.lhs.true29:                                  ; preds = %land.lhs.true
  %32 = load i16*, i16** %p, align 8
  %arrayidx30 = getelementptr inbounds i16, i16* %32, i64 2
  %33 = load i16, i16* %arrayidx30, align 2
  %conv31 = zext i16 %33 to i32
  %34 = load i16*, i16** %tc.addr, align 8
  %arrayidx32 = getelementptr inbounds i16, i16* %34, i64 2
  %35 = load i16, i16* %arrayidx32, align 2
  %conv33 = zext i16 %35 to i32
  %cmp34 = icmp eq i32 %conv31, %conv33
  br i1 %cmp34, label %if.then36, label %if.end38

if.then36:                                        ; preds = %land.lhs.true29
  %36 = load i16*, i16** %p, align 8
  %arrayidx37 = getelementptr inbounds i16, i16* %36, i64 3
  store i16 0, i16* %arrayidx37, align 2
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %land.lhs.true29, %land.lhs.true, %for.body16
  %37 = load i16*, i16** %p, align 8
  %add.ptr39 = getelementptr inbounds i16, i16* %37, i64 4
  store i16* %add.ptr39, i16** %p, align 8
  br label %for.inc40

for.inc40:                                        ; preds = %if.end38
  %38 = load i32, i32* %i, align 4
  %inc41 = add i32 %38, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond13

for.end42:                                        ; preds = %for.cond13
  br label %if.end43

if.end43:                                         ; preds = %for.end42, %for.end
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__compute_transparency(%struct.stbi__png* %z, i8* %tc, i32 %out_n) #0 {
entry:
  %z.addr = alloca %struct.stbi__png*, align 8
  %tc.addr = alloca i8*, align 8
  %out_n.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context*, align 8
  %i = alloca i32, align 4
  %pixel_count = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.stbi__png* %z, %struct.stbi__png** %z.addr, align 8
  store i8* %tc, i8** %tc.addr, align 8
  store i32 %out_n, i32* %out_n.addr, align 4
  %0 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %0, i32 0, i32 0
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s1, align 8
  store %struct.stbi__context* %1, %struct.stbi__context** %s, align 8
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 0
  %3 = load i32, i32* %img_x, align 8
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 1
  %5 = load i32, i32* %img_y, align 4
  %mul = mul i32 %3, %5
  store i32 %mul, i32* %pixel_count, align 4
  %6 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %out = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %6, i32 0, i32 3
  %7 = load i8*, i8** %out, align 8
  store i8* %7, i8** %p, align 8
  %8 = load i32, i32* %out_n.addr, align 4
  %cmp = icmp eq i32 %8, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %9 = load i32, i32* %out_n.addr, align 4
  %cmp2 = icmp eq i32 %9, 4
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  call void @__assert_fail(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.90, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 4803, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__.stbi__compute_transparency, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %10 = load i32, i32* %out_n.addr, align 4
  %cmp3 = icmp eq i32 %10, 2
  br i1 %cmp3, label %if.then4, label %if.else12

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %pixel_count, align 4
  %cmp5 = icmp ult i32 %11, %12
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %14 to i32
  %15 = load i8*, i8** %tc.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %16 to i32
  %cmp8 = icmp eq i32 %conv, %conv7
  %17 = zext i1 %cmp8 to i64
  %cond = select i1 %cmp8, i32 0, i32 255
  %conv10 = trunc i32 %cond to i8
  %18 = load i8*, i8** %p, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %conv10, i8* %arrayidx11, align 1
  %19 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 2
  store i8* %add.ptr, i8** %p, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4
  %inc = add i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end43

if.else12:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc40, %if.else12
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %pixel_count, align 4
  %cmp14 = icmp ult i32 %21, %22
  br i1 %cmp14, label %for.body16, label %for.end42

for.body16:                                       ; preds = %for.cond13
  %23 = load i8*, i8** %p, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %23, i64 0
  %24 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %24 to i32
  %25 = load i8*, i8** %tc.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %26 to i32
  %cmp21 = icmp eq i32 %conv18, %conv20
  br i1 %cmp21, label %land.lhs.true, label %if.end38

land.lhs.true:                                    ; preds = %for.body16
  %27 = load i8*, i8** %p, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %27, i64 1
  %28 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %28 to i32
  %29 = load i8*, i8** %tc.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %29, i64 1
  %30 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %30 to i32
  %cmp27 = icmp eq i32 %conv24, %conv26
  br i1 %cmp27, label %land.lhs.true29, label %if.end38

land.lhs.true29:                                  ; preds = %land.lhs.true
  %31 = load i8*, i8** %p, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %31, i64 2
  %32 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %32 to i32
  %33 = load i8*, i8** %tc.addr, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %33, i64 2
  %34 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %34 to i32
  %cmp34 = icmp eq i32 %conv31, %conv33
  br i1 %cmp34, label %if.then36, label %if.end38

if.then36:                                        ; preds = %land.lhs.true29
  %35 = load i8*, i8** %p, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %35, i64 3
  store i8 0, i8* %arrayidx37, align 1
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %land.lhs.true29, %land.lhs.true, %for.body16
  %36 = load i8*, i8** %p, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %36, i64 4
  store i8* %add.ptr39, i8** %p, align 8
  br label %for.inc40

for.inc40:                                        ; preds = %if.end38
  %37 = load i32, i32* %i, align 4
  %inc41 = add i32 %37, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond13

for.end42:                                        ; preds = %for.cond13
  br label %if.end43

if.end43:                                         ; preds = %for.end42, %for.end
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__de_iphone(%struct.stbi__png* %z) #0 {
entry:
  %z.addr = alloca %struct.stbi__png*, align 8
  %s = alloca %struct.stbi__context*, align 8
  %i = alloca i32, align 4
  %pixel_count = alloca i32, align 4
  %p = alloca i8*, align 8
  %t = alloca i8, align 1
  %a = alloca i8, align 1
  %t15 = alloca i8, align 1
  %half = alloca i8, align 1
  %t59 = alloca i8, align 1
  store %struct.stbi__png* %z, %struct.stbi__png** %z.addr, align 8
  %0 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %0, i32 0, i32 0
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s1, align 8
  store %struct.stbi__context* %1, %struct.stbi__context** %s, align 8
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 0
  %3 = load i32, i32* %img_x, align 8
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 1
  %5 = load i32, i32* %img_y, align 4
  %mul = mul i32 %3, %5
  store i32 %mul, i32* %pixel_count, align 4
  %6 = load %struct.stbi__png*, %struct.stbi__png** %z.addr, align 8
  %out = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %6, i32 0, i32 3
  %7 = load i8*, i8** %out, align 8
  store i8* %7, i8** %p, align 8
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %8, i32 0, i32 3
  %9 = load i32, i32* %img_out_n, align 4
  %cmp = icmp eq i32 %9, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %pixel_count, align 4
  %cmp2 = icmp ult i32 %10, %11
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx, align 1
  store i8 %13, i8* %t, align 1
  %14 = load i8*, i8** %p, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %14, i64 2
  %15 = load i8, i8* %arrayidx3, align 1
  %16 = load i8*, i8** %p, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %16, i64 0
  store i8 %15, i8* %arrayidx4, align 1
  %17 = load i8, i8* %t, align 1
  %18 = load i8*, i8** %p, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %18, i64 2
  store i8 %17, i8* %arrayidx5, align 1
  %19 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 3
  store i8* %add.ptr, i8** %p, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4
  %inc = add i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end69

if.else:                                          ; preds = %entry
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_out_n6 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %21, i32 0, i32 3
  %22 = load i32, i32* %img_out_n6, align 4
  %cmp7 = icmp eq i32 %22, 4
  br i1 %cmp7, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.else
  br label %if.end

if.else9:                                         ; preds = %if.else
  call void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.91, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 4909, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__.stbi__de_iphone, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then8
  %23 = load i32, i32* @stbi__unpremultiply_on_load, align 4
  %tobool = icmp ne i32 %23, 0
  br i1 %tobool, label %if.then10, label %if.else54

if.then10:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc51, %if.then10
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %pixel_count, align 4
  %cmp12 = icmp ult i32 %24, %25
  br i1 %cmp12, label %for.body13, label %for.end53

for.body13:                                       ; preds = %for.cond11
  %26 = load i8*, i8** %p, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %26, i64 3
  %27 = load i8, i8* %arrayidx14, align 1
  store i8 %27, i8* %a, align 1
  %28 = load i8*, i8** %p, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %28, i64 0
  %29 = load i8, i8* %arrayidx16, align 1
  store i8 %29, i8* %t15, align 1
  %30 = load i8, i8* %a, align 1
  %tobool17 = icmp ne i8 %30, 0
  br i1 %tobool17, label %if.then18, label %if.else45

if.then18:                                        ; preds = %for.body13
  %31 = load i8, i8* %a, align 1
  %conv = zext i8 %31 to i32
  %div = sdiv i32 %conv, 2
  %conv19 = trunc i32 %div to i8
  store i8 %conv19, i8* %half, align 1
  %32 = load i8*, i8** %p, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %32, i64 2
  %33 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %33 to i32
  %mul22 = mul nsw i32 %conv21, 255
  %34 = load i8, i8* %half, align 1
  %conv23 = zext i8 %34 to i32
  %add = add nsw i32 %mul22, %conv23
  %35 = load i8, i8* %a, align 1
  %conv24 = zext i8 %35 to i32
  %div25 = sdiv i32 %add, %conv24
  %conv26 = trunc i32 %div25 to i8
  %36 = load i8*, i8** %p, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %36, i64 0
  store i8 %conv26, i8* %arrayidx27, align 1
  %37 = load i8*, i8** %p, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %37, i64 1
  %38 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %38 to i32
  %mul30 = mul nsw i32 %conv29, 255
  %39 = load i8, i8* %half, align 1
  %conv31 = zext i8 %39 to i32
  %add32 = add nsw i32 %mul30, %conv31
  %40 = load i8, i8* %a, align 1
  %conv33 = zext i8 %40 to i32
  %div34 = sdiv i32 %add32, %conv33
  %conv35 = trunc i32 %div34 to i8
  %41 = load i8*, i8** %p, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %41, i64 1
  store i8 %conv35, i8* %arrayidx36, align 1
  %42 = load i8, i8* %t15, align 1
  %conv37 = zext i8 %42 to i32
  %mul38 = mul nsw i32 %conv37, 255
  %43 = load i8, i8* %half, align 1
  %conv39 = zext i8 %43 to i32
  %add40 = add nsw i32 %mul38, %conv39
  %44 = load i8, i8* %a, align 1
  %conv41 = zext i8 %44 to i32
  %div42 = sdiv i32 %add40, %conv41
  %conv43 = trunc i32 %div42 to i8
  %45 = load i8*, i8** %p, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %45, i64 2
  store i8 %conv43, i8* %arrayidx44, align 1
  br label %if.end49

if.else45:                                        ; preds = %for.body13
  %46 = load i8*, i8** %p, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %46, i64 2
  %47 = load i8, i8* %arrayidx46, align 1
  %48 = load i8*, i8** %p, align 8
  %arrayidx47 = getelementptr inbounds i8, i8* %48, i64 0
  store i8 %47, i8* %arrayidx47, align 1
  %49 = load i8, i8* %t15, align 1
  %50 = load i8*, i8** %p, align 8
  %arrayidx48 = getelementptr inbounds i8, i8* %50, i64 2
  store i8 %49, i8* %arrayidx48, align 1
  br label %if.end49

if.end49:                                         ; preds = %if.else45, %if.then18
  %51 = load i8*, i8** %p, align 8
  %add.ptr50 = getelementptr inbounds i8, i8* %51, i64 4
  store i8* %add.ptr50, i8** %p, align 8
  br label %for.inc51

for.inc51:                                        ; preds = %if.end49
  %52 = load i32, i32* %i, align 4
  %inc52 = add i32 %52, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond11

for.end53:                                        ; preds = %for.cond11
  br label %if.end68

if.else54:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc65, %if.else54
  %53 = load i32, i32* %i, align 4
  %54 = load i32, i32* %pixel_count, align 4
  %cmp56 = icmp ult i32 %53, %54
  br i1 %cmp56, label %for.body58, label %for.end67

for.body58:                                       ; preds = %for.cond55
  %55 = load i8*, i8** %p, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %55, i64 0
  %56 = load i8, i8* %arrayidx60, align 1
  store i8 %56, i8* %t59, align 1
  %57 = load i8*, i8** %p, align 8
  %arrayidx61 = getelementptr inbounds i8, i8* %57, i64 2
  %58 = load i8, i8* %arrayidx61, align 1
  %59 = load i8*, i8** %p, align 8
  %arrayidx62 = getelementptr inbounds i8, i8* %59, i64 0
  store i8 %58, i8* %arrayidx62, align 1
  %60 = load i8, i8* %t59, align 1
  %61 = load i8*, i8** %p, align 8
  %arrayidx63 = getelementptr inbounds i8, i8* %61, i64 2
  store i8 %60, i8* %arrayidx63, align 1
  %62 = load i8*, i8** %p, align 8
  %add.ptr64 = getelementptr inbounds i8, i8* %62, i64 4
  store i8* %add.ptr64, i8** %p, align 8
  br label %for.inc65

for.inc65:                                        ; preds = %for.body58
  %63 = load i32, i32* %i, align 4
  %inc66 = add i32 %63, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond55

for.end67:                                        ; preds = %for.cond55
  br label %if.end68

if.end68:                                         ; preds = %for.end67, %for.end53
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %for.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__expand_png_palette(%struct.stbi__png* %a, i8* %palette, i32 %len, i32 %pal_img_n) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.stbi__png*, align 8
  %palette.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %pal_img_n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %pixel_count = alloca i32, align 4
  %p = alloca i8*, align 8
  %temp_out = alloca i8*, align 8
  %orig = alloca i8*, align 8
  %n = alloca i32, align 4
  %n21 = alloca i32, align 4
  store %struct.stbi__png* %a, %struct.stbi__png** %a.addr, align 8
  store i8* %palette, i8** %palette.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 %pal_img_n, i32* %pal_img_n.addr, align 4
  %0 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %0, i32 0, i32 0
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %1, i32 0, i32 0
  %2 = load i32, i32* %img_x, align 8
  %3 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %3, i32 0, i32 0
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s1, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 1
  %5 = load i32, i32* %img_y, align 4
  %mul = mul i32 %2, %5
  store i32 %mul, i32* %pixel_count, align 4
  %6 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %6, i32 0, i32 3
  %7 = load i8*, i8** %out, align 8
  store i8* %7, i8** %orig, align 8
  %8 = load i32, i32* %pixel_count, align 4
  %9 = load i32, i32* %pal_img_n.addr, align 4
  %call = call i8* @stbi__malloc_mad2(i32 %8, i32 %9, i32 0)
  store i8* %call, i8** %p, align 8
  %10 = load i8*, i8** %p, align 8
  %cmp = icmp eq i8* %10, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  store i32 %call2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %11 = load i8*, i8** %p, align 8
  store i8* %11, i8** %temp_out, align 8
  %12 = load i32, i32* %pal_img_n.addr, align 4
  %cmp3 = icmp eq i32 %12, 3
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %pixel_count, align 4
  %cmp5 = icmp ult i32 %13, %14
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %orig, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom = zext i32 %16 to i64
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 %idxprom
  %17 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %17 to i32
  %mul6 = mul nsw i32 %conv, 4
  store i32 %mul6, i32* %n, align 4
  %18 = load i8*, i8** %palette.addr, align 8
  %19 = load i32, i32* %n, align 4
  %idxprom7 = sext i32 %19 to i64
  %arrayidx8 = getelementptr inbounds i8, i8* %18, i64 %idxprom7
  %20 = load i8, i8* %arrayidx8, align 1
  %21 = load i8*, i8** %p, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %21, i64 0
  store i8 %20, i8* %arrayidx9, align 1
  %22 = load i8*, i8** %palette.addr, align 8
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %23, 1
  %idxprom10 = sext i32 %add to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %22, i64 %idxprom10
  %24 = load i8, i8* %arrayidx11, align 1
  %25 = load i8*, i8** %p, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %24, i8* %arrayidx12, align 1
  %26 = load i8*, i8** %palette.addr, align 8
  %27 = load i32, i32* %n, align 4
  %add13 = add nsw i32 %27, 2
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds i8, i8* %26, i64 %idxprom14
  %28 = load i8, i8* %arrayidx15, align 1
  %29 = load i8*, i8** %p, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %29, i64 2
  store i8 %28, i8* %arrayidx16, align 1
  %30 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %30, i64 3
  store i8* %add.ptr, i8** %p, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %inc = add i32 %31, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end45

if.else:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc42, %if.else
  %32 = load i32, i32* %i, align 4
  %33 = load i32, i32* %pixel_count, align 4
  %cmp18 = icmp ult i32 %32, %33
  br i1 %cmp18, label %for.body20, label %for.end44

for.body20:                                       ; preds = %for.cond17
  %34 = load i8*, i8** %orig, align 8
  %35 = load i32, i32* %i, align 4
  %idxprom22 = zext i32 %35 to i64
  %arrayidx23 = getelementptr inbounds i8, i8* %34, i64 %idxprom22
  %36 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %36 to i32
  %mul25 = mul nsw i32 %conv24, 4
  store i32 %mul25, i32* %n21, align 4
  %37 = load i8*, i8** %palette.addr, align 8
  %38 = load i32, i32* %n21, align 4
  %idxprom26 = sext i32 %38 to i64
  %arrayidx27 = getelementptr inbounds i8, i8* %37, i64 %idxprom26
  %39 = load i8, i8* %arrayidx27, align 1
  %40 = load i8*, i8** %p, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %40, i64 0
  store i8 %39, i8* %arrayidx28, align 1
  %41 = load i8*, i8** %palette.addr, align 8
  %42 = load i32, i32* %n21, align 4
  %add29 = add nsw i32 %42, 1
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i8, i8* %41, i64 %idxprom30
  %43 = load i8, i8* %arrayidx31, align 1
  %44 = load i8*, i8** %p, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 %43, i8* %arrayidx32, align 1
  %45 = load i8*, i8** %palette.addr, align 8
  %46 = load i32, i32* %n21, align 4
  %add33 = add nsw i32 %46, 2
  %idxprom34 = sext i32 %add33 to i64
  %arrayidx35 = getelementptr inbounds i8, i8* %45, i64 %idxprom34
  %47 = load i8, i8* %arrayidx35, align 1
  %48 = load i8*, i8** %p, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %48, i64 2
  store i8 %47, i8* %arrayidx36, align 1
  %49 = load i8*, i8** %palette.addr, align 8
  %50 = load i32, i32* %n21, align 4
  %add37 = add nsw i32 %50, 3
  %idxprom38 = sext i32 %add37 to i64
  %arrayidx39 = getelementptr inbounds i8, i8* %49, i64 %idxprom38
  %51 = load i8, i8* %arrayidx39, align 1
  %52 = load i8*, i8** %p, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %52, i64 3
  store i8 %51, i8* %arrayidx40, align 1
  %53 = load i8*, i8** %p, align 8
  %add.ptr41 = getelementptr inbounds i8, i8* %53, i64 4
  store i8* %add.ptr41, i8** %p, align 8
  br label %for.inc42

for.inc42:                                        ; preds = %for.body20
  %54 = load i32, i32* %i, align 4
  %inc43 = add i32 %54, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond17

for.end44:                                        ; preds = %for.cond17
  br label %if.end45

if.end45:                                         ; preds = %for.end44, %for.end
  %55 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out46 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %55, i32 0, i32 3
  %56 = load i8*, i8** %out46, align 8
  call void @free(i8* %56) #10
  %57 = load i8*, i8** %temp_out, align 8
  %58 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out47 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %58, i32 0, i32 3
  store i8* %57, i8** %out47, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end45, %if.then
  %59 = load i32, i32* %retval, align 4
  ret i32 %59
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__create_png_image_raw(%struct.stbi__png* %a, i8* %raw, i32 %raw_len, i32 %out_n, i32 %x, i32 %y, i32 %depth, i32 %color) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.stbi__png*, align 8
  %raw.addr = alloca i8*, align 8
  %raw_len.addr = alloca i32, align 4
  %out_n.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %color.addr = alloca i32, align 4
  %bytes = alloca i32, align 4
  %s = alloca %struct.stbi__context*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %stride = alloca i32, align 4
  %img_len = alloca i32, align 4
  %img_width_bytes = alloca i32, align 4
  %k = alloca i32, align 4
  %img_n = alloca i32, align 4
  %output_bytes = alloca i32, align 4
  %filter_bytes = alloca i32, align 4
  %width = alloca i32, align 4
  %cur = alloca i8*, align 8
  %prior = alloca i8*, align 8
  %filter = alloca i32, align 4
  %nk = alloca i32, align 4
  %cur598 = alloca i8*, align 8
  %in = alloca i8*, align 8
  %scale = alloca i8, align 1
  %q = alloca i32, align 4
  %cur950 = alloca i8*, align 8
  %cur16 = alloca i16*, align 8
  store %struct.stbi__png* %a, %struct.stbi__png** %a.addr, align 8
  store i8* %raw, i8** %raw.addr, align 8
  store i32 %raw_len, i32* %raw_len.addr, align 4
  store i32 %out_n, i32* %out_n.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %color, i32* %color.addr, align 4
  %0 = load i32, i32* %depth.addr, align 4
  %cmp = icmp eq i32 %0, 16
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 2, i32 1
  store i32 %cond, i32* %bytes, align 4
  %2 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %2, i32 0, i32 0
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s1, align 8
  store %struct.stbi__context* %3, %struct.stbi__context** %s, align 8
  %4 = load i32, i32* %x.addr, align 4
  %5 = load i32, i32* %out_n.addr, align 4
  %mul = mul i32 %4, %5
  %6 = load i32, i32* %bytes, align 4
  %mul2 = mul i32 %mul, %6
  store i32 %mul2, i32* %stride, align 4
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n3 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %7, i32 0, i32 2
  %8 = load i32, i32* %img_n3, align 8
  store i32 %8, i32* %img_n, align 4
  %9 = load i32, i32* %out_n.addr, align 4
  %10 = load i32, i32* %bytes, align 4
  %mul4 = mul nsw i32 %9, %10
  store i32 %mul4, i32* %output_bytes, align 4
  %11 = load i32, i32* %img_n, align 4
  %12 = load i32, i32* %bytes, align 4
  %mul5 = mul nsw i32 %11, %12
  store i32 %mul5, i32* %filter_bytes, align 4
  %13 = load i32, i32* %x.addr, align 4
  store i32 %13, i32* %width, align 4
  %14 = load i32, i32* %out_n.addr, align 4
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n6 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %15, i32 0, i32 2
  %16 = load i32, i32* %img_n6, align 8
  %cmp7 = icmp eq i32 %14, %16
  br i1 %cmp7, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %17 = load i32, i32* %out_n.addr, align 4
  %18 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n8 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %18, i32 0, i32 2
  %19 = load i32, i32* %img_n8, align 8
  %add = add nsw i32 %19, 1
  %cmp9 = icmp eq i32 %17, %add
  br i1 %cmp9, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  call void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.84, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 4552, i8* getelementptr inbounds ([112 x i8], [112 x i8]* @__PRETTY_FUNCTION__.stbi__create_png_image_raw, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %20 = load i32, i32* %x.addr, align 4
  %21 = load i32, i32* %y.addr, align 4
  %22 = load i32, i32* %output_bytes, align 4
  %call = call i8* @stbi__malloc_mad3(i32 %20, i32 %21, i32 %22, i32 0)
  %23 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %23, i32 0, i32 3
  store i8* %call, i8** %out, align 8
  %24 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out10 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %24, i32 0, i32 3
  %25 = load i8*, i8** %out10, align 8
  %tobool = icmp ne i8* %25, null
  br i1 %tobool, label %if.end13, label %if.then11

if.then11:                                        ; preds = %if.end
  %call12 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  store i32 %call12, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.end
  %26 = load i32, i32* %img_n, align 4
  %27 = load i32, i32* %x.addr, align 4
  %28 = load i32, i32* %depth.addr, align 4
  %call14 = call i32 @stbi__mad3sizes_valid(i32 %26, i32 %27, i32 %28, i32 7)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end18, label %if.then16

if.then16:                                        ; preds = %if.end13
  %call17 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  store i32 %call17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end13
  %29 = load i32, i32* %img_n, align 4
  %30 = load i32, i32* %x.addr, align 4
  %mul19 = mul i32 %29, %30
  %31 = load i32, i32* %depth.addr, align 4
  %mul20 = mul i32 %mul19, %31
  %add21 = add i32 %mul20, 7
  %shr = lshr i32 %add21, 3
  store i32 %shr, i32* %img_width_bytes, align 4
  %32 = load i32, i32* %img_width_bytes, align 4
  %add22 = add i32 %32, 1
  %33 = load i32, i32* %y.addr, align 4
  %mul23 = mul i32 %add22, %33
  store i32 %mul23, i32* %img_len, align 4
  %34 = load i32, i32* %raw_len.addr, align 4
  %35 = load i32, i32* %img_len, align 4
  %cmp24 = icmp ult i32 %34, %35
  br i1 %cmp24, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.end18
  %call26 = call i32 @stbi__err(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.85, i64 0, i64 0))
  store i32 %call26, i32* %retval, align 4
  br label %return

if.end27:                                         ; preds = %if.end18
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc588, %if.end27
  %36 = load i32, i32* %j, align 4
  %37 = load i32, i32* %y.addr, align 4
  %cmp28 = icmp ult i32 %36, %37
  br i1 %cmp28, label %for.body, label %for.end590

for.body:                                         ; preds = %for.cond
  %38 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out29 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %38, i32 0, i32 3
  %39 = load i8*, i8** %out29, align 8
  %40 = load i32, i32* %stride, align 4
  %41 = load i32, i32* %j, align 4
  %mul30 = mul i32 %40, %41
  %idx.ext = zext i32 %mul30 to i64
  %add.ptr = getelementptr inbounds i8, i8* %39, i64 %idx.ext
  store i8* %add.ptr, i8** %cur, align 8
  %42 = load i8*, i8** %raw.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr, i8** %raw.addr, align 8
  %43 = load i8, i8* %42, align 1
  %conv = zext i8 %43 to i32
  store i32 %conv, i32* %filter, align 4
  %44 = load i32, i32* %filter, align 4
  %cmp31 = icmp sgt i32 %44, 4
  br i1 %cmp31, label %if.then33, label %if.end35

if.then33:                                        ; preds = %for.body
  %call34 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.86, i64 0, i64 0))
  store i32 %call34, i32* %retval, align 4
  br label %return

if.end35:                                         ; preds = %for.body
  %45 = load i32, i32* %depth.addr, align 4
  %cmp36 = icmp slt i32 %45, 8
  br i1 %cmp36, label %if.then38, label %if.end47

if.then38:                                        ; preds = %if.end35
  %46 = load i32, i32* %img_width_bytes, align 4
  %47 = load i32, i32* %x.addr, align 4
  %cmp39 = icmp ugt i32 %46, %47
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.then38
  %call42 = call i32 @stbi__err(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.87, i64 0, i64 0))
  store i32 %call42, i32* %retval, align 4
  br label %return

if.end43:                                         ; preds = %if.then38
  %48 = load i32, i32* %x.addr, align 4
  %49 = load i32, i32* %out_n.addr, align 4
  %mul44 = mul i32 %48, %49
  %50 = load i32, i32* %img_width_bytes, align 4
  %sub = sub i32 %mul44, %50
  %51 = load i8*, i8** %cur, align 8
  %idx.ext45 = zext i32 %sub to i64
  %add.ptr46 = getelementptr inbounds i8, i8* %51, i64 %idx.ext45
  store i8* %add.ptr46, i8** %cur, align 8
  store i32 1, i32* %filter_bytes, align 4
  %52 = load i32, i32* %img_width_bytes, align 4
  store i32 %52, i32* %width, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.end43, %if.end35
  %53 = load i8*, i8** %cur, align 8
  %54 = load i32, i32* %stride, align 4
  %idx.ext48 = zext i32 %54 to i64
  %idx.neg = sub i64 0, %idx.ext48
  %add.ptr49 = getelementptr inbounds i8, i8* %53, i64 %idx.neg
  store i8* %add.ptr49, i8** %prior, align 8
  %55 = load i32, i32* %j, align 4
  %cmp50 = icmp eq i32 %55, 0
  br i1 %cmp50, label %if.then52, label %if.end54

if.then52:                                        ; preds = %if.end47
  %56 = load i32, i32* %filter, align 4
  %idxprom = sext i32 %56 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* @first_row_filter, i64 0, i64 %idxprom
  %57 = load i8, i8* %arrayidx, align 1
  %conv53 = zext i8 %57 to i32
  store i32 %conv53, i32* %filter, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.then52, %if.end47
  store i32 0, i32* %k, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc, %if.end54
  %58 = load i32, i32* %k, align 4
  %59 = load i32, i32* %filter_bytes, align 4
  %cmp56 = icmp slt i32 %58, %59
  br i1 %cmp56, label %for.body58, label %for.end

for.body58:                                       ; preds = %for.cond55
  %60 = load i32, i32* %filter, align 4
  switch i32 %60, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb63
    i32 2, label %sw.bb68
    i32 3, label %sw.bb79
    i32 4, label %sw.bb92
    i32 5, label %sw.bb105
    i32 6, label %sw.bb110
  ]

sw.bb:                                            ; preds = %for.body58
  %61 = load i8*, i8** %raw.addr, align 8
  %62 = load i32, i32* %k, align 4
  %idxprom59 = sext i32 %62 to i64
  %arrayidx60 = getelementptr inbounds i8, i8* %61, i64 %idxprom59
  %63 = load i8, i8* %arrayidx60, align 1
  %64 = load i8*, i8** %cur, align 8
  %65 = load i32, i32* %k, align 4
  %idxprom61 = sext i32 %65 to i64
  %arrayidx62 = getelementptr inbounds i8, i8* %64, i64 %idxprom61
  store i8 %63, i8* %arrayidx62, align 1
  br label %sw.epilog

sw.bb63:                                          ; preds = %for.body58
  %66 = load i8*, i8** %raw.addr, align 8
  %67 = load i32, i32* %k, align 4
  %idxprom64 = sext i32 %67 to i64
  %arrayidx65 = getelementptr inbounds i8, i8* %66, i64 %idxprom64
  %68 = load i8, i8* %arrayidx65, align 1
  %69 = load i8*, i8** %cur, align 8
  %70 = load i32, i32* %k, align 4
  %idxprom66 = sext i32 %70 to i64
  %arrayidx67 = getelementptr inbounds i8, i8* %69, i64 %idxprom66
  store i8 %68, i8* %arrayidx67, align 1
  br label %sw.epilog

sw.bb68:                                          ; preds = %for.body58
  %71 = load i8*, i8** %raw.addr, align 8
  %72 = load i32, i32* %k, align 4
  %idxprom69 = sext i32 %72 to i64
  %arrayidx70 = getelementptr inbounds i8, i8* %71, i64 %idxprom69
  %73 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %73 to i32
  %74 = load i8*, i8** %prior, align 8
  %75 = load i32, i32* %k, align 4
  %idxprom72 = sext i32 %75 to i64
  %arrayidx73 = getelementptr inbounds i8, i8* %74, i64 %idxprom72
  %76 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %76 to i32
  %add75 = add nsw i32 %conv71, %conv74
  %and = and i32 %add75, 255
  %conv76 = trunc i32 %and to i8
  %77 = load i8*, i8** %cur, align 8
  %78 = load i32, i32* %k, align 4
  %idxprom77 = sext i32 %78 to i64
  %arrayidx78 = getelementptr inbounds i8, i8* %77, i64 %idxprom77
  store i8 %conv76, i8* %arrayidx78, align 1
  br label %sw.epilog

sw.bb79:                                          ; preds = %for.body58
  %79 = load i8*, i8** %raw.addr, align 8
  %80 = load i32, i32* %k, align 4
  %idxprom80 = sext i32 %80 to i64
  %arrayidx81 = getelementptr inbounds i8, i8* %79, i64 %idxprom80
  %81 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %81 to i32
  %82 = load i8*, i8** %prior, align 8
  %83 = load i32, i32* %k, align 4
  %idxprom83 = sext i32 %83 to i64
  %arrayidx84 = getelementptr inbounds i8, i8* %82, i64 %idxprom83
  %84 = load i8, i8* %arrayidx84, align 1
  %conv85 = zext i8 %84 to i32
  %shr86 = ashr i32 %conv85, 1
  %add87 = add nsw i32 %conv82, %shr86
  %and88 = and i32 %add87, 255
  %conv89 = trunc i32 %and88 to i8
  %85 = load i8*, i8** %cur, align 8
  %86 = load i32, i32* %k, align 4
  %idxprom90 = sext i32 %86 to i64
  %arrayidx91 = getelementptr inbounds i8, i8* %85, i64 %idxprom90
  store i8 %conv89, i8* %arrayidx91, align 1
  br label %sw.epilog

sw.bb92:                                          ; preds = %for.body58
  %87 = load i8*, i8** %raw.addr, align 8
  %88 = load i32, i32* %k, align 4
  %idxprom93 = sext i32 %88 to i64
  %arrayidx94 = getelementptr inbounds i8, i8* %87, i64 %idxprom93
  %89 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %89 to i32
  %90 = load i8*, i8** %prior, align 8
  %91 = load i32, i32* %k, align 4
  %idxprom96 = sext i32 %91 to i64
  %arrayidx97 = getelementptr inbounds i8, i8* %90, i64 %idxprom96
  %92 = load i8, i8* %arrayidx97, align 1
  %conv98 = zext i8 %92 to i32
  %call99 = call i32 @stbi__paeth(i32 0, i32 %conv98, i32 0)
  %add100 = add nsw i32 %conv95, %call99
  %and101 = and i32 %add100, 255
  %conv102 = trunc i32 %and101 to i8
  %93 = load i8*, i8** %cur, align 8
  %94 = load i32, i32* %k, align 4
  %idxprom103 = sext i32 %94 to i64
  %arrayidx104 = getelementptr inbounds i8, i8* %93, i64 %idxprom103
  store i8 %conv102, i8* %arrayidx104, align 1
  br label %sw.epilog

sw.bb105:                                         ; preds = %for.body58
  %95 = load i8*, i8** %raw.addr, align 8
  %96 = load i32, i32* %k, align 4
  %idxprom106 = sext i32 %96 to i64
  %arrayidx107 = getelementptr inbounds i8, i8* %95, i64 %idxprom106
  %97 = load i8, i8* %arrayidx107, align 1
  %98 = load i8*, i8** %cur, align 8
  %99 = load i32, i32* %k, align 4
  %idxprom108 = sext i32 %99 to i64
  %arrayidx109 = getelementptr inbounds i8, i8* %98, i64 %idxprom108
  store i8 %97, i8* %arrayidx109, align 1
  br label %sw.epilog

sw.bb110:                                         ; preds = %for.body58
  %100 = load i8*, i8** %raw.addr, align 8
  %101 = load i32, i32* %k, align 4
  %idxprom111 = sext i32 %101 to i64
  %arrayidx112 = getelementptr inbounds i8, i8* %100, i64 %idxprom111
  %102 = load i8, i8* %arrayidx112, align 1
  %103 = load i8*, i8** %cur, align 8
  %104 = load i32, i32* %k, align 4
  %idxprom113 = sext i32 %104 to i64
  %arrayidx114 = getelementptr inbounds i8, i8* %103, i64 %idxprom113
  store i8 %102, i8* %arrayidx114, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body58, %sw.bb110, %sw.bb105, %sw.bb92, %sw.bb79, %sw.bb68, %sw.bb63, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %105 = load i32, i32* %k, align 4
  %inc = add nsw i32 %105, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond55

for.end:                                          ; preds = %for.cond55
  %106 = load i32, i32* %depth.addr, align 4
  %cmp115 = icmp eq i32 %106, 8
  br i1 %cmp115, label %if.then117, label %if.else130

if.then117:                                       ; preds = %for.end
  %107 = load i32, i32* %img_n, align 4
  %108 = load i32, i32* %out_n.addr, align 4
  %cmp118 = icmp ne i32 %107, %108
  br i1 %cmp118, label %if.then120, label %if.end123

if.then120:                                       ; preds = %if.then117
  %109 = load i8*, i8** %cur, align 8
  %110 = load i32, i32* %img_n, align 4
  %idxprom121 = sext i32 %110 to i64
  %arrayidx122 = getelementptr inbounds i8, i8* %109, i64 %idxprom121
  store i8 -1, i8* %arrayidx122, align 1
  br label %if.end123

if.end123:                                        ; preds = %if.then120, %if.then117
  %111 = load i32, i32* %img_n, align 4
  %112 = load i8*, i8** %raw.addr, align 8
  %idx.ext124 = sext i32 %111 to i64
  %add.ptr125 = getelementptr inbounds i8, i8* %112, i64 %idx.ext124
  store i8* %add.ptr125, i8** %raw.addr, align 8
  %113 = load i32, i32* %out_n.addr, align 4
  %114 = load i8*, i8** %cur, align 8
  %idx.ext126 = sext i32 %113 to i64
  %add.ptr127 = getelementptr inbounds i8, i8* %114, i64 %idx.ext126
  store i8* %add.ptr127, i8** %cur, align 8
  %115 = load i32, i32* %out_n.addr, align 4
  %116 = load i8*, i8** %prior, align 8
  %idx.ext128 = sext i32 %115 to i64
  %add.ptr129 = getelementptr inbounds i8, i8* %116, i64 %idx.ext128
  store i8* %add.ptr129, i8** %prior, align 8
  br label %if.end154

if.else130:                                       ; preds = %for.end
  %117 = load i32, i32* %depth.addr, align 4
  %cmp131 = icmp eq i32 %117, 16
  br i1 %cmp131, label %if.then133, label %if.else149

if.then133:                                       ; preds = %if.else130
  %118 = load i32, i32* %img_n, align 4
  %119 = load i32, i32* %out_n.addr, align 4
  %cmp134 = icmp ne i32 %118, %119
  br i1 %cmp134, label %if.then136, label %if.end142

if.then136:                                       ; preds = %if.then133
  %120 = load i8*, i8** %cur, align 8
  %121 = load i32, i32* %filter_bytes, align 4
  %idxprom137 = sext i32 %121 to i64
  %arrayidx138 = getelementptr inbounds i8, i8* %120, i64 %idxprom137
  store i8 -1, i8* %arrayidx138, align 1
  %122 = load i8*, i8** %cur, align 8
  %123 = load i32, i32* %filter_bytes, align 4
  %add139 = add nsw i32 %123, 1
  %idxprom140 = sext i32 %add139 to i64
  %arrayidx141 = getelementptr inbounds i8, i8* %122, i64 %idxprom140
  store i8 -1, i8* %arrayidx141, align 1
  br label %if.end142

if.end142:                                        ; preds = %if.then136, %if.then133
  %124 = load i32, i32* %filter_bytes, align 4
  %125 = load i8*, i8** %raw.addr, align 8
  %idx.ext143 = sext i32 %124 to i64
  %add.ptr144 = getelementptr inbounds i8, i8* %125, i64 %idx.ext143
  store i8* %add.ptr144, i8** %raw.addr, align 8
  %126 = load i32, i32* %output_bytes, align 4
  %127 = load i8*, i8** %cur, align 8
  %idx.ext145 = sext i32 %126 to i64
  %add.ptr146 = getelementptr inbounds i8, i8* %127, i64 %idx.ext145
  store i8* %add.ptr146, i8** %cur, align 8
  %128 = load i32, i32* %output_bytes, align 4
  %129 = load i8*, i8** %prior, align 8
  %idx.ext147 = sext i32 %128 to i64
  %add.ptr148 = getelementptr inbounds i8, i8* %129, i64 %idx.ext147
  store i8* %add.ptr148, i8** %prior, align 8
  br label %if.end153

if.else149:                                       ; preds = %if.else130
  %130 = load i8*, i8** %raw.addr, align 8
  %add.ptr150 = getelementptr inbounds i8, i8* %130, i64 1
  store i8* %add.ptr150, i8** %raw.addr, align 8
  %131 = load i8*, i8** %cur, align 8
  %add.ptr151 = getelementptr inbounds i8, i8* %131, i64 1
  store i8* %add.ptr151, i8** %cur, align 8
  %132 = load i8*, i8** %prior, align 8
  %add.ptr152 = getelementptr inbounds i8, i8* %132, i64 1
  store i8* %add.ptr152, i8** %prior, align 8
  br label %if.end153

if.end153:                                        ; preds = %if.else149, %if.end142
  br label %if.end154

if.end154:                                        ; preds = %if.end153, %if.end123
  %133 = load i32, i32* %depth.addr, align 4
  %cmp155 = icmp slt i32 %133, 8
  br i1 %cmp155, label %if.then160, label %lor.lhs.false157

lor.lhs.false157:                                 ; preds = %if.end154
  %134 = load i32, i32* %img_n, align 4
  %135 = load i32, i32* %out_n.addr, align 4
  %cmp158 = icmp eq i32 %134, %135
  br i1 %cmp158, label %if.then160, label %if.else302

if.then160:                                       ; preds = %lor.lhs.false157, %if.end154
  %136 = load i32, i32* %width, align 4
  %sub161 = sub nsw i32 %136, 1
  %137 = load i32, i32* %filter_bytes, align 4
  %mul162 = mul nsw i32 %sub161, %137
  store i32 %mul162, i32* %nk, align 4
  %138 = load i32, i32* %filter, align 4
  switch i32 %138, label %sw.epilog299 [
    i32 0, label %sw.bb163
    i32 1, label %sw.bb165
    i32 2, label %sw.bb185
    i32 3, label %sw.bb204
    i32 4, label %sw.bb229
    i32 5, label %sw.bb257
    i32 6, label %sw.bb278
  ]

sw.bb163:                                         ; preds = %if.then160
  %139 = load i8*, i8** %cur, align 8
  %140 = load i8*, i8** %raw.addr, align 8
  %141 = load i32, i32* %nk, align 4
  %conv164 = sext i32 %141 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 %140, i64 %conv164, i1 false)
  br label %sw.epilog299

sw.bb165:                                         ; preds = %if.then160
  store i32 0, i32* %k, align 4
  br label %for.cond166

for.cond166:                                      ; preds = %for.inc182, %sw.bb165
  %142 = load i32, i32* %k, align 4
  %143 = load i32, i32* %nk, align 4
  %cmp167 = icmp slt i32 %142, %143
  br i1 %cmp167, label %for.body169, label %for.end184

for.body169:                                      ; preds = %for.cond166
  %144 = load i8*, i8** %raw.addr, align 8
  %145 = load i32, i32* %k, align 4
  %idxprom170 = sext i32 %145 to i64
  %arrayidx171 = getelementptr inbounds i8, i8* %144, i64 %idxprom170
  %146 = load i8, i8* %arrayidx171, align 1
  %conv172 = zext i8 %146 to i32
  %147 = load i8*, i8** %cur, align 8
  %148 = load i32, i32* %k, align 4
  %149 = load i32, i32* %filter_bytes, align 4
  %sub173 = sub nsw i32 %148, %149
  %idxprom174 = sext i32 %sub173 to i64
  %arrayidx175 = getelementptr inbounds i8, i8* %147, i64 %idxprom174
  %150 = load i8, i8* %arrayidx175, align 1
  %conv176 = zext i8 %150 to i32
  %add177 = add nsw i32 %conv172, %conv176
  %and178 = and i32 %add177, 255
  %conv179 = trunc i32 %and178 to i8
  %151 = load i8*, i8** %cur, align 8
  %152 = load i32, i32* %k, align 4
  %idxprom180 = sext i32 %152 to i64
  %arrayidx181 = getelementptr inbounds i8, i8* %151, i64 %idxprom180
  store i8 %conv179, i8* %arrayidx181, align 1
  br label %for.inc182

for.inc182:                                       ; preds = %for.body169
  %153 = load i32, i32* %k, align 4
  %inc183 = add nsw i32 %153, 1
  store i32 %inc183, i32* %k, align 4
  br label %for.cond166

for.end184:                                       ; preds = %for.cond166
  br label %sw.epilog299

sw.bb185:                                         ; preds = %if.then160
  store i32 0, i32* %k, align 4
  br label %for.cond186

for.cond186:                                      ; preds = %for.inc201, %sw.bb185
  %154 = load i32, i32* %k, align 4
  %155 = load i32, i32* %nk, align 4
  %cmp187 = icmp slt i32 %154, %155
  br i1 %cmp187, label %for.body189, label %for.end203

for.body189:                                      ; preds = %for.cond186
  %156 = load i8*, i8** %raw.addr, align 8
  %157 = load i32, i32* %k, align 4
  %idxprom190 = sext i32 %157 to i64
  %arrayidx191 = getelementptr inbounds i8, i8* %156, i64 %idxprom190
  %158 = load i8, i8* %arrayidx191, align 1
  %conv192 = zext i8 %158 to i32
  %159 = load i8*, i8** %prior, align 8
  %160 = load i32, i32* %k, align 4
  %idxprom193 = sext i32 %160 to i64
  %arrayidx194 = getelementptr inbounds i8, i8* %159, i64 %idxprom193
  %161 = load i8, i8* %arrayidx194, align 1
  %conv195 = zext i8 %161 to i32
  %add196 = add nsw i32 %conv192, %conv195
  %and197 = and i32 %add196, 255
  %conv198 = trunc i32 %and197 to i8
  %162 = load i8*, i8** %cur, align 8
  %163 = load i32, i32* %k, align 4
  %idxprom199 = sext i32 %163 to i64
  %arrayidx200 = getelementptr inbounds i8, i8* %162, i64 %idxprom199
  store i8 %conv198, i8* %arrayidx200, align 1
  br label %for.inc201

for.inc201:                                       ; preds = %for.body189
  %164 = load i32, i32* %k, align 4
  %inc202 = add nsw i32 %164, 1
  store i32 %inc202, i32* %k, align 4
  br label %for.cond186

for.end203:                                       ; preds = %for.cond186
  br label %sw.epilog299

sw.bb204:                                         ; preds = %if.then160
  store i32 0, i32* %k, align 4
  br label %for.cond205

for.cond205:                                      ; preds = %for.inc226, %sw.bb204
  %165 = load i32, i32* %k, align 4
  %166 = load i32, i32* %nk, align 4
  %cmp206 = icmp slt i32 %165, %166
  br i1 %cmp206, label %for.body208, label %for.end228

for.body208:                                      ; preds = %for.cond205
  %167 = load i8*, i8** %raw.addr, align 8
  %168 = load i32, i32* %k, align 4
  %idxprom209 = sext i32 %168 to i64
  %arrayidx210 = getelementptr inbounds i8, i8* %167, i64 %idxprom209
  %169 = load i8, i8* %arrayidx210, align 1
  %conv211 = zext i8 %169 to i32
  %170 = load i8*, i8** %prior, align 8
  %171 = load i32, i32* %k, align 4
  %idxprom212 = sext i32 %171 to i64
  %arrayidx213 = getelementptr inbounds i8, i8* %170, i64 %idxprom212
  %172 = load i8, i8* %arrayidx213, align 1
  %conv214 = zext i8 %172 to i32
  %173 = load i8*, i8** %cur, align 8
  %174 = load i32, i32* %k, align 4
  %175 = load i32, i32* %filter_bytes, align 4
  %sub215 = sub nsw i32 %174, %175
  %idxprom216 = sext i32 %sub215 to i64
  %arrayidx217 = getelementptr inbounds i8, i8* %173, i64 %idxprom216
  %176 = load i8, i8* %arrayidx217, align 1
  %conv218 = zext i8 %176 to i32
  %add219 = add nsw i32 %conv214, %conv218
  %shr220 = ashr i32 %add219, 1
  %add221 = add nsw i32 %conv211, %shr220
  %and222 = and i32 %add221, 255
  %conv223 = trunc i32 %and222 to i8
  %177 = load i8*, i8** %cur, align 8
  %178 = load i32, i32* %k, align 4
  %idxprom224 = sext i32 %178 to i64
  %arrayidx225 = getelementptr inbounds i8, i8* %177, i64 %idxprom224
  store i8 %conv223, i8* %arrayidx225, align 1
  br label %for.inc226

for.inc226:                                       ; preds = %for.body208
  %179 = load i32, i32* %k, align 4
  %inc227 = add nsw i32 %179, 1
  store i32 %inc227, i32* %k, align 4
  br label %for.cond205

for.end228:                                       ; preds = %for.cond205
  br label %sw.epilog299

sw.bb229:                                         ; preds = %if.then160
  store i32 0, i32* %k, align 4
  br label %for.cond230

for.cond230:                                      ; preds = %for.inc254, %sw.bb229
  %180 = load i32, i32* %k, align 4
  %181 = load i32, i32* %nk, align 4
  %cmp231 = icmp slt i32 %180, %181
  br i1 %cmp231, label %for.body233, label %for.end256

for.body233:                                      ; preds = %for.cond230
  %182 = load i8*, i8** %raw.addr, align 8
  %183 = load i32, i32* %k, align 4
  %idxprom234 = sext i32 %183 to i64
  %arrayidx235 = getelementptr inbounds i8, i8* %182, i64 %idxprom234
  %184 = load i8, i8* %arrayidx235, align 1
  %conv236 = zext i8 %184 to i32
  %185 = load i8*, i8** %cur, align 8
  %186 = load i32, i32* %k, align 4
  %187 = load i32, i32* %filter_bytes, align 4
  %sub237 = sub nsw i32 %186, %187
  %idxprom238 = sext i32 %sub237 to i64
  %arrayidx239 = getelementptr inbounds i8, i8* %185, i64 %idxprom238
  %188 = load i8, i8* %arrayidx239, align 1
  %conv240 = zext i8 %188 to i32
  %189 = load i8*, i8** %prior, align 8
  %190 = load i32, i32* %k, align 4
  %idxprom241 = sext i32 %190 to i64
  %arrayidx242 = getelementptr inbounds i8, i8* %189, i64 %idxprom241
  %191 = load i8, i8* %arrayidx242, align 1
  %conv243 = zext i8 %191 to i32
  %192 = load i8*, i8** %prior, align 8
  %193 = load i32, i32* %k, align 4
  %194 = load i32, i32* %filter_bytes, align 4
  %sub244 = sub nsw i32 %193, %194
  %idxprom245 = sext i32 %sub244 to i64
  %arrayidx246 = getelementptr inbounds i8, i8* %192, i64 %idxprom245
  %195 = load i8, i8* %arrayidx246, align 1
  %conv247 = zext i8 %195 to i32
  %call248 = call i32 @stbi__paeth(i32 %conv240, i32 %conv243, i32 %conv247)
  %add249 = add nsw i32 %conv236, %call248
  %and250 = and i32 %add249, 255
  %conv251 = trunc i32 %and250 to i8
  %196 = load i8*, i8** %cur, align 8
  %197 = load i32, i32* %k, align 4
  %idxprom252 = sext i32 %197 to i64
  %arrayidx253 = getelementptr inbounds i8, i8* %196, i64 %idxprom252
  store i8 %conv251, i8* %arrayidx253, align 1
  br label %for.inc254

for.inc254:                                       ; preds = %for.body233
  %198 = load i32, i32* %k, align 4
  %inc255 = add nsw i32 %198, 1
  store i32 %inc255, i32* %k, align 4
  br label %for.cond230

for.end256:                                       ; preds = %for.cond230
  br label %sw.epilog299

sw.bb257:                                         ; preds = %if.then160
  store i32 0, i32* %k, align 4
  br label %for.cond258

for.cond258:                                      ; preds = %for.inc275, %sw.bb257
  %199 = load i32, i32* %k, align 4
  %200 = load i32, i32* %nk, align 4
  %cmp259 = icmp slt i32 %199, %200
  br i1 %cmp259, label %for.body261, label %for.end277

for.body261:                                      ; preds = %for.cond258
  %201 = load i8*, i8** %raw.addr, align 8
  %202 = load i32, i32* %k, align 4
  %idxprom262 = sext i32 %202 to i64
  %arrayidx263 = getelementptr inbounds i8, i8* %201, i64 %idxprom262
  %203 = load i8, i8* %arrayidx263, align 1
  %conv264 = zext i8 %203 to i32
  %204 = load i8*, i8** %cur, align 8
  %205 = load i32, i32* %k, align 4
  %206 = load i32, i32* %filter_bytes, align 4
  %sub265 = sub nsw i32 %205, %206
  %idxprom266 = sext i32 %sub265 to i64
  %arrayidx267 = getelementptr inbounds i8, i8* %204, i64 %idxprom266
  %207 = load i8, i8* %arrayidx267, align 1
  %conv268 = zext i8 %207 to i32
  %shr269 = ashr i32 %conv268, 1
  %add270 = add nsw i32 %conv264, %shr269
  %and271 = and i32 %add270, 255
  %conv272 = trunc i32 %and271 to i8
  %208 = load i8*, i8** %cur, align 8
  %209 = load i32, i32* %k, align 4
  %idxprom273 = sext i32 %209 to i64
  %arrayidx274 = getelementptr inbounds i8, i8* %208, i64 %idxprom273
  store i8 %conv272, i8* %arrayidx274, align 1
  br label %for.inc275

for.inc275:                                       ; preds = %for.body261
  %210 = load i32, i32* %k, align 4
  %inc276 = add nsw i32 %210, 1
  store i32 %inc276, i32* %k, align 4
  br label %for.cond258

for.end277:                                       ; preds = %for.cond258
  br label %sw.epilog299

sw.bb278:                                         ; preds = %if.then160
  store i32 0, i32* %k, align 4
  br label %for.cond279

for.cond279:                                      ; preds = %for.inc296, %sw.bb278
  %211 = load i32, i32* %k, align 4
  %212 = load i32, i32* %nk, align 4
  %cmp280 = icmp slt i32 %211, %212
  br i1 %cmp280, label %for.body282, label %for.end298

for.body282:                                      ; preds = %for.cond279
  %213 = load i8*, i8** %raw.addr, align 8
  %214 = load i32, i32* %k, align 4
  %idxprom283 = sext i32 %214 to i64
  %arrayidx284 = getelementptr inbounds i8, i8* %213, i64 %idxprom283
  %215 = load i8, i8* %arrayidx284, align 1
  %conv285 = zext i8 %215 to i32
  %216 = load i8*, i8** %cur, align 8
  %217 = load i32, i32* %k, align 4
  %218 = load i32, i32* %filter_bytes, align 4
  %sub286 = sub nsw i32 %217, %218
  %idxprom287 = sext i32 %sub286 to i64
  %arrayidx288 = getelementptr inbounds i8, i8* %216, i64 %idxprom287
  %219 = load i8, i8* %arrayidx288, align 1
  %conv289 = zext i8 %219 to i32
  %call290 = call i32 @stbi__paeth(i32 %conv289, i32 0, i32 0)
  %add291 = add nsw i32 %conv285, %call290
  %and292 = and i32 %add291, 255
  %conv293 = trunc i32 %and292 to i8
  %220 = load i8*, i8** %cur, align 8
  %221 = load i32, i32* %k, align 4
  %idxprom294 = sext i32 %221 to i64
  %arrayidx295 = getelementptr inbounds i8, i8* %220, i64 %idxprom294
  store i8 %conv293, i8* %arrayidx295, align 1
  br label %for.inc296

for.inc296:                                       ; preds = %for.body282
  %222 = load i32, i32* %k, align 4
  %inc297 = add nsw i32 %222, 1
  store i32 %inc297, i32* %k, align 4
  br label %for.cond279

for.end298:                                       ; preds = %for.cond279
  br label %sw.epilog299

sw.epilog299:                                     ; preds = %if.then160, %for.end298, %for.end277, %for.end256, %for.end228, %for.end203, %for.end184, %sw.bb163
  %223 = load i32, i32* %nk, align 4
  %224 = load i8*, i8** %raw.addr, align 8
  %idx.ext300 = sext i32 %223 to i64
  %add.ptr301 = getelementptr inbounds i8, i8* %224, i64 %idx.ext300
  store i8* %add.ptr301, i8** %raw.addr, align 8
  br label %if.end587

if.else302:                                       ; preds = %lor.lhs.false157
  %225 = load i32, i32* %img_n, align 4
  %add303 = add nsw i32 %225, 1
  %226 = load i32, i32* %out_n.addr, align 4
  %cmp304 = icmp eq i32 %add303, %226
  br i1 %cmp304, label %if.then306, label %if.else307

if.then306:                                       ; preds = %if.else302
  br label %if.end308

if.else307:                                       ; preds = %if.else302
  call void @__assert_fail(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.88, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 4636, i8* getelementptr inbounds ([112 x i8], [112 x i8]* @__PRETTY_FUNCTION__.stbi__create_png_image_raw, i64 0, i64 0)) #11
  unreachable

if.end308:                                        ; preds = %if.then306
  %227 = load i32, i32* %filter, align 4
  switch i32 %227, label %sw.epilog566 [
    i32 0, label %sw.bb309
    i32 1, label %sw.bb336
    i32 2, label %sw.bb372
    i32 3, label %sw.bb407
    i32 4, label %sw.bb448
    i32 5, label %sw.bb492
    i32 6, label %sw.bb529
  ]

sw.bb309:                                         ; preds = %if.end308
  %228 = load i32, i32* %x.addr, align 4
  %sub310 = sub i32 %228, 1
  store i32 %sub310, i32* %i, align 4
  br label %for.cond311

for.cond311:                                      ; preds = %for.inc326, %sw.bb309
  %229 = load i32, i32* %i, align 4
  %cmp312 = icmp uge i32 %229, 1
  br i1 %cmp312, label %for.body314, label %for.end335

for.body314:                                      ; preds = %for.cond311
  store i32 0, i32* %k, align 4
  br label %for.cond315

for.cond315:                                      ; preds = %for.inc323, %for.body314
  %230 = load i32, i32* %k, align 4
  %231 = load i32, i32* %filter_bytes, align 4
  %cmp316 = icmp slt i32 %230, %231
  br i1 %cmp316, label %for.body318, label %for.end325

for.body318:                                      ; preds = %for.cond315
  %232 = load i8*, i8** %raw.addr, align 8
  %233 = load i32, i32* %k, align 4
  %idxprom319 = sext i32 %233 to i64
  %arrayidx320 = getelementptr inbounds i8, i8* %232, i64 %idxprom319
  %234 = load i8, i8* %arrayidx320, align 1
  %235 = load i8*, i8** %cur, align 8
  %236 = load i32, i32* %k, align 4
  %idxprom321 = sext i32 %236 to i64
  %arrayidx322 = getelementptr inbounds i8, i8* %235, i64 %idxprom321
  store i8 %234, i8* %arrayidx322, align 1
  br label %for.inc323

for.inc323:                                       ; preds = %for.body318
  %237 = load i32, i32* %k, align 4
  %inc324 = add nsw i32 %237, 1
  store i32 %inc324, i32* %k, align 4
  br label %for.cond315

for.end325:                                       ; preds = %for.cond315
  br label %for.inc326

for.inc326:                                       ; preds = %for.end325
  %238 = load i32, i32* %i, align 4
  %dec = add i32 %238, -1
  store i32 %dec, i32* %i, align 4
  %239 = load i8*, i8** %cur, align 8
  %240 = load i32, i32* %filter_bytes, align 4
  %idxprom327 = sext i32 %240 to i64
  %arrayidx328 = getelementptr inbounds i8, i8* %239, i64 %idxprom327
  store i8 -1, i8* %arrayidx328, align 1
  %241 = load i32, i32* %filter_bytes, align 4
  %242 = load i8*, i8** %raw.addr, align 8
  %idx.ext329 = sext i32 %241 to i64
  %add.ptr330 = getelementptr inbounds i8, i8* %242, i64 %idx.ext329
  store i8* %add.ptr330, i8** %raw.addr, align 8
  %243 = load i32, i32* %output_bytes, align 4
  %244 = load i8*, i8** %cur, align 8
  %idx.ext331 = sext i32 %243 to i64
  %add.ptr332 = getelementptr inbounds i8, i8* %244, i64 %idx.ext331
  store i8* %add.ptr332, i8** %cur, align 8
  %245 = load i32, i32* %output_bytes, align 4
  %246 = load i8*, i8** %prior, align 8
  %idx.ext333 = sext i32 %245 to i64
  %add.ptr334 = getelementptr inbounds i8, i8* %246, i64 %idx.ext333
  store i8* %add.ptr334, i8** %prior, align 8
  br label %for.cond311

for.end335:                                       ; preds = %for.cond311
  br label %sw.epilog566

sw.bb336:                                         ; preds = %if.end308
  %247 = load i32, i32* %x.addr, align 4
  %sub337 = sub i32 %247, 1
  store i32 %sub337, i32* %i, align 4
  br label %for.cond338

for.cond338:                                      ; preds = %for.inc361, %sw.bb336
  %248 = load i32, i32* %i, align 4
  %cmp339 = icmp uge i32 %248, 1
  br i1 %cmp339, label %for.body341, label %for.end371

for.body341:                                      ; preds = %for.cond338
  store i32 0, i32* %k, align 4
  br label %for.cond342

for.cond342:                                      ; preds = %for.inc358, %for.body341
  %249 = load i32, i32* %k, align 4
  %250 = load i32, i32* %filter_bytes, align 4
  %cmp343 = icmp slt i32 %249, %250
  br i1 %cmp343, label %for.body345, label %for.end360

for.body345:                                      ; preds = %for.cond342
  %251 = load i8*, i8** %raw.addr, align 8
  %252 = load i32, i32* %k, align 4
  %idxprom346 = sext i32 %252 to i64
  %arrayidx347 = getelementptr inbounds i8, i8* %251, i64 %idxprom346
  %253 = load i8, i8* %arrayidx347, align 1
  %conv348 = zext i8 %253 to i32
  %254 = load i8*, i8** %cur, align 8
  %255 = load i32, i32* %k, align 4
  %256 = load i32, i32* %output_bytes, align 4
  %sub349 = sub nsw i32 %255, %256
  %idxprom350 = sext i32 %sub349 to i64
  %arrayidx351 = getelementptr inbounds i8, i8* %254, i64 %idxprom350
  %257 = load i8, i8* %arrayidx351, align 1
  %conv352 = zext i8 %257 to i32
  %add353 = add nsw i32 %conv348, %conv352
  %and354 = and i32 %add353, 255
  %conv355 = trunc i32 %and354 to i8
  %258 = load i8*, i8** %cur, align 8
  %259 = load i32, i32* %k, align 4
  %idxprom356 = sext i32 %259 to i64
  %arrayidx357 = getelementptr inbounds i8, i8* %258, i64 %idxprom356
  store i8 %conv355, i8* %arrayidx357, align 1
  br label %for.inc358

for.inc358:                                       ; preds = %for.body345
  %260 = load i32, i32* %k, align 4
  %inc359 = add nsw i32 %260, 1
  store i32 %inc359, i32* %k, align 4
  br label %for.cond342

for.end360:                                       ; preds = %for.cond342
  br label %for.inc361

for.inc361:                                       ; preds = %for.end360
  %261 = load i32, i32* %i, align 4
  %dec362 = add i32 %261, -1
  store i32 %dec362, i32* %i, align 4
  %262 = load i8*, i8** %cur, align 8
  %263 = load i32, i32* %filter_bytes, align 4
  %idxprom363 = sext i32 %263 to i64
  %arrayidx364 = getelementptr inbounds i8, i8* %262, i64 %idxprom363
  store i8 -1, i8* %arrayidx364, align 1
  %264 = load i32, i32* %filter_bytes, align 4
  %265 = load i8*, i8** %raw.addr, align 8
  %idx.ext365 = sext i32 %264 to i64
  %add.ptr366 = getelementptr inbounds i8, i8* %265, i64 %idx.ext365
  store i8* %add.ptr366, i8** %raw.addr, align 8
  %266 = load i32, i32* %output_bytes, align 4
  %267 = load i8*, i8** %cur, align 8
  %idx.ext367 = sext i32 %266 to i64
  %add.ptr368 = getelementptr inbounds i8, i8* %267, i64 %idx.ext367
  store i8* %add.ptr368, i8** %cur, align 8
  %268 = load i32, i32* %output_bytes, align 4
  %269 = load i8*, i8** %prior, align 8
  %idx.ext369 = sext i32 %268 to i64
  %add.ptr370 = getelementptr inbounds i8, i8* %269, i64 %idx.ext369
  store i8* %add.ptr370, i8** %prior, align 8
  br label %for.cond338

for.end371:                                       ; preds = %for.cond338
  br label %sw.epilog566

sw.bb372:                                         ; preds = %if.end308
  %270 = load i32, i32* %x.addr, align 4
  %sub373 = sub i32 %270, 1
  store i32 %sub373, i32* %i, align 4
  br label %for.cond374

for.cond374:                                      ; preds = %for.inc396, %sw.bb372
  %271 = load i32, i32* %i, align 4
  %cmp375 = icmp uge i32 %271, 1
  br i1 %cmp375, label %for.body377, label %for.end406

for.body377:                                      ; preds = %for.cond374
  store i32 0, i32* %k, align 4
  br label %for.cond378

for.cond378:                                      ; preds = %for.inc393, %for.body377
  %272 = load i32, i32* %k, align 4
  %273 = load i32, i32* %filter_bytes, align 4
  %cmp379 = icmp slt i32 %272, %273
  br i1 %cmp379, label %for.body381, label %for.end395

for.body381:                                      ; preds = %for.cond378
  %274 = load i8*, i8** %raw.addr, align 8
  %275 = load i32, i32* %k, align 4
  %idxprom382 = sext i32 %275 to i64
  %arrayidx383 = getelementptr inbounds i8, i8* %274, i64 %idxprom382
  %276 = load i8, i8* %arrayidx383, align 1
  %conv384 = zext i8 %276 to i32
  %277 = load i8*, i8** %prior, align 8
  %278 = load i32, i32* %k, align 4
  %idxprom385 = sext i32 %278 to i64
  %arrayidx386 = getelementptr inbounds i8, i8* %277, i64 %idxprom385
  %279 = load i8, i8* %arrayidx386, align 1
  %conv387 = zext i8 %279 to i32
  %add388 = add nsw i32 %conv384, %conv387
  %and389 = and i32 %add388, 255
  %conv390 = trunc i32 %and389 to i8
  %280 = load i8*, i8** %cur, align 8
  %281 = load i32, i32* %k, align 4
  %idxprom391 = sext i32 %281 to i64
  %arrayidx392 = getelementptr inbounds i8, i8* %280, i64 %idxprom391
  store i8 %conv390, i8* %arrayidx392, align 1
  br label %for.inc393

for.inc393:                                       ; preds = %for.body381
  %282 = load i32, i32* %k, align 4
  %inc394 = add nsw i32 %282, 1
  store i32 %inc394, i32* %k, align 4
  br label %for.cond378

for.end395:                                       ; preds = %for.cond378
  br label %for.inc396

for.inc396:                                       ; preds = %for.end395
  %283 = load i32, i32* %i, align 4
  %dec397 = add i32 %283, -1
  store i32 %dec397, i32* %i, align 4
  %284 = load i8*, i8** %cur, align 8
  %285 = load i32, i32* %filter_bytes, align 4
  %idxprom398 = sext i32 %285 to i64
  %arrayidx399 = getelementptr inbounds i8, i8* %284, i64 %idxprom398
  store i8 -1, i8* %arrayidx399, align 1
  %286 = load i32, i32* %filter_bytes, align 4
  %287 = load i8*, i8** %raw.addr, align 8
  %idx.ext400 = sext i32 %286 to i64
  %add.ptr401 = getelementptr inbounds i8, i8* %287, i64 %idx.ext400
  store i8* %add.ptr401, i8** %raw.addr, align 8
  %288 = load i32, i32* %output_bytes, align 4
  %289 = load i8*, i8** %cur, align 8
  %idx.ext402 = sext i32 %288 to i64
  %add.ptr403 = getelementptr inbounds i8, i8* %289, i64 %idx.ext402
  store i8* %add.ptr403, i8** %cur, align 8
  %290 = load i32, i32* %output_bytes, align 4
  %291 = load i8*, i8** %prior, align 8
  %idx.ext404 = sext i32 %290 to i64
  %add.ptr405 = getelementptr inbounds i8, i8* %291, i64 %idx.ext404
  store i8* %add.ptr405, i8** %prior, align 8
  br label %for.cond374

for.end406:                                       ; preds = %for.cond374
  br label %sw.epilog566

sw.bb407:                                         ; preds = %if.end308
  %292 = load i32, i32* %x.addr, align 4
  %sub408 = sub i32 %292, 1
  store i32 %sub408, i32* %i, align 4
  br label %for.cond409

for.cond409:                                      ; preds = %for.inc437, %sw.bb407
  %293 = load i32, i32* %i, align 4
  %cmp410 = icmp uge i32 %293, 1
  br i1 %cmp410, label %for.body412, label %for.end447

for.body412:                                      ; preds = %for.cond409
  store i32 0, i32* %k, align 4
  br label %for.cond413

for.cond413:                                      ; preds = %for.inc434, %for.body412
  %294 = load i32, i32* %k, align 4
  %295 = load i32, i32* %filter_bytes, align 4
  %cmp414 = icmp slt i32 %294, %295
  br i1 %cmp414, label %for.body416, label %for.end436

for.body416:                                      ; preds = %for.cond413
  %296 = load i8*, i8** %raw.addr, align 8
  %297 = load i32, i32* %k, align 4
  %idxprom417 = sext i32 %297 to i64
  %arrayidx418 = getelementptr inbounds i8, i8* %296, i64 %idxprom417
  %298 = load i8, i8* %arrayidx418, align 1
  %conv419 = zext i8 %298 to i32
  %299 = load i8*, i8** %prior, align 8
  %300 = load i32, i32* %k, align 4
  %idxprom420 = sext i32 %300 to i64
  %arrayidx421 = getelementptr inbounds i8, i8* %299, i64 %idxprom420
  %301 = load i8, i8* %arrayidx421, align 1
  %conv422 = zext i8 %301 to i32
  %302 = load i8*, i8** %cur, align 8
  %303 = load i32, i32* %k, align 4
  %304 = load i32, i32* %output_bytes, align 4
  %sub423 = sub nsw i32 %303, %304
  %idxprom424 = sext i32 %sub423 to i64
  %arrayidx425 = getelementptr inbounds i8, i8* %302, i64 %idxprom424
  %305 = load i8, i8* %arrayidx425, align 1
  %conv426 = zext i8 %305 to i32
  %add427 = add nsw i32 %conv422, %conv426
  %shr428 = ashr i32 %add427, 1
  %add429 = add nsw i32 %conv419, %shr428
  %and430 = and i32 %add429, 255
  %conv431 = trunc i32 %and430 to i8
  %306 = load i8*, i8** %cur, align 8
  %307 = load i32, i32* %k, align 4
  %idxprom432 = sext i32 %307 to i64
  %arrayidx433 = getelementptr inbounds i8, i8* %306, i64 %idxprom432
  store i8 %conv431, i8* %arrayidx433, align 1
  br label %for.inc434

for.inc434:                                       ; preds = %for.body416
  %308 = load i32, i32* %k, align 4
  %inc435 = add nsw i32 %308, 1
  store i32 %inc435, i32* %k, align 4
  br label %for.cond413

for.end436:                                       ; preds = %for.cond413
  br label %for.inc437

for.inc437:                                       ; preds = %for.end436
  %309 = load i32, i32* %i, align 4
  %dec438 = add i32 %309, -1
  store i32 %dec438, i32* %i, align 4
  %310 = load i8*, i8** %cur, align 8
  %311 = load i32, i32* %filter_bytes, align 4
  %idxprom439 = sext i32 %311 to i64
  %arrayidx440 = getelementptr inbounds i8, i8* %310, i64 %idxprom439
  store i8 -1, i8* %arrayidx440, align 1
  %312 = load i32, i32* %filter_bytes, align 4
  %313 = load i8*, i8** %raw.addr, align 8
  %idx.ext441 = sext i32 %312 to i64
  %add.ptr442 = getelementptr inbounds i8, i8* %313, i64 %idx.ext441
  store i8* %add.ptr442, i8** %raw.addr, align 8
  %314 = load i32, i32* %output_bytes, align 4
  %315 = load i8*, i8** %cur, align 8
  %idx.ext443 = sext i32 %314 to i64
  %add.ptr444 = getelementptr inbounds i8, i8* %315, i64 %idx.ext443
  store i8* %add.ptr444, i8** %cur, align 8
  %316 = load i32, i32* %output_bytes, align 4
  %317 = load i8*, i8** %prior, align 8
  %idx.ext445 = sext i32 %316 to i64
  %add.ptr446 = getelementptr inbounds i8, i8* %317, i64 %idx.ext445
  store i8* %add.ptr446, i8** %prior, align 8
  br label %for.cond409

for.end447:                                       ; preds = %for.cond409
  br label %sw.epilog566

sw.bb448:                                         ; preds = %if.end308
  %318 = load i32, i32* %x.addr, align 4
  %sub449 = sub i32 %318, 1
  store i32 %sub449, i32* %i, align 4
  br label %for.cond450

for.cond450:                                      ; preds = %for.inc481, %sw.bb448
  %319 = load i32, i32* %i, align 4
  %cmp451 = icmp uge i32 %319, 1
  br i1 %cmp451, label %for.body453, label %for.end491

for.body453:                                      ; preds = %for.cond450
  store i32 0, i32* %k, align 4
  br label %for.cond454

for.cond454:                                      ; preds = %for.inc478, %for.body453
  %320 = load i32, i32* %k, align 4
  %321 = load i32, i32* %filter_bytes, align 4
  %cmp455 = icmp slt i32 %320, %321
  br i1 %cmp455, label %for.body457, label %for.end480

for.body457:                                      ; preds = %for.cond454
  %322 = load i8*, i8** %raw.addr, align 8
  %323 = load i32, i32* %k, align 4
  %idxprom458 = sext i32 %323 to i64
  %arrayidx459 = getelementptr inbounds i8, i8* %322, i64 %idxprom458
  %324 = load i8, i8* %arrayidx459, align 1
  %conv460 = zext i8 %324 to i32
  %325 = load i8*, i8** %cur, align 8
  %326 = load i32, i32* %k, align 4
  %327 = load i32, i32* %output_bytes, align 4
  %sub461 = sub nsw i32 %326, %327
  %idxprom462 = sext i32 %sub461 to i64
  %arrayidx463 = getelementptr inbounds i8, i8* %325, i64 %idxprom462
  %328 = load i8, i8* %arrayidx463, align 1
  %conv464 = zext i8 %328 to i32
  %329 = load i8*, i8** %prior, align 8
  %330 = load i32, i32* %k, align 4
  %idxprom465 = sext i32 %330 to i64
  %arrayidx466 = getelementptr inbounds i8, i8* %329, i64 %idxprom465
  %331 = load i8, i8* %arrayidx466, align 1
  %conv467 = zext i8 %331 to i32
  %332 = load i8*, i8** %prior, align 8
  %333 = load i32, i32* %k, align 4
  %334 = load i32, i32* %output_bytes, align 4
  %sub468 = sub nsw i32 %333, %334
  %idxprom469 = sext i32 %sub468 to i64
  %arrayidx470 = getelementptr inbounds i8, i8* %332, i64 %idxprom469
  %335 = load i8, i8* %arrayidx470, align 1
  %conv471 = zext i8 %335 to i32
  %call472 = call i32 @stbi__paeth(i32 %conv464, i32 %conv467, i32 %conv471)
  %add473 = add nsw i32 %conv460, %call472
  %and474 = and i32 %add473, 255
  %conv475 = trunc i32 %and474 to i8
  %336 = load i8*, i8** %cur, align 8
  %337 = load i32, i32* %k, align 4
  %idxprom476 = sext i32 %337 to i64
  %arrayidx477 = getelementptr inbounds i8, i8* %336, i64 %idxprom476
  store i8 %conv475, i8* %arrayidx477, align 1
  br label %for.inc478

for.inc478:                                       ; preds = %for.body457
  %338 = load i32, i32* %k, align 4
  %inc479 = add nsw i32 %338, 1
  store i32 %inc479, i32* %k, align 4
  br label %for.cond454

for.end480:                                       ; preds = %for.cond454
  br label %for.inc481

for.inc481:                                       ; preds = %for.end480
  %339 = load i32, i32* %i, align 4
  %dec482 = add i32 %339, -1
  store i32 %dec482, i32* %i, align 4
  %340 = load i8*, i8** %cur, align 8
  %341 = load i32, i32* %filter_bytes, align 4
  %idxprom483 = sext i32 %341 to i64
  %arrayidx484 = getelementptr inbounds i8, i8* %340, i64 %idxprom483
  store i8 -1, i8* %arrayidx484, align 1
  %342 = load i32, i32* %filter_bytes, align 4
  %343 = load i8*, i8** %raw.addr, align 8
  %idx.ext485 = sext i32 %342 to i64
  %add.ptr486 = getelementptr inbounds i8, i8* %343, i64 %idx.ext485
  store i8* %add.ptr486, i8** %raw.addr, align 8
  %344 = load i32, i32* %output_bytes, align 4
  %345 = load i8*, i8** %cur, align 8
  %idx.ext487 = sext i32 %344 to i64
  %add.ptr488 = getelementptr inbounds i8, i8* %345, i64 %idx.ext487
  store i8* %add.ptr488, i8** %cur, align 8
  %346 = load i32, i32* %output_bytes, align 4
  %347 = load i8*, i8** %prior, align 8
  %idx.ext489 = sext i32 %346 to i64
  %add.ptr490 = getelementptr inbounds i8, i8* %347, i64 %idx.ext489
  store i8* %add.ptr490, i8** %prior, align 8
  br label %for.cond450

for.end491:                                       ; preds = %for.cond450
  br label %sw.epilog566

sw.bb492:                                         ; preds = %if.end308
  %348 = load i32, i32* %x.addr, align 4
  %sub493 = sub i32 %348, 1
  store i32 %sub493, i32* %i, align 4
  br label %for.cond494

for.cond494:                                      ; preds = %for.inc518, %sw.bb492
  %349 = load i32, i32* %i, align 4
  %cmp495 = icmp uge i32 %349, 1
  br i1 %cmp495, label %for.body497, label %for.end528

for.body497:                                      ; preds = %for.cond494
  store i32 0, i32* %k, align 4
  br label %for.cond498

for.cond498:                                      ; preds = %for.inc515, %for.body497
  %350 = load i32, i32* %k, align 4
  %351 = load i32, i32* %filter_bytes, align 4
  %cmp499 = icmp slt i32 %350, %351
  br i1 %cmp499, label %for.body501, label %for.end517

for.body501:                                      ; preds = %for.cond498
  %352 = load i8*, i8** %raw.addr, align 8
  %353 = load i32, i32* %k, align 4
  %idxprom502 = sext i32 %353 to i64
  %arrayidx503 = getelementptr inbounds i8, i8* %352, i64 %idxprom502
  %354 = load i8, i8* %arrayidx503, align 1
  %conv504 = zext i8 %354 to i32
  %355 = load i8*, i8** %cur, align 8
  %356 = load i32, i32* %k, align 4
  %357 = load i32, i32* %output_bytes, align 4
  %sub505 = sub nsw i32 %356, %357
  %idxprom506 = sext i32 %sub505 to i64
  %arrayidx507 = getelementptr inbounds i8, i8* %355, i64 %idxprom506
  %358 = load i8, i8* %arrayidx507, align 1
  %conv508 = zext i8 %358 to i32
  %shr509 = ashr i32 %conv508, 1
  %add510 = add nsw i32 %conv504, %shr509
  %and511 = and i32 %add510, 255
  %conv512 = trunc i32 %and511 to i8
  %359 = load i8*, i8** %cur, align 8
  %360 = load i32, i32* %k, align 4
  %idxprom513 = sext i32 %360 to i64
  %arrayidx514 = getelementptr inbounds i8, i8* %359, i64 %idxprom513
  store i8 %conv512, i8* %arrayidx514, align 1
  br label %for.inc515

for.inc515:                                       ; preds = %for.body501
  %361 = load i32, i32* %k, align 4
  %inc516 = add nsw i32 %361, 1
  store i32 %inc516, i32* %k, align 4
  br label %for.cond498

for.end517:                                       ; preds = %for.cond498
  br label %for.inc518

for.inc518:                                       ; preds = %for.end517
  %362 = load i32, i32* %i, align 4
  %dec519 = add i32 %362, -1
  store i32 %dec519, i32* %i, align 4
  %363 = load i8*, i8** %cur, align 8
  %364 = load i32, i32* %filter_bytes, align 4
  %idxprom520 = sext i32 %364 to i64
  %arrayidx521 = getelementptr inbounds i8, i8* %363, i64 %idxprom520
  store i8 -1, i8* %arrayidx521, align 1
  %365 = load i32, i32* %filter_bytes, align 4
  %366 = load i8*, i8** %raw.addr, align 8
  %idx.ext522 = sext i32 %365 to i64
  %add.ptr523 = getelementptr inbounds i8, i8* %366, i64 %idx.ext522
  store i8* %add.ptr523, i8** %raw.addr, align 8
  %367 = load i32, i32* %output_bytes, align 4
  %368 = load i8*, i8** %cur, align 8
  %idx.ext524 = sext i32 %367 to i64
  %add.ptr525 = getelementptr inbounds i8, i8* %368, i64 %idx.ext524
  store i8* %add.ptr525, i8** %cur, align 8
  %369 = load i32, i32* %output_bytes, align 4
  %370 = load i8*, i8** %prior, align 8
  %idx.ext526 = sext i32 %369 to i64
  %add.ptr527 = getelementptr inbounds i8, i8* %370, i64 %idx.ext526
  store i8* %add.ptr527, i8** %prior, align 8
  br label %for.cond494

for.end528:                                       ; preds = %for.cond494
  br label %sw.epilog566

sw.bb529:                                         ; preds = %if.end308
  %371 = load i32, i32* %x.addr, align 4
  %sub530 = sub i32 %371, 1
  store i32 %sub530, i32* %i, align 4
  br label %for.cond531

for.cond531:                                      ; preds = %for.inc555, %sw.bb529
  %372 = load i32, i32* %i, align 4
  %cmp532 = icmp uge i32 %372, 1
  br i1 %cmp532, label %for.body534, label %for.end565

for.body534:                                      ; preds = %for.cond531
  store i32 0, i32* %k, align 4
  br label %for.cond535

for.cond535:                                      ; preds = %for.inc552, %for.body534
  %373 = load i32, i32* %k, align 4
  %374 = load i32, i32* %filter_bytes, align 4
  %cmp536 = icmp slt i32 %373, %374
  br i1 %cmp536, label %for.body538, label %for.end554

for.body538:                                      ; preds = %for.cond535
  %375 = load i8*, i8** %raw.addr, align 8
  %376 = load i32, i32* %k, align 4
  %idxprom539 = sext i32 %376 to i64
  %arrayidx540 = getelementptr inbounds i8, i8* %375, i64 %idxprom539
  %377 = load i8, i8* %arrayidx540, align 1
  %conv541 = zext i8 %377 to i32
  %378 = load i8*, i8** %cur, align 8
  %379 = load i32, i32* %k, align 4
  %380 = load i32, i32* %output_bytes, align 4
  %sub542 = sub nsw i32 %379, %380
  %idxprom543 = sext i32 %sub542 to i64
  %arrayidx544 = getelementptr inbounds i8, i8* %378, i64 %idxprom543
  %381 = load i8, i8* %arrayidx544, align 1
  %conv545 = zext i8 %381 to i32
  %call546 = call i32 @stbi__paeth(i32 %conv545, i32 0, i32 0)
  %add547 = add nsw i32 %conv541, %call546
  %and548 = and i32 %add547, 255
  %conv549 = trunc i32 %and548 to i8
  %382 = load i8*, i8** %cur, align 8
  %383 = load i32, i32* %k, align 4
  %idxprom550 = sext i32 %383 to i64
  %arrayidx551 = getelementptr inbounds i8, i8* %382, i64 %idxprom550
  store i8 %conv549, i8* %arrayidx551, align 1
  br label %for.inc552

for.inc552:                                       ; preds = %for.body538
  %384 = load i32, i32* %k, align 4
  %inc553 = add nsw i32 %384, 1
  store i32 %inc553, i32* %k, align 4
  br label %for.cond535

for.end554:                                       ; preds = %for.cond535
  br label %for.inc555

for.inc555:                                       ; preds = %for.end554
  %385 = load i32, i32* %i, align 4
  %dec556 = add i32 %385, -1
  store i32 %dec556, i32* %i, align 4
  %386 = load i8*, i8** %cur, align 8
  %387 = load i32, i32* %filter_bytes, align 4
  %idxprom557 = sext i32 %387 to i64
  %arrayidx558 = getelementptr inbounds i8, i8* %386, i64 %idxprom557
  store i8 -1, i8* %arrayidx558, align 1
  %388 = load i32, i32* %filter_bytes, align 4
  %389 = load i8*, i8** %raw.addr, align 8
  %idx.ext559 = sext i32 %388 to i64
  %add.ptr560 = getelementptr inbounds i8, i8* %389, i64 %idx.ext559
  store i8* %add.ptr560, i8** %raw.addr, align 8
  %390 = load i32, i32* %output_bytes, align 4
  %391 = load i8*, i8** %cur, align 8
  %idx.ext561 = sext i32 %390 to i64
  %add.ptr562 = getelementptr inbounds i8, i8* %391, i64 %idx.ext561
  store i8* %add.ptr562, i8** %cur, align 8
  %392 = load i32, i32* %output_bytes, align 4
  %393 = load i8*, i8** %prior, align 8
  %idx.ext563 = sext i32 %392 to i64
  %add.ptr564 = getelementptr inbounds i8, i8* %393, i64 %idx.ext563
  store i8* %add.ptr564, i8** %prior, align 8
  br label %for.cond531

for.end565:                                       ; preds = %for.cond531
  br label %sw.epilog566

sw.epilog566:                                     ; preds = %if.end308, %for.end565, %for.end528, %for.end491, %for.end447, %for.end406, %for.end371, %for.end335
  %394 = load i32, i32* %depth.addr, align 4
  %cmp567 = icmp eq i32 %394, 16
  br i1 %cmp567, label %if.then569, label %if.end586

if.then569:                                       ; preds = %sw.epilog566
  %395 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out570 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %395, i32 0, i32 3
  %396 = load i8*, i8** %out570, align 8
  %397 = load i32, i32* %stride, align 4
  %398 = load i32, i32* %j, align 4
  %mul571 = mul i32 %397, %398
  %idx.ext572 = zext i32 %mul571 to i64
  %add.ptr573 = getelementptr inbounds i8, i8* %396, i64 %idx.ext572
  store i8* %add.ptr573, i8** %cur, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond574

for.cond574:                                      ; preds = %for.inc581, %if.then569
  %399 = load i32, i32* %i, align 4
  %400 = load i32, i32* %x.addr, align 4
  %cmp575 = icmp ult i32 %399, %400
  br i1 %cmp575, label %for.body577, label %for.end585

for.body577:                                      ; preds = %for.cond574
  %401 = load i8*, i8** %cur, align 8
  %402 = load i32, i32* %filter_bytes, align 4
  %add578 = add nsw i32 %402, 1
  %idxprom579 = sext i32 %add578 to i64
  %arrayidx580 = getelementptr inbounds i8, i8* %401, i64 %idxprom579
  store i8 -1, i8* %arrayidx580, align 1
  br label %for.inc581

for.inc581:                                       ; preds = %for.body577
  %403 = load i32, i32* %i, align 4
  %inc582 = add i32 %403, 1
  store i32 %inc582, i32* %i, align 4
  %404 = load i32, i32* %output_bytes, align 4
  %405 = load i8*, i8** %cur, align 8
  %idx.ext583 = sext i32 %404 to i64
  %add.ptr584 = getelementptr inbounds i8, i8* %405, i64 %idx.ext583
  store i8* %add.ptr584, i8** %cur, align 8
  br label %for.cond574

for.end585:                                       ; preds = %for.cond574
  br label %if.end586

if.end586:                                        ; preds = %for.end585, %sw.epilog566
  br label %if.end587

if.end587:                                        ; preds = %if.end586, %sw.epilog299
  br label %for.inc588

for.inc588:                                       ; preds = %if.end587
  %406 = load i32, i32* %j, align 4
  %inc589 = add i32 %406, 1
  store i32 %inc589, i32* %j, align 4
  br label %for.cond

for.end590:                                       ; preds = %for.cond
  %407 = load i32, i32* %depth.addr, align 4
  %cmp591 = icmp slt i32 %407, 8
  br i1 %cmp591, label %if.then593, label %if.else946

if.then593:                                       ; preds = %for.end590
  store i32 0, i32* %j, align 4
  br label %for.cond594

for.cond594:                                      ; preds = %for.inc943, %if.then593
  %408 = load i32, i32* %j, align 4
  %409 = load i32, i32* %y.addr, align 4
  %cmp595 = icmp ult i32 %408, %409
  br i1 %cmp595, label %for.body597, label %for.end945

for.body597:                                      ; preds = %for.cond594
  %410 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out599 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %410, i32 0, i32 3
  %411 = load i8*, i8** %out599, align 8
  %412 = load i32, i32* %stride, align 4
  %413 = load i32, i32* %j, align 4
  %mul600 = mul i32 %412, %413
  %idx.ext601 = zext i32 %mul600 to i64
  %add.ptr602 = getelementptr inbounds i8, i8* %411, i64 %idx.ext601
  store i8* %add.ptr602, i8** %cur598, align 8
  %414 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out603 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %414, i32 0, i32 3
  %415 = load i8*, i8** %out603, align 8
  %416 = load i32, i32* %stride, align 4
  %417 = load i32, i32* %j, align 4
  %mul604 = mul i32 %416, %417
  %idx.ext605 = zext i32 %mul604 to i64
  %add.ptr606 = getelementptr inbounds i8, i8* %415, i64 %idx.ext605
  %418 = load i32, i32* %x.addr, align 4
  %419 = load i32, i32* %out_n.addr, align 4
  %mul607 = mul i32 %418, %419
  %idx.ext608 = zext i32 %mul607 to i64
  %add.ptr609 = getelementptr inbounds i8, i8* %add.ptr606, i64 %idx.ext608
  %420 = load i32, i32* %img_width_bytes, align 4
  %idx.ext610 = zext i32 %420 to i64
  %idx.neg611 = sub i64 0, %idx.ext610
  %add.ptr612 = getelementptr inbounds i8, i8* %add.ptr609, i64 %idx.neg611
  store i8* %add.ptr612, i8** %in, align 8
  %421 = load i32, i32* %color.addr, align 4
  %cmp613 = icmp eq i32 %421, 0
  br i1 %cmp613, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body597
  %422 = load i32, i32* %depth.addr, align 4
  %idxprom615 = sext i32 %422 to i64
  %arrayidx616 = getelementptr inbounds [9 x i8], [9 x i8]* @stbi__depth_scale_table, i64 0, i64 %idxprom615
  %423 = load i8, i8* %arrayidx616, align 1
  %conv617 = zext i8 %423 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body597
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond618 = phi i32 [ %conv617, %cond.true ], [ 1, %cond.false ]
  %conv619 = trunc i32 %cond618 to i8
  store i8 %conv619, i8* %scale, align 1
  %424 = load i32, i32* %depth.addr, align 4
  %cmp620 = icmp eq i32 %424, 4
  br i1 %cmp620, label %if.then622, label %if.else654

if.then622:                                       ; preds = %cond.end
  %425 = load i32, i32* %x.addr, align 4
  %426 = load i32, i32* %img_n, align 4
  %mul623 = mul i32 %425, %426
  store i32 %mul623, i32* %k, align 4
  br label %for.cond624

for.cond624:                                      ; preds = %for.inc640, %if.then622
  %427 = load i32, i32* %k, align 4
  %cmp625 = icmp sge i32 %427, 2
  br i1 %cmp625, label %for.body627, label %for.end643

for.body627:                                      ; preds = %for.cond624
  %428 = load i8, i8* %scale, align 1
  %conv628 = zext i8 %428 to i32
  %429 = load i8*, i8** %in, align 8
  %430 = load i8, i8* %429, align 1
  %conv629 = zext i8 %430 to i32
  %shr630 = ashr i32 %conv629, 4
  %mul631 = mul nsw i32 %conv628, %shr630
  %conv632 = trunc i32 %mul631 to i8
  %431 = load i8*, i8** %cur598, align 8
  %incdec.ptr633 = getelementptr inbounds i8, i8* %431, i32 1
  store i8* %incdec.ptr633, i8** %cur598, align 8
  store i8 %conv632, i8* %431, align 1
  %432 = load i8, i8* %scale, align 1
  %conv634 = zext i8 %432 to i32
  %433 = load i8*, i8** %in, align 8
  %434 = load i8, i8* %433, align 1
  %conv635 = zext i8 %434 to i32
  %and636 = and i32 %conv635, 15
  %mul637 = mul nsw i32 %conv634, %and636
  %conv638 = trunc i32 %mul637 to i8
  %435 = load i8*, i8** %cur598, align 8
  %incdec.ptr639 = getelementptr inbounds i8, i8* %435, i32 1
  store i8* %incdec.ptr639, i8** %cur598, align 8
  store i8 %conv638, i8* %435, align 1
  br label %for.inc640

for.inc640:                                       ; preds = %for.body627
  %436 = load i32, i32* %k, align 4
  %sub641 = sub nsw i32 %436, 2
  store i32 %sub641, i32* %k, align 4
  %437 = load i8*, i8** %in, align 8
  %incdec.ptr642 = getelementptr inbounds i8, i8* %437, i32 1
  store i8* %incdec.ptr642, i8** %in, align 8
  br label %for.cond624

for.end643:                                       ; preds = %for.cond624
  %438 = load i32, i32* %k, align 4
  %cmp644 = icmp sgt i32 %438, 0
  br i1 %cmp644, label %if.then646, label %if.end653

if.then646:                                       ; preds = %for.end643
  %439 = load i8, i8* %scale, align 1
  %conv647 = zext i8 %439 to i32
  %440 = load i8*, i8** %in, align 8
  %441 = load i8, i8* %440, align 1
  %conv648 = zext i8 %441 to i32
  %shr649 = ashr i32 %conv648, 4
  %mul650 = mul nsw i32 %conv647, %shr649
  %conv651 = trunc i32 %mul650 to i8
  %442 = load i8*, i8** %cur598, align 8
  %incdec.ptr652 = getelementptr inbounds i8, i8* %442, i32 1
  store i8* %incdec.ptr652, i8** %cur598, align 8
  store i8 %conv651, i8* %442, align 1
  br label %if.end653

if.end653:                                        ; preds = %if.then646, %for.end643
  br label %if.end870

if.else654:                                       ; preds = %cond.end
  %443 = load i32, i32* %depth.addr, align 4
  %cmp655 = icmp eq i32 %443, 2
  br i1 %cmp655, label %if.then657, label %if.else725

if.then657:                                       ; preds = %if.else654
  %444 = load i32, i32* %x.addr, align 4
  %445 = load i32, i32* %img_n, align 4
  %mul658 = mul i32 %444, %445
  store i32 %mul658, i32* %k, align 4
  br label %for.cond659

for.cond659:                                      ; preds = %for.inc689, %if.then657
  %446 = load i32, i32* %k, align 4
  %cmp660 = icmp sge i32 %446, 4
  br i1 %cmp660, label %for.body662, label %for.end692

for.body662:                                      ; preds = %for.cond659
  %447 = load i8, i8* %scale, align 1
  %conv663 = zext i8 %447 to i32
  %448 = load i8*, i8** %in, align 8
  %449 = load i8, i8* %448, align 1
  %conv664 = zext i8 %449 to i32
  %shr665 = ashr i32 %conv664, 6
  %mul666 = mul nsw i32 %conv663, %shr665
  %conv667 = trunc i32 %mul666 to i8
  %450 = load i8*, i8** %cur598, align 8
  %incdec.ptr668 = getelementptr inbounds i8, i8* %450, i32 1
  store i8* %incdec.ptr668, i8** %cur598, align 8
  store i8 %conv667, i8* %450, align 1
  %451 = load i8, i8* %scale, align 1
  %conv669 = zext i8 %451 to i32
  %452 = load i8*, i8** %in, align 8
  %453 = load i8, i8* %452, align 1
  %conv670 = zext i8 %453 to i32
  %shr671 = ashr i32 %conv670, 4
  %and672 = and i32 %shr671, 3
  %mul673 = mul nsw i32 %conv669, %and672
  %conv674 = trunc i32 %mul673 to i8
  %454 = load i8*, i8** %cur598, align 8
  %incdec.ptr675 = getelementptr inbounds i8, i8* %454, i32 1
  store i8* %incdec.ptr675, i8** %cur598, align 8
  store i8 %conv674, i8* %454, align 1
  %455 = load i8, i8* %scale, align 1
  %conv676 = zext i8 %455 to i32
  %456 = load i8*, i8** %in, align 8
  %457 = load i8, i8* %456, align 1
  %conv677 = zext i8 %457 to i32
  %shr678 = ashr i32 %conv677, 2
  %and679 = and i32 %shr678, 3
  %mul680 = mul nsw i32 %conv676, %and679
  %conv681 = trunc i32 %mul680 to i8
  %458 = load i8*, i8** %cur598, align 8
  %incdec.ptr682 = getelementptr inbounds i8, i8* %458, i32 1
  store i8* %incdec.ptr682, i8** %cur598, align 8
  store i8 %conv681, i8* %458, align 1
  %459 = load i8, i8* %scale, align 1
  %conv683 = zext i8 %459 to i32
  %460 = load i8*, i8** %in, align 8
  %461 = load i8, i8* %460, align 1
  %conv684 = zext i8 %461 to i32
  %and685 = and i32 %conv684, 3
  %mul686 = mul nsw i32 %conv683, %and685
  %conv687 = trunc i32 %mul686 to i8
  %462 = load i8*, i8** %cur598, align 8
  %incdec.ptr688 = getelementptr inbounds i8, i8* %462, i32 1
  store i8* %incdec.ptr688, i8** %cur598, align 8
  store i8 %conv687, i8* %462, align 1
  br label %for.inc689

for.inc689:                                       ; preds = %for.body662
  %463 = load i32, i32* %k, align 4
  %sub690 = sub nsw i32 %463, 4
  store i32 %sub690, i32* %k, align 4
  %464 = load i8*, i8** %in, align 8
  %incdec.ptr691 = getelementptr inbounds i8, i8* %464, i32 1
  store i8* %incdec.ptr691, i8** %in, align 8
  br label %for.cond659

for.end692:                                       ; preds = %for.cond659
  %465 = load i32, i32* %k, align 4
  %cmp693 = icmp sgt i32 %465, 0
  br i1 %cmp693, label %if.then695, label %if.end702

if.then695:                                       ; preds = %for.end692
  %466 = load i8, i8* %scale, align 1
  %conv696 = zext i8 %466 to i32
  %467 = load i8*, i8** %in, align 8
  %468 = load i8, i8* %467, align 1
  %conv697 = zext i8 %468 to i32
  %shr698 = ashr i32 %conv697, 6
  %mul699 = mul nsw i32 %conv696, %shr698
  %conv700 = trunc i32 %mul699 to i8
  %469 = load i8*, i8** %cur598, align 8
  %incdec.ptr701 = getelementptr inbounds i8, i8* %469, i32 1
  store i8* %incdec.ptr701, i8** %cur598, align 8
  store i8 %conv700, i8* %469, align 1
  br label %if.end702

if.end702:                                        ; preds = %if.then695, %for.end692
  %470 = load i32, i32* %k, align 4
  %cmp703 = icmp sgt i32 %470, 1
  br i1 %cmp703, label %if.then705, label %if.end713

if.then705:                                       ; preds = %if.end702
  %471 = load i8, i8* %scale, align 1
  %conv706 = zext i8 %471 to i32
  %472 = load i8*, i8** %in, align 8
  %473 = load i8, i8* %472, align 1
  %conv707 = zext i8 %473 to i32
  %shr708 = ashr i32 %conv707, 4
  %and709 = and i32 %shr708, 3
  %mul710 = mul nsw i32 %conv706, %and709
  %conv711 = trunc i32 %mul710 to i8
  %474 = load i8*, i8** %cur598, align 8
  %incdec.ptr712 = getelementptr inbounds i8, i8* %474, i32 1
  store i8* %incdec.ptr712, i8** %cur598, align 8
  store i8 %conv711, i8* %474, align 1
  br label %if.end713

if.end713:                                        ; preds = %if.then705, %if.end702
  %475 = load i32, i32* %k, align 4
  %cmp714 = icmp sgt i32 %475, 2
  br i1 %cmp714, label %if.then716, label %if.end724

if.then716:                                       ; preds = %if.end713
  %476 = load i8, i8* %scale, align 1
  %conv717 = zext i8 %476 to i32
  %477 = load i8*, i8** %in, align 8
  %478 = load i8, i8* %477, align 1
  %conv718 = zext i8 %478 to i32
  %shr719 = ashr i32 %conv718, 2
  %and720 = and i32 %shr719, 3
  %mul721 = mul nsw i32 %conv717, %and720
  %conv722 = trunc i32 %mul721 to i8
  %479 = load i8*, i8** %cur598, align 8
  %incdec.ptr723 = getelementptr inbounds i8, i8* %479, i32 1
  store i8* %incdec.ptr723, i8** %cur598, align 8
  store i8 %conv722, i8* %479, align 1
  br label %if.end724

if.end724:                                        ; preds = %if.then716, %if.end713
  br label %if.end869

if.else725:                                       ; preds = %if.else654
  %480 = load i32, i32* %depth.addr, align 4
  %cmp726 = icmp eq i32 %480, 1
  br i1 %cmp726, label %if.then728, label %if.end868

if.then728:                                       ; preds = %if.else725
  %481 = load i32, i32* %x.addr, align 4
  %482 = load i32, i32* %img_n, align 4
  %mul729 = mul i32 %481, %482
  store i32 %mul729, i32* %k, align 4
  br label %for.cond730

for.cond730:                                      ; preds = %for.inc788, %if.then728
  %483 = load i32, i32* %k, align 4
  %cmp731 = icmp sge i32 %483, 8
  br i1 %cmp731, label %for.body733, label %for.end791

for.body733:                                      ; preds = %for.cond730
  %484 = load i8, i8* %scale, align 1
  %conv734 = zext i8 %484 to i32
  %485 = load i8*, i8** %in, align 8
  %486 = load i8, i8* %485, align 1
  %conv735 = zext i8 %486 to i32
  %shr736 = ashr i32 %conv735, 7
  %mul737 = mul nsw i32 %conv734, %shr736
  %conv738 = trunc i32 %mul737 to i8
  %487 = load i8*, i8** %cur598, align 8
  %incdec.ptr739 = getelementptr inbounds i8, i8* %487, i32 1
  store i8* %incdec.ptr739, i8** %cur598, align 8
  store i8 %conv738, i8* %487, align 1
  %488 = load i8, i8* %scale, align 1
  %conv740 = zext i8 %488 to i32
  %489 = load i8*, i8** %in, align 8
  %490 = load i8, i8* %489, align 1
  %conv741 = zext i8 %490 to i32
  %shr742 = ashr i32 %conv741, 6
  %and743 = and i32 %shr742, 1
  %mul744 = mul nsw i32 %conv740, %and743
  %conv745 = trunc i32 %mul744 to i8
  %491 = load i8*, i8** %cur598, align 8
  %incdec.ptr746 = getelementptr inbounds i8, i8* %491, i32 1
  store i8* %incdec.ptr746, i8** %cur598, align 8
  store i8 %conv745, i8* %491, align 1
  %492 = load i8, i8* %scale, align 1
  %conv747 = zext i8 %492 to i32
  %493 = load i8*, i8** %in, align 8
  %494 = load i8, i8* %493, align 1
  %conv748 = zext i8 %494 to i32
  %shr749 = ashr i32 %conv748, 5
  %and750 = and i32 %shr749, 1
  %mul751 = mul nsw i32 %conv747, %and750
  %conv752 = trunc i32 %mul751 to i8
  %495 = load i8*, i8** %cur598, align 8
  %incdec.ptr753 = getelementptr inbounds i8, i8* %495, i32 1
  store i8* %incdec.ptr753, i8** %cur598, align 8
  store i8 %conv752, i8* %495, align 1
  %496 = load i8, i8* %scale, align 1
  %conv754 = zext i8 %496 to i32
  %497 = load i8*, i8** %in, align 8
  %498 = load i8, i8* %497, align 1
  %conv755 = zext i8 %498 to i32
  %shr756 = ashr i32 %conv755, 4
  %and757 = and i32 %shr756, 1
  %mul758 = mul nsw i32 %conv754, %and757
  %conv759 = trunc i32 %mul758 to i8
  %499 = load i8*, i8** %cur598, align 8
  %incdec.ptr760 = getelementptr inbounds i8, i8* %499, i32 1
  store i8* %incdec.ptr760, i8** %cur598, align 8
  store i8 %conv759, i8* %499, align 1
  %500 = load i8, i8* %scale, align 1
  %conv761 = zext i8 %500 to i32
  %501 = load i8*, i8** %in, align 8
  %502 = load i8, i8* %501, align 1
  %conv762 = zext i8 %502 to i32
  %shr763 = ashr i32 %conv762, 3
  %and764 = and i32 %shr763, 1
  %mul765 = mul nsw i32 %conv761, %and764
  %conv766 = trunc i32 %mul765 to i8
  %503 = load i8*, i8** %cur598, align 8
  %incdec.ptr767 = getelementptr inbounds i8, i8* %503, i32 1
  store i8* %incdec.ptr767, i8** %cur598, align 8
  store i8 %conv766, i8* %503, align 1
  %504 = load i8, i8* %scale, align 1
  %conv768 = zext i8 %504 to i32
  %505 = load i8*, i8** %in, align 8
  %506 = load i8, i8* %505, align 1
  %conv769 = zext i8 %506 to i32
  %shr770 = ashr i32 %conv769, 2
  %and771 = and i32 %shr770, 1
  %mul772 = mul nsw i32 %conv768, %and771
  %conv773 = trunc i32 %mul772 to i8
  %507 = load i8*, i8** %cur598, align 8
  %incdec.ptr774 = getelementptr inbounds i8, i8* %507, i32 1
  store i8* %incdec.ptr774, i8** %cur598, align 8
  store i8 %conv773, i8* %507, align 1
  %508 = load i8, i8* %scale, align 1
  %conv775 = zext i8 %508 to i32
  %509 = load i8*, i8** %in, align 8
  %510 = load i8, i8* %509, align 1
  %conv776 = zext i8 %510 to i32
  %shr777 = ashr i32 %conv776, 1
  %and778 = and i32 %shr777, 1
  %mul779 = mul nsw i32 %conv775, %and778
  %conv780 = trunc i32 %mul779 to i8
  %511 = load i8*, i8** %cur598, align 8
  %incdec.ptr781 = getelementptr inbounds i8, i8* %511, i32 1
  store i8* %incdec.ptr781, i8** %cur598, align 8
  store i8 %conv780, i8* %511, align 1
  %512 = load i8, i8* %scale, align 1
  %conv782 = zext i8 %512 to i32
  %513 = load i8*, i8** %in, align 8
  %514 = load i8, i8* %513, align 1
  %conv783 = zext i8 %514 to i32
  %and784 = and i32 %conv783, 1
  %mul785 = mul nsw i32 %conv782, %and784
  %conv786 = trunc i32 %mul785 to i8
  %515 = load i8*, i8** %cur598, align 8
  %incdec.ptr787 = getelementptr inbounds i8, i8* %515, i32 1
  store i8* %incdec.ptr787, i8** %cur598, align 8
  store i8 %conv786, i8* %515, align 1
  br label %for.inc788

for.inc788:                                       ; preds = %for.body733
  %516 = load i32, i32* %k, align 4
  %sub789 = sub nsw i32 %516, 8
  store i32 %sub789, i32* %k, align 4
  %517 = load i8*, i8** %in, align 8
  %incdec.ptr790 = getelementptr inbounds i8, i8* %517, i32 1
  store i8* %incdec.ptr790, i8** %in, align 8
  br label %for.cond730

for.end791:                                       ; preds = %for.cond730
  %518 = load i32, i32* %k, align 4
  %cmp792 = icmp sgt i32 %518, 0
  br i1 %cmp792, label %if.then794, label %if.end801

if.then794:                                       ; preds = %for.end791
  %519 = load i8, i8* %scale, align 1
  %conv795 = zext i8 %519 to i32
  %520 = load i8*, i8** %in, align 8
  %521 = load i8, i8* %520, align 1
  %conv796 = zext i8 %521 to i32
  %shr797 = ashr i32 %conv796, 7
  %mul798 = mul nsw i32 %conv795, %shr797
  %conv799 = trunc i32 %mul798 to i8
  %522 = load i8*, i8** %cur598, align 8
  %incdec.ptr800 = getelementptr inbounds i8, i8* %522, i32 1
  store i8* %incdec.ptr800, i8** %cur598, align 8
  store i8 %conv799, i8* %522, align 1
  br label %if.end801

if.end801:                                        ; preds = %if.then794, %for.end791
  %523 = load i32, i32* %k, align 4
  %cmp802 = icmp sgt i32 %523, 1
  br i1 %cmp802, label %if.then804, label %if.end812

if.then804:                                       ; preds = %if.end801
  %524 = load i8, i8* %scale, align 1
  %conv805 = zext i8 %524 to i32
  %525 = load i8*, i8** %in, align 8
  %526 = load i8, i8* %525, align 1
  %conv806 = zext i8 %526 to i32
  %shr807 = ashr i32 %conv806, 6
  %and808 = and i32 %shr807, 1
  %mul809 = mul nsw i32 %conv805, %and808
  %conv810 = trunc i32 %mul809 to i8
  %527 = load i8*, i8** %cur598, align 8
  %incdec.ptr811 = getelementptr inbounds i8, i8* %527, i32 1
  store i8* %incdec.ptr811, i8** %cur598, align 8
  store i8 %conv810, i8* %527, align 1
  br label %if.end812

if.end812:                                        ; preds = %if.then804, %if.end801
  %528 = load i32, i32* %k, align 4
  %cmp813 = icmp sgt i32 %528, 2
  br i1 %cmp813, label %if.then815, label %if.end823

if.then815:                                       ; preds = %if.end812
  %529 = load i8, i8* %scale, align 1
  %conv816 = zext i8 %529 to i32
  %530 = load i8*, i8** %in, align 8
  %531 = load i8, i8* %530, align 1
  %conv817 = zext i8 %531 to i32
  %shr818 = ashr i32 %conv817, 5
  %and819 = and i32 %shr818, 1
  %mul820 = mul nsw i32 %conv816, %and819
  %conv821 = trunc i32 %mul820 to i8
  %532 = load i8*, i8** %cur598, align 8
  %incdec.ptr822 = getelementptr inbounds i8, i8* %532, i32 1
  store i8* %incdec.ptr822, i8** %cur598, align 8
  store i8 %conv821, i8* %532, align 1
  br label %if.end823

if.end823:                                        ; preds = %if.then815, %if.end812
  %533 = load i32, i32* %k, align 4
  %cmp824 = icmp sgt i32 %533, 3
  br i1 %cmp824, label %if.then826, label %if.end834

if.then826:                                       ; preds = %if.end823
  %534 = load i8, i8* %scale, align 1
  %conv827 = zext i8 %534 to i32
  %535 = load i8*, i8** %in, align 8
  %536 = load i8, i8* %535, align 1
  %conv828 = zext i8 %536 to i32
  %shr829 = ashr i32 %conv828, 4
  %and830 = and i32 %shr829, 1
  %mul831 = mul nsw i32 %conv827, %and830
  %conv832 = trunc i32 %mul831 to i8
  %537 = load i8*, i8** %cur598, align 8
  %incdec.ptr833 = getelementptr inbounds i8, i8* %537, i32 1
  store i8* %incdec.ptr833, i8** %cur598, align 8
  store i8 %conv832, i8* %537, align 1
  br label %if.end834

if.end834:                                        ; preds = %if.then826, %if.end823
  %538 = load i32, i32* %k, align 4
  %cmp835 = icmp sgt i32 %538, 4
  br i1 %cmp835, label %if.then837, label %if.end845

if.then837:                                       ; preds = %if.end834
  %539 = load i8, i8* %scale, align 1
  %conv838 = zext i8 %539 to i32
  %540 = load i8*, i8** %in, align 8
  %541 = load i8, i8* %540, align 1
  %conv839 = zext i8 %541 to i32
  %shr840 = ashr i32 %conv839, 3
  %and841 = and i32 %shr840, 1
  %mul842 = mul nsw i32 %conv838, %and841
  %conv843 = trunc i32 %mul842 to i8
  %542 = load i8*, i8** %cur598, align 8
  %incdec.ptr844 = getelementptr inbounds i8, i8* %542, i32 1
  store i8* %incdec.ptr844, i8** %cur598, align 8
  store i8 %conv843, i8* %542, align 1
  br label %if.end845

if.end845:                                        ; preds = %if.then837, %if.end834
  %543 = load i32, i32* %k, align 4
  %cmp846 = icmp sgt i32 %543, 5
  br i1 %cmp846, label %if.then848, label %if.end856

if.then848:                                       ; preds = %if.end845
  %544 = load i8, i8* %scale, align 1
  %conv849 = zext i8 %544 to i32
  %545 = load i8*, i8** %in, align 8
  %546 = load i8, i8* %545, align 1
  %conv850 = zext i8 %546 to i32
  %shr851 = ashr i32 %conv850, 2
  %and852 = and i32 %shr851, 1
  %mul853 = mul nsw i32 %conv849, %and852
  %conv854 = trunc i32 %mul853 to i8
  %547 = load i8*, i8** %cur598, align 8
  %incdec.ptr855 = getelementptr inbounds i8, i8* %547, i32 1
  store i8* %incdec.ptr855, i8** %cur598, align 8
  store i8 %conv854, i8* %547, align 1
  br label %if.end856

if.end856:                                        ; preds = %if.then848, %if.end845
  %548 = load i32, i32* %k, align 4
  %cmp857 = icmp sgt i32 %548, 6
  br i1 %cmp857, label %if.then859, label %if.end867

if.then859:                                       ; preds = %if.end856
  %549 = load i8, i8* %scale, align 1
  %conv860 = zext i8 %549 to i32
  %550 = load i8*, i8** %in, align 8
  %551 = load i8, i8* %550, align 1
  %conv861 = zext i8 %551 to i32
  %shr862 = ashr i32 %conv861, 1
  %and863 = and i32 %shr862, 1
  %mul864 = mul nsw i32 %conv860, %and863
  %conv865 = trunc i32 %mul864 to i8
  %552 = load i8*, i8** %cur598, align 8
  %incdec.ptr866 = getelementptr inbounds i8, i8* %552, i32 1
  store i8* %incdec.ptr866, i8** %cur598, align 8
  store i8 %conv865, i8* %552, align 1
  br label %if.end867

if.end867:                                        ; preds = %if.then859, %if.end856
  br label %if.end868

if.end868:                                        ; preds = %if.end867, %if.else725
  br label %if.end869

if.end869:                                        ; preds = %if.end868, %if.end724
  br label %if.end870

if.end870:                                        ; preds = %if.end869, %if.end653
  %553 = load i32, i32* %img_n, align 4
  %554 = load i32, i32* %out_n.addr, align 4
  %cmp871 = icmp ne i32 %553, %554
  br i1 %cmp871, label %if.then873, label %if.end942

if.then873:                                       ; preds = %if.end870
  %555 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out874 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %555, i32 0, i32 3
  %556 = load i8*, i8** %out874, align 8
  %557 = load i32, i32* %stride, align 4
  %558 = load i32, i32* %j, align 4
  %mul875 = mul i32 %557, %558
  %idx.ext876 = zext i32 %mul875 to i64
  %add.ptr877 = getelementptr inbounds i8, i8* %556, i64 %idx.ext876
  store i8* %add.ptr877, i8** %cur598, align 8
  %559 = load i32, i32* %img_n, align 4
  %cmp878 = icmp eq i32 %559, 1
  br i1 %cmp878, label %if.then880, label %if.else899

if.then880:                                       ; preds = %if.then873
  %560 = load i32, i32* %x.addr, align 4
  %sub881 = sub i32 %560, 1
  store i32 %sub881, i32* %q, align 4
  br label %for.cond882

for.cond882:                                      ; preds = %for.inc896, %if.then880
  %561 = load i32, i32* %q, align 4
  %cmp883 = icmp sge i32 %561, 0
  br i1 %cmp883, label %for.body885, label %for.end898

for.body885:                                      ; preds = %for.cond882
  %562 = load i8*, i8** %cur598, align 8
  %563 = load i32, i32* %q, align 4
  %mul886 = mul nsw i32 %563, 2
  %add887 = add nsw i32 %mul886, 1
  %idxprom888 = sext i32 %add887 to i64
  %arrayidx889 = getelementptr inbounds i8, i8* %562, i64 %idxprom888
  store i8 -1, i8* %arrayidx889, align 1
  %564 = load i8*, i8** %cur598, align 8
  %565 = load i32, i32* %q, align 4
  %idxprom890 = sext i32 %565 to i64
  %arrayidx891 = getelementptr inbounds i8, i8* %564, i64 %idxprom890
  %566 = load i8, i8* %arrayidx891, align 1
  %567 = load i8*, i8** %cur598, align 8
  %568 = load i32, i32* %q, align 4
  %mul892 = mul nsw i32 %568, 2
  %add893 = add nsw i32 %mul892, 0
  %idxprom894 = sext i32 %add893 to i64
  %arrayidx895 = getelementptr inbounds i8, i8* %567, i64 %idxprom894
  store i8 %566, i8* %arrayidx895, align 1
  br label %for.inc896

for.inc896:                                       ; preds = %for.body885
  %569 = load i32, i32* %q, align 4
  %dec897 = add nsw i32 %569, -1
  store i32 %dec897, i32* %q, align 4
  br label %for.cond882

for.end898:                                       ; preds = %for.cond882
  br label %if.end941

if.else899:                                       ; preds = %if.then873
  %570 = load i32, i32* %img_n, align 4
  %cmp900 = icmp eq i32 %570, 3
  br i1 %cmp900, label %if.then902, label %if.else903

if.then902:                                       ; preds = %if.else899
  br label %if.end904

if.else903:                                       ; preds = %if.else899
  call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.89, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 4725, i8* getelementptr inbounds ([112 x i8], [112 x i8]* @__PRETTY_FUNCTION__.stbi__create_png_image_raw, i64 0, i64 0)) #11
  unreachable

if.end904:                                        ; preds = %if.then902
  %571 = load i32, i32* %x.addr, align 4
  %sub905 = sub i32 %571, 1
  store i32 %sub905, i32* %q, align 4
  br label %for.cond906

for.cond906:                                      ; preds = %for.inc938, %if.end904
  %572 = load i32, i32* %q, align 4
  %cmp907 = icmp sge i32 %572, 0
  br i1 %cmp907, label %for.body909, label %for.end940

for.body909:                                      ; preds = %for.cond906
  %573 = load i8*, i8** %cur598, align 8
  %574 = load i32, i32* %q, align 4
  %mul910 = mul nsw i32 %574, 4
  %add911 = add nsw i32 %mul910, 3
  %idxprom912 = sext i32 %add911 to i64
  %arrayidx913 = getelementptr inbounds i8, i8* %573, i64 %idxprom912
  store i8 -1, i8* %arrayidx913, align 1
  %575 = load i8*, i8** %cur598, align 8
  %576 = load i32, i32* %q, align 4
  %mul914 = mul nsw i32 %576, 3
  %add915 = add nsw i32 %mul914, 2
  %idxprom916 = sext i32 %add915 to i64
  %arrayidx917 = getelementptr inbounds i8, i8* %575, i64 %idxprom916
  %577 = load i8, i8* %arrayidx917, align 1
  %578 = load i8*, i8** %cur598, align 8
  %579 = load i32, i32* %q, align 4
  %mul918 = mul nsw i32 %579, 4
  %add919 = add nsw i32 %mul918, 2
  %idxprom920 = sext i32 %add919 to i64
  %arrayidx921 = getelementptr inbounds i8, i8* %578, i64 %idxprom920
  store i8 %577, i8* %arrayidx921, align 1
  %580 = load i8*, i8** %cur598, align 8
  %581 = load i32, i32* %q, align 4
  %mul922 = mul nsw i32 %581, 3
  %add923 = add nsw i32 %mul922, 1
  %idxprom924 = sext i32 %add923 to i64
  %arrayidx925 = getelementptr inbounds i8, i8* %580, i64 %idxprom924
  %582 = load i8, i8* %arrayidx925, align 1
  %583 = load i8*, i8** %cur598, align 8
  %584 = load i32, i32* %q, align 4
  %mul926 = mul nsw i32 %584, 4
  %add927 = add nsw i32 %mul926, 1
  %idxprom928 = sext i32 %add927 to i64
  %arrayidx929 = getelementptr inbounds i8, i8* %583, i64 %idxprom928
  store i8 %582, i8* %arrayidx929, align 1
  %585 = load i8*, i8** %cur598, align 8
  %586 = load i32, i32* %q, align 4
  %mul930 = mul nsw i32 %586, 3
  %add931 = add nsw i32 %mul930, 0
  %idxprom932 = sext i32 %add931 to i64
  %arrayidx933 = getelementptr inbounds i8, i8* %585, i64 %idxprom932
  %587 = load i8, i8* %arrayidx933, align 1
  %588 = load i8*, i8** %cur598, align 8
  %589 = load i32, i32* %q, align 4
  %mul934 = mul nsw i32 %589, 4
  %add935 = add nsw i32 %mul934, 0
  %idxprom936 = sext i32 %add935 to i64
  %arrayidx937 = getelementptr inbounds i8, i8* %588, i64 %idxprom936
  store i8 %587, i8* %arrayidx937, align 1
  br label %for.inc938

for.inc938:                                       ; preds = %for.body909
  %590 = load i32, i32* %q, align 4
  %dec939 = add nsw i32 %590, -1
  store i32 %dec939, i32* %q, align 4
  br label %for.cond906

for.end940:                                       ; preds = %for.cond906
  br label %if.end941

if.end941:                                        ; preds = %for.end940, %for.end898
  br label %if.end942

if.end942:                                        ; preds = %if.end941, %if.end870
  br label %for.inc943

for.inc943:                                       ; preds = %if.end942
  %591 = load i32, i32* %j, align 4
  %inc944 = add i32 %591, 1
  store i32 %inc944, i32* %j, align 4
  br label %for.cond594

for.end945:                                       ; preds = %for.cond594
  br label %if.end969

if.else946:                                       ; preds = %for.end590
  %592 = load i32, i32* %depth.addr, align 4
  %cmp947 = icmp eq i32 %592, 16
  br i1 %cmp947, label %if.then949, label %if.end968

if.then949:                                       ; preds = %if.else946
  %593 = load %struct.stbi__png*, %struct.stbi__png** %a.addr, align 8
  %out951 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %593, i32 0, i32 3
  %594 = load i8*, i8** %out951, align 8
  store i8* %594, i8** %cur950, align 8
  %595 = load i8*, i8** %cur950, align 8
  %596 = bitcast i8* %595 to i16*
  store i16* %596, i16** %cur16, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond952

for.cond952:                                      ; preds = %for.inc963, %if.then949
  %597 = load i32, i32* %i, align 4
  %598 = load i32, i32* %x.addr, align 4
  %599 = load i32, i32* %y.addr, align 4
  %mul953 = mul i32 %598, %599
  %600 = load i32, i32* %out_n.addr, align 4
  %mul954 = mul i32 %mul953, %600
  %cmp955 = icmp ult i32 %597, %mul954
  br i1 %cmp955, label %for.body957, label %for.end967

for.body957:                                      ; preds = %for.cond952
  %601 = load i8*, i8** %cur950, align 8
  %arrayidx958 = getelementptr inbounds i8, i8* %601, i64 0
  %602 = load i8, i8* %arrayidx958, align 1
  %conv959 = zext i8 %602 to i32
  %shl = shl i32 %conv959, 8
  %603 = load i8*, i8** %cur950, align 8
  %arrayidx960 = getelementptr inbounds i8, i8* %603, i64 1
  %604 = load i8, i8* %arrayidx960, align 1
  %conv961 = zext i8 %604 to i32
  %or = or i32 %shl, %conv961
  %conv962 = trunc i32 %or to i16
  %605 = load i16*, i16** %cur16, align 8
  store i16 %conv962, i16* %605, align 2
  br label %for.inc963

for.inc963:                                       ; preds = %for.body957
  %606 = load i32, i32* %i, align 4
  %inc964 = add i32 %606, 1
  store i32 %inc964, i32* %i, align 4
  %607 = load i16*, i16** %cur16, align 8
  %incdec.ptr965 = getelementptr inbounds i16, i16* %607, i32 1
  store i16* %incdec.ptr965, i16** %cur16, align 8
  %608 = load i8*, i8** %cur950, align 8
  %add.ptr966 = getelementptr inbounds i8, i8* %608, i64 2
  store i8* %add.ptr966, i8** %cur950, align 8
  br label %for.cond952

for.end967:                                       ; preds = %for.cond952
  br label %if.end968

if.end968:                                        ; preds = %for.end967, %if.else946
  br label %if.end969

if.end969:                                        ; preds = %if.end968, %for.end945
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end969, %if.then41, %if.then33, %if.then25, %if.then16, %if.then11
  %609 = load i32, i32* %retval, align 4
  ret i32 %609
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__paeth(i32 %a, i32 %b, i32 %c) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %pa = alloca i32, align 4
  %pb = alloca i32, align 4
  %pc = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %add = add nsw i32 %0, %1
  %2 = load i32, i32* %c.addr, align 4
  %sub = sub nsw i32 %add, %2
  store i32 %sub, i32* %p, align 4
  %3 = load i32, i32* %p, align 4
  %4 = load i32, i32* %a.addr, align 4
  %sub1 = sub nsw i32 %3, %4
  %call = call i32 @abs(i32 %sub1) #9
  store i32 %call, i32* %pa, align 4
  %5 = load i32, i32* %p, align 4
  %6 = load i32, i32* %b.addr, align 4
  %sub2 = sub nsw i32 %5, %6
  %call3 = call i32 @abs(i32 %sub2) #9
  store i32 %call3, i32* %pb, align 4
  %7 = load i32, i32* %p, align 4
  %8 = load i32, i32* %c.addr, align 4
  %sub4 = sub nsw i32 %7, %8
  %call5 = call i32 @abs(i32 %sub4) #9
  store i32 %call5, i32* %pc, align 4
  %9 = load i32, i32* %pa, align 4
  %10 = load i32, i32* %pb, align 4
  %cmp = icmp sle i32 %9, %10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %11 = load i32, i32* %pa, align 4
  %12 = load i32, i32* %pc, align 4
  %cmp6 = icmp sle i32 %11, %12
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %13 = load i32, i32* %a.addr, align 4
  store i32 %13, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %14 = load i32, i32* %pb, align 4
  %15 = load i32, i32* %pc, align 4
  %cmp7 = icmp sle i32 %14, %15
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %16 = load i32, i32* %b.addr, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.end
  %17 = load i32, i32* %c.addr, align 4
  store i32 %17, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end9, %if.then8, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__do_zlib(%struct.stbi__zbuf* %a, i8* %obuf, i32 %olen, i32 %exp, i32 %parse_header) #0 {
entry:
  %a.addr = alloca %struct.stbi__zbuf*, align 8
  %obuf.addr = alloca i8*, align 8
  %olen.addr = alloca i32, align 4
  %exp.addr = alloca i32, align 4
  %parse_header.addr = alloca i32, align 4
  store %struct.stbi__zbuf* %a, %struct.stbi__zbuf** %a.addr, align 8
  store i8* %obuf, i8** %obuf.addr, align 8
  store i32 %olen, i32* %olen.addr, align 4
  store i32 %exp, i32* %exp.addr, align 4
  store i32 %parse_header, i32* %parse_header.addr, align 4
  %0 = load i8*, i8** %obuf.addr, align 8
  %1 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout_start = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %1, i32 0, i32 5
  store i8* %0, i8** %zout_start, align 8
  %2 = load i8*, i8** %obuf.addr, align 8
  %3 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %3, i32 0, i32 4
  store i8* %2, i8** %zout, align 8
  %4 = load i8*, i8** %obuf.addr, align 8
  %5 = load i32, i32* %olen.addr, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %idx.ext
  %6 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %6, i32 0, i32 6
  store i8* %add.ptr, i8** %zout_end, align 8
  %7 = load i32, i32* %exp.addr, align 4
  %8 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %z_expandable = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %8, i32 0, i32 7
  store i32 %7, i32* %z_expandable, align 8
  %9 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %10 = load i32, i32* %parse_header.addr, align 4
  %call = call i32 @stbi__parse_zlib(%struct.stbi__zbuf* %9, i32 %10)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__parse_zlib(%struct.stbi__zbuf* %a, i32 %parse_header) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.stbi__zbuf*, align 8
  %parse_header.addr = alloca i32, align 4
  %final = alloca i32, align 4
  %type = alloca i32, align 4
  store %struct.stbi__zbuf* %a, %struct.stbi__zbuf** %a.addr, align 8
  store i32 %parse_header, i32* %parse_header.addr, align 4
  %0 = load i32, i32* %parse_header.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end3

if.then:                                          ; preds = %entry
  %1 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call = call i32 @stbi__parse_zlib_header(%struct.stbi__zbuf* %1)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end3

if.end3:                                          ; preds = %if.end, %entry
  %2 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %num_bits = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %2, i32 0, i32 2
  store i32 0, i32* %num_bits, align 8
  %3 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %3, i32 0, i32 3
  store i32 0, i32* %code_buffer, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end3
  %4 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call4 = call i32 @stbi__zreceive(%struct.stbi__zbuf* %4, i32 1)
  store i32 %call4, i32* %final, align 4
  %5 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call5 = call i32 @stbi__zreceive(%struct.stbi__zbuf* %5, i32 2)
  store i32 %call5, i32* %type, align 4
  %6 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then6, label %if.else

if.then6:                                         ; preds = %do.body
  %7 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call7 = call i32 @stbi__parse_uncompressed_block(%struct.stbi__zbuf* %7)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end10, label %if.then9

if.then9:                                         ; preds = %if.then6
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.then6
  br label %if.end35

if.else:                                          ; preds = %do.body
  %8 = load i32, i32* %type, align 4
  %cmp11 = icmp eq i32 %8, 3
  br i1 %cmp11, label %if.then12, label %if.else13

if.then12:                                        ; preds = %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.else13:                                        ; preds = %if.else
  %9 = load i32, i32* %type, align 4
  %cmp14 = icmp eq i32 %9, 1
  br i1 %cmp14, label %if.then15, label %if.else24

if.then15:                                        ; preds = %if.else13
  %10 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %z_length = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %10, i32 0, i32 8
  %call16 = call i32 @stbi__zbuild_huffman(%struct.stbi__zhuffman* %z_length, i8* getelementptr inbounds ([288 x i8], [288 x i8]* @stbi__zdefault_length, i64 0, i64 0), i32 288)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %if.then15
  store i32 0, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %if.then15
  %11 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %z_distance = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %11, i32 0, i32 9
  %call20 = call i32 @stbi__zbuild_huffman(%struct.stbi__zhuffman* %z_distance, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @stbi__zdefault_distance, i64 0, i64 0), i32 32)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %if.end19
  store i32 0, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %if.end19
  br label %if.end29

if.else24:                                        ; preds = %if.else13
  %12 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call25 = call i32 @stbi__compute_huffman_codes(%struct.stbi__zbuf* %12)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end28, label %if.then27

if.then27:                                        ; preds = %if.else24
  store i32 0, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %if.else24
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end23
  %13 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call30 = call i32 @stbi__parse_huffman_block(%struct.stbi__zbuf* %13)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.end33, label %if.then32

if.then32:                                        ; preds = %if.end29
  store i32 0, i32* %retval, align 4
  br label %return

if.end33:                                         ; preds = %if.end29
  br label %if.end34

if.end34:                                         ; preds = %if.end33
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.end10
  br label %do.cond

do.cond:                                          ; preds = %if.end35
  %14 = load i32, i32* %final, align 4
  %tobool36 = icmp ne i32 %14, 0
  %lnot = xor i1 %tobool36, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then32, %if.then27, %if.then22, %if.then18, %if.then12, %if.then9, %if.then2
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__parse_zlib_header(%struct.stbi__zbuf* %a) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.stbi__zbuf*, align 8
  %cmf = alloca i32, align 4
  %cm = alloca i32, align 4
  %flg = alloca i32, align 4
  store %struct.stbi__zbuf* %a, %struct.stbi__zbuf** %a.addr, align 8
  %0 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call = call zeroext i8 @stbi__zget8(%struct.stbi__zbuf* %0)
  %conv = zext i8 %call to i32
  store i32 %conv, i32* %cmf, align 4
  %1 = load i32, i32* %cmf, align 4
  %and = and i32 %1, 15
  store i32 %and, i32* %cm, align 4
  %2 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call1 = call zeroext i8 @stbi__zget8(%struct.stbi__zbuf* %2)
  %conv2 = zext i8 %call1 to i32
  store i32 %conv2, i32* %flg, align 4
  %3 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call3 = call i32 @stbi__zeof(%struct.stbi__zbuf* %3)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call4 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.136, i64 0, i64 0))
  store i32 %call4, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %cmf, align 4
  %mul = mul nsw i32 %4, 256
  %5 = load i32, i32* %flg, align 4
  %add = add nsw i32 %mul, %5
  %rem = srem i32 %add, 31
  %cmp = icmp ne i32 %rem, 0
  br i1 %cmp, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.136, i64 0, i64 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %if.end
  %6 = load i32, i32* %flg, align 4
  %and9 = and i32 %6, 32
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end8
  %call12 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.137, i64 0, i64 0))
  store i32 %call12, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.end8
  %7 = load i32, i32* %cm, align 4
  %cmp14 = icmp ne i32 %7, 8
  br i1 %cmp14, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end13
  %call17 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.118, i64 0, i64 0))
  store i32 %call17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end13
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end18, %if.then16, %if.then11, %if.then6, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__zreceive(%struct.stbi__zbuf* %z, i32 %n) #0 {
entry:
  %z.addr = alloca %struct.stbi__zbuf*, align 8
  %n.addr = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.stbi__zbuf* %z, %struct.stbi__zbuf** %z.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %num_bits = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %0, i32 0, i32 2
  %1 = load i32, i32* %num_bits, align 8
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  call void @stbi__fill_bits(%struct.stbi__zbuf* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %4, i32 0, i32 3
  %5 = load i32, i32* %code_buffer, align 4
  %6 = load i32, i32* %n.addr, align 4
  %shl = shl i32 1, %6
  %sub = sub nsw i32 %shl, 1
  %and = and i32 %5, %sub
  store i32 %and, i32* %k, align 4
  %7 = load i32, i32* %n.addr, align 4
  %8 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %code_buffer1 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %8, i32 0, i32 3
  %9 = load i32, i32* %code_buffer1, align 4
  %shr = lshr i32 %9, %7
  store i32 %shr, i32* %code_buffer1, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %num_bits2 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %11, i32 0, i32 2
  %12 = load i32, i32* %num_bits2, align 8
  %sub3 = sub nsw i32 %12, %10
  store i32 %sub3, i32* %num_bits2, align 8
  %13 = load i32, i32* %k, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__parse_uncompressed_block(%struct.stbi__zbuf* %a) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.stbi__zbuf*, align 8
  %header = alloca [4 x i8], align 1
  %len = alloca i32, align 4
  %nlen = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.stbi__zbuf* %a, %struct.stbi__zbuf** %a.addr, align 8
  %0 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %num_bits = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %0, i32 0, i32 2
  %1 = load i32, i32* %num_bits, align 8
  %and = and i32 %1, 7
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %3 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %num_bits1 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %3, i32 0, i32 2
  %4 = load i32, i32* %num_bits1, align 8
  %and2 = and i32 %4, 7
  %call = call i32 @stbi__zreceive(%struct.stbi__zbuf* %2, i32 %and2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %k, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %num_bits3 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %5, i32 0, i32 2
  %6 = load i32, i32* %num_bits3, align 8
  %cmp = icmp sgt i32 %6, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %7, i32 0, i32 3
  %8 = load i32, i32* %code_buffer, align 4
  %and4 = and i32 %8, 255
  %conv = trunc i32 %and4 to i8
  %9 = load i32, i32* %k, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %k, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* %header, i64 0, i64 %idxprom
  store i8 %conv, i8* %arrayidx, align 1
  %10 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %code_buffer5 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %10, i32 0, i32 3
  %11 = load i32, i32* %code_buffer5, align 4
  %shr = lshr i32 %11, 8
  store i32 %shr, i32* %code_buffer5, align 4
  %12 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %num_bits6 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %12, i32 0, i32 2
  %13 = load i32, i32* %num_bits6, align 8
  %sub = sub nsw i32 %13, 8
  store i32 %sub, i32* %num_bits6, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %num_bits7 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %14, i32 0, i32 2
  %15 = load i32, i32* %num_bits7, align 8
  %cmp8 = icmp slt i32 %15, 0
  br i1 %cmp8, label %if.then10, label %if.end12

if.then10:                                        ; preds = %while.end
  %call11 = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.138, i64 0, i64 0))
  store i32 %call11, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %while.end
  br label %while.cond13

while.cond13:                                     ; preds = %while.body16, %if.end12
  %16 = load i32, i32* %k, align 4
  %cmp14 = icmp slt i32 %16, 4
  br i1 %cmp14, label %while.body16, label %while.end21

while.body16:                                     ; preds = %while.cond13
  %17 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call17 = call zeroext i8 @stbi__zget8(%struct.stbi__zbuf* %17)
  %18 = load i32, i32* %k, align 4
  %inc18 = add nsw i32 %18, 1
  store i32 %inc18, i32* %k, align 4
  %idxprom19 = sext i32 %18 to i64
  %arrayidx20 = getelementptr inbounds [4 x i8], [4 x i8]* %header, i64 0, i64 %idxprom19
  store i8 %call17, i8* %arrayidx20, align 1
  br label %while.cond13

while.end21:                                      ; preds = %while.cond13
  %arrayidx22 = getelementptr inbounds [4 x i8], [4 x i8]* %header, i64 0, i64 1
  %19 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %19 to i32
  %mul = mul nsw i32 %conv23, 256
  %arrayidx24 = getelementptr inbounds [4 x i8], [4 x i8]* %header, i64 0, i64 0
  %20 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %20 to i32
  %add = add nsw i32 %mul, %conv25
  store i32 %add, i32* %len, align 4
  %arrayidx26 = getelementptr inbounds [4 x i8], [4 x i8]* %header, i64 0, i64 3
  %21 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %21 to i32
  %mul28 = mul nsw i32 %conv27, 256
  %arrayidx29 = getelementptr inbounds [4 x i8], [4 x i8]* %header, i64 0, i64 2
  %22 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %22 to i32
  %add31 = add nsw i32 %mul28, %conv30
  store i32 %add31, i32* %nlen, align 4
  %23 = load i32, i32* %nlen, align 4
  %24 = load i32, i32* %len, align 4
  %xor = xor i32 %24, 65535
  %cmp32 = icmp ne i32 %23, %xor
  br i1 %cmp32, label %if.then34, label %if.end36

if.then34:                                        ; preds = %while.end21
  %call35 = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.138, i64 0, i64 0))
  store i32 %call35, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %while.end21
  %25 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zbuffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %25, i32 0, i32 0
  %26 = load i8*, i8** %zbuffer, align 8
  %27 = load i32, i32* %len, align 4
  %idx.ext = sext i32 %27 to i64
  %add.ptr = getelementptr inbounds i8, i8* %26, i64 %idx.ext
  %28 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zbuffer_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %28, i32 0, i32 1
  %29 = load i8*, i8** %zbuffer_end, align 8
  %cmp37 = icmp ugt i8* %add.ptr, %29
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %if.end36
  %call40 = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.139, i64 0, i64 0))
  store i32 %call40, i32* %retval, align 4
  br label %return

if.end41:                                         ; preds = %if.end36
  %30 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %30, i32 0, i32 4
  %31 = load i8*, i8** %zout, align 8
  %32 = load i32, i32* %len, align 4
  %idx.ext42 = sext i32 %32 to i64
  %add.ptr43 = getelementptr inbounds i8, i8* %31, i64 %idx.ext42
  %33 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %33, i32 0, i32 6
  %34 = load i8*, i8** %zout_end, align 8
  %cmp44 = icmp ugt i8* %add.ptr43, %34
  br i1 %cmp44, label %if.then46, label %if.end52

if.then46:                                        ; preds = %if.end41
  %35 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %36 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout47 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %36, i32 0, i32 4
  %37 = load i8*, i8** %zout47, align 8
  %38 = load i32, i32* %len, align 4
  %call48 = call i32 @stbi__zexpand(%struct.stbi__zbuf* %35, i8* %37, i32 %38)
  %tobool49 = icmp ne i32 %call48, 0
  br i1 %tobool49, label %if.end51, label %if.then50

if.then50:                                        ; preds = %if.then46
  store i32 0, i32* %retval, align 4
  br label %return

if.end51:                                         ; preds = %if.then46
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end41
  %39 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout53 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %39, i32 0, i32 4
  %40 = load i8*, i8** %zout53, align 8
  %41 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zbuffer54 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %41, i32 0, i32 0
  %42 = load i8*, i8** %zbuffer54, align 8
  %43 = load i32, i32* %len, align 4
  %conv55 = sext i32 %43 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %42, i64 %conv55, i1 false)
  %44 = load i32, i32* %len, align 4
  %45 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zbuffer56 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %45, i32 0, i32 0
  %46 = load i8*, i8** %zbuffer56, align 8
  %idx.ext57 = sext i32 %44 to i64
  %add.ptr58 = getelementptr inbounds i8, i8* %46, i64 %idx.ext57
  store i8* %add.ptr58, i8** %zbuffer56, align 8
  %47 = load i32, i32* %len, align 4
  %48 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout59 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %48, i32 0, i32 4
  %49 = load i8*, i8** %zout59, align 8
  %idx.ext60 = sext i32 %47 to i64
  %add.ptr61 = getelementptr inbounds i8, i8* %49, i64 %idx.ext60
  store i8* %add.ptr61, i8** %zout59, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end52, %if.then50, %if.then39, %if.then34, %if.then10
  %50 = load i32, i32* %retval, align 4
  ret i32 %50
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__zbuild_huffman(%struct.stbi__zhuffman* %z, i8* %sizelist, i32 %num) #0 {
entry:
  %retval = alloca i32, align 4
  %z.addr = alloca %struct.stbi__zhuffman*, align 8
  %sizelist.addr = alloca i8*, align 8
  %num.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %code = alloca i32, align 4
  %next_code = alloca [16 x i32], align 16
  %sizes = alloca [17 x i32], align 16
  %s = alloca i32, align 4
  %c = alloca i32, align 4
  %fastv = alloca i16, align 2
  %j = alloca i32, align 4
  store %struct.stbi__zhuffman* %z, %struct.stbi__zhuffman** %z.addr, align 8
  store i8* %sizelist, i8** %sizelist.addr, align 8
  store i32 %num, i32* %num.addr, align 4
  store i32 0, i32* %k, align 4
  %arraydecay = getelementptr inbounds [17 x i32], [17 x i32]* %sizes, i64 0, i64 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 68, i1 false)
  %1 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %fast = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [512 x i16], [512 x i16]* %fast, i64 0, i64 0
  %2 = bitcast i16* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 1024, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %num.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** %sizelist.addr, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %idxprom2 = zext i8 %7 to i64
  %arrayidx3 = getelementptr inbounds [17 x i32], [17 x i32]* %sizes, i64 0, i64 %idxprom2
  %8 = load i32, i32* %arrayidx3, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %arrayidx3, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc4 = add nsw i32 %9, 1
  store i32 %inc4, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx5 = getelementptr inbounds [17 x i32], [17 x i32]* %sizes, i64 0, i64 0
  store i32 0, i32* %arrayidx5, align 16
  store i32 1, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc12, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %10, 16
  br i1 %cmp7, label %for.body8, label %for.end14

for.body8:                                        ; preds = %for.cond6
  %11 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %11 to i64
  %arrayidx10 = getelementptr inbounds [17 x i32], [17 x i32]* %sizes, i64 0, i64 %idxprom9
  %12 = load i32, i32* %arrayidx10, align 4
  %13 = load i32, i32* %i, align 4
  %shl = shl i32 1, %13
  %cmp11 = icmp sgt i32 %12, %shl
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %for.body8
  %call = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.141, i64 0, i64 0))
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body8
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %14, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond6

for.end14:                                        ; preds = %for.cond6
  store i32 0, i32* %code, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc45, %for.end14
  %15 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %15, 16
  br i1 %cmp16, label %for.body17, label %for.end47

for.body17:                                       ; preds = %for.cond15
  %16 = load i32, i32* %code, align 4
  %17 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %17 to i64
  %arrayidx19 = getelementptr inbounds [16 x i32], [16 x i32]* %next_code, i64 0, i64 %idxprom18
  store i32 %16, i32* %arrayidx19, align 4
  %18 = load i32, i32* %code, align 4
  %conv = trunc i32 %18 to i16
  %19 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %firstcode = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %19, i32 0, i32 1
  %20 = load i32, i32* %i, align 4
  %idxprom20 = sext i32 %20 to i64
  %arrayidx21 = getelementptr inbounds [16 x i16], [16 x i16]* %firstcode, i64 0, i64 %idxprom20
  store i16 %conv, i16* %arrayidx21, align 2
  %21 = load i32, i32* %k, align 4
  %conv22 = trunc i32 %21 to i16
  %22 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %firstsymbol = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %22, i32 0, i32 3
  %23 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds [16 x i16], [16 x i16]* %firstsymbol, i64 0, i64 %idxprom23
  store i16 %conv22, i16* %arrayidx24, align 2
  %24 = load i32, i32* %code, align 4
  %25 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %25 to i64
  %arrayidx26 = getelementptr inbounds [17 x i32], [17 x i32]* %sizes, i64 0, i64 %idxprom25
  %26 = load i32, i32* %arrayidx26, align 4
  %add = add nsw i32 %24, %26
  store i32 %add, i32* %code, align 4
  %27 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %27 to i64
  %arrayidx28 = getelementptr inbounds [17 x i32], [17 x i32]* %sizes, i64 0, i64 %idxprom27
  %28 = load i32, i32* %arrayidx28, align 4
  %tobool = icmp ne i32 %28, 0
  br i1 %tobool, label %if.then29, label %if.end36

if.then29:                                        ; preds = %for.body17
  %29 = load i32, i32* %code, align 4
  %sub = sub nsw i32 %29, 1
  %30 = load i32, i32* %i, align 4
  %shl30 = shl i32 1, %30
  %cmp31 = icmp sge i32 %sub, %shl30
  br i1 %cmp31, label %if.then33, label %if.end35

if.then33:                                        ; preds = %if.then29
  %call34 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.142, i64 0, i64 0))
  store i32 %call34, i32* %retval, align 4
  br label %return

if.end35:                                         ; preds = %if.then29
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %for.body17
  %31 = load i32, i32* %code, align 4
  %32 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 16, %32
  %shl38 = shl i32 %31, %sub37
  %33 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %maxcode = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %33, i32 0, i32 2
  %34 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds [17 x i32], [17 x i32]* %maxcode, i64 0, i64 %idxprom39
  store i32 %shl38, i32* %arrayidx40, align 4
  %35 = load i32, i32* %code, align 4
  %shl41 = shl i32 %35, 1
  store i32 %shl41, i32* %code, align 4
  %36 = load i32, i32* %i, align 4
  %idxprom42 = sext i32 %36 to i64
  %arrayidx43 = getelementptr inbounds [17 x i32], [17 x i32]* %sizes, i64 0, i64 %idxprom42
  %37 = load i32, i32* %arrayidx43, align 4
  %38 = load i32, i32* %k, align 4
  %add44 = add nsw i32 %38, %37
  store i32 %add44, i32* %k, align 4
  br label %for.inc45

for.inc45:                                        ; preds = %if.end36
  %39 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %39, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond15

for.end47:                                        ; preds = %for.cond15
  %40 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %maxcode48 = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %40, i32 0, i32 2
  %arrayidx49 = getelementptr inbounds [17 x i32], [17 x i32]* %maxcode48, i64 0, i64 16
  store i32 65536, i32* %arrayidx49, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond50

for.cond50:                                       ; preds = %for.inc97, %for.end47
  %41 = load i32, i32* %i, align 4
  %42 = load i32, i32* %num.addr, align 4
  %cmp51 = icmp slt i32 %41, %42
  br i1 %cmp51, label %for.body53, label %for.end99

for.body53:                                       ; preds = %for.cond50
  %43 = load i8*, i8** %sizelist.addr, align 8
  %44 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %44 to i64
  %arrayidx55 = getelementptr inbounds i8, i8* %43, i64 %idxprom54
  %45 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %45 to i32
  store i32 %conv56, i32* %s, align 4
  %46 = load i32, i32* %s, align 4
  %tobool57 = icmp ne i32 %46, 0
  br i1 %tobool57, label %if.then58, label %if.end96

if.then58:                                        ; preds = %for.body53
  %47 = load i32, i32* %s, align 4
  %idxprom59 = sext i32 %47 to i64
  %arrayidx60 = getelementptr inbounds [16 x i32], [16 x i32]* %next_code, i64 0, i64 %idxprom59
  %48 = load i32, i32* %arrayidx60, align 4
  %49 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %firstcode61 = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %49, i32 0, i32 1
  %50 = load i32, i32* %s, align 4
  %idxprom62 = sext i32 %50 to i64
  %arrayidx63 = getelementptr inbounds [16 x i16], [16 x i16]* %firstcode61, i64 0, i64 %idxprom62
  %51 = load i16, i16* %arrayidx63, align 2
  %conv64 = zext i16 %51 to i32
  %sub65 = sub nsw i32 %48, %conv64
  %52 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %firstsymbol66 = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %52, i32 0, i32 3
  %53 = load i32, i32* %s, align 4
  %idxprom67 = sext i32 %53 to i64
  %arrayidx68 = getelementptr inbounds [16 x i16], [16 x i16]* %firstsymbol66, i64 0, i64 %idxprom67
  %54 = load i16, i16* %arrayidx68, align 2
  %conv69 = zext i16 %54 to i32
  %add70 = add nsw i32 %sub65, %conv69
  store i32 %add70, i32* %c, align 4
  %55 = load i32, i32* %s, align 4
  %shl71 = shl i32 %55, 9
  %56 = load i32, i32* %i, align 4
  %or = or i32 %shl71, %56
  %conv72 = trunc i32 %or to i16
  store i16 %conv72, i16* %fastv, align 2
  %57 = load i32, i32* %s, align 4
  %conv73 = trunc i32 %57 to i8
  %58 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %size = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %58, i32 0, i32 4
  %59 = load i32, i32* %c, align 4
  %idxprom74 = sext i32 %59 to i64
  %arrayidx75 = getelementptr inbounds [288 x i8], [288 x i8]* %size, i64 0, i64 %idxprom74
  store i8 %conv73, i8* %arrayidx75, align 1
  %60 = load i32, i32* %i, align 4
  %conv76 = trunc i32 %60 to i16
  %61 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %value = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %61, i32 0, i32 5
  %62 = load i32, i32* %c, align 4
  %idxprom77 = sext i32 %62 to i64
  %arrayidx78 = getelementptr inbounds [288 x i16], [288 x i16]* %value, i64 0, i64 %idxprom77
  store i16 %conv76, i16* %arrayidx78, align 2
  %63 = load i32, i32* %s, align 4
  %cmp79 = icmp sle i32 %63, 9
  br i1 %cmp79, label %if.then81, label %if.end92

if.then81:                                        ; preds = %if.then58
  %64 = load i32, i32* %s, align 4
  %idxprom82 = sext i32 %64 to i64
  %arrayidx83 = getelementptr inbounds [16 x i32], [16 x i32]* %next_code, i64 0, i64 %idxprom82
  %65 = load i32, i32* %arrayidx83, align 4
  %66 = load i32, i32* %s, align 4
  %call84 = call i32 @stbi__bit_reverse(i32 %65, i32 %66)
  store i32 %call84, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then81
  %67 = load i32, i32* %j, align 4
  %cmp85 = icmp slt i32 %67, 512
  br i1 %cmp85, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %68 = load i16, i16* %fastv, align 2
  %69 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %fast87 = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %69, i32 0, i32 0
  %70 = load i32, i32* %j, align 4
  %idxprom88 = sext i32 %70 to i64
  %arrayidx89 = getelementptr inbounds [512 x i16], [512 x i16]* %fast87, i64 0, i64 %idxprom88
  store i16 %68, i16* %arrayidx89, align 2
  %71 = load i32, i32* %s, align 4
  %shl90 = shl i32 1, %71
  %72 = load i32, i32* %j, align 4
  %add91 = add nsw i32 %72, %shl90
  store i32 %add91, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end92

if.end92:                                         ; preds = %while.end, %if.then58
  %73 = load i32, i32* %s, align 4
  %idxprom93 = sext i32 %73 to i64
  %arrayidx94 = getelementptr inbounds [16 x i32], [16 x i32]* %next_code, i64 0, i64 %idxprom93
  %74 = load i32, i32* %arrayidx94, align 4
  %inc95 = add nsw i32 %74, 1
  store i32 %inc95, i32* %arrayidx94, align 4
  br label %if.end96

if.end96:                                         ; preds = %if.end92, %for.body53
  br label %for.inc97

for.inc97:                                        ; preds = %if.end96
  %75 = load i32, i32* %i, align 4
  %inc98 = add nsw i32 %75, 1
  store i32 %inc98, i32* %i, align 4
  br label %for.cond50

for.end99:                                        ; preds = %for.cond50
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end99, %if.then33, %if.then
  %76 = load i32, i32* %retval, align 4
  ret i32 %76
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__compute_huffman_codes(%struct.stbi__zbuf* %a) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.stbi__zbuf*, align 8
  %z_codelength = alloca %struct.stbi__zhuffman, align 4
  %lencodes = alloca [455 x i8], align 16
  %codelength_sizes = alloca [19 x i8], align 16
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %hlit = alloca i32, align 4
  %hdist = alloca i32, align 4
  %hclen = alloca i32, align 4
  %ntot = alloca i32, align 4
  %s = alloca i32, align 4
  %c = alloca i32, align 4
  %fill = alloca i8, align 1
  store %struct.stbi__zbuf* %a, %struct.stbi__zbuf** %a.addr, align 8
  %0 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call = call i32 @stbi__zreceive(%struct.stbi__zbuf* %0, i32 5)
  %add = add i32 %call, 257
  store i32 %add, i32* %hlit, align 4
  %1 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call1 = call i32 @stbi__zreceive(%struct.stbi__zbuf* %1, i32 5)
  %add2 = add i32 %call1, 1
  store i32 %add2, i32* %hdist, align 4
  %2 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call3 = call i32 @stbi__zreceive(%struct.stbi__zbuf* %2, i32 4)
  %add4 = add i32 %call3, 4
  store i32 %add4, i32* %hclen, align 4
  %3 = load i32, i32* %hlit, align 4
  %4 = load i32, i32* %hdist, align 4
  %add5 = add nsw i32 %3, %4
  store i32 %add5, i32* %ntot, align 4
  %arraydecay = getelementptr inbounds [19 x i8], [19 x i8]* %codelength_sizes, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay, i8 0, i64 19, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %hclen, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call6 = call i32 @stbi__zreceive(%struct.stbi__zbuf* %7, i32 3)
  store i32 %call6, i32* %s, align 4
  %8 = load i32, i32* %s, align 4
  %conv = trunc i32 %8 to i8
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds [19 x i8], [19 x i8]* @stbi__compute_huffman_codes.length_dezigzag, i64 0, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %idxprom7 = zext i8 %10 to i64
  %arrayidx8 = getelementptr inbounds [19 x i8], [19 x i8]* %codelength_sizes, i64 0, i64 %idxprom7
  store i8 %conv, i8* %arrayidx8, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay9 = getelementptr inbounds [19 x i8], [19 x i8]* %codelength_sizes, i64 0, i64 0
  %call10 = call i32 @stbi__zbuild_huffman(%struct.stbi__zhuffman* %z_codelength, i8* %arraydecay9, i32 19)
  %tobool = icmp ne i32 %call10, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.end
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end67, %if.end
  %12 = load i32, i32* %n, align 4
  %13 = load i32, i32* %ntot, align 4
  %cmp11 = icmp slt i32 %12, %13
  br i1 %cmp11, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call13 = call i32 @stbi__zhuffman_decode(%struct.stbi__zbuf* %14, %struct.stbi__zhuffman* %z_codelength)
  store i32 %call13, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %cmp14 = icmp slt i32 %15, 0
  br i1 %cmp14, label %if.then18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %16 = load i32, i32* %c, align 4
  %cmp16 = icmp sge i32 %16, 19
  br i1 %cmp16, label %if.then18, label %if.end20

if.then18:                                        ; preds = %lor.lhs.false, %while.body
  %call19 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.142, i64 0, i64 0))
  store i32 %call19, i32* %retval, align 4
  br label %return

if.end20:                                         ; preds = %lor.lhs.false
  %17 = load i32, i32* %c, align 4
  %cmp21 = icmp slt i32 %17, 16
  br i1 %cmp21, label %if.then23, label %if.else

if.then23:                                        ; preds = %if.end20
  %18 = load i32, i32* %c, align 4
  %conv24 = trunc i32 %18 to i8
  %19 = load i32, i32* %n, align 4
  %inc25 = add nsw i32 %19, 1
  store i32 %inc25, i32* %n, align 4
  %idxprom26 = sext i32 %19 to i64
  %arrayidx27 = getelementptr inbounds [455 x i8], [455 x i8]* %lencodes, i64 0, i64 %idxprom26
  store i8 %conv24, i8* %arrayidx27, align 1
  br label %if.end67

if.else:                                          ; preds = %if.end20
  store i8 0, i8* %fill, align 1
  %20 = load i32, i32* %c, align 4
  %cmp28 = icmp eq i32 %20, 16
  br i1 %cmp28, label %if.then30, label %if.else40

if.then30:                                        ; preds = %if.else
  %21 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call31 = call i32 @stbi__zreceive(%struct.stbi__zbuf* %21, i32 2)
  %add32 = add i32 %call31, 3
  store i32 %add32, i32* %c, align 4
  %22 = load i32, i32* %n, align 4
  %cmp33 = icmp eq i32 %22, 0
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.then30
  %call36 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.142, i64 0, i64 0))
  store i32 %call36, i32* %retval, align 4
  br label %return

if.end37:                                         ; preds = %if.then30
  %23 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %23, 1
  %idxprom38 = sext i32 %sub to i64
  %arrayidx39 = getelementptr inbounds [455 x i8], [455 x i8]* %lencodes, i64 0, i64 %idxprom38
  %24 = load i8, i8* %arrayidx39, align 1
  store i8 %24, i8* %fill, align 1
  br label %if.end56

if.else40:                                        ; preds = %if.else
  %25 = load i32, i32* %c, align 4
  %cmp41 = icmp eq i32 %25, 17
  br i1 %cmp41, label %if.then43, label %if.else46

if.then43:                                        ; preds = %if.else40
  %26 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call44 = call i32 @stbi__zreceive(%struct.stbi__zbuf* %26, i32 3)
  %add45 = add i32 %call44, 3
  store i32 %add45, i32* %c, align 4
  br label %if.end55

if.else46:                                        ; preds = %if.else40
  %27 = load i32, i32* %c, align 4
  %cmp47 = icmp eq i32 %27, 18
  br i1 %cmp47, label %if.then49, label %if.else52

if.then49:                                        ; preds = %if.else46
  %28 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call50 = call i32 @stbi__zreceive(%struct.stbi__zbuf* %28, i32 7)
  %add51 = add i32 %call50, 11
  store i32 %add51, i32* %c, align 4
  br label %if.end54

if.else52:                                        ; preds = %if.else46
  %call53 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.142, i64 0, i64 0))
  store i32 %call53, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %if.then49
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.then43
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end37
  %29 = load i32, i32* %ntot, align 4
  %30 = load i32, i32* %n, align 4
  %sub57 = sub nsw i32 %29, %30
  %31 = load i32, i32* %c, align 4
  %cmp58 = icmp slt i32 %sub57, %31
  br i1 %cmp58, label %if.then60, label %if.end62

if.then60:                                        ; preds = %if.end56
  %call61 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.142, i64 0, i64 0))
  store i32 %call61, i32* %retval, align 4
  br label %return

if.end62:                                         ; preds = %if.end56
  %arraydecay63 = getelementptr inbounds [455 x i8], [455 x i8]* %lencodes, i64 0, i64 0
  %32 = load i32, i32* %n, align 4
  %idx.ext = sext i32 %32 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay63, i64 %idx.ext
  %33 = load i8, i8* %fill, align 1
  %conv64 = zext i8 %33 to i32
  %34 = trunc i32 %conv64 to i8
  %35 = load i32, i32* %c, align 4
  %conv65 = sext i32 %35 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr, i8 %34, i64 %conv65, i1 false)
  %36 = load i32, i32* %c, align 4
  %37 = load i32, i32* %n, align 4
  %add66 = add nsw i32 %37, %36
  store i32 %add66, i32* %n, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.end62, %if.then23
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load i32, i32* %n, align 4
  %39 = load i32, i32* %ntot, align 4
  %cmp68 = icmp ne i32 %38, %39
  br i1 %cmp68, label %if.then70, label %if.end72

if.then70:                                        ; preds = %while.end
  %call71 = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.142, i64 0, i64 0))
  store i32 %call71, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %while.end
  %40 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %z_length = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %40, i32 0, i32 8
  %arraydecay73 = getelementptr inbounds [455 x i8], [455 x i8]* %lencodes, i64 0, i64 0
  %41 = load i32, i32* %hlit, align 4
  %call74 = call i32 @stbi__zbuild_huffman(%struct.stbi__zhuffman* %z_length, i8* %arraydecay73, i32 %41)
  %tobool75 = icmp ne i32 %call74, 0
  br i1 %tobool75, label %if.end77, label %if.then76

if.then76:                                        ; preds = %if.end72
  store i32 0, i32* %retval, align 4
  br label %return

if.end77:                                         ; preds = %if.end72
  %42 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %z_distance = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %42, i32 0, i32 9
  %arraydecay78 = getelementptr inbounds [455 x i8], [455 x i8]* %lencodes, i64 0, i64 0
  %43 = load i32, i32* %hlit, align 4
  %idx.ext79 = sext i32 %43 to i64
  %add.ptr80 = getelementptr inbounds i8, i8* %arraydecay78, i64 %idx.ext79
  %44 = load i32, i32* %hdist, align 4
  %call81 = call i32 @stbi__zbuild_huffman(%struct.stbi__zhuffman* %z_distance, i8* %add.ptr80, i32 %44)
  %tobool82 = icmp ne i32 %call81, 0
  br i1 %tobool82, label %if.end84, label %if.then83

if.then83:                                        ; preds = %if.end77
  store i32 0, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %if.end77
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end84, %if.then83, %if.then76, %if.then70, %if.then60, %if.else52, %if.then35, %if.then18, %if.then
  %45 = load i32, i32* %retval, align 4
  ret i32 %45
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__parse_huffman_block(%struct.stbi__zbuf* %a) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.stbi__zbuf*, align 8
  %zout = alloca i8*, align 8
  %z = alloca i32, align 4
  %p = alloca i8*, align 8
  %len = alloca i32, align 4
  %dist = alloca i32, align 4
  %v = alloca i8, align 1
  store %struct.stbi__zbuf* %a, %struct.stbi__zbuf** %a.addr, align 8
  %0 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout1 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %0, i32 0, i32 4
  %1 = load i8*, i8** %zout1, align 8
  store i8* %1, i8** %zout, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end80, %entry
  %2 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %3 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %z_length = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %3, i32 0, i32 8
  %call = call i32 @stbi__zhuffman_decode(%struct.stbi__zbuf* %2, %struct.stbi__zhuffman* %z_length)
  store i32 %call, i32* %z, align 4
  %4 = load i32, i32* %z, align 4
  %cmp = icmp slt i32 %4, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.cond
  %5 = load i32, i32* %z, align 4
  %cmp2 = icmp slt i32 %5, 0
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %call4 = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.62, i64 0, i64 0))
  store i32 %call4, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load i8*, i8** %zout, align 8
  %7 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %7, i32 0, i32 6
  %8 = load i8*, i8** %zout_end, align 8
  %cmp5 = icmp uge i8* %6, %8
  br i1 %cmp5, label %if.then6, label %if.end11

if.then6:                                         ; preds = %if.end
  %9 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %10 = load i8*, i8** %zout, align 8
  %call7 = call i32 @stbi__zexpand(%struct.stbi__zbuf* %9, i8* %10, i32 1)
  %tobool = icmp ne i32 %call7, 0
  br i1 %tobool, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then6
  store i32 0, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.then6
  %11 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout10 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %11, i32 0, i32 4
  %12 = load i8*, i8** %zout10, align 8
  store i8* %12, i8** %zout, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.end9, %if.end
  %13 = load i32, i32* %z, align 4
  %conv = trunc i32 %13 to i8
  %14 = load i8*, i8** %zout, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr, i8** %zout, align 8
  store i8 %conv, i8* %14, align 1
  br label %if.end80

if.else:                                          ; preds = %for.cond
  %15 = load i32, i32* %z, align 4
  %cmp12 = icmp eq i32 %15, 256
  br i1 %cmp12, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.else
  %16 = load i8*, i8** %zout, align 8
  %17 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout15 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %17, i32 0, i32 4
  store i8* %16, i8** %zout15, align 8
  store i32 1, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.else
  %18 = load i32, i32* %z, align 4
  %sub = sub nsw i32 %18, 257
  store i32 %sub, i32* %z, align 4
  %19 = load i32, i32* %z, align 4
  %idxprom = sext i32 %19 to i64
  %arrayidx = getelementptr inbounds [31 x i32], [31 x i32]* @stbi__zlength_base, i64 0, i64 %idxprom
  %20 = load i32, i32* %arrayidx, align 4
  store i32 %20, i32* %len, align 4
  %21 = load i32, i32* %z, align 4
  %idxprom17 = sext i32 %21 to i64
  %arrayidx18 = getelementptr inbounds [31 x i32], [31 x i32]* @stbi__zlength_extra, i64 0, i64 %idxprom17
  %22 = load i32, i32* %arrayidx18, align 4
  %tobool19 = icmp ne i32 %22, 0
  br i1 %tobool19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %if.end16
  %23 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %24 = load i32, i32* %z, align 4
  %idxprom21 = sext i32 %24 to i64
  %arrayidx22 = getelementptr inbounds [31 x i32], [31 x i32]* @stbi__zlength_extra, i64 0, i64 %idxprom21
  %25 = load i32, i32* %arrayidx22, align 4
  %call23 = call i32 @stbi__zreceive(%struct.stbi__zbuf* %23, i32 %25)
  %26 = load i32, i32* %len, align 4
  %add = add i32 %26, %call23
  store i32 %add, i32* %len, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then20, %if.end16
  %27 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %28 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %z_distance = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %28, i32 0, i32 9
  %call25 = call i32 @stbi__zhuffman_decode(%struct.stbi__zbuf* %27, %struct.stbi__zhuffman* %z_distance)
  store i32 %call25, i32* %z, align 4
  %29 = load i32, i32* %z, align 4
  %cmp26 = icmp slt i32 %29, 0
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %if.end24
  %call29 = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.62, i64 0, i64 0))
  store i32 %call29, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end24
  %30 = load i32, i32* %z, align 4
  %idxprom31 = sext i32 %30 to i64
  %arrayidx32 = getelementptr inbounds [32 x i32], [32 x i32]* @stbi__zdist_base, i64 0, i64 %idxprom31
  %31 = load i32, i32* %arrayidx32, align 4
  store i32 %31, i32* %dist, align 4
  %32 = load i32, i32* %z, align 4
  %idxprom33 = sext i32 %32 to i64
  %arrayidx34 = getelementptr inbounds [32 x i32], [32 x i32]* @stbi__zdist_extra, i64 0, i64 %idxprom33
  %33 = load i32, i32* %arrayidx34, align 4
  %tobool35 = icmp ne i32 %33, 0
  br i1 %tobool35, label %if.then36, label %if.end41

if.then36:                                        ; preds = %if.end30
  %34 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %35 = load i32, i32* %z, align 4
  %idxprom37 = sext i32 %35 to i64
  %arrayidx38 = getelementptr inbounds [32 x i32], [32 x i32]* @stbi__zdist_extra, i64 0, i64 %idxprom37
  %36 = load i32, i32* %arrayidx38, align 4
  %call39 = call i32 @stbi__zreceive(%struct.stbi__zbuf* %34, i32 %36)
  %37 = load i32, i32* %dist, align 4
  %add40 = add i32 %37, %call39
  store i32 %add40, i32* %dist, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.then36, %if.end30
  %38 = load i8*, i8** %zout, align 8
  %39 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout_start = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %39, i32 0, i32 5
  %40 = load i8*, i8** %zout_start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %38 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %40 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %41 = load i32, i32* %dist, align 4
  %conv42 = sext i32 %41 to i64
  %cmp43 = icmp slt i64 %sub.ptr.sub, %conv42
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.end41
  %call46 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.144, i64 0, i64 0))
  store i32 %call46, i32* %retval, align 4
  br label %return

if.end47:                                         ; preds = %if.end41
  %42 = load i8*, i8** %zout, align 8
  %43 = load i32, i32* %len, align 4
  %idx.ext = sext i32 %43 to i64
  %add.ptr = getelementptr inbounds i8, i8* %42, i64 %idx.ext
  %44 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout_end48 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %44, i32 0, i32 6
  %45 = load i8*, i8** %zout_end48, align 8
  %cmp49 = icmp ugt i8* %add.ptr, %45
  br i1 %cmp49, label %if.then51, label %if.end57

if.then51:                                        ; preds = %if.end47
  %46 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %47 = load i8*, i8** %zout, align 8
  %48 = load i32, i32* %len, align 4
  %call52 = call i32 @stbi__zexpand(%struct.stbi__zbuf* %46, i8* %47, i32 %48)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.end55, label %if.then54

if.then54:                                        ; preds = %if.then51
  store i32 0, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.then51
  %49 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %zout56 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %49, i32 0, i32 4
  %50 = load i8*, i8** %zout56, align 8
  store i8* %50, i8** %zout, align 8
  br label %if.end57

if.end57:                                         ; preds = %if.end55, %if.end47
  %51 = load i8*, i8** %zout, align 8
  %52 = load i32, i32* %dist, align 4
  %idx.ext58 = sext i32 %52 to i64
  %idx.neg = sub i64 0, %idx.ext58
  %add.ptr59 = getelementptr inbounds i8, i8* %51, i64 %idx.neg
  store i8* %add.ptr59, i8** %p, align 8
  %53 = load i32, i32* %dist, align 4
  %cmp60 = icmp eq i32 %53, 1
  br i1 %cmp60, label %if.then62, label %if.else68

if.then62:                                        ; preds = %if.end57
  %54 = load i8*, i8** %p, align 8
  %55 = load i8, i8* %54, align 1
  store i8 %55, i8* %v, align 1
  %56 = load i32, i32* %len, align 4
  %tobool63 = icmp ne i32 %56, 0
  br i1 %tobool63, label %if.then64, label %if.end67

if.then64:                                        ; preds = %if.then62
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then64
  %57 = load i8, i8* %v, align 1
  %58 = load i8*, i8** %zout, align 8
  %incdec.ptr65 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr65, i8** %zout, align 8
  store i8 %57, i8* %58, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %59 = load i32, i32* %len, align 4
  %dec = add nsw i32 %59, -1
  store i32 %dec, i32* %len, align 4
  %tobool66 = icmp ne i32 %dec, 0
  br i1 %tobool66, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end67

if.end67:                                         ; preds = %do.end, %if.then62
  br label %if.end79

if.else68:                                        ; preds = %if.end57
  %60 = load i32, i32* %len, align 4
  %tobool69 = icmp ne i32 %60, 0
  br i1 %tobool69, label %if.then70, label %if.end78

if.then70:                                        ; preds = %if.else68
  br label %do.body71

do.body71:                                        ; preds = %do.cond74, %if.then70
  %61 = load i8*, i8** %p, align 8
  %incdec.ptr72 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr72, i8** %p, align 8
  %62 = load i8, i8* %61, align 1
  %63 = load i8*, i8** %zout, align 8
  %incdec.ptr73 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %incdec.ptr73, i8** %zout, align 8
  store i8 %62, i8* %63, align 1
  br label %do.cond74

do.cond74:                                        ; preds = %do.body71
  %64 = load i32, i32* %len, align 4
  %dec75 = add nsw i32 %64, -1
  store i32 %dec75, i32* %len, align 4
  %tobool76 = icmp ne i32 %dec75, 0
  br i1 %tobool76, label %do.body71, label %do.end77

do.end77:                                         ; preds = %do.cond74
  br label %if.end78

if.end78:                                         ; preds = %do.end77, %if.else68
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %if.end67
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.end11
  br label %for.cond

return:                                           ; preds = %if.then54, %if.then45, %if.then28, %if.then14, %if.then8, %if.then3
  %65 = load i32, i32* %retval, align 4
  ret i32 %65
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__zhuffman_decode(%struct.stbi__zbuf* %a, %struct.stbi__zhuffman* %z) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.stbi__zbuf*, align 8
  %z.addr = alloca %struct.stbi__zhuffman*, align 8
  %b = alloca i32, align 4
  %s = alloca i32, align 4
  store %struct.stbi__zbuf* %a, %struct.stbi__zbuf** %a.addr, align 8
  store %struct.stbi__zhuffman* %z, %struct.stbi__zhuffman** %z.addr, align 8
  %0 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %num_bits = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %0, i32 0, i32 2
  %1 = load i32, i32* %num_bits, align 8
  %cmp = icmp slt i32 %1, 16
  br i1 %cmp, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %call = call i32 @stbi__zeof(%struct.stbi__zbuf* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %3 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  call void @stbi__fill_bits(%struct.stbi__zbuf* %3)
  br label %if.end2

if.end2:                                          ; preds = %if.end, %entry
  %4 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %fast = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %4, i32 0, i32 0
  %5 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %5, i32 0, i32 3
  %6 = load i32, i32* %code_buffer, align 4
  %and = and i32 %6, 511
  %idxprom = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [512 x i16], [512 x i16]* %fast, i64 0, i64 %idxprom
  %7 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %7 to i32
  store i32 %conv, i32* %b, align 4
  %8 = load i32, i32* %b, align 4
  %tobool3 = icmp ne i32 %8, 0
  br i1 %tobool3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.end2
  %9 = load i32, i32* %b, align 4
  %shr = ashr i32 %9, 9
  store i32 %shr, i32* %s, align 4
  %10 = load i32, i32* %s, align 4
  %11 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %code_buffer5 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %11, i32 0, i32 3
  %12 = load i32, i32* %code_buffer5, align 4
  %shr6 = lshr i32 %12, %10
  store i32 %shr6, i32* %code_buffer5, align 4
  %13 = load i32, i32* %s, align 4
  %14 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %num_bits7 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %14, i32 0, i32 2
  %15 = load i32, i32* %num_bits7, align 8
  %sub = sub nsw i32 %15, %13
  store i32 %sub, i32* %num_bits7, align 8
  %16 = load i32, i32* %b, align 4
  %and8 = and i32 %16, 511
  store i32 %and8, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.end2
  %17 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %18 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %call10 = call i32 @stbi__zhuffman_decode_slowpath(%struct.stbi__zbuf* %17, %struct.stbi__zhuffman* %18)
  store i32 %call10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end9, %if.then4, %if.then1
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__zexpand(%struct.stbi__zbuf* %z, i8* %zout, i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %z.addr = alloca %struct.stbi__zbuf*, align 8
  %zout.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %q = alloca i8*, align 8
  %cur = alloca i32, align 4
  %limit = alloca i32, align 4
  %old_limit = alloca i32, align 4
  store %struct.stbi__zbuf* %z, %struct.stbi__zbuf** %z.addr, align 8
  store i8* %zout, i8** %zout.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %zout.addr, align 8
  %1 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zout1 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %1, i32 0, i32 4
  store i8* %0, i8** %zout1, align 8
  %2 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %z_expandable = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %2, i32 0, i32 7
  %3 = load i32, i32* %z_expandable, align 8
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 @stbi__err(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.140, i64 0, i64 0))
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zout2 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %4, i32 0, i32 4
  %5 = load i8*, i8** %zout2, align 8
  %6 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zout_start = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %6, i32 0, i32 5
  %7 = load i8*, i8** %zout_start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  store i32 %conv, i32* %cur, align 4
  %8 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zout_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %8, i32 0, i32 6
  %9 = load i8*, i8** %zout_end, align 8
  %10 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zout_start3 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %10, i32 0, i32 5
  %11 = load i8*, i8** %zout_start3, align 8
  %sub.ptr.lhs.cast4 = ptrtoint i8* %9 to i64
  %sub.ptr.rhs.cast5 = ptrtoint i8* %11 to i64
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast4, %sub.ptr.rhs.cast5
  %conv7 = trunc i64 %sub.ptr.sub6 to i32
  store i32 %conv7, i32* %old_limit, align 4
  store i32 %conv7, i32* %limit, align 4
  %12 = load i32, i32* %cur, align 4
  %sub = sub i32 -1, %12
  %13 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %sub, %13
  br i1 %cmp, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end
  %call10 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  store i32 %call10, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.end11
  %14 = load i32, i32* %cur, align 4
  %15 = load i32, i32* %n.addr, align 4
  %add = add i32 %14, %15
  %16 = load i32, i32* %limit, align 4
  %cmp12 = icmp ugt i32 %add, %16
  br i1 %cmp12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i32, i32* %limit, align 4
  %cmp14 = icmp ugt i32 %17, 2147483647
  br i1 %cmp14, label %if.then16, label %if.end18

if.then16:                                        ; preds = %while.body
  %call17 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  store i32 %call17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %while.body
  %18 = load i32, i32* %limit, align 4
  %mul = mul i32 %18, 2
  store i32 %mul, i32* %limit, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %19 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zout_start19 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %19, i32 0, i32 5
  %20 = load i8*, i8** %zout_start19, align 8
  %21 = load i32, i32* %limit, align 4
  %conv20 = zext i32 %21 to i64
  %call21 = call i8* @realloc(i8* %20, i64 %conv20) #10
  store i8* %call21, i8** %q, align 8
  %22 = load i8*, i8** %q, align 8
  %cmp22 = icmp eq i8* %22, null
  br i1 %cmp22, label %if.then24, label %if.end26

if.then24:                                        ; preds = %while.end
  %call25 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  store i32 %call25, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %while.end
  %23 = load i8*, i8** %q, align 8
  %24 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zout_start27 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %24, i32 0, i32 5
  store i8* %23, i8** %zout_start27, align 8
  %25 = load i8*, i8** %q, align 8
  %26 = load i32, i32* %cur, align 4
  %idx.ext = zext i32 %26 to i64
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %idx.ext
  %27 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zout28 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %27, i32 0, i32 4
  store i8* %add.ptr, i8** %zout28, align 8
  %28 = load i8*, i8** %q, align 8
  %29 = load i32, i32* %limit, align 4
  %idx.ext29 = zext i32 %29 to i64
  %add.ptr30 = getelementptr inbounds i8, i8* %28, i64 %idx.ext29
  %30 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zout_end31 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %30, i32 0, i32 6
  store i8* %add.ptr30, i8** %zout_end31, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end26, %if.then24, %if.then16, %if.then9, %if.then
  %31 = load i32, i32* %retval, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__zeof(%struct.stbi__zbuf* %z) #0 {
entry:
  %z.addr = alloca %struct.stbi__zbuf*, align 8
  store %struct.stbi__zbuf* %z, %struct.stbi__zbuf** %z.addr, align 8
  %0 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zbuffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %0, i32 0, i32 0
  %1 = load i8*, i8** %zbuffer, align 8
  %2 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zbuffer_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %2, i32 0, i32 1
  %3 = load i8*, i8** %zbuffer_end, align 8
  %cmp = icmp uge i8* %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__fill_bits(%struct.stbi__zbuf* %z) #0 {
entry:
  %z.addr = alloca %struct.stbi__zbuf*, align 8
  store %struct.stbi__zbuf* %z, %struct.stbi__zbuf** %z.addr, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %0, i32 0, i32 3
  %1 = load i32, i32* %code_buffer, align 4
  %2 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %num_bits = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %2, i32 0, i32 2
  %3 = load i32, i32* %num_bits, align 8
  %shl = shl i32 1, %3
  %cmp = icmp uge i32 %1, %shl
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %4 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zbuffer_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %4, i32 0, i32 1
  %5 = load i8*, i8** %zbuffer_end, align 8
  %6 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zbuffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %6, i32 0, i32 0
  store i8* %5, i8** %zbuffer, align 8
  br label %do.end

if.end:                                           ; preds = %do.body
  %7 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %call = call zeroext i8 @stbi__zget8(%struct.stbi__zbuf* %7)
  %conv = zext i8 %call to i32
  %8 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %num_bits1 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %8, i32 0, i32 2
  %9 = load i32, i32* %num_bits1, align 8
  %shl2 = shl i32 %conv, %9
  %10 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %code_buffer3 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %10, i32 0, i32 3
  %11 = load i32, i32* %code_buffer3, align 4
  %or = or i32 %11, %shl2
  store i32 %or, i32* %code_buffer3, align 4
  %12 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %num_bits4 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %12, i32 0, i32 2
  %13 = load i32, i32* %num_bits4, align 8
  %add = add nsw i32 %13, 8
  store i32 %add, i32* %num_bits4, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %14 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %num_bits5 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %14, i32 0, i32 2
  %15 = load i32, i32* %num_bits5, align 8
  %cmp6 = icmp sle i32 %15, 24
  br i1 %cmp6, label %do.body, label %do.end

do.end:                                           ; preds = %if.then, %do.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__zhuffman_decode_slowpath(%struct.stbi__zbuf* %a, %struct.stbi__zhuffman* %z) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.stbi__zbuf*, align 8
  %z.addr = alloca %struct.stbi__zhuffman*, align 8
  %b = alloca i32, align 4
  %s = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.stbi__zbuf* %a, %struct.stbi__zbuf** %a.addr, align 8
  store %struct.stbi__zhuffman* %z, %struct.stbi__zhuffman** %z.addr, align 8
  %0 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %0, i32 0, i32 3
  %1 = load i32, i32* %code_buffer, align 4
  %call = call i32 @stbi__bit_reverse(i32 %1, i32 16)
  store i32 %call, i32* %k, align 4
  store i32 10, i32* %s, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %k, align 4
  %3 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %maxcode = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %3, i32 0, i32 2
  %4 = load i32, i32* %s, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [17 x i32], [17 x i32]* %maxcode, i64 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %cmp = icmp slt i32 %2, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end

if.end:                                           ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %s, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %s, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then
  %7 = load i32, i32* %s, align 4
  %cmp1 = icmp sge i32 %7, 16
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %for.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %for.end
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %s, align 4
  %sub = sub nsw i32 16, %9
  %shr = ashr i32 %8, %sub
  %10 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %firstcode = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %10, i32 0, i32 1
  %11 = load i32, i32* %s, align 4
  %idxprom4 = sext i32 %11 to i64
  %arrayidx5 = getelementptr inbounds [16 x i16], [16 x i16]* %firstcode, i64 0, i64 %idxprom4
  %12 = load i16, i16* %arrayidx5, align 2
  %conv = zext i16 %12 to i32
  %sub6 = sub nsw i32 %shr, %conv
  %13 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %firstsymbol = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %13, i32 0, i32 3
  %14 = load i32, i32* %s, align 4
  %idxprom7 = sext i32 %14 to i64
  %arrayidx8 = getelementptr inbounds [16 x i16], [16 x i16]* %firstsymbol, i64 0, i64 %idxprom7
  %15 = load i16, i16* %arrayidx8, align 2
  %conv9 = zext i16 %15 to i32
  %add = add nsw i32 %sub6, %conv9
  store i32 %add, i32* %b, align 4
  %16 = load i32, i32* %b, align 4
  %conv10 = sext i32 %16 to i64
  %cmp11 = icmp uge i64 %conv10, 288
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end3
  store i32 -1, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end3
  %17 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %size = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %17, i32 0, i32 4
  %18 = load i32, i32* %b, align 4
  %idxprom15 = sext i32 %18 to i64
  %arrayidx16 = getelementptr inbounds [288 x i8], [288 x i8]* %size, i64 0, i64 %idxprom15
  %19 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %19 to i32
  %20 = load i32, i32* %s, align 4
  %cmp18 = icmp ne i32 %conv17, %20
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end14
  store i32 -1, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end14
  %21 = load i32, i32* %s, align 4
  %22 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %code_buffer22 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %22, i32 0, i32 3
  %23 = load i32, i32* %code_buffer22, align 4
  %shr23 = lshr i32 %23, %21
  store i32 %shr23, i32* %code_buffer22, align 4
  %24 = load i32, i32* %s, align 4
  %25 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %a.addr, align 8
  %num_bits = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %25, i32 0, i32 2
  %26 = load i32, i32* %num_bits, align 8
  %sub24 = sub nsw i32 %26, %24
  store i32 %sub24, i32* %num_bits, align 8
  %27 = load %struct.stbi__zhuffman*, %struct.stbi__zhuffman** %z.addr, align 8
  %value = getelementptr inbounds %struct.stbi__zhuffman, %struct.stbi__zhuffman* %27, i32 0, i32 5
  %28 = load i32, i32* %b, align 4
  %idxprom25 = sext i32 %28 to i64
  %arrayidx26 = getelementptr inbounds [288 x i16], [288 x i16]* %value, i64 0, i64 %idxprom25
  %29 = load i16, i16* %arrayidx26, align 2
  %conv27 = zext i16 %29 to i32
  store i32 %conv27, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end21, %if.then20, %if.then13, %if.then2
  %30 = load i32, i32* %retval, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__bit_reverse(i32 %v, i32 %bits) #0 {
entry:
  %v.addr = alloca i32, align 4
  %bits.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %bits, i32* %bits.addr, align 4
  %0 = load i32, i32* %bits.addr, align 4
  %cmp = icmp sle i32 %0, 16
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.143, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 4006, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__PRETTY_FUNCTION__.stbi__bit_reverse, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %1 = load i32, i32* %v.addr, align 4
  %call = call i32 @stbi__bitreverse16(i32 %1)
  %2 = load i32, i32* %bits.addr, align 4
  %sub = sub nsw i32 16, %2
  %shr = ashr i32 %call, %sub
  ret i32 %shr
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__bitreverse16(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %and = and i32 %0, 43690
  %shr = ashr i32 %and, 1
  %1 = load i32, i32* %n.addr, align 4
  %and1 = and i32 %1, 21845
  %shl = shl i32 %and1, 1
  %or = or i32 %shr, %shl
  store i32 %or, i32* %n.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %and2 = and i32 %2, 52428
  %shr3 = ashr i32 %and2, 2
  %3 = load i32, i32* %n.addr, align 4
  %and4 = and i32 %3, 13107
  %shl5 = shl i32 %and4, 2
  %or6 = or i32 %shr3, %shl5
  store i32 %or6, i32* %n.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %and7 = and i32 %4, 61680
  %shr8 = ashr i32 %and7, 4
  %5 = load i32, i32* %n.addr, align 4
  %and9 = and i32 %5, 3855
  %shl10 = shl i32 %and9, 4
  %or11 = or i32 %shr8, %shl10
  store i32 %or11, i32* %n.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  %and12 = and i32 %6, 65280
  %shr13 = ashr i32 %and12, 8
  %7 = load i32, i32* %n.addr, align 4
  %and14 = and i32 %7, 255
  %shl15 = shl i32 %and14, 8
  %or16 = or i32 %shr13, %shl15
  store i32 %or16, i32* %n.addr, align 4
  %8 = load i32, i32* %n.addr, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i8 @stbi__zget8(%struct.stbi__zbuf* %z) #0 {
entry:
  %z.addr = alloca %struct.stbi__zbuf*, align 8
  store %struct.stbi__zbuf* %z, %struct.stbi__zbuf** %z.addr, align 8
  %0 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %call = call i32 @stbi__zeof(%struct.stbi__zbuf* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load %struct.stbi__zbuf*, %struct.stbi__zbuf** %z.addr, align 8
  %zbuffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %1, i32 0, i32 0
  %2 = load i8*, i8** %zbuffer, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %zbuffer, align 8
  %3 = load i8, i8* %2, align 1
  %conv = zext i8 %3 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %conv, %cond.false ]
  %conv1 = trunc i32 %cond to i8
  ret i8 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__setup_jpeg(%struct.stbi__jpeg* %j) #0 {
entry:
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %idct_block_kernel = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 29
  store void (i8*, i32, i16*)* @stbi__idct_block, void (i8*, i32, i16*)** %idct_block_kernel, align 8
  %1 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %YCbCr_to_RGB_kernel = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %1, i32 0, i32 30
  store void (i8*, i8*, i8*, i8*, i32, i32)* @stbi__YCbCr_to_RGB_row, void (i8*, i8*, i8*, i8*, i32, i32)** %YCbCr_to_RGB_kernel, align 8
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %resample_row_hv_2_kernel = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 31
  store i8* (i8*, i8*, i8*, i32, i32)* @stbi__resample_row_hv_2, i8* (i8*, i8*, i8*, i32, i32)** %resample_row_hv_2_kernel, align 8
  %call = call i32 @stbi__sse2_available()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %idct_block_kernel1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %3, i32 0, i32 29
  store void (i8*, i32, i16*)* @stbi__idct_simd, void (i8*, i32, i16*)** %idct_block_kernel1, align 8
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %YCbCr_to_RGB_kernel2 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %4, i32 0, i32 30
  store void (i8*, i8*, i8*, i8*, i32, i32)* @stbi__YCbCr_to_RGB_simd, void (i8*, i8*, i8*, i8*, i32, i32)** %YCbCr_to_RGB_kernel2, align 8
  %5 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %resample_row_hv_2_kernel3 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %5, i32 0, i32 31
  store i8* (i8*, i8*, i8*, i32, i32)* @stbi__resample_row_hv_2_simd, i8* (i8*, i8*, i8*, i32, i32)** %resample_row_hv_2_kernel3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @load_jpeg_image(%struct.stbi__jpeg* %z, i32* %out_x, i32* %out_y, i32* %comp, i32 %req_comp) #0 {
entry:
  %retval = alloca i8*, align 8
  %z.addr = alloca %struct.stbi__jpeg*, align 8
  %out_x.addr = alloca i32*, align 8
  %out_y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %decode_n = alloca i32, align 4
  %is_rgb = alloca i32, align 4
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %output = alloca i8*, align 8
  %coutput = alloca [4 x i8*], align 16
  %res_comp = alloca [4 x %struct.stbi__resample], align 16
  %r = alloca %struct.stbi__resample*, align 8
  %out = alloca i8*, align 8
  %r129 = alloca %struct.stbi__resample*, align 8
  %y_bot = alloca i32, align 4
  %y192 = alloca i8*, align 8
  %m = alloca i8, align 1
  %m286 = alloca i8, align 1
  %m412 = alloca i8, align 1
  %r416 = alloca i8, align 1
  %g = alloca i8, align 1
  %b = alloca i8, align 1
  %y474 = alloca i8*, align 8
  store %struct.stbi__jpeg* %z, %struct.stbi__jpeg** %z.addr, align 8
  store i32* %out_x, i32** %out_x.addr, align 8
  store i32* %out_y, i32** %out_y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 0
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %1, i32 0, i32 2
  store i32 0, i32* %img_n, align 8
  %2 = load i32, i32* %req_comp.addr, align 4
  %cmp = icmp slt i32 %2, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %req_comp.addr, align 4
  %cmp1 = icmp sgt i32 %3, 4
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.54, i64 0, i64 0))
  %tobool = icmp ne i32 %call, 0
  %4 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %5 = ptrtoint i8* %cond to i64
  %6 = inttoptr i64 %5 to i8*
  store i8* %6, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %call2 = call i32 @stbi__decode_jpeg_image(%struct.stbi__jpeg* %7)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  %8 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__cleanup_jpeg(%struct.stbi__jpeg* %8)
  store i8* null, i8** %retval, align 8
  br label %return

if.end5:                                          ; preds = %if.end
  %9 = load i32, i32* %req_comp.addr, align 4
  %tobool6 = icmp ne i32 %9, 0
  br i1 %tobool6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end5
  %10 = load i32, i32* %req_comp.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end5
  %11 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s7 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %11, i32 0, i32 0
  %12 = load %struct.stbi__context*, %struct.stbi__context** %s7, align 8
  %img_n8 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %12, i32 0, i32 2
  %13 = load i32, i32* %img_n8, align 8
  %cmp9 = icmp sge i32 %13, 3
  %14 = zext i1 %cmp9 to i64
  %cond10 = select i1 %cmp9, i32 3, i32 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond11 = phi i32 [ %10, %cond.true ], [ %cond10, %cond.false ]
  store i32 %cond11, i32* %n, align 4
  %15 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s12 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %15, i32 0, i32 0
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s12, align 8
  %img_n13 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %16, i32 0, i32 2
  %17 = load i32, i32* %img_n13, align 8
  %cmp14 = icmp eq i32 %17, 3
  br i1 %cmp14, label %land.rhs, label %land.end19

land.rhs:                                         ; preds = %cond.end
  %18 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %rgb = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %18, i32 0, i32 24
  %19 = load i32, i32* %rgb, align 8
  %cmp15 = icmp eq i32 %19, 3
  br i1 %cmp15, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %20 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %app14_color_transform = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %20, i32 0, i32 23
  %21 = load i32, i32* %app14_color_transform, align 4
  %cmp16 = icmp eq i32 %21, 0
  br i1 %cmp16, label %land.rhs17, label %land.end

land.rhs17:                                       ; preds = %lor.rhs
  %22 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %jfif = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %22, i32 0, i32 22
  %23 = load i32, i32* %jfif, align 8
  %tobool18 = icmp ne i32 %23, 0
  %lnot = xor i1 %tobool18, true
  br label %land.end

land.end:                                         ; preds = %land.rhs17, %lor.rhs
  %24 = phi i1 [ false, %lor.rhs ], [ %lnot, %land.rhs17 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs
  %25 = phi i1 [ true, %land.rhs ], [ %24, %land.end ]
  br label %land.end19

land.end19:                                       ; preds = %lor.end, %cond.end
  %26 = phi i1 [ false, %cond.end ], [ %25, %lor.end ]
  %land.ext = zext i1 %26 to i32
  store i32 %land.ext, i32* %is_rgb, align 4
  %27 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s20 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %27, i32 0, i32 0
  %28 = load %struct.stbi__context*, %struct.stbi__context** %s20, align 8
  %img_n21 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %28, i32 0, i32 2
  %29 = load i32, i32* %img_n21, align 8
  %cmp22 = icmp eq i32 %29, 3
  br i1 %cmp22, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %land.end19
  %30 = load i32, i32* %n, align 4
  %cmp23 = icmp slt i32 %30, 3
  br i1 %cmp23, label %land.lhs.true24, label %if.else

land.lhs.true24:                                  ; preds = %land.lhs.true
  %31 = load i32, i32* %is_rgb, align 4
  %tobool25 = icmp ne i32 %31, 0
  br i1 %tobool25, label %if.else, label %if.then26

if.then26:                                        ; preds = %land.lhs.true24
  store i32 1, i32* %decode_n, align 4
  br label %if.end29

if.else:                                          ; preds = %land.lhs.true24, %land.lhs.true, %land.end19
  %32 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s27 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %32, i32 0, i32 0
  %33 = load %struct.stbi__context*, %struct.stbi__context** %s27, align 8
  %img_n28 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %33, i32 0, i32 2
  %34 = load i32, i32* %img_n28, align 8
  store i32 %34, i32* %decode_n, align 4
  br label %if.end29

if.end29:                                         ; preds = %if.else, %if.then26
  %35 = bitcast [4 x i8*]* %coutput to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %35, i8 0, i64 32, i1 false)
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end29
  %36 = load i32, i32* %k, align 4
  %37 = load i32, i32* %decode_n, align 4
  %cmp30 = icmp slt i32 %36, %37
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %38 = load i32, i32* %k, align 4
  %idxprom = sext i32 %38 to i64
  %arrayidx = getelementptr inbounds [4 x %struct.stbi__resample], [4 x %struct.stbi__resample]* %res_comp, i64 0, i64 %idxprom
  store %struct.stbi__resample* %arrayidx, %struct.stbi__resample** %r, align 8
  %39 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s31 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %39, i32 0, i32 0
  %40 = load %struct.stbi__context*, %struct.stbi__context** %s31, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %40, i32 0, i32 0
  %41 = load i32, i32* %img_x, align 8
  %add = add i32 %41, 3
  %conv = zext i32 %add to i64
  %call32 = call i8* @stbi__malloc(i64 %conv)
  %42 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %42, i32 0, i32 11
  %43 = load i32, i32* %k, align 4
  %idxprom33 = sext i32 %43 to i64
  %arrayidx34 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp, i64 0, i64 %idxprom33
  %linebuf = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx34, i32 0, i32 14
  store i8* %call32, i8** %linebuf, align 8
  %44 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp35 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %44, i32 0, i32 11
  %45 = load i32, i32* %k, align 4
  %idxprom36 = sext i32 %45 to i64
  %arrayidx37 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp35, i64 0, i64 %idxprom36
  %linebuf38 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx37, i32 0, i32 14
  %46 = load i8*, i8** %linebuf38, align 8
  %tobool39 = icmp ne i8* %46, null
  br i1 %tobool39, label %if.end44, label %if.then40

if.then40:                                        ; preds = %for.body
  %47 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__cleanup_jpeg(%struct.stbi__jpeg* %47)
  %call41 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool42 = icmp ne i32 %call41, 0
  %48 = zext i1 %tobool42 to i64
  %cond43 = select i1 %tobool42, i8* null, i8* null
  %49 = ptrtoint i8* %cond43 to i64
  %50 = inttoptr i64 %49 to i8*
  store i8* %50, i8** %retval, align 8
  br label %return

if.end44:                                         ; preds = %for.body
  %51 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_h_max = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %51, i32 0, i32 5
  %52 = load i32, i32* %img_h_max, align 8
  %53 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp45 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %53, i32 0, i32 11
  %54 = load i32, i32* %k, align 4
  %idxprom46 = sext i32 %54 to i64
  %arrayidx47 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp45, i64 0, i64 %idxprom46
  %h = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx47, i32 0, i32 1
  %55 = load i32, i32* %h, align 4
  %div = sdiv i32 %52, %55
  %56 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %hs = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %56, i32 0, i32 3
  store i32 %div, i32* %hs, align 8
  %57 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_v_max = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %57, i32 0, i32 6
  %58 = load i32, i32* %img_v_max, align 4
  %59 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp48 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %59, i32 0, i32 11
  %60 = load i32, i32* %k, align 4
  %idxprom49 = sext i32 %60 to i64
  %arrayidx50 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp48, i64 0, i64 %idxprom49
  %v = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx50, i32 0, i32 2
  %61 = load i32, i32* %v, align 8
  %div51 = sdiv i32 %58, %61
  %62 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %vs = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %62, i32 0, i32 4
  store i32 %div51, i32* %vs, align 4
  %63 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %vs52 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %63, i32 0, i32 4
  %64 = load i32, i32* %vs52, align 4
  %shr = ashr i32 %64, 1
  %65 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %ystep = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %65, i32 0, i32 6
  store i32 %shr, i32* %ystep, align 4
  %66 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s53 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %66, i32 0, i32 0
  %67 = load %struct.stbi__context*, %struct.stbi__context** %s53, align 8
  %img_x54 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %67, i32 0, i32 0
  %68 = load i32, i32* %img_x54, align 8
  %69 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %hs55 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %69, i32 0, i32 3
  %70 = load i32, i32* %hs55, align 8
  %add56 = add i32 %68, %70
  %sub = sub i32 %add56, 1
  %71 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %hs57 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %71, i32 0, i32 3
  %72 = load i32, i32* %hs57, align 8
  %div58 = udiv i32 %sub, %72
  %73 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %w_lores = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %73, i32 0, i32 5
  store i32 %div58, i32* %w_lores, align 8
  %74 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %ypos = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %74, i32 0, i32 7
  store i32 0, i32* %ypos, align 8
  %75 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp59 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %75, i32 0, i32 11
  %76 = load i32, i32* %k, align 4
  %idxprom60 = sext i32 %76 to i64
  %arrayidx61 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp59, i64 0, i64 %idxprom60
  %data = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx61, i32 0, i32 11
  %77 = load i8*, i8** %data, align 8
  %78 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %line1 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %78, i32 0, i32 2
  store i8* %77, i8** %line1, align 8
  %79 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %line0 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %79, i32 0, i32 1
  store i8* %77, i8** %line0, align 8
  %80 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %hs62 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %80, i32 0, i32 3
  %81 = load i32, i32* %hs62, align 8
  %cmp63 = icmp eq i32 %81, 1
  br i1 %cmp63, label %land.lhs.true65, label %if.else70

land.lhs.true65:                                  ; preds = %if.end44
  %82 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %vs66 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %82, i32 0, i32 4
  %83 = load i32, i32* %vs66, align 4
  %cmp67 = icmp eq i32 %83, 1
  br i1 %cmp67, label %if.then69, label %if.else70

if.then69:                                        ; preds = %land.lhs.true65
  %84 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %resample = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %84, i32 0, i32 0
  store i8* (i8*, i8*, i8*, i32, i32)* @resample_row_1, i8* (i8*, i8*, i8*, i32, i32)** %resample, align 8
  br label %if.end105

if.else70:                                        ; preds = %land.lhs.true65, %if.end44
  %85 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %hs71 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %85, i32 0, i32 3
  %86 = load i32, i32* %hs71, align 8
  %cmp72 = icmp eq i32 %86, 1
  br i1 %cmp72, label %land.lhs.true74, label %if.else80

land.lhs.true74:                                  ; preds = %if.else70
  %87 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %vs75 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %87, i32 0, i32 4
  %88 = load i32, i32* %vs75, align 4
  %cmp76 = icmp eq i32 %88, 2
  br i1 %cmp76, label %if.then78, label %if.else80

if.then78:                                        ; preds = %land.lhs.true74
  %89 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %resample79 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %89, i32 0, i32 0
  store i8* (i8*, i8*, i8*, i32, i32)* @stbi__resample_row_v_2, i8* (i8*, i8*, i8*, i32, i32)** %resample79, align 8
  br label %if.end104

if.else80:                                        ; preds = %land.lhs.true74, %if.else70
  %90 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %hs81 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %90, i32 0, i32 3
  %91 = load i32, i32* %hs81, align 8
  %cmp82 = icmp eq i32 %91, 2
  br i1 %cmp82, label %land.lhs.true84, label %if.else90

land.lhs.true84:                                  ; preds = %if.else80
  %92 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %vs85 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %92, i32 0, i32 4
  %93 = load i32, i32* %vs85, align 4
  %cmp86 = icmp eq i32 %93, 1
  br i1 %cmp86, label %if.then88, label %if.else90

if.then88:                                        ; preds = %land.lhs.true84
  %94 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %resample89 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %94, i32 0, i32 0
  store i8* (i8*, i8*, i8*, i32, i32)* @stbi__resample_row_h_2, i8* (i8*, i8*, i8*, i32, i32)** %resample89, align 8
  br label %if.end103

if.else90:                                        ; preds = %land.lhs.true84, %if.else80
  %95 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %hs91 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %95, i32 0, i32 3
  %96 = load i32, i32* %hs91, align 8
  %cmp92 = icmp eq i32 %96, 2
  br i1 %cmp92, label %land.lhs.true94, label %if.else100

land.lhs.true94:                                  ; preds = %if.else90
  %97 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %vs95 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %97, i32 0, i32 4
  %98 = load i32, i32* %vs95, align 4
  %cmp96 = icmp eq i32 %98, 2
  br i1 %cmp96, label %if.then98, label %if.else100

if.then98:                                        ; preds = %land.lhs.true94
  %99 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %resample_row_hv_2_kernel = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %99, i32 0, i32 31
  %100 = load i8* (i8*, i8*, i8*, i32, i32)*, i8* (i8*, i8*, i8*, i32, i32)** %resample_row_hv_2_kernel, align 8
  %101 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %resample99 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %101, i32 0, i32 0
  store i8* (i8*, i8*, i8*, i32, i32)* %100, i8* (i8*, i8*, i8*, i32, i32)** %resample99, align 8
  br label %if.end102

if.else100:                                       ; preds = %land.lhs.true94, %if.else90
  %102 = load %struct.stbi__resample*, %struct.stbi__resample** %r, align 8
  %resample101 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %102, i32 0, i32 0
  store i8* (i8*, i8*, i8*, i32, i32)* @stbi__resample_row_generic, i8* (i8*, i8*, i8*, i32, i32)** %resample101, align 8
  br label %if.end102

if.end102:                                        ; preds = %if.else100, %if.then98
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then88
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then78
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.then69
  br label %for.inc

for.inc:                                          ; preds = %if.end105
  %103 = load i32, i32* %k, align 4
  %inc = add nsw i32 %103, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %104 = load i32, i32* %n, align 4
  %105 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s106 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %105, i32 0, i32 0
  %106 = load %struct.stbi__context*, %struct.stbi__context** %s106, align 8
  %img_x107 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %106, i32 0, i32 0
  %107 = load i32, i32* %img_x107, align 8
  %108 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s108 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %108, i32 0, i32 0
  %109 = load %struct.stbi__context*, %struct.stbi__context** %s108, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %109, i32 0, i32 1
  %110 = load i32, i32* %img_y, align 4
  %call109 = call i8* @stbi__malloc_mad3(i32 %104, i32 %107, i32 %110, i32 1)
  store i8* %call109, i8** %output, align 8
  %111 = load i8*, i8** %output, align 8
  %tobool110 = icmp ne i8* %111, null
  br i1 %tobool110, label %if.end115, label %if.then111

if.then111:                                       ; preds = %for.end
  %112 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__cleanup_jpeg(%struct.stbi__jpeg* %112)
  %call112 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool113 = icmp ne i32 %call112, 0
  %113 = zext i1 %tobool113 to i64
  %cond114 = select i1 %tobool113, i8* null, i8* null
  %114 = ptrtoint i8* %cond114 to i64
  %115 = inttoptr i64 %114 to i8*
  store i8* %115, i8** %retval, align 8
  br label %return

if.end115:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond116

for.cond116:                                      ; preds = %for.inc511, %if.end115
  %116 = load i32, i32* %j, align 4
  %117 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s117 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %117, i32 0, i32 0
  %118 = load %struct.stbi__context*, %struct.stbi__context** %s117, align 8
  %img_y118 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %118, i32 0, i32 1
  %119 = load i32, i32* %img_y118, align 4
  %cmp119 = icmp ult i32 %116, %119
  br i1 %cmp119, label %for.body121, label %for.end513

for.body121:                                      ; preds = %for.cond116
  %120 = load i8*, i8** %output, align 8
  %121 = load i32, i32* %n, align 4
  %122 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s122 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %122, i32 0, i32 0
  %123 = load %struct.stbi__context*, %struct.stbi__context** %s122, align 8
  %img_x123 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %123, i32 0, i32 0
  %124 = load i32, i32* %img_x123, align 8
  %mul = mul i32 %121, %124
  %125 = load i32, i32* %j, align 4
  %mul124 = mul i32 %mul, %125
  %idx.ext = zext i32 %mul124 to i64
  %add.ptr = getelementptr inbounds i8, i8* %120, i64 %idx.ext
  store i8* %add.ptr, i8** %out, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond125

for.cond125:                                      ; preds = %for.inc186, %for.body121
  %126 = load i32, i32* %k, align 4
  %127 = load i32, i32* %decode_n, align 4
  %cmp126 = icmp slt i32 %126, %127
  br i1 %cmp126, label %for.body128, label %for.end188

for.body128:                                      ; preds = %for.cond125
  %128 = load i32, i32* %k, align 4
  %idxprom130 = sext i32 %128 to i64
  %arrayidx131 = getelementptr inbounds [4 x %struct.stbi__resample], [4 x %struct.stbi__resample]* %res_comp, i64 0, i64 %idxprom130
  store %struct.stbi__resample* %arrayidx131, %struct.stbi__resample** %r129, align 8
  %129 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %ystep132 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %129, i32 0, i32 6
  %130 = load i32, i32* %ystep132, align 4
  %131 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %vs133 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %131, i32 0, i32 4
  %132 = load i32, i32* %vs133, align 4
  %shr134 = ashr i32 %132, 1
  %cmp135 = icmp sge i32 %130, %shr134
  %conv136 = zext i1 %cmp135 to i32
  store i32 %conv136, i32* %y_bot, align 4
  %133 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %resample137 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %133, i32 0, i32 0
  %134 = load i8* (i8*, i8*, i8*, i32, i32)*, i8* (i8*, i8*, i8*, i32, i32)** %resample137, align 8
  %135 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp138 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %135, i32 0, i32 11
  %136 = load i32, i32* %k, align 4
  %idxprom139 = sext i32 %136 to i64
  %arrayidx140 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp138, i64 0, i64 %idxprom139
  %linebuf141 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx140, i32 0, i32 14
  %137 = load i8*, i8** %linebuf141, align 8
  %138 = load i32, i32* %y_bot, align 4
  %tobool142 = icmp ne i32 %138, 0
  br i1 %tobool142, label %cond.true143, label %cond.false145

cond.true143:                                     ; preds = %for.body128
  %139 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %line1144 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %139, i32 0, i32 2
  %140 = load i8*, i8** %line1144, align 8
  br label %cond.end147

cond.false145:                                    ; preds = %for.body128
  %141 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %line0146 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %141, i32 0, i32 1
  %142 = load i8*, i8** %line0146, align 8
  br label %cond.end147

cond.end147:                                      ; preds = %cond.false145, %cond.true143
  %cond148 = phi i8* [ %140, %cond.true143 ], [ %142, %cond.false145 ]
  %143 = load i32, i32* %y_bot, align 4
  %tobool149 = icmp ne i32 %143, 0
  br i1 %tobool149, label %cond.true150, label %cond.false152

cond.true150:                                     ; preds = %cond.end147
  %144 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %line0151 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %144, i32 0, i32 1
  %145 = load i8*, i8** %line0151, align 8
  br label %cond.end154

cond.false152:                                    ; preds = %cond.end147
  %146 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %line1153 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %146, i32 0, i32 2
  %147 = load i8*, i8** %line1153, align 8
  br label %cond.end154

cond.end154:                                      ; preds = %cond.false152, %cond.true150
  %cond155 = phi i8* [ %145, %cond.true150 ], [ %147, %cond.false152 ]
  %148 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %w_lores156 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %148, i32 0, i32 5
  %149 = load i32, i32* %w_lores156, align 8
  %150 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %hs157 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %150, i32 0, i32 3
  %151 = load i32, i32* %hs157, align 8
  %call158 = call i8* %134(i8* %137, i8* %cond148, i8* %cond155, i32 %149, i32 %151)
  %152 = load i32, i32* %k, align 4
  %idxprom159 = sext i32 %152 to i64
  %arrayidx160 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 %idxprom159
  store i8* %call158, i8** %arrayidx160, align 8
  %153 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %ystep161 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %153, i32 0, i32 6
  %154 = load i32, i32* %ystep161, align 4
  %inc162 = add nsw i32 %154, 1
  store i32 %inc162, i32* %ystep161, align 4
  %155 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %vs163 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %155, i32 0, i32 4
  %156 = load i32, i32* %vs163, align 4
  %cmp164 = icmp sge i32 %inc162, %156
  br i1 %cmp164, label %if.then166, label %if.end185

if.then166:                                       ; preds = %cond.end154
  %157 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %ystep167 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %157, i32 0, i32 6
  store i32 0, i32* %ystep167, align 4
  %158 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %line1168 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %158, i32 0, i32 2
  %159 = load i8*, i8** %line1168, align 8
  %160 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %line0169 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %160, i32 0, i32 1
  store i8* %159, i8** %line0169, align 8
  %161 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %ypos170 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %161, i32 0, i32 7
  %162 = load i32, i32* %ypos170, align 8
  %inc171 = add nsw i32 %162, 1
  store i32 %inc171, i32* %ypos170, align 8
  %163 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp172 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %163, i32 0, i32 11
  %164 = load i32, i32* %k, align 4
  %idxprom173 = sext i32 %164 to i64
  %arrayidx174 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp172, i64 0, i64 %idxprom173
  %y = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx174, i32 0, i32 8
  %165 = load i32, i32* %y, align 8
  %cmp175 = icmp slt i32 %inc171, %165
  br i1 %cmp175, label %if.then177, label %if.end184

if.then177:                                       ; preds = %if.then166
  %166 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp178 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %166, i32 0, i32 11
  %167 = load i32, i32* %k, align 4
  %idxprom179 = sext i32 %167 to i64
  %arrayidx180 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp178, i64 0, i64 %idxprom179
  %w2 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx180, i32 0, i32 9
  %168 = load i32, i32* %w2, align 4
  %169 = load %struct.stbi__resample*, %struct.stbi__resample** %r129, align 8
  %line1181 = getelementptr inbounds %struct.stbi__resample, %struct.stbi__resample* %169, i32 0, i32 2
  %170 = load i8*, i8** %line1181, align 8
  %idx.ext182 = sext i32 %168 to i64
  %add.ptr183 = getelementptr inbounds i8, i8* %170, i64 %idx.ext182
  store i8* %add.ptr183, i8** %line1181, align 8
  br label %if.end184

if.end184:                                        ; preds = %if.then177, %if.then166
  br label %if.end185

if.end185:                                        ; preds = %if.end184, %cond.end154
  br label %for.inc186

for.inc186:                                       ; preds = %if.end185
  %171 = load i32, i32* %k, align 4
  %inc187 = add nsw i32 %171, 1
  store i32 %inc187, i32* %k, align 4
  br label %for.cond125

for.end188:                                       ; preds = %for.cond125
  %172 = load i32, i32* %n, align 4
  %cmp189 = icmp sge i32 %172, 3
  br i1 %cmp189, label %if.then191, label %if.else341

if.then191:                                       ; preds = %for.end188
  %arrayidx193 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 0
  %173 = load i8*, i8** %arrayidx193, align 16
  store i8* %173, i8** %y192, align 8
  %174 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s194 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %174, i32 0, i32 0
  %175 = load %struct.stbi__context*, %struct.stbi__context** %s194, align 8
  %img_n195 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %175, i32 0, i32 2
  %176 = load i32, i32* %img_n195, align 8
  %cmp196 = icmp eq i32 %176, 3
  br i1 %cmp196, label %if.then198, label %if.else230

if.then198:                                       ; preds = %if.then191
  %177 = load i32, i32* %is_rgb, align 4
  %tobool199 = icmp ne i32 %177, 0
  br i1 %tobool199, label %if.then200, label %if.else224

if.then200:                                       ; preds = %if.then198
  store i32 0, i32* %i, align 4
  br label %for.cond201

for.cond201:                                      ; preds = %for.inc221, %if.then200
  %178 = load i32, i32* %i, align 4
  %179 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s202 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %179, i32 0, i32 0
  %180 = load %struct.stbi__context*, %struct.stbi__context** %s202, align 8
  %img_x203 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %180, i32 0, i32 0
  %181 = load i32, i32* %img_x203, align 8
  %cmp204 = icmp ult i32 %178, %181
  br i1 %cmp204, label %for.body206, label %for.end223

for.body206:                                      ; preds = %for.cond201
  %182 = load i8*, i8** %y192, align 8
  %183 = load i32, i32* %i, align 4
  %idxprom207 = zext i32 %183 to i64
  %arrayidx208 = getelementptr inbounds i8, i8* %182, i64 %idxprom207
  %184 = load i8, i8* %arrayidx208, align 1
  %185 = load i8*, i8** %out, align 8
  %arrayidx209 = getelementptr inbounds i8, i8* %185, i64 0
  store i8 %184, i8* %arrayidx209, align 1
  %arrayidx210 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 1
  %186 = load i8*, i8** %arrayidx210, align 8
  %187 = load i32, i32* %i, align 4
  %idxprom211 = zext i32 %187 to i64
  %arrayidx212 = getelementptr inbounds i8, i8* %186, i64 %idxprom211
  %188 = load i8, i8* %arrayidx212, align 1
  %189 = load i8*, i8** %out, align 8
  %arrayidx213 = getelementptr inbounds i8, i8* %189, i64 1
  store i8 %188, i8* %arrayidx213, align 1
  %arrayidx214 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 2
  %190 = load i8*, i8** %arrayidx214, align 16
  %191 = load i32, i32* %i, align 4
  %idxprom215 = zext i32 %191 to i64
  %arrayidx216 = getelementptr inbounds i8, i8* %190, i64 %idxprom215
  %192 = load i8, i8* %arrayidx216, align 1
  %193 = load i8*, i8** %out, align 8
  %arrayidx217 = getelementptr inbounds i8, i8* %193, i64 2
  store i8 %192, i8* %arrayidx217, align 1
  %194 = load i8*, i8** %out, align 8
  %arrayidx218 = getelementptr inbounds i8, i8* %194, i64 3
  store i8 -1, i8* %arrayidx218, align 1
  %195 = load i32, i32* %n, align 4
  %196 = load i8*, i8** %out, align 8
  %idx.ext219 = sext i32 %195 to i64
  %add.ptr220 = getelementptr inbounds i8, i8* %196, i64 %idx.ext219
  store i8* %add.ptr220, i8** %out, align 8
  br label %for.inc221

for.inc221:                                       ; preds = %for.body206
  %197 = load i32, i32* %i, align 4
  %inc222 = add i32 %197, 1
  store i32 %inc222, i32* %i, align 4
  br label %for.cond201

for.end223:                                       ; preds = %for.cond201
  br label %if.end229

if.else224:                                       ; preds = %if.then198
  %198 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %YCbCr_to_RGB_kernel = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %198, i32 0, i32 30
  %199 = load void (i8*, i8*, i8*, i8*, i32, i32)*, void (i8*, i8*, i8*, i8*, i32, i32)** %YCbCr_to_RGB_kernel, align 8
  %200 = load i8*, i8** %out, align 8
  %201 = load i8*, i8** %y192, align 8
  %arrayidx225 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 1
  %202 = load i8*, i8** %arrayidx225, align 8
  %arrayidx226 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 2
  %203 = load i8*, i8** %arrayidx226, align 16
  %204 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s227 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %204, i32 0, i32 0
  %205 = load %struct.stbi__context*, %struct.stbi__context** %s227, align 8
  %img_x228 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %205, i32 0, i32 0
  %206 = load i32, i32* %img_x228, align 8
  %207 = load i32, i32* %n, align 4
  call void %199(i8* %200, i8* %201, i8* %202, i8* %203, i32 %206, i32 %207)
  br label %if.end229

if.end229:                                        ; preds = %if.else224, %for.end223
  br label %if.end340

if.else230:                                       ; preds = %if.then191
  %208 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s231 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %208, i32 0, i32 0
  %209 = load %struct.stbi__context*, %struct.stbi__context** %s231, align 8
  %img_n232 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %209, i32 0, i32 2
  %210 = load i32, i32* %img_n232, align 8
  %cmp233 = icmp eq i32 %210, 4
  br i1 %cmp233, label %if.then235, label %if.else321

if.then235:                                       ; preds = %if.else230
  %211 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %app14_color_transform236 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %211, i32 0, i32 23
  %212 = load i32, i32* %app14_color_transform236, align 4
  %cmp237 = icmp eq i32 %212, 0
  br i1 %cmp237, label %if.then239, label %if.else270

if.then239:                                       ; preds = %if.then235
  store i32 0, i32* %i, align 4
  br label %for.cond240

for.cond240:                                      ; preds = %for.inc267, %if.then239
  %213 = load i32, i32* %i, align 4
  %214 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s241 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %214, i32 0, i32 0
  %215 = load %struct.stbi__context*, %struct.stbi__context** %s241, align 8
  %img_x242 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %215, i32 0, i32 0
  %216 = load i32, i32* %img_x242, align 8
  %cmp243 = icmp ult i32 %213, %216
  br i1 %cmp243, label %for.body245, label %for.end269

for.body245:                                      ; preds = %for.cond240
  %arrayidx246 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 3
  %217 = load i8*, i8** %arrayidx246, align 8
  %218 = load i32, i32* %i, align 4
  %idxprom247 = zext i32 %218 to i64
  %arrayidx248 = getelementptr inbounds i8, i8* %217, i64 %idxprom247
  %219 = load i8, i8* %arrayidx248, align 1
  store i8 %219, i8* %m, align 1
  %arrayidx249 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 0
  %220 = load i8*, i8** %arrayidx249, align 16
  %221 = load i32, i32* %i, align 4
  %idxprom250 = zext i32 %221 to i64
  %arrayidx251 = getelementptr inbounds i8, i8* %220, i64 %idxprom250
  %222 = load i8, i8* %arrayidx251, align 1
  %223 = load i8, i8* %m, align 1
  %call252 = call zeroext i8 @stbi__blinn_8x8(i8 zeroext %222, i8 zeroext %223)
  %224 = load i8*, i8** %out, align 8
  %arrayidx253 = getelementptr inbounds i8, i8* %224, i64 0
  store i8 %call252, i8* %arrayidx253, align 1
  %arrayidx254 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 1
  %225 = load i8*, i8** %arrayidx254, align 8
  %226 = load i32, i32* %i, align 4
  %idxprom255 = zext i32 %226 to i64
  %arrayidx256 = getelementptr inbounds i8, i8* %225, i64 %idxprom255
  %227 = load i8, i8* %arrayidx256, align 1
  %228 = load i8, i8* %m, align 1
  %call257 = call zeroext i8 @stbi__blinn_8x8(i8 zeroext %227, i8 zeroext %228)
  %229 = load i8*, i8** %out, align 8
  %arrayidx258 = getelementptr inbounds i8, i8* %229, i64 1
  store i8 %call257, i8* %arrayidx258, align 1
  %arrayidx259 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 2
  %230 = load i8*, i8** %arrayidx259, align 16
  %231 = load i32, i32* %i, align 4
  %idxprom260 = zext i32 %231 to i64
  %arrayidx261 = getelementptr inbounds i8, i8* %230, i64 %idxprom260
  %232 = load i8, i8* %arrayidx261, align 1
  %233 = load i8, i8* %m, align 1
  %call262 = call zeroext i8 @stbi__blinn_8x8(i8 zeroext %232, i8 zeroext %233)
  %234 = load i8*, i8** %out, align 8
  %arrayidx263 = getelementptr inbounds i8, i8* %234, i64 2
  store i8 %call262, i8* %arrayidx263, align 1
  %235 = load i8*, i8** %out, align 8
  %arrayidx264 = getelementptr inbounds i8, i8* %235, i64 3
  store i8 -1, i8* %arrayidx264, align 1
  %236 = load i32, i32* %n, align 4
  %237 = load i8*, i8** %out, align 8
  %idx.ext265 = sext i32 %236 to i64
  %add.ptr266 = getelementptr inbounds i8, i8* %237, i64 %idx.ext265
  store i8* %add.ptr266, i8** %out, align 8
  br label %for.inc267

for.inc267:                                       ; preds = %for.body245
  %238 = load i32, i32* %i, align 4
  %inc268 = add i32 %238, 1
  store i32 %inc268, i32* %i, align 4
  br label %for.cond240

for.end269:                                       ; preds = %for.cond240
  br label %if.end320

if.else270:                                       ; preds = %if.then235
  %239 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %app14_color_transform271 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %239, i32 0, i32 23
  %240 = load i32, i32* %app14_color_transform271, align 4
  %cmp272 = icmp eq i32 %240, 2
  br i1 %cmp272, label %if.then274, label %if.else313

if.then274:                                       ; preds = %if.else270
  %241 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %YCbCr_to_RGB_kernel275 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %241, i32 0, i32 30
  %242 = load void (i8*, i8*, i8*, i8*, i32, i32)*, void (i8*, i8*, i8*, i8*, i32, i32)** %YCbCr_to_RGB_kernel275, align 8
  %243 = load i8*, i8** %out, align 8
  %244 = load i8*, i8** %y192, align 8
  %arrayidx276 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 1
  %245 = load i8*, i8** %arrayidx276, align 8
  %arrayidx277 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 2
  %246 = load i8*, i8** %arrayidx277, align 16
  %247 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s278 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %247, i32 0, i32 0
  %248 = load %struct.stbi__context*, %struct.stbi__context** %s278, align 8
  %img_x279 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %248, i32 0, i32 0
  %249 = load i32, i32* %img_x279, align 8
  %250 = load i32, i32* %n, align 4
  call void %242(i8* %243, i8* %244, i8* %245, i8* %246, i32 %249, i32 %250)
  store i32 0, i32* %i, align 4
  br label %for.cond280

for.cond280:                                      ; preds = %for.inc310, %if.then274
  %251 = load i32, i32* %i, align 4
  %252 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s281 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %252, i32 0, i32 0
  %253 = load %struct.stbi__context*, %struct.stbi__context** %s281, align 8
  %img_x282 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %253, i32 0, i32 0
  %254 = load i32, i32* %img_x282, align 8
  %cmp283 = icmp ult i32 %251, %254
  br i1 %cmp283, label %for.body285, label %for.end312

for.body285:                                      ; preds = %for.cond280
  %arrayidx287 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 3
  %255 = load i8*, i8** %arrayidx287, align 8
  %256 = load i32, i32* %i, align 4
  %idxprom288 = zext i32 %256 to i64
  %arrayidx289 = getelementptr inbounds i8, i8* %255, i64 %idxprom288
  %257 = load i8, i8* %arrayidx289, align 1
  store i8 %257, i8* %m286, align 1
  %258 = load i8*, i8** %out, align 8
  %arrayidx290 = getelementptr inbounds i8, i8* %258, i64 0
  %259 = load i8, i8* %arrayidx290, align 1
  %conv291 = zext i8 %259 to i32
  %sub292 = sub nsw i32 255, %conv291
  %conv293 = trunc i32 %sub292 to i8
  %260 = load i8, i8* %m286, align 1
  %call294 = call zeroext i8 @stbi__blinn_8x8(i8 zeroext %conv293, i8 zeroext %260)
  %261 = load i8*, i8** %out, align 8
  %arrayidx295 = getelementptr inbounds i8, i8* %261, i64 0
  store i8 %call294, i8* %arrayidx295, align 1
  %262 = load i8*, i8** %out, align 8
  %arrayidx296 = getelementptr inbounds i8, i8* %262, i64 1
  %263 = load i8, i8* %arrayidx296, align 1
  %conv297 = zext i8 %263 to i32
  %sub298 = sub nsw i32 255, %conv297
  %conv299 = trunc i32 %sub298 to i8
  %264 = load i8, i8* %m286, align 1
  %call300 = call zeroext i8 @stbi__blinn_8x8(i8 zeroext %conv299, i8 zeroext %264)
  %265 = load i8*, i8** %out, align 8
  %arrayidx301 = getelementptr inbounds i8, i8* %265, i64 1
  store i8 %call300, i8* %arrayidx301, align 1
  %266 = load i8*, i8** %out, align 8
  %arrayidx302 = getelementptr inbounds i8, i8* %266, i64 2
  %267 = load i8, i8* %arrayidx302, align 1
  %conv303 = zext i8 %267 to i32
  %sub304 = sub nsw i32 255, %conv303
  %conv305 = trunc i32 %sub304 to i8
  %268 = load i8, i8* %m286, align 1
  %call306 = call zeroext i8 @stbi__blinn_8x8(i8 zeroext %conv305, i8 zeroext %268)
  %269 = load i8*, i8** %out, align 8
  %arrayidx307 = getelementptr inbounds i8, i8* %269, i64 2
  store i8 %call306, i8* %arrayidx307, align 1
  %270 = load i32, i32* %n, align 4
  %271 = load i8*, i8** %out, align 8
  %idx.ext308 = sext i32 %270 to i64
  %add.ptr309 = getelementptr inbounds i8, i8* %271, i64 %idx.ext308
  store i8* %add.ptr309, i8** %out, align 8
  br label %for.inc310

for.inc310:                                       ; preds = %for.body285
  %272 = load i32, i32* %i, align 4
  %inc311 = add i32 %272, 1
  store i32 %inc311, i32* %i, align 4
  br label %for.cond280

for.end312:                                       ; preds = %for.cond280
  br label %if.end319

if.else313:                                       ; preds = %if.else270
  %273 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %YCbCr_to_RGB_kernel314 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %273, i32 0, i32 30
  %274 = load void (i8*, i8*, i8*, i8*, i32, i32)*, void (i8*, i8*, i8*, i8*, i32, i32)** %YCbCr_to_RGB_kernel314, align 8
  %275 = load i8*, i8** %out, align 8
  %276 = load i8*, i8** %y192, align 8
  %arrayidx315 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 1
  %277 = load i8*, i8** %arrayidx315, align 8
  %arrayidx316 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 2
  %278 = load i8*, i8** %arrayidx316, align 16
  %279 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s317 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %279, i32 0, i32 0
  %280 = load %struct.stbi__context*, %struct.stbi__context** %s317, align 8
  %img_x318 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %280, i32 0, i32 0
  %281 = load i32, i32* %img_x318, align 8
  %282 = load i32, i32* %n, align 4
  call void %274(i8* %275, i8* %276, i8* %277, i8* %278, i32 %281, i32 %282)
  br label %if.end319

if.end319:                                        ; preds = %if.else313, %for.end312
  br label %if.end320

if.end320:                                        ; preds = %if.end319, %for.end269
  br label %if.end339

if.else321:                                       ; preds = %if.else230
  store i32 0, i32* %i, align 4
  br label %for.cond322

for.cond322:                                      ; preds = %for.inc336, %if.else321
  %283 = load i32, i32* %i, align 4
  %284 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s323 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %284, i32 0, i32 0
  %285 = load %struct.stbi__context*, %struct.stbi__context** %s323, align 8
  %img_x324 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %285, i32 0, i32 0
  %286 = load i32, i32* %img_x324, align 8
  %cmp325 = icmp ult i32 %283, %286
  br i1 %cmp325, label %for.body327, label %for.end338

for.body327:                                      ; preds = %for.cond322
  %287 = load i8*, i8** %y192, align 8
  %288 = load i32, i32* %i, align 4
  %idxprom328 = zext i32 %288 to i64
  %arrayidx329 = getelementptr inbounds i8, i8* %287, i64 %idxprom328
  %289 = load i8, i8* %arrayidx329, align 1
  %290 = load i8*, i8** %out, align 8
  %arrayidx330 = getelementptr inbounds i8, i8* %290, i64 2
  store i8 %289, i8* %arrayidx330, align 1
  %291 = load i8*, i8** %out, align 8
  %arrayidx331 = getelementptr inbounds i8, i8* %291, i64 1
  store i8 %289, i8* %arrayidx331, align 1
  %292 = load i8*, i8** %out, align 8
  %arrayidx332 = getelementptr inbounds i8, i8* %292, i64 0
  store i8 %289, i8* %arrayidx332, align 1
  %293 = load i8*, i8** %out, align 8
  %arrayidx333 = getelementptr inbounds i8, i8* %293, i64 3
  store i8 -1, i8* %arrayidx333, align 1
  %294 = load i32, i32* %n, align 4
  %295 = load i8*, i8** %out, align 8
  %idx.ext334 = sext i32 %294 to i64
  %add.ptr335 = getelementptr inbounds i8, i8* %295, i64 %idx.ext334
  store i8* %add.ptr335, i8** %out, align 8
  br label %for.inc336

for.inc336:                                       ; preds = %for.body327
  %296 = load i32, i32* %i, align 4
  %inc337 = add i32 %296, 1
  store i32 %inc337, i32* %i, align 4
  br label %for.cond322

for.end338:                                       ; preds = %for.cond322
  br label %if.end339

if.end339:                                        ; preds = %for.end338, %if.end320
  br label %if.end340

if.end340:                                        ; preds = %if.end339, %if.end229
  br label %if.end510

if.else341:                                       ; preds = %for.end188
  %297 = load i32, i32* %is_rgb, align 4
  %tobool342 = icmp ne i32 %297, 0
  br i1 %tobool342, label %if.then343, label %if.else396

if.then343:                                       ; preds = %if.else341
  %298 = load i32, i32* %n, align 4
  %cmp344 = icmp eq i32 %298, 1
  br i1 %cmp344, label %if.then346, label %if.else369

if.then346:                                       ; preds = %if.then343
  store i32 0, i32* %i, align 4
  br label %for.cond347

for.cond347:                                      ; preds = %for.inc366, %if.then346
  %299 = load i32, i32* %i, align 4
  %300 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s348 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %300, i32 0, i32 0
  %301 = load %struct.stbi__context*, %struct.stbi__context** %s348, align 8
  %img_x349 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %301, i32 0, i32 0
  %302 = load i32, i32* %img_x349, align 8
  %cmp350 = icmp ult i32 %299, %302
  br i1 %cmp350, label %for.body352, label %for.end368

for.body352:                                      ; preds = %for.cond347
  %arrayidx353 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 0
  %303 = load i8*, i8** %arrayidx353, align 16
  %304 = load i32, i32* %i, align 4
  %idxprom354 = zext i32 %304 to i64
  %arrayidx355 = getelementptr inbounds i8, i8* %303, i64 %idxprom354
  %305 = load i8, i8* %arrayidx355, align 1
  %conv356 = zext i8 %305 to i32
  %arrayidx357 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 1
  %306 = load i8*, i8** %arrayidx357, align 8
  %307 = load i32, i32* %i, align 4
  %idxprom358 = zext i32 %307 to i64
  %arrayidx359 = getelementptr inbounds i8, i8* %306, i64 %idxprom358
  %308 = load i8, i8* %arrayidx359, align 1
  %conv360 = zext i8 %308 to i32
  %arrayidx361 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 2
  %309 = load i8*, i8** %arrayidx361, align 16
  %310 = load i32, i32* %i, align 4
  %idxprom362 = zext i32 %310 to i64
  %arrayidx363 = getelementptr inbounds i8, i8* %309, i64 %idxprom362
  %311 = load i8, i8* %arrayidx363, align 1
  %conv364 = zext i8 %311 to i32
  %call365 = call zeroext i8 @stbi__compute_y(i32 %conv356, i32 %conv360, i32 %conv364)
  %312 = load i8*, i8** %out, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %312, i32 1
  store i8* %incdec.ptr, i8** %out, align 8
  store i8 %call365, i8* %312, align 1
  br label %for.inc366

for.inc366:                                       ; preds = %for.body352
  %313 = load i32, i32* %i, align 4
  %inc367 = add i32 %313, 1
  store i32 %inc367, i32* %i, align 4
  br label %for.cond347

for.end368:                                       ; preds = %for.cond347
  br label %if.end395

if.else369:                                       ; preds = %if.then343
  store i32 0, i32* %i, align 4
  br label %for.cond370

for.cond370:                                      ; preds = %for.inc391, %if.else369
  %314 = load i32, i32* %i, align 4
  %315 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s371 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %315, i32 0, i32 0
  %316 = load %struct.stbi__context*, %struct.stbi__context** %s371, align 8
  %img_x372 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %316, i32 0, i32 0
  %317 = load i32, i32* %img_x372, align 8
  %cmp373 = icmp ult i32 %314, %317
  br i1 %cmp373, label %for.body375, label %for.end394

for.body375:                                      ; preds = %for.cond370
  %arrayidx376 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 0
  %318 = load i8*, i8** %arrayidx376, align 16
  %319 = load i32, i32* %i, align 4
  %idxprom377 = zext i32 %319 to i64
  %arrayidx378 = getelementptr inbounds i8, i8* %318, i64 %idxprom377
  %320 = load i8, i8* %arrayidx378, align 1
  %conv379 = zext i8 %320 to i32
  %arrayidx380 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 1
  %321 = load i8*, i8** %arrayidx380, align 8
  %322 = load i32, i32* %i, align 4
  %idxprom381 = zext i32 %322 to i64
  %arrayidx382 = getelementptr inbounds i8, i8* %321, i64 %idxprom381
  %323 = load i8, i8* %arrayidx382, align 1
  %conv383 = zext i8 %323 to i32
  %arrayidx384 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 2
  %324 = load i8*, i8** %arrayidx384, align 16
  %325 = load i32, i32* %i, align 4
  %idxprom385 = zext i32 %325 to i64
  %arrayidx386 = getelementptr inbounds i8, i8* %324, i64 %idxprom385
  %326 = load i8, i8* %arrayidx386, align 1
  %conv387 = zext i8 %326 to i32
  %call388 = call zeroext i8 @stbi__compute_y(i32 %conv379, i32 %conv383, i32 %conv387)
  %327 = load i8*, i8** %out, align 8
  %arrayidx389 = getelementptr inbounds i8, i8* %327, i64 0
  store i8 %call388, i8* %arrayidx389, align 1
  %328 = load i8*, i8** %out, align 8
  %arrayidx390 = getelementptr inbounds i8, i8* %328, i64 1
  store i8 -1, i8* %arrayidx390, align 1
  br label %for.inc391

for.inc391:                                       ; preds = %for.body375
  %329 = load i32, i32* %i, align 4
  %inc392 = add i32 %329, 1
  store i32 %inc392, i32* %i, align 4
  %330 = load i8*, i8** %out, align 8
  %add.ptr393 = getelementptr inbounds i8, i8* %330, i64 2
  store i8* %add.ptr393, i8** %out, align 8
  br label %for.cond370

for.end394:                                       ; preds = %for.cond370
  br label %if.end395

if.end395:                                        ; preds = %for.end394, %for.end368
  br label %if.end509

if.else396:                                       ; preds = %if.else341
  %331 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s397 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %331, i32 0, i32 0
  %332 = load %struct.stbi__context*, %struct.stbi__context** %s397, align 8
  %img_n398 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %332, i32 0, i32 2
  %333 = load i32, i32* %img_n398, align 8
  %cmp399 = icmp eq i32 %333, 4
  br i1 %cmp399, label %land.lhs.true401, label %if.else440

land.lhs.true401:                                 ; preds = %if.else396
  %334 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %app14_color_transform402 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %334, i32 0, i32 23
  %335 = load i32, i32* %app14_color_transform402, align 4
  %cmp403 = icmp eq i32 %335, 0
  br i1 %cmp403, label %if.then405, label %if.else440

if.then405:                                       ; preds = %land.lhs.true401
  store i32 0, i32* %i, align 4
  br label %for.cond406

for.cond406:                                      ; preds = %for.inc437, %if.then405
  %336 = load i32, i32* %i, align 4
  %337 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s407 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %337, i32 0, i32 0
  %338 = load %struct.stbi__context*, %struct.stbi__context** %s407, align 8
  %img_x408 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %338, i32 0, i32 0
  %339 = load i32, i32* %img_x408, align 8
  %cmp409 = icmp ult i32 %336, %339
  br i1 %cmp409, label %for.body411, label %for.end439

for.body411:                                      ; preds = %for.cond406
  %arrayidx413 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 3
  %340 = load i8*, i8** %arrayidx413, align 8
  %341 = load i32, i32* %i, align 4
  %idxprom414 = zext i32 %341 to i64
  %arrayidx415 = getelementptr inbounds i8, i8* %340, i64 %idxprom414
  %342 = load i8, i8* %arrayidx415, align 1
  store i8 %342, i8* %m412, align 1
  %arrayidx417 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 0
  %343 = load i8*, i8** %arrayidx417, align 16
  %344 = load i32, i32* %i, align 4
  %idxprom418 = zext i32 %344 to i64
  %arrayidx419 = getelementptr inbounds i8, i8* %343, i64 %idxprom418
  %345 = load i8, i8* %arrayidx419, align 1
  %346 = load i8, i8* %m412, align 1
  %call420 = call zeroext i8 @stbi__blinn_8x8(i8 zeroext %345, i8 zeroext %346)
  store i8 %call420, i8* %r416, align 1
  %arrayidx421 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 1
  %347 = load i8*, i8** %arrayidx421, align 8
  %348 = load i32, i32* %i, align 4
  %idxprom422 = zext i32 %348 to i64
  %arrayidx423 = getelementptr inbounds i8, i8* %347, i64 %idxprom422
  %349 = load i8, i8* %arrayidx423, align 1
  %350 = load i8, i8* %m412, align 1
  %call424 = call zeroext i8 @stbi__blinn_8x8(i8 zeroext %349, i8 zeroext %350)
  store i8 %call424, i8* %g, align 1
  %arrayidx425 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 2
  %351 = load i8*, i8** %arrayidx425, align 16
  %352 = load i32, i32* %i, align 4
  %idxprom426 = zext i32 %352 to i64
  %arrayidx427 = getelementptr inbounds i8, i8* %351, i64 %idxprom426
  %353 = load i8, i8* %arrayidx427, align 1
  %354 = load i8, i8* %m412, align 1
  %call428 = call zeroext i8 @stbi__blinn_8x8(i8 zeroext %353, i8 zeroext %354)
  store i8 %call428, i8* %b, align 1
  %355 = load i8, i8* %r416, align 1
  %conv429 = zext i8 %355 to i32
  %356 = load i8, i8* %g, align 1
  %conv430 = zext i8 %356 to i32
  %357 = load i8, i8* %b, align 1
  %conv431 = zext i8 %357 to i32
  %call432 = call zeroext i8 @stbi__compute_y(i32 %conv429, i32 %conv430, i32 %conv431)
  %358 = load i8*, i8** %out, align 8
  %arrayidx433 = getelementptr inbounds i8, i8* %358, i64 0
  store i8 %call432, i8* %arrayidx433, align 1
  %359 = load i8*, i8** %out, align 8
  %arrayidx434 = getelementptr inbounds i8, i8* %359, i64 1
  store i8 -1, i8* %arrayidx434, align 1
  %360 = load i32, i32* %n, align 4
  %361 = load i8*, i8** %out, align 8
  %idx.ext435 = sext i32 %360 to i64
  %add.ptr436 = getelementptr inbounds i8, i8* %361, i64 %idx.ext435
  store i8* %add.ptr436, i8** %out, align 8
  br label %for.inc437

for.inc437:                                       ; preds = %for.body411
  %362 = load i32, i32* %i, align 4
  %inc438 = add i32 %362, 1
  store i32 %inc438, i32* %i, align 4
  br label %for.cond406

for.end439:                                       ; preds = %for.cond406
  br label %if.end508

if.else440:                                       ; preds = %land.lhs.true401, %if.else396
  %363 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s441 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %363, i32 0, i32 0
  %364 = load %struct.stbi__context*, %struct.stbi__context** %s441, align 8
  %img_n442 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %364, i32 0, i32 2
  %365 = load i32, i32* %img_n442, align 8
  %cmp443 = icmp eq i32 %365, 4
  br i1 %cmp443, label %land.lhs.true445, label %if.else473

land.lhs.true445:                                 ; preds = %if.else440
  %366 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %app14_color_transform446 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %366, i32 0, i32 23
  %367 = load i32, i32* %app14_color_transform446, align 4
  %cmp447 = icmp eq i32 %367, 2
  br i1 %cmp447, label %if.then449, label %if.else473

if.then449:                                       ; preds = %land.lhs.true445
  store i32 0, i32* %i, align 4
  br label %for.cond450

for.cond450:                                      ; preds = %for.inc470, %if.then449
  %368 = load i32, i32* %i, align 4
  %369 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s451 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %369, i32 0, i32 0
  %370 = load %struct.stbi__context*, %struct.stbi__context** %s451, align 8
  %img_x452 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %370, i32 0, i32 0
  %371 = load i32, i32* %img_x452, align 8
  %cmp453 = icmp ult i32 %368, %371
  br i1 %cmp453, label %for.body455, label %for.end472

for.body455:                                      ; preds = %for.cond450
  %arrayidx456 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 0
  %372 = load i8*, i8** %arrayidx456, align 16
  %373 = load i32, i32* %i, align 4
  %idxprom457 = zext i32 %373 to i64
  %arrayidx458 = getelementptr inbounds i8, i8* %372, i64 %idxprom457
  %374 = load i8, i8* %arrayidx458, align 1
  %conv459 = zext i8 %374 to i32
  %sub460 = sub nsw i32 255, %conv459
  %conv461 = trunc i32 %sub460 to i8
  %arrayidx462 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 3
  %375 = load i8*, i8** %arrayidx462, align 8
  %376 = load i32, i32* %i, align 4
  %idxprom463 = zext i32 %376 to i64
  %arrayidx464 = getelementptr inbounds i8, i8* %375, i64 %idxprom463
  %377 = load i8, i8* %arrayidx464, align 1
  %call465 = call zeroext i8 @stbi__blinn_8x8(i8 zeroext %conv461, i8 zeroext %377)
  %378 = load i8*, i8** %out, align 8
  %arrayidx466 = getelementptr inbounds i8, i8* %378, i64 0
  store i8 %call465, i8* %arrayidx466, align 1
  %379 = load i8*, i8** %out, align 8
  %arrayidx467 = getelementptr inbounds i8, i8* %379, i64 1
  store i8 -1, i8* %arrayidx467, align 1
  %380 = load i32, i32* %n, align 4
  %381 = load i8*, i8** %out, align 8
  %idx.ext468 = sext i32 %380 to i64
  %add.ptr469 = getelementptr inbounds i8, i8* %381, i64 %idx.ext468
  store i8* %add.ptr469, i8** %out, align 8
  br label %for.inc470

for.inc470:                                       ; preds = %for.body455
  %382 = load i32, i32* %i, align 4
  %inc471 = add i32 %382, 1
  store i32 %inc471, i32* %i, align 4
  br label %for.cond450

for.end472:                                       ; preds = %for.cond450
  br label %if.end507

if.else473:                                       ; preds = %land.lhs.true445, %if.else440
  %arrayidx475 = getelementptr inbounds [4 x i8*], [4 x i8*]* %coutput, i64 0, i64 0
  %383 = load i8*, i8** %arrayidx475, align 16
  store i8* %383, i8** %y474, align 8
  %384 = load i32, i32* %n, align 4
  %cmp476 = icmp eq i32 %384, 1
  br i1 %cmp476, label %if.then478, label %if.else492

if.then478:                                       ; preds = %if.else473
  store i32 0, i32* %i, align 4
  br label %for.cond479

for.cond479:                                      ; preds = %for.inc489, %if.then478
  %385 = load i32, i32* %i, align 4
  %386 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s480 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %386, i32 0, i32 0
  %387 = load %struct.stbi__context*, %struct.stbi__context** %s480, align 8
  %img_x481 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %387, i32 0, i32 0
  %388 = load i32, i32* %img_x481, align 8
  %cmp482 = icmp ult i32 %385, %388
  br i1 %cmp482, label %for.body484, label %for.end491

for.body484:                                      ; preds = %for.cond479
  %389 = load i8*, i8** %y474, align 8
  %390 = load i32, i32* %i, align 4
  %idxprom485 = zext i32 %390 to i64
  %arrayidx486 = getelementptr inbounds i8, i8* %389, i64 %idxprom485
  %391 = load i8, i8* %arrayidx486, align 1
  %392 = load i8*, i8** %out, align 8
  %393 = load i32, i32* %i, align 4
  %idxprom487 = zext i32 %393 to i64
  %arrayidx488 = getelementptr inbounds i8, i8* %392, i64 %idxprom487
  store i8 %391, i8* %arrayidx488, align 1
  br label %for.inc489

for.inc489:                                       ; preds = %for.body484
  %394 = load i32, i32* %i, align 4
  %inc490 = add i32 %394, 1
  store i32 %inc490, i32* %i, align 4
  br label %for.cond479

for.end491:                                       ; preds = %for.cond479
  br label %if.end506

if.else492:                                       ; preds = %if.else473
  store i32 0, i32* %i, align 4
  br label %for.cond493

for.cond493:                                      ; preds = %for.inc503, %if.else492
  %395 = load i32, i32* %i, align 4
  %396 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s494 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %396, i32 0, i32 0
  %397 = load %struct.stbi__context*, %struct.stbi__context** %s494, align 8
  %img_x495 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %397, i32 0, i32 0
  %398 = load i32, i32* %img_x495, align 8
  %cmp496 = icmp ult i32 %395, %398
  br i1 %cmp496, label %for.body498, label %for.end505

for.body498:                                      ; preds = %for.cond493
  %399 = load i8*, i8** %y474, align 8
  %400 = load i32, i32* %i, align 4
  %idxprom499 = zext i32 %400 to i64
  %arrayidx500 = getelementptr inbounds i8, i8* %399, i64 %idxprom499
  %401 = load i8, i8* %arrayidx500, align 1
  %402 = load i8*, i8** %out, align 8
  %incdec.ptr501 = getelementptr inbounds i8, i8* %402, i32 1
  store i8* %incdec.ptr501, i8** %out, align 8
  store i8 %401, i8* %402, align 1
  %403 = load i8*, i8** %out, align 8
  %incdec.ptr502 = getelementptr inbounds i8, i8* %403, i32 1
  store i8* %incdec.ptr502, i8** %out, align 8
  store i8 -1, i8* %403, align 1
  br label %for.inc503

for.inc503:                                       ; preds = %for.body498
  %404 = load i32, i32* %i, align 4
  %inc504 = add i32 %404, 1
  store i32 %inc504, i32* %i, align 4
  br label %for.cond493

for.end505:                                       ; preds = %for.cond493
  br label %if.end506

if.end506:                                        ; preds = %for.end505, %for.end491
  br label %if.end507

if.end507:                                        ; preds = %if.end506, %for.end472
  br label %if.end508

if.end508:                                        ; preds = %if.end507, %for.end439
  br label %if.end509

if.end509:                                        ; preds = %if.end508, %if.end395
  br label %if.end510

if.end510:                                        ; preds = %if.end509, %if.end340
  br label %for.inc511

for.inc511:                                       ; preds = %if.end510
  %405 = load i32, i32* %j, align 4
  %inc512 = add i32 %405, 1
  store i32 %inc512, i32* %j, align 4
  br label %for.cond116

for.end513:                                       ; preds = %for.cond116
  %406 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__cleanup_jpeg(%struct.stbi__jpeg* %406)
  %407 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s514 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %407, i32 0, i32 0
  %408 = load %struct.stbi__context*, %struct.stbi__context** %s514, align 8
  %img_x515 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %408, i32 0, i32 0
  %409 = load i32, i32* %img_x515, align 8
  %410 = load i32*, i32** %out_x.addr, align 8
  store i32 %409, i32* %410, align 4
  %411 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s516 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %411, i32 0, i32 0
  %412 = load %struct.stbi__context*, %struct.stbi__context** %s516, align 8
  %img_y517 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %412, i32 0, i32 1
  %413 = load i32, i32* %img_y517, align 4
  %414 = load i32*, i32** %out_y.addr, align 8
  store i32 %413, i32* %414, align 4
  %415 = load i32*, i32** %comp.addr, align 8
  %tobool518 = icmp ne i32* %415, null
  br i1 %tobool518, label %if.then519, label %if.end525

if.then519:                                       ; preds = %for.end513
  %416 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s520 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %416, i32 0, i32 0
  %417 = load %struct.stbi__context*, %struct.stbi__context** %s520, align 8
  %img_n521 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %417, i32 0, i32 2
  %418 = load i32, i32* %img_n521, align 8
  %cmp522 = icmp sge i32 %418, 3
  %419 = zext i1 %cmp522 to i64
  %cond524 = select i1 %cmp522, i32 3, i32 1
  %420 = load i32*, i32** %comp.addr, align 8
  store i32 %cond524, i32* %420, align 4
  br label %if.end525

if.end525:                                        ; preds = %if.then519, %for.end513
  %421 = load i8*, i8** %output, align 8
  store i8* %421, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end525, %if.then111, %if.then40, %if.then4, %if.then
  %422 = load i8*, i8** %retval, align 8
  ret i8* %422
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__decode_jpeg_image(%struct.stbi__jpeg* %j) #0 {
entry:
  %retval = alloca i32, align 4
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %m = alloca i32, align 4
  %x = alloca i32, align 4
  %Ld = alloca i32, align 4
  %NL = alloca i32, align 4
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %m, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %img_comp = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %1, i32 0, i32 11
  %2 = load i32, i32* %m, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp, i64 0, i64 %idxprom
  %raw_data = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 12
  store i8* null, i8** %raw_data, align 8
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %img_comp1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %3, i32 0, i32 11
  %4 = load i32, i32* %m, align 4
  %idxprom2 = sext i32 %4 to i64
  %arrayidx3 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp1, i64 0, i64 %idxprom2
  %raw_coeff = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx3, i32 0, i32 13
  store i8* null, i8** %raw_coeff, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %m, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %restart_interval = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %6, i32 0, i32 27
  store i32 0, i32* %restart_interval, align 8
  %7 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %call = call i32 @stbi__decode_jpeg_header(%struct.stbi__jpeg* %7, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.end
  %8 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %call4 = call zeroext i8 @stbi__get_marker(%struct.stbi__jpeg* %8)
  %conv = zext i8 %call4 to i32
  store i32 %conv, i32* %m, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end62, %if.end
  %9 = load i32, i32* %m, align 4
  %cmp5 = icmp eq i32 %9, 217
  %lnot = xor i1 %cmp5, true
  br i1 %lnot, label %while.body, label %while.end65

while.body:                                       ; preds = %while.cond
  %10 = load i32, i32* %m, align 4
  %cmp7 = icmp eq i32 %10, 218
  br i1 %cmp7, label %if.then9, label %if.else

if.then9:                                         ; preds = %while.body
  %11 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %call10 = call i32 @stbi__process_scan_header(%struct.stbi__jpeg* %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.then9
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.then9
  %12 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %call14 = call i32 @stbi__parse_entropy_coded_data(%struct.stbi__jpeg* %12)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end17, label %if.then16

if.then16:                                        ; preds = %if.end13
  store i32 0, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end13
  %13 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %marker = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %13, i32 0, i32 14
  %14 = load i8, i8* %marker, align 8
  %conv18 = zext i8 %14 to i32
  %cmp19 = icmp eq i32 %conv18, 255
  br i1 %cmp19, label %if.then21, label %if.end37

if.then21:                                        ; preds = %if.end17
  br label %while.cond22

while.cond22:                                     ; preds = %if.end36, %if.then21
  %15 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %15, i32 0, i32 0
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call23 = call i32 @stbi__at_eof(%struct.stbi__context* %16)
  %tobool24 = icmp ne i32 %call23, 0
  %lnot25 = xor i1 %tobool24, true
  br i1 %lnot25, label %while.body26, label %while.end

while.body26:                                     ; preds = %while.cond22
  %17 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s27 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %17, i32 0, i32 0
  %18 = load %struct.stbi__context*, %struct.stbi__context** %s27, align 8
  %call28 = call zeroext i8 @stbi__get8(%struct.stbi__context* %18)
  %conv29 = zext i8 %call28 to i32
  store i32 %conv29, i32* %x, align 4
  %19 = load i32, i32* %x, align 4
  %cmp30 = icmp eq i32 %19, 255
  br i1 %cmp30, label %if.then32, label %if.end36

if.then32:                                        ; preds = %while.body26
  %20 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s33 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %20, i32 0, i32 0
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s33, align 8
  %call34 = call zeroext i8 @stbi__get8(%struct.stbi__context* %21)
  %22 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %marker35 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %22, i32 0, i32 14
  store i8 %call34, i8* %marker35, align 8
  br label %while.end

if.end36:                                         ; preds = %while.body26
  br label %while.cond22

while.end:                                        ; preds = %if.then32, %while.cond22
  br label %if.end37

if.end37:                                         ; preds = %while.end, %if.end17
  br label %if.end62

if.else:                                          ; preds = %while.body
  %23 = load i32, i32* %m, align 4
  %cmp38 = icmp eq i32 %23, 220
  br i1 %cmp38, label %if.then40, label %if.else56

if.then40:                                        ; preds = %if.else
  %24 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s41 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %24, i32 0, i32 0
  %25 = load %struct.stbi__context*, %struct.stbi__context** %s41, align 8
  %call42 = call i32 @stbi__get16be(%struct.stbi__context* %25)
  store i32 %call42, i32* %Ld, align 4
  %26 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s43 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %26, i32 0, i32 0
  %27 = load %struct.stbi__context*, %struct.stbi__context** %s43, align 8
  %call44 = call i32 @stbi__get16be(%struct.stbi__context* %27)
  store i32 %call44, i32* %NL, align 4
  %28 = load i32, i32* %Ld, align 4
  %cmp45 = icmp ne i32 %28, 4
  br i1 %cmp45, label %if.then47, label %if.end49

if.then47:                                        ; preds = %if.then40
  %call48 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i64 0, i64 0))
  store i32 %call48, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %if.then40
  %29 = load i32, i32* %NL, align 4
  %30 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s50 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %30, i32 0, i32 0
  %31 = load %struct.stbi__context*, %struct.stbi__context** %s50, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %31, i32 0, i32 1
  %32 = load i32, i32* %img_y, align 4
  %cmp51 = icmp ne i32 %29, %32
  br i1 %cmp51, label %if.then53, label %if.end55

if.then53:                                        ; preds = %if.end49
  %call54 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i64 0, i64 0))
  store i32 %call54, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end49
  br label %if.end61

if.else56:                                        ; preds = %if.else
  %33 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %34 = load i32, i32* %m, align 4
  %call57 = call i32 @stbi__process_marker(%struct.stbi__jpeg* %33, i32 %34)
  %tobool58 = icmp ne i32 %call57, 0
  br i1 %tobool58, label %if.end60, label %if.then59

if.then59:                                        ; preds = %if.else56
  store i32 0, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.else56
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.end55
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end37
  %35 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %call63 = call zeroext i8 @stbi__get_marker(%struct.stbi__jpeg* %35)
  %conv64 = zext i8 %call63 to i32
  store i32 %conv64, i32* %m, align 4
  br label %while.cond

while.end65:                                      ; preds = %while.cond
  %36 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %progressive = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %36, i32 0, i32 16
  %37 = load i32, i32* %progressive, align 8
  %tobool66 = icmp ne i32 %37, 0
  br i1 %tobool66, label %if.then67, label %if.end68

if.then67:                                        ; preds = %while.end65
  %38 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  call void @stbi__jpeg_finish(%struct.stbi__jpeg* %38)
  br label %if.end68

if.end68:                                         ; preds = %if.then67, %while.end65
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end68, %if.then59, %if.then53, %if.then47, %if.then16, %if.then12, %if.then
  %39 = load i32, i32* %retval, align 4
  ret i32 %39
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__cleanup_jpeg(%struct.stbi__jpeg* %j) #0 {
entry:
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %1 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %1, i32 0, i32 0
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 2
  %3 = load i32, i32* %img_n, align 8
  %call = call i32 @stbi__free_jpeg_components(%struct.stbi__jpeg* %0, i32 %3, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @resample_row_1(i8* %out, i8* %in_near, i8* %in_far, i32 %w, i32 %hs) #0 {
entry:
  %out.addr = alloca i8*, align 8
  %in_near.addr = alloca i8*, align 8
  %in_far.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %hs.addr = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8
  store i8* %in_near, i8** %in_near.addr, align 8
  store i8* %in_far, i8** %in_far.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %hs, i32* %hs.addr, align 4
  %0 = load i8*, i8** %in_near.addr, align 8
  ret i8* %0
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__resample_row_v_2(i8* %out, i8* %in_near, i8* %in_far, i32 %w, i32 %hs) #0 {
entry:
  %out.addr = alloca i8*, align 8
  %in_near.addr = alloca i8*, align 8
  %in_far.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %hs.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8
  store i8* %in_near, i8** %in_near.addr, align 8
  store i8* %in_far, i8** %in_far.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %hs, i32* %hs.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %w.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %in_near.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %mul = mul nsw i32 3, %conv
  %5 = load i8*, i8** %in_far.addr, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %6 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 %idxprom1
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  %add = add nsw i32 %mul, %conv3
  %add4 = add nsw i32 %add, 2
  %shr = ashr i32 %add4, 2
  %conv5 = trunc i32 %shr to i8
  %8 = load i8*, i8** %out.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %9 to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 %idxprom6
  store i8 %conv5, i8* %arrayidx7, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i8*, i8** %out.addr, align 8
  ret i8* %11
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__resample_row_h_2(i8* %out, i8* %in_near, i8* %in_far, i32 %w, i32 %hs) #0 {
entry:
  %retval = alloca i8*, align 8
  %out.addr = alloca i8*, align 8
  %in_near.addr = alloca i8*, align 8
  %in_far.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %hs.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %input = alloca i8*, align 8
  %n = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8
  store i8* %in_near, i8** %in_near.addr, align 8
  store i8* %in_far, i8** %in_far.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %hs, i32* %hs.addr, align 4
  %0 = load i8*, i8** %in_near.addr, align 8
  store i8* %0, i8** %input, align 8
  %1 = load i32, i32* %w.addr, align 4
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %input, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %4 = load i8*, i8** %out.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i64 1
  store i8 %3, i8* %arrayidx1, align 1
  %5 = load i8*, i8** %out.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 0
  store i8 %3, i8* %arrayidx2, align 1
  %6 = load i8*, i8** %out.addr, align 8
  store i8* %6, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %input, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx3, align 1
  %9 = load i8*, i8** %out.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %9, i64 0
  store i8 %8, i8* %arrayidx4, align 1
  %10 = load i8*, i8** %input, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx5, align 1
  %conv = zext i8 %11 to i32
  %mul = mul nsw i32 %conv, 3
  %12 = load i8*, i8** %input, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %13 to i32
  %add = add nsw i32 %mul, %conv7
  %add8 = add nsw i32 %add, 2
  %shr = ashr i32 %add8, 2
  %conv9 = trunc i32 %shr to i8
  %14 = load i8*, i8** %out.addr, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %14, i64 1
  store i8 %conv9, i8* %arrayidx10, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %w.addr, align 4
  %sub = sub nsw i32 %16, 1
  %cmp11 = icmp slt i32 %15, %sub
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i8*, i8** %input, align 8
  %18 = load i32, i32* %i, align 4
  %idxprom = sext i32 %18 to i64
  %arrayidx13 = getelementptr inbounds i8, i8* %17, i64 %idxprom
  %19 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %19 to i32
  %mul15 = mul nsw i32 3, %conv14
  %add16 = add nsw i32 %mul15, 2
  store i32 %add16, i32* %n, align 4
  %20 = load i32, i32* %n, align 4
  %21 = load i8*, i8** %input, align 8
  %22 = load i32, i32* %i, align 4
  %sub17 = sub nsw i32 %22, 1
  %idxprom18 = sext i32 %sub17 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %21, i64 %idxprom18
  %23 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %23 to i32
  %add21 = add nsw i32 %20, %conv20
  %shr22 = ashr i32 %add21, 2
  %conv23 = trunc i32 %shr22 to i8
  %24 = load i8*, i8** %out.addr, align 8
  %25 = load i32, i32* %i, align 4
  %mul24 = mul nsw i32 %25, 2
  %add25 = add nsw i32 %mul24, 0
  %idxprom26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds i8, i8* %24, i64 %idxprom26
  store i8 %conv23, i8* %arrayidx27, align 1
  %26 = load i32, i32* %n, align 4
  %27 = load i8*, i8** %input, align 8
  %28 = load i32, i32* %i, align 4
  %add28 = add nsw i32 %28, 1
  %idxprom29 = sext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds i8, i8* %27, i64 %idxprom29
  %29 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %29 to i32
  %add32 = add nsw i32 %26, %conv31
  %shr33 = ashr i32 %add32, 2
  %conv34 = trunc i32 %shr33 to i8
  %30 = load i8*, i8** %out.addr, align 8
  %31 = load i32, i32* %i, align 4
  %mul35 = mul nsw i32 %31, 2
  %add36 = add nsw i32 %mul35, 1
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds i8, i8* %30, i64 %idxprom37
  store i8 %conv34, i8* %arrayidx38, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %32 = load i32, i32* %i, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %33 = load i8*, i8** %input, align 8
  %34 = load i32, i32* %w.addr, align 4
  %sub39 = sub nsw i32 %34, 2
  %idxprom40 = sext i32 %sub39 to i64
  %arrayidx41 = getelementptr inbounds i8, i8* %33, i64 %idxprom40
  %35 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %35 to i32
  %mul43 = mul nsw i32 %conv42, 3
  %36 = load i8*, i8** %input, align 8
  %37 = load i32, i32* %w.addr, align 4
  %sub44 = sub nsw i32 %37, 1
  %idxprom45 = sext i32 %sub44 to i64
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i64 %idxprom45
  %38 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %38 to i32
  %add48 = add nsw i32 %mul43, %conv47
  %add49 = add nsw i32 %add48, 2
  %shr50 = ashr i32 %add49, 2
  %conv51 = trunc i32 %shr50 to i8
  %39 = load i8*, i8** %out.addr, align 8
  %40 = load i32, i32* %i, align 4
  %mul52 = mul nsw i32 %40, 2
  %add53 = add nsw i32 %mul52, 0
  %idxprom54 = sext i32 %add53 to i64
  %arrayidx55 = getelementptr inbounds i8, i8* %39, i64 %idxprom54
  store i8 %conv51, i8* %arrayidx55, align 1
  %41 = load i8*, i8** %input, align 8
  %42 = load i32, i32* %w.addr, align 4
  %sub56 = sub nsw i32 %42, 1
  %idxprom57 = sext i32 %sub56 to i64
  %arrayidx58 = getelementptr inbounds i8, i8* %41, i64 %idxprom57
  %43 = load i8, i8* %arrayidx58, align 1
  %44 = load i8*, i8** %out.addr, align 8
  %45 = load i32, i32* %i, align 4
  %mul59 = mul nsw i32 %45, 2
  %add60 = add nsw i32 %mul59, 1
  %idxprom61 = sext i32 %add60 to i64
  %arrayidx62 = getelementptr inbounds i8, i8* %44, i64 %idxprom61
  store i8 %43, i8* %arrayidx62, align 1
  %46 = load i8*, i8** %out.addr, align 8
  store i8* %46, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %47 = load i8*, i8** %retval, align 8
  ret i8* %47
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__resample_row_generic(i8* %out, i8* %in_near, i8* %in_far, i32 %w, i32 %hs) #0 {
entry:
  %out.addr = alloca i8*, align 8
  %in_near.addr = alloca i8*, align 8
  %in_far.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %hs.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8
  store i8* %in_near, i8** %in_near.addr, align 8
  store i8* %in_far, i8** %in_far.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %hs, i32* %hs.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %w.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %hs.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %in_near.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %7 = load i8*, i8** %out.addr, align 8
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %hs.addr, align 4
  %mul = mul nsw i32 %8, %9
  %10 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %10
  %idxprom4 = sext i32 %add to i64
  %arrayidx5 = getelementptr inbounds i8, i8* %7, i64 %idxprom4
  store i8 %6, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %12 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %12, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %13 = load i8*, i8** %out.addr, align 8
  ret i8* %13
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i8 @stbi__blinn_8x8(i8 zeroext %x, i8 zeroext %y) #0 {
entry:
  %x.addr = alloca i8, align 1
  %y.addr = alloca i8, align 1
  %t = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1
  store i8 %y, i8* %y.addr, align 1
  %0 = load i8, i8* %x.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %y.addr, align 1
  %conv1 = zext i8 %1 to i32
  %mul = mul nsw i32 %conv, %conv1
  %add = add nsw i32 %mul, 128
  store i32 %add, i32* %t, align 4
  %2 = load i32, i32* %t, align 4
  %3 = load i32, i32* %t, align 4
  %shr = lshr i32 %3, 8
  %add2 = add i32 %2, %shr
  %shr3 = lshr i32 %add2, 8
  %conv4 = trunc i32 %shr3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__free_jpeg_components(%struct.stbi__jpeg* %z, i32 %ncomp, i32 %why) #0 {
entry:
  %z.addr = alloca %struct.stbi__jpeg*, align 8
  %ncomp.addr = alloca i32, align 4
  %why.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stbi__jpeg* %z, %struct.stbi__jpeg** %z.addr, align 8
  store i32 %ncomp, i32* %ncomp.addr, align 4
  store i32 %why, i32* %why.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %ncomp.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 11
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp, i64 0, i64 %idxprom
  %raw_data = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 12
  %4 = load i8*, i8** %raw_data, align 8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %5, i32 0, i32 11
  %6 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %6 to i64
  %arrayidx3 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp1, i64 0, i64 %idxprom2
  %raw_data4 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx3, i32 0, i32 12
  %7 = load i8*, i8** %raw_data4, align 8
  call void @free(i8* %7) #10
  %8 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp5 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %8, i32 0, i32 11
  %9 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %9 to i64
  %arrayidx7 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp5, i64 0, i64 %idxprom6
  %raw_data8 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx7, i32 0, i32 12
  store i8* null, i8** %raw_data8, align 8
  %10 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp9 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %10, i32 0, i32 11
  %11 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %11 to i64
  %arrayidx11 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp9, i64 0, i64 %idxprom10
  %data = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx11, i32 0, i32 11
  store i8* null, i8** %data, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %12 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp12 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %12, i32 0, i32 11
  %13 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %13 to i64
  %arrayidx14 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp12, i64 0, i64 %idxprom13
  %raw_coeff = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx14, i32 0, i32 13
  %14 = load i8*, i8** %raw_coeff, align 8
  %tobool15 = icmp ne i8* %14, null
  br i1 %tobool15, label %if.then16, label %if.end28

if.then16:                                        ; preds = %if.end
  %15 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp17 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %15, i32 0, i32 11
  %16 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %16 to i64
  %arrayidx19 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp17, i64 0, i64 %idxprom18
  %raw_coeff20 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx19, i32 0, i32 13
  %17 = load i8*, i8** %raw_coeff20, align 8
  call void @free(i8* %17) #10
  %18 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp21 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %18, i32 0, i32 11
  %19 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %19 to i64
  %arrayidx23 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp21, i64 0, i64 %idxprom22
  %raw_coeff24 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx23, i32 0, i32 13
  store i8* null, i8** %raw_coeff24, align 8
  %20 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp25 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %20, i32 0, i32 11
  %21 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %21 to i64
  %arrayidx27 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp25, i64 0, i64 %idxprom26
  %coeff = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx27, i32 0, i32 15
  store i16* null, i16** %coeff, align 8
  br label %if.end28

if.end28:                                         ; preds = %if.then16, %if.end
  %22 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp29 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %22, i32 0, i32 11
  %23 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %23 to i64
  %arrayidx31 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp29, i64 0, i64 %idxprom30
  %linebuf = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx31, i32 0, i32 14
  %24 = load i8*, i8** %linebuf, align 8
  %tobool32 = icmp ne i8* %24, null
  br i1 %tobool32, label %if.then33, label %if.end42

if.then33:                                        ; preds = %if.end28
  %25 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp34 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %25, i32 0, i32 11
  %26 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %26 to i64
  %arrayidx36 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp34, i64 0, i64 %idxprom35
  %linebuf37 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx36, i32 0, i32 14
  %27 = load i8*, i8** %linebuf37, align 8
  call void @free(i8* %27) #10
  %28 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp38 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %28, i32 0, i32 11
  %29 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %29 to i64
  %arrayidx40 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp38, i64 0, i64 %idxprom39
  %linebuf41 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx40, i32 0, i32 14
  store i8* null, i8** %linebuf41, align 8
  br label %if.end42

if.end42:                                         ; preds = %if.then33, %if.end28
  br label %for.inc

for.inc:                                          ; preds = %if.end42
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %31 = load i32, i32* %why.addr, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__decode_jpeg_header(%struct.stbi__jpeg* %z, i32 %scan) #0 {
entry:
  %retval = alloca i32, align 4
  %z.addr = alloca %struct.stbi__jpeg*, align 8
  %scan.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.stbi__jpeg* %z, %struct.stbi__jpeg** %z.addr, align 8
  store i32 %scan, i32* %scan.addr, align 4
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %jfif = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 22
  store i32 0, i32* %jfif, align 8
  %1 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %app14_color_transform = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %1, i32 0, i32 23
  store i32 -1, i32* %app14_color_transform, align 4
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %marker = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 14
  store i8 -1, i8* %marker, align 8
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %call = call zeroext i8 @stbi__get_marker(%struct.stbi__jpeg* %3)
  %conv = zext i8 %call to i32
  store i32 %conv, i32* %m, align 4
  %4 = load i32, i32* %m, align 4
  %cmp = icmp eq i32 %4, 216
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call i32 @stbi__err(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.32, i64 0, i64 0))
  store i32 %call2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %scan.addr, align 4
  %cmp3 = icmp eq i32 %5, 1
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %6 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %call7 = call zeroext i8 @stbi__get_marker(%struct.stbi__jpeg* %6)
  %conv8 = zext i8 %call7 to i32
  store i32 %conv8, i32* %m, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %if.end6
  %7 = load i32, i32* %m, align 4
  %cmp9 = icmp eq i32 %7, 192
  br i1 %cmp9, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.cond
  %8 = load i32, i32* %m, align 4
  %cmp11 = icmp eq i32 %8, 193
  br i1 %cmp11, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %9 = load i32, i32* %m, align 4
  %cmp13 = icmp eq i32 %9, 194
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %10 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp13, %lor.rhs ]
  %lnot = xor i1 %10, true
  br i1 %lnot, label %while.body, label %while.end31

while.body:                                       ; preds = %lor.end
  %11 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %12 = load i32, i32* %m, align 4
  %call15 = call i32 @stbi__process_marker(%struct.stbi__jpeg* %11, i32 %12)
  %tobool = icmp ne i32 %call15, 0
  br i1 %tobool, label %if.end17, label %if.then16

if.then16:                                        ; preds = %while.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %while.body
  %13 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %call18 = call zeroext i8 @stbi__get_marker(%struct.stbi__jpeg* %13)
  %conv19 = zext i8 %call18 to i32
  store i32 %conv19, i32* %m, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %if.end28, %if.end17
  %14 = load i32, i32* %m, align 4
  %cmp21 = icmp eq i32 %14, 255
  br i1 %cmp21, label %while.body23, label %while.end

while.body23:                                     ; preds = %while.cond20
  %15 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %15, i32 0, i32 0
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call24 = call i32 @stbi__at_eof(%struct.stbi__context* %16)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %while.body23
  %call27 = call i32 @stbi__err(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i64 0, i64 0))
  store i32 %call27, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %while.body23
  %17 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %call29 = call zeroext i8 @stbi__get_marker(%struct.stbi__jpeg* %17)
  %conv30 = zext i8 %call29 to i32
  store i32 %conv30, i32* %m, align 4
  br label %while.cond20

while.end:                                        ; preds = %while.cond20
  br label %while.cond

while.end31:                                      ; preds = %lor.end
  %18 = load i32, i32* %m, align 4
  %cmp32 = icmp eq i32 %18, 194
  %conv33 = zext i1 %cmp32 to i32
  %19 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %progressive = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %19, i32 0, i32 16
  store i32 %conv33, i32* %progressive, align 8
  %20 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %21 = load i32, i32* %scan.addr, align 4
  %call34 = call i32 @stbi__process_frame_header(%struct.stbi__jpeg* %20, i32 %21)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end37, label %if.then36

if.then36:                                        ; preds = %while.end31
  store i32 0, i32* %retval, align 4
  br label %return

if.end37:                                         ; preds = %while.end31
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end37, %if.then36, %if.then26, %if.then16, %if.then5, %if.then
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i8 @stbi__get_marker(%struct.stbi__jpeg* %j) #0 {
entry:
  %retval = alloca i8, align 1
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %x = alloca i8, align 1
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %marker = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 14
  %1 = load i8, i8* %marker, align 8
  %conv = zext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %marker2 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 14
  %3 = load i8, i8* %marker2, align 8
  store i8 %3, i8* %x, align 1
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %marker3 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %4, i32 0, i32 14
  store i8 -1, i8* %marker3, align 8
  %5 = load i8, i8* %x, align 1
  store i8 %5, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %6, i32 0, i32 0
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %7)
  store i8 %call, i8* %x, align 1
  %8 = load i8, i8* %x, align 1
  %conv4 = zext i8 %8 to i32
  %cmp5 = icmp ne i32 %conv4, 255
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  store i8 -1, i8* %retval, align 1
  br label %return

if.end8:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end8
  %9 = load i8, i8* %x, align 1
  %conv9 = zext i8 %9 to i32
  %cmp10 = icmp eq i32 %conv9, 255
  br i1 %cmp10, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s12 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %10, i32 0, i32 0
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s12, align 8
  %call13 = call zeroext i8 @stbi__get8(%struct.stbi__context* %11)
  store i8 %call13, i8* %x, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i8, i8* %x, align 1
  store i8 %12, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then7, %if.then
  %13 = load i8, i8* %retval, align 1
  ret i8 %13
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__process_scan_header(%struct.stbi__jpeg* %z) #0 {
entry:
  %retval = alloca i32, align 4
  %z.addr = alloca %struct.stbi__jpeg*, align 8
  %i = alloca i32, align 4
  %Ls = alloca i32, align 4
  %id = alloca i32, align 4
  %which = alloca i32, align 4
  %q = alloca i32, align 4
  %aa = alloca i32, align 4
  store %struct.stbi__jpeg* %z, %struct.stbi__jpeg** %z.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 0
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call = call i32 @stbi__get16be(%struct.stbi__context* %1)
  store i32 %call, i32* %Ls, align 4
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 0
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s1, align 8
  %call2 = call zeroext i8 @stbi__get8(%struct.stbi__context* %3)
  %conv = zext i8 %call2 to i32
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %scan_n = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %4, i32 0, i32 25
  store i32 %conv, i32* %scan_n, align 4
  %5 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %scan_n3 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %5, i32 0, i32 25
  %6 = load i32, i32* %scan_n3, align 4
  %cmp = icmp slt i32 %6, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %scan_n5 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %7, i32 0, i32 25
  %8 = load i32, i32* %scan_n5, align 4
  %cmp6 = icmp sgt i32 %8, 4
  br i1 %cmp6, label %if.then, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %9 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %scan_n9 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %9, i32 0, i32 25
  %10 = load i32, i32* %scan_n9, align 4
  %11 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s10 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %11, i32 0, i32 0
  %12 = load %struct.stbi__context*, %struct.stbi__context** %s10, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %12, i32 0, i32 2
  %13 = load i32, i32* %img_n, align 8
  %cmp11 = icmp sgt i32 %10, %13
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false, %entry
  %call13 = call i32 @stbi__err(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.57, i64 0, i64 0))
  store i32 %call13, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false8
  %14 = load i32, i32* %Ls, align 4
  %15 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %scan_n14 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %15, i32 0, i32 25
  %16 = load i32, i32* %scan_n14, align 4
  %mul = mul nsw i32 2, %16
  %add = add nsw i32 6, %mul
  %cmp15 = icmp ne i32 %14, %add
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end
  %call18 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.58, i64 0, i64 0))
  store i32 %call18, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc72, %if.end19
  %17 = load i32, i32* %i, align 4
  %18 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %scan_n20 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %18, i32 0, i32 25
  %19 = load i32, i32* %scan_n20, align 4
  %cmp21 = icmp slt i32 %17, %19
  br i1 %cmp21, label %for.body, label %for.end74

for.body:                                         ; preds = %for.cond
  %20 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s23 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %20, i32 0, i32 0
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s23, align 8
  %call24 = call zeroext i8 @stbi__get8(%struct.stbi__context* %21)
  %conv25 = zext i8 %call24 to i32
  store i32 %conv25, i32* %id, align 4
  %22 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s26 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %22, i32 0, i32 0
  %23 = load %struct.stbi__context*, %struct.stbi__context** %s26, align 8
  %call27 = call zeroext i8 @stbi__get8(%struct.stbi__context* %23)
  %conv28 = zext i8 %call27 to i32
  store i32 %conv28, i32* %q, align 4
  store i32 0, i32* %which, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc, %for.body
  %24 = load i32, i32* %which, align 4
  %25 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s30 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %25, i32 0, i32 0
  %26 = load %struct.stbi__context*, %struct.stbi__context** %s30, align 8
  %img_n31 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %26, i32 0, i32 2
  %27 = load i32, i32* %img_n31, align 8
  %cmp32 = icmp slt i32 %24, %27
  br i1 %cmp32, label %for.body34, label %for.end

for.body34:                                       ; preds = %for.cond29
  %28 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %28, i32 0, i32 11
  %29 = load i32, i32* %which, align 4
  %idxprom = sext i32 %29 to i64
  %arrayidx = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp, i64 0, i64 %idxprom
  %id35 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 0
  %30 = load i32, i32* %id35, align 8
  %31 = load i32, i32* %id, align 4
  %cmp36 = icmp eq i32 %30, %31
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %for.body34
  br label %for.end

if.end39:                                         ; preds = %for.body34
  br label %for.inc

for.inc:                                          ; preds = %if.end39
  %32 = load i32, i32* %which, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %which, align 4
  br label %for.cond29

for.end:                                          ; preds = %if.then38, %for.cond29
  %33 = load i32, i32* %which, align 4
  %34 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s40 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %34, i32 0, i32 0
  %35 = load %struct.stbi__context*, %struct.stbi__context** %s40, align 8
  %img_n41 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %35, i32 0, i32 2
  %36 = load i32, i32* %img_n41, align 8
  %cmp42 = icmp eq i32 %33, %36
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end45:                                         ; preds = %for.end
  %37 = load i32, i32* %q, align 4
  %shr = ashr i32 %37, 4
  %38 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp46 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %38, i32 0, i32 11
  %39 = load i32, i32* %which, align 4
  %idxprom47 = sext i32 %39 to i64
  %arrayidx48 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp46, i64 0, i64 %idxprom47
  %hd = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx48, i32 0, i32 4
  store i32 %shr, i32* %hd, align 8
  %40 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp49 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %40, i32 0, i32 11
  %41 = load i32, i32* %which, align 4
  %idxprom50 = sext i32 %41 to i64
  %arrayidx51 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp49, i64 0, i64 %idxprom50
  %hd52 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx51, i32 0, i32 4
  %42 = load i32, i32* %hd52, align 8
  %cmp53 = icmp sgt i32 %42, 3
  br i1 %cmp53, label %if.then55, label %if.end57

if.then55:                                        ; preds = %if.end45
  %call56 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.59, i64 0, i64 0))
  store i32 %call56, i32* %retval, align 4
  br label %return

if.end57:                                         ; preds = %if.end45
  %43 = load i32, i32* %q, align 4
  %and = and i32 %43, 15
  %44 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp58 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %44, i32 0, i32 11
  %45 = load i32, i32* %which, align 4
  %idxprom59 = sext i32 %45 to i64
  %arrayidx60 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp58, i64 0, i64 %idxprom59
  %ha = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx60, i32 0, i32 5
  store i32 %and, i32* %ha, align 4
  %46 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp61 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %46, i32 0, i32 11
  %47 = load i32, i32* %which, align 4
  %idxprom62 = sext i32 %47 to i64
  %arrayidx63 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp61, i64 0, i64 %idxprom62
  %ha64 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx63, i32 0, i32 5
  %48 = load i32, i32* %ha64, align 4
  %cmp65 = icmp sgt i32 %48, 3
  br i1 %cmp65, label %if.then67, label %if.end69

if.then67:                                        ; preds = %if.end57
  %call68 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.60, i64 0, i64 0))
  store i32 %call68, i32* %retval, align 4
  br label %return

if.end69:                                         ; preds = %if.end57
  %49 = load i32, i32* %which, align 4
  %50 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %order = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %50, i32 0, i32 26
  %51 = load i32, i32* %i, align 4
  %idxprom70 = sext i32 %51 to i64
  %arrayidx71 = getelementptr inbounds [4 x i32], [4 x i32]* %order, i64 0, i64 %idxprom70
  store i32 %49, i32* %arrayidx71, align 4
  br label %for.inc72

for.inc72:                                        ; preds = %if.end69
  %52 = load i32, i32* %i, align 4
  %inc73 = add nsw i32 %52, 1
  store i32 %inc73, i32* %i, align 4
  br label %for.cond

for.end74:                                        ; preds = %for.cond
  %53 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s75 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %53, i32 0, i32 0
  %54 = load %struct.stbi__context*, %struct.stbi__context** %s75, align 8
  %call76 = call zeroext i8 @stbi__get8(%struct.stbi__context* %54)
  %conv77 = zext i8 %call76 to i32
  %55 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %spec_start = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %55, i32 0, i32 17
  store i32 %conv77, i32* %spec_start, align 4
  %56 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s78 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %56, i32 0, i32 0
  %57 = load %struct.stbi__context*, %struct.stbi__context** %s78, align 8
  %call79 = call zeroext i8 @stbi__get8(%struct.stbi__context* %57)
  %conv80 = zext i8 %call79 to i32
  %58 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %spec_end = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %58, i32 0, i32 18
  store i32 %conv80, i32* %spec_end, align 8
  %59 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s81 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %59, i32 0, i32 0
  %60 = load %struct.stbi__context*, %struct.stbi__context** %s81, align 8
  %call82 = call zeroext i8 @stbi__get8(%struct.stbi__context* %60)
  %conv83 = zext i8 %call82 to i32
  store i32 %conv83, i32* %aa, align 4
  %61 = load i32, i32* %aa, align 4
  %shr84 = ashr i32 %61, 4
  %62 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %succ_high = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %62, i32 0, i32 19
  store i32 %shr84, i32* %succ_high, align 4
  %63 = load i32, i32* %aa, align 4
  %and85 = and i32 %63, 15
  %64 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %succ_low = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %64, i32 0, i32 20
  store i32 %and85, i32* %succ_low, align 8
  %65 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %progressive = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %65, i32 0, i32 16
  %66 = load i32, i32* %progressive, align 8
  %tobool = icmp ne i32 %66, 0
  br i1 %tobool, label %if.then86, label %if.else

if.then86:                                        ; preds = %for.end74
  %67 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %spec_start87 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %67, i32 0, i32 17
  %68 = load i32, i32* %spec_start87, align 4
  %cmp88 = icmp sgt i32 %68, 63
  br i1 %cmp88, label %if.then107, label %lor.lhs.false90

lor.lhs.false90:                                  ; preds = %if.then86
  %69 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %spec_end91 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %69, i32 0, i32 18
  %70 = load i32, i32* %spec_end91, align 8
  %cmp92 = icmp sgt i32 %70, 63
  br i1 %cmp92, label %if.then107, label %lor.lhs.false94

lor.lhs.false94:                                  ; preds = %lor.lhs.false90
  %71 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %spec_start95 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %71, i32 0, i32 17
  %72 = load i32, i32* %spec_start95, align 4
  %73 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %spec_end96 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %73, i32 0, i32 18
  %74 = load i32, i32* %spec_end96, align 8
  %cmp97 = icmp sgt i32 %72, %74
  br i1 %cmp97, label %if.then107, label %lor.lhs.false99

lor.lhs.false99:                                  ; preds = %lor.lhs.false94
  %75 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %succ_high100 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %75, i32 0, i32 19
  %76 = load i32, i32* %succ_high100, align 4
  %cmp101 = icmp sgt i32 %76, 13
  br i1 %cmp101, label %if.then107, label %lor.lhs.false103

lor.lhs.false103:                                 ; preds = %lor.lhs.false99
  %77 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %succ_low104 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %77, i32 0, i32 20
  %78 = load i32, i32* %succ_low104, align 8
  %cmp105 = icmp sgt i32 %78, 13
  br i1 %cmp105, label %if.then107, label %if.end109

if.then107:                                       ; preds = %lor.lhs.false103, %lor.lhs.false99, %lor.lhs.false94, %lor.lhs.false90, %if.then86
  %call108 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i64 0, i64 0))
  store i32 %call108, i32* %retval, align 4
  br label %return

if.end109:                                        ; preds = %lor.lhs.false103
  br label %if.end127

if.else:                                          ; preds = %for.end74
  %79 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %spec_start110 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %79, i32 0, i32 17
  %80 = load i32, i32* %spec_start110, align 4
  %cmp111 = icmp ne i32 %80, 0
  br i1 %cmp111, label %if.then113, label %if.end115

if.then113:                                       ; preds = %if.else
  %call114 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i64 0, i64 0))
  store i32 %call114, i32* %retval, align 4
  br label %return

if.end115:                                        ; preds = %if.else
  %81 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %succ_high116 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %81, i32 0, i32 19
  %82 = load i32, i32* %succ_high116, align 4
  %cmp117 = icmp ne i32 %82, 0
  br i1 %cmp117, label %if.then123, label %lor.lhs.false119

lor.lhs.false119:                                 ; preds = %if.end115
  %83 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %succ_low120 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %83, i32 0, i32 20
  %84 = load i32, i32* %succ_low120, align 8
  %cmp121 = icmp ne i32 %84, 0
  br i1 %cmp121, label %if.then123, label %if.end125

if.then123:                                       ; preds = %lor.lhs.false119, %if.end115
  %call124 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i64 0, i64 0))
  store i32 %call124, i32* %retval, align 4
  br label %return

if.end125:                                        ; preds = %lor.lhs.false119
  %85 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %spec_end126 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %85, i32 0, i32 18
  store i32 63, i32* %spec_end126, align 8
  br label %if.end127

if.end127:                                        ; preds = %if.end125, %if.end109
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end127, %if.then123, %if.then113, %if.then107, %if.then67, %if.then55, %if.then44, %if.then17, %if.then
  %86 = load i32, i32* %retval, align 4
  ret i32 %86
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__parse_entropy_coded_data(%struct.stbi__jpeg* %z) #0 {
entry:
  %retval = alloca i32, align 4
  %z.addr = alloca %struct.stbi__jpeg*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %data = alloca [64 x i16], align 16
  %n = alloca i32, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %ha = alloca i32, align 4
  %i69 = alloca i32, align 4
  %j70 = alloca i32, align 4
  %k = alloca i32, align 4
  %x71 = alloca i32, align 4
  %y72 = alloca i32, align 4
  %data73 = alloca [64 x i16], align 16
  %n87 = alloca i32, align 4
  %x2 = alloca i32, align 4
  %y2 = alloca i32, align 4
  %ha120 = alloca i32, align 4
  %i215 = alloca i32, align 4
  %j216 = alloca i32, align 4
  %n217 = alloca i32, align 4
  %w220 = alloca i32, align 4
  %h227 = alloca i32, align 4
  %data242 = alloca i16*, align 8
  %ha269 = alloca i32, align 4
  %i315 = alloca i32, align 4
  %j316 = alloca i32, align 4
  %k317 = alloca i32, align 4
  %x318 = alloca i32, align 4
  %y319 = alloca i32, align 4
  %n335 = alloca i32, align 4
  %x2355 = alloca i32, align 4
  %y2362 = alloca i32, align 4
  %data369 = alloca i16*, align 8
  store %struct.stbi__jpeg* %z, %struct.stbi__jpeg** %z.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__jpeg_reset(%struct.stbi__jpeg* %0)
  %1 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %progressive = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %1, i32 0, i32 16
  %2 = load i32, i32* %progressive, align 8
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.else210, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %scan_n = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %3, i32 0, i32 25
  %4 = load i32, i32* %scan_n, align 4
  %cmp = icmp eq i32 %4, 1
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %5 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %order = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %5, i32 0, i32 26
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %order, i64 0, i64 0
  %6 = load i32, i32* %arrayidx, align 8
  store i32 %6, i32* %n, align 4
  %7 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %7, i32 0, i32 11
  %8 = load i32, i32* %n, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx2 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp, i64 0, i64 %idxprom
  %x = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx2, i32 0, i32 7
  %9 = load i32, i32* %x, align 4
  %add = add nsw i32 %9, 7
  %shr = ashr i32 %add, 3
  store i32 %shr, i32* %w, align 4
  %10 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp3 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %10, i32 0, i32 11
  %11 = load i32, i32* %n, align 4
  %idxprom4 = sext i32 %11 to i64
  %arrayidx5 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp3, i64 0, i64 %idxprom4
  %y = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx5, i32 0, i32 8
  %12 = load i32, i32* %y, align 8
  %add6 = add nsw i32 %12, 7
  %shr7 = ashr i32 %add6, 3
  store i32 %shr7, i32* %h, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc66, %if.then1
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %h, align 4
  %cmp8 = icmp slt i32 %13, %14
  br i1 %cmp8, label %for.body, label %for.end68

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %w, align 4
  %cmp10 = icmp slt i32 %15, %16
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond9
  %17 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp12 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %17, i32 0, i32 11
  %18 = load i32, i32* %n, align 4
  %idxprom13 = sext i32 %18 to i64
  %arrayidx14 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp12, i64 0, i64 %idxprom13
  %ha15 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx14, i32 0, i32 5
  %19 = load i32, i32* %ha15, align 4
  store i32 %19, i32* %ha, align 4
  %20 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %data, i64 0, i64 0
  %21 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_dc = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %21, i32 0, i32 1
  %arraydecay16 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_dc, i64 0, i64 0
  %22 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp17 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %22, i32 0, i32 11
  %23 = load i32, i32* %n, align 4
  %idxprom18 = sext i32 %23 to i64
  %arrayidx19 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp17, i64 0, i64 %idxprom18
  %hd = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx19, i32 0, i32 4
  %24 = load i32, i32* %hd, align 8
  %idx.ext = sext i32 %24 to i64
  %add.ptr = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %arraydecay16, i64 %idx.ext
  %25 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_ac = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %25, i32 0, i32 2
  %arraydecay20 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_ac, i64 0, i64 0
  %26 = load i32, i32* %ha, align 4
  %idx.ext21 = sext i32 %26 to i64
  %add.ptr22 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %arraydecay20, i64 %idx.ext21
  %27 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %fast_ac = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %27, i32 0, i32 4
  %28 = load i32, i32* %ha, align 4
  %idxprom23 = sext i32 %28 to i64
  %arrayidx24 = getelementptr inbounds [4 x [512 x i16]], [4 x [512 x i16]]* %fast_ac, i64 0, i64 %idxprom23
  %arraydecay25 = getelementptr inbounds [512 x i16], [512 x i16]* %arrayidx24, i64 0, i64 0
  %29 = load i32, i32* %n, align 4
  %30 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %dequant = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %30, i32 0, i32 3
  %31 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp26 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %31, i32 0, i32 11
  %32 = load i32, i32* %n, align 4
  %idxprom27 = sext i32 %32 to i64
  %arrayidx28 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp26, i64 0, i64 %idxprom27
  %tq = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx28, i32 0, i32 3
  %33 = load i32, i32* %tq, align 4
  %idxprom29 = sext i32 %33 to i64
  %arrayidx30 = getelementptr inbounds [4 x [64 x i16]], [4 x [64 x i16]]* %dequant, i64 0, i64 %idxprom29
  %arraydecay31 = getelementptr inbounds [64 x i16], [64 x i16]* %arrayidx30, i64 0, i64 0
  %call = call i32 @stbi__jpeg_decode_block(%struct.stbi__jpeg* %20, i16* %arraydecay, %struct.stbi__huffman* %add.ptr, %struct.stbi__huffman* %add.ptr22, i16* %arraydecay25, i32 %29, i16* %arraydecay31)
  %tobool32 = icmp ne i32 %call, 0
  br i1 %tobool32, label %if.end, label %if.then33

if.then33:                                        ; preds = %for.body11
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body11
  %34 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %idct_block_kernel = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %34, i32 0, i32 29
  %35 = load void (i8*, i32, i16*)*, void (i8*, i32, i16*)** %idct_block_kernel, align 8
  %36 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp34 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %36, i32 0, i32 11
  %37 = load i32, i32* %n, align 4
  %idxprom35 = sext i32 %37 to i64
  %arrayidx36 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp34, i64 0, i64 %idxprom35
  %data37 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx36, i32 0, i32 11
  %38 = load i8*, i8** %data37, align 8
  %39 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp38 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %39, i32 0, i32 11
  %40 = load i32, i32* %n, align 4
  %idxprom39 = sext i32 %40 to i64
  %arrayidx40 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp38, i64 0, i64 %idxprom39
  %w2 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx40, i32 0, i32 9
  %41 = load i32, i32* %w2, align 4
  %42 = load i32, i32* %j, align 4
  %mul = mul nsw i32 %41, %42
  %mul41 = mul nsw i32 %mul, 8
  %idx.ext42 = sext i32 %mul41 to i64
  %add.ptr43 = getelementptr inbounds i8, i8* %38, i64 %idx.ext42
  %43 = load i32, i32* %i, align 4
  %mul44 = mul nsw i32 %43, 8
  %idx.ext45 = sext i32 %mul44 to i64
  %add.ptr46 = getelementptr inbounds i8, i8* %add.ptr43, i64 %idx.ext45
  %44 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp47 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %44, i32 0, i32 11
  %45 = load i32, i32* %n, align 4
  %idxprom48 = sext i32 %45 to i64
  %arrayidx49 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp47, i64 0, i64 %idxprom48
  %w250 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx49, i32 0, i32 9
  %46 = load i32, i32* %w250, align 4
  %arraydecay51 = getelementptr inbounds [64 x i16], [64 x i16]* %data, i64 0, i64 0
  call void %35(i8* %add.ptr46, i32 %46, i16* %arraydecay51)
  %47 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %todo = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %47, i32 0, i32 28
  %48 = load i32, i32* %todo, align 4
  %dec = add nsw i32 %48, -1
  store i32 %dec, i32* %todo, align 4
  %cmp52 = icmp sle i32 %dec, 0
  br i1 %cmp52, label %if.then53, label %if.end65

if.then53:                                        ; preds = %if.end
  %49 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %code_bits = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %49, i32 0, i32 13
  %50 = load i32, i32* %code_bits, align 4
  %cmp54 = icmp slt i32 %50, 24
  br i1 %cmp54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.then53
  %51 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %51)
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.then53
  %52 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %marker = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %52, i32 0, i32 14
  %53 = load i8, i8* %marker, align 8
  %conv = zext i8 %53 to i32
  %cmp57 = icmp sge i32 %conv, 208
  br i1 %cmp57, label %land.lhs.true, label %if.then63

land.lhs.true:                                    ; preds = %if.end56
  %54 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %marker59 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %54, i32 0, i32 14
  %55 = load i8, i8* %marker59, align 8
  %conv60 = zext i8 %55 to i32
  %cmp61 = icmp sle i32 %conv60, 215
  br i1 %cmp61, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true, %if.end56
  store i32 1, i32* %retval, align 4
  br label %return

if.end64:                                         ; preds = %land.lhs.true
  %56 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__jpeg_reset(%struct.stbi__jpeg* %56)
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end65
  %57 = load i32, i32* %i, align 4
  %inc = add nsw i32 %57, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc66

for.inc66:                                        ; preds = %for.end
  %58 = load i32, i32* %j, align 4
  %inc67 = add nsw i32 %58, 1
  store i32 %inc67, i32* %j, align 4
  br label %for.cond

for.end68:                                        ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  store i32 0, i32* %j70, align 4
  br label %for.cond74

for.cond74:                                       ; preds = %for.inc207, %if.else
  %59 = load i32, i32* %j70, align 4
  %60 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_y = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %60, i32 0, i32 8
  %61 = load i32, i32* %img_mcu_y, align 4
  %cmp75 = icmp slt i32 %59, %61
  br i1 %cmp75, label %for.body77, label %for.end209

for.body77:                                       ; preds = %for.cond74
  store i32 0, i32* %i69, align 4
  br label %for.cond78

for.cond78:                                       ; preds = %for.inc204, %for.body77
  %62 = load i32, i32* %i69, align 4
  %63 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_x = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %63, i32 0, i32 7
  %64 = load i32, i32* %img_mcu_x, align 8
  %cmp79 = icmp slt i32 %62, %64
  br i1 %cmp79, label %for.body81, label %for.end206

for.body81:                                       ; preds = %for.cond78
  store i32 0, i32* %k, align 4
  br label %for.cond82

for.cond82:                                       ; preds = %for.inc179, %for.body81
  %65 = load i32, i32* %k, align 4
  %66 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %scan_n83 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %66, i32 0, i32 25
  %67 = load i32, i32* %scan_n83, align 4
  %cmp84 = icmp slt i32 %65, %67
  br i1 %cmp84, label %for.body86, label %for.end181

for.body86:                                       ; preds = %for.cond82
  %68 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %order88 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %68, i32 0, i32 26
  %69 = load i32, i32* %k, align 4
  %idxprom89 = sext i32 %69 to i64
  %arrayidx90 = getelementptr inbounds [4 x i32], [4 x i32]* %order88, i64 0, i64 %idxprom89
  %70 = load i32, i32* %arrayidx90, align 4
  store i32 %70, i32* %n87, align 4
  store i32 0, i32* %y72, align 4
  br label %for.cond91

for.cond91:                                       ; preds = %for.inc176, %for.body86
  %71 = load i32, i32* %y72, align 4
  %72 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp92 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %72, i32 0, i32 11
  %73 = load i32, i32* %n87, align 4
  %idxprom93 = sext i32 %73 to i64
  %arrayidx94 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp92, i64 0, i64 %idxprom93
  %v = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx94, i32 0, i32 2
  %74 = load i32, i32* %v, align 8
  %cmp95 = icmp slt i32 %71, %74
  br i1 %cmp95, label %for.body97, label %for.end178

for.body97:                                       ; preds = %for.cond91
  store i32 0, i32* %x71, align 4
  br label %for.cond98

for.cond98:                                       ; preds = %for.inc173, %for.body97
  %75 = load i32, i32* %x71, align 4
  %76 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp99 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %76, i32 0, i32 11
  %77 = load i32, i32* %n87, align 4
  %idxprom100 = sext i32 %77 to i64
  %arrayidx101 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp99, i64 0, i64 %idxprom100
  %h102 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx101, i32 0, i32 1
  %78 = load i32, i32* %h102, align 4
  %cmp103 = icmp slt i32 %75, %78
  br i1 %cmp103, label %for.body105, label %for.end175

for.body105:                                      ; preds = %for.cond98
  %79 = load i32, i32* %i69, align 4
  %80 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp106 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %80, i32 0, i32 11
  %81 = load i32, i32* %n87, align 4
  %idxprom107 = sext i32 %81 to i64
  %arrayidx108 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp106, i64 0, i64 %idxprom107
  %h109 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx108, i32 0, i32 1
  %82 = load i32, i32* %h109, align 4
  %mul110 = mul nsw i32 %79, %82
  %83 = load i32, i32* %x71, align 4
  %add111 = add nsw i32 %mul110, %83
  %mul112 = mul nsw i32 %add111, 8
  store i32 %mul112, i32* %x2, align 4
  %84 = load i32, i32* %j70, align 4
  %85 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp113 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %85, i32 0, i32 11
  %86 = load i32, i32* %n87, align 4
  %idxprom114 = sext i32 %86 to i64
  %arrayidx115 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp113, i64 0, i64 %idxprom114
  %v116 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx115, i32 0, i32 2
  %87 = load i32, i32* %v116, align 8
  %mul117 = mul nsw i32 %84, %87
  %88 = load i32, i32* %y72, align 4
  %add118 = add nsw i32 %mul117, %88
  %mul119 = mul nsw i32 %add118, 8
  store i32 %mul119, i32* %y2, align 4
  %89 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp121 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %89, i32 0, i32 11
  %90 = load i32, i32* %n87, align 4
  %idxprom122 = sext i32 %90 to i64
  %arrayidx123 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp121, i64 0, i64 %idxprom122
  %ha124 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx123, i32 0, i32 5
  %91 = load i32, i32* %ha124, align 4
  store i32 %91, i32* %ha120, align 4
  %92 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %arraydecay125 = getelementptr inbounds [64 x i16], [64 x i16]* %data73, i64 0, i64 0
  %93 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_dc126 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %93, i32 0, i32 1
  %arraydecay127 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_dc126, i64 0, i64 0
  %94 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp128 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %94, i32 0, i32 11
  %95 = load i32, i32* %n87, align 4
  %idxprom129 = sext i32 %95 to i64
  %arrayidx130 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp128, i64 0, i64 %idxprom129
  %hd131 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx130, i32 0, i32 4
  %96 = load i32, i32* %hd131, align 8
  %idx.ext132 = sext i32 %96 to i64
  %add.ptr133 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %arraydecay127, i64 %idx.ext132
  %97 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_ac134 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %97, i32 0, i32 2
  %arraydecay135 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_ac134, i64 0, i64 0
  %98 = load i32, i32* %ha120, align 4
  %idx.ext136 = sext i32 %98 to i64
  %add.ptr137 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %arraydecay135, i64 %idx.ext136
  %99 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %fast_ac138 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %99, i32 0, i32 4
  %100 = load i32, i32* %ha120, align 4
  %idxprom139 = sext i32 %100 to i64
  %arrayidx140 = getelementptr inbounds [4 x [512 x i16]], [4 x [512 x i16]]* %fast_ac138, i64 0, i64 %idxprom139
  %arraydecay141 = getelementptr inbounds [512 x i16], [512 x i16]* %arrayidx140, i64 0, i64 0
  %101 = load i32, i32* %n87, align 4
  %102 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %dequant142 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %102, i32 0, i32 3
  %103 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp143 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %103, i32 0, i32 11
  %104 = load i32, i32* %n87, align 4
  %idxprom144 = sext i32 %104 to i64
  %arrayidx145 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp143, i64 0, i64 %idxprom144
  %tq146 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx145, i32 0, i32 3
  %105 = load i32, i32* %tq146, align 4
  %idxprom147 = sext i32 %105 to i64
  %arrayidx148 = getelementptr inbounds [4 x [64 x i16]], [4 x [64 x i16]]* %dequant142, i64 0, i64 %idxprom147
  %arraydecay149 = getelementptr inbounds [64 x i16], [64 x i16]* %arrayidx148, i64 0, i64 0
  %call150 = call i32 @stbi__jpeg_decode_block(%struct.stbi__jpeg* %92, i16* %arraydecay125, %struct.stbi__huffman* %add.ptr133, %struct.stbi__huffman* %add.ptr137, i16* %arraydecay141, i32 %101, i16* %arraydecay149)
  %tobool151 = icmp ne i32 %call150, 0
  br i1 %tobool151, label %if.end153, label %if.then152

if.then152:                                       ; preds = %for.body105
  store i32 0, i32* %retval, align 4
  br label %return

if.end153:                                        ; preds = %for.body105
  %106 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %idct_block_kernel154 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %106, i32 0, i32 29
  %107 = load void (i8*, i32, i16*)*, void (i8*, i32, i16*)** %idct_block_kernel154, align 8
  %108 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp155 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %108, i32 0, i32 11
  %109 = load i32, i32* %n87, align 4
  %idxprom156 = sext i32 %109 to i64
  %arrayidx157 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp155, i64 0, i64 %idxprom156
  %data158 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx157, i32 0, i32 11
  %110 = load i8*, i8** %data158, align 8
  %111 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp159 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %111, i32 0, i32 11
  %112 = load i32, i32* %n87, align 4
  %idxprom160 = sext i32 %112 to i64
  %arrayidx161 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp159, i64 0, i64 %idxprom160
  %w2162 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx161, i32 0, i32 9
  %113 = load i32, i32* %w2162, align 4
  %114 = load i32, i32* %y2, align 4
  %mul163 = mul nsw i32 %113, %114
  %idx.ext164 = sext i32 %mul163 to i64
  %add.ptr165 = getelementptr inbounds i8, i8* %110, i64 %idx.ext164
  %115 = load i32, i32* %x2, align 4
  %idx.ext166 = sext i32 %115 to i64
  %add.ptr167 = getelementptr inbounds i8, i8* %add.ptr165, i64 %idx.ext166
  %116 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp168 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %116, i32 0, i32 11
  %117 = load i32, i32* %n87, align 4
  %idxprom169 = sext i32 %117 to i64
  %arrayidx170 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp168, i64 0, i64 %idxprom169
  %w2171 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx170, i32 0, i32 9
  %118 = load i32, i32* %w2171, align 4
  %arraydecay172 = getelementptr inbounds [64 x i16], [64 x i16]* %data73, i64 0, i64 0
  call void %107(i8* %add.ptr167, i32 %118, i16* %arraydecay172)
  br label %for.inc173

for.inc173:                                       ; preds = %if.end153
  %119 = load i32, i32* %x71, align 4
  %inc174 = add nsw i32 %119, 1
  store i32 %inc174, i32* %x71, align 4
  br label %for.cond98

for.end175:                                       ; preds = %for.cond98
  br label %for.inc176

for.inc176:                                       ; preds = %for.end175
  %120 = load i32, i32* %y72, align 4
  %inc177 = add nsw i32 %120, 1
  store i32 %inc177, i32* %y72, align 4
  br label %for.cond91

for.end178:                                       ; preds = %for.cond91
  br label %for.inc179

for.inc179:                                       ; preds = %for.end178
  %121 = load i32, i32* %k, align 4
  %inc180 = add nsw i32 %121, 1
  store i32 %inc180, i32* %k, align 4
  br label %for.cond82

for.end181:                                       ; preds = %for.cond82
  %122 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %todo182 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %122, i32 0, i32 28
  %123 = load i32, i32* %todo182, align 4
  %dec183 = add nsw i32 %123, -1
  store i32 %dec183, i32* %todo182, align 4
  %cmp184 = icmp sle i32 %dec183, 0
  br i1 %cmp184, label %if.then186, label %if.end203

if.then186:                                       ; preds = %for.end181
  %124 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %code_bits187 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %124, i32 0, i32 13
  %125 = load i32, i32* %code_bits187, align 4
  %cmp188 = icmp slt i32 %125, 24
  br i1 %cmp188, label %if.then190, label %if.end191

if.then190:                                       ; preds = %if.then186
  %126 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %126)
  br label %if.end191

if.end191:                                        ; preds = %if.then190, %if.then186
  %127 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %marker192 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %127, i32 0, i32 14
  %128 = load i8, i8* %marker192, align 8
  %conv193 = zext i8 %128 to i32
  %cmp194 = icmp sge i32 %conv193, 208
  br i1 %cmp194, label %land.lhs.true196, label %if.then201

land.lhs.true196:                                 ; preds = %if.end191
  %129 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %marker197 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %129, i32 0, i32 14
  %130 = load i8, i8* %marker197, align 8
  %conv198 = zext i8 %130 to i32
  %cmp199 = icmp sle i32 %conv198, 215
  br i1 %cmp199, label %if.end202, label %if.then201

if.then201:                                       ; preds = %land.lhs.true196, %if.end191
  store i32 1, i32* %retval, align 4
  br label %return

if.end202:                                        ; preds = %land.lhs.true196
  %131 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__jpeg_reset(%struct.stbi__jpeg* %131)
  br label %if.end203

if.end203:                                        ; preds = %if.end202, %for.end181
  br label %for.inc204

for.inc204:                                       ; preds = %if.end203
  %132 = load i32, i32* %i69, align 4
  %inc205 = add nsw i32 %132, 1
  store i32 %inc205, i32* %i69, align 4
  br label %for.cond78

for.end206:                                       ; preds = %for.cond78
  br label %for.inc207

for.inc207:                                       ; preds = %for.end206
  %133 = load i32, i32* %j70, align 4
  %inc208 = add nsw i32 %133, 1
  store i32 %inc208, i32* %j70, align 4
  br label %for.cond74

for.end209:                                       ; preds = %for.cond74
  store i32 1, i32* %retval, align 4
  br label %return

if.else210:                                       ; preds = %entry
  %134 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %scan_n211 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %134, i32 0, i32 25
  %135 = load i32, i32* %scan_n211, align 4
  %cmp212 = icmp eq i32 %135, 1
  br i1 %cmp212, label %if.then214, label %if.else314

if.then214:                                       ; preds = %if.else210
  %136 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %order218 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %136, i32 0, i32 26
  %arrayidx219 = getelementptr inbounds [4 x i32], [4 x i32]* %order218, i64 0, i64 0
  %137 = load i32, i32* %arrayidx219, align 8
  store i32 %137, i32* %n217, align 4
  %138 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp221 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %138, i32 0, i32 11
  %139 = load i32, i32* %n217, align 4
  %idxprom222 = sext i32 %139 to i64
  %arrayidx223 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp221, i64 0, i64 %idxprom222
  %x224 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx223, i32 0, i32 7
  %140 = load i32, i32* %x224, align 4
  %add225 = add nsw i32 %140, 7
  %shr226 = ashr i32 %add225, 3
  store i32 %shr226, i32* %w220, align 4
  %141 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp228 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %141, i32 0, i32 11
  %142 = load i32, i32* %n217, align 4
  %idxprom229 = sext i32 %142 to i64
  %arrayidx230 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp228, i64 0, i64 %idxprom229
  %y231 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx230, i32 0, i32 8
  %143 = load i32, i32* %y231, align 8
  %add232 = add nsw i32 %143, 7
  %shr233 = ashr i32 %add232, 3
  store i32 %shr233, i32* %h227, align 4
  store i32 0, i32* %j216, align 4
  br label %for.cond234

for.cond234:                                      ; preds = %for.inc311, %if.then214
  %144 = load i32, i32* %j216, align 4
  %145 = load i32, i32* %h227, align 4
  %cmp235 = icmp slt i32 %144, %145
  br i1 %cmp235, label %for.body237, label %for.end313

for.body237:                                      ; preds = %for.cond234
  store i32 0, i32* %i215, align 4
  br label %for.cond238

for.cond238:                                      ; preds = %for.inc308, %for.body237
  %146 = load i32, i32* %i215, align 4
  %147 = load i32, i32* %w220, align 4
  %cmp239 = icmp slt i32 %146, %147
  br i1 %cmp239, label %for.body241, label %for.end310

for.body241:                                      ; preds = %for.cond238
  %148 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp243 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %148, i32 0, i32 11
  %149 = load i32, i32* %n217, align 4
  %idxprom244 = sext i32 %149 to i64
  %arrayidx245 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp243, i64 0, i64 %idxprom244
  %coeff = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx245, i32 0, i32 15
  %150 = load i16*, i16** %coeff, align 8
  %151 = load i32, i32* %i215, align 4
  %152 = load i32, i32* %j216, align 4
  %153 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp246 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %153, i32 0, i32 11
  %154 = load i32, i32* %n217, align 4
  %idxprom247 = sext i32 %154 to i64
  %arrayidx248 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp246, i64 0, i64 %idxprom247
  %coeff_w = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx248, i32 0, i32 16
  %155 = load i32, i32* %coeff_w, align 8
  %mul249 = mul nsw i32 %152, %155
  %add250 = add nsw i32 %151, %mul249
  %mul251 = mul nsw i32 64, %add250
  %idx.ext252 = sext i32 %mul251 to i64
  %add.ptr253 = getelementptr inbounds i16, i16* %150, i64 %idx.ext252
  store i16* %add.ptr253, i16** %data242, align 8
  %156 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %spec_start = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %156, i32 0, i32 17
  %157 = load i32, i32* %spec_start, align 4
  %cmp254 = icmp eq i32 %157, 0
  br i1 %cmp254, label %if.then256, label %if.else268

if.then256:                                       ; preds = %for.body241
  %158 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %159 = load i16*, i16** %data242, align 8
  %160 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_dc257 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %160, i32 0, i32 1
  %161 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp258 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %161, i32 0, i32 11
  %162 = load i32, i32* %n217, align 4
  %idxprom259 = sext i32 %162 to i64
  %arrayidx260 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp258, i64 0, i64 %idxprom259
  %hd261 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx260, i32 0, i32 4
  %163 = load i32, i32* %hd261, align 8
  %idxprom262 = sext i32 %163 to i64
  %arrayidx263 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_dc257, i64 0, i64 %idxprom262
  %164 = load i32, i32* %n217, align 4
  %call264 = call i32 @stbi__jpeg_decode_block_prog_dc(%struct.stbi__jpeg* %158, i16* %159, %struct.stbi__huffman* %arrayidx263, i32 %164)
  %tobool265 = icmp ne i32 %call264, 0
  br i1 %tobool265, label %if.end267, label %if.then266

if.then266:                                       ; preds = %if.then256
  store i32 0, i32* %retval, align 4
  br label %return

if.end267:                                        ; preds = %if.then256
  br label %if.end285

if.else268:                                       ; preds = %for.body241
  %165 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp270 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %165, i32 0, i32 11
  %166 = load i32, i32* %n217, align 4
  %idxprom271 = sext i32 %166 to i64
  %arrayidx272 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp270, i64 0, i64 %idxprom271
  %ha273 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx272, i32 0, i32 5
  %167 = load i32, i32* %ha273, align 4
  store i32 %167, i32* %ha269, align 4
  %168 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %169 = load i16*, i16** %data242, align 8
  %170 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_ac274 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %170, i32 0, i32 2
  %171 = load i32, i32* %ha269, align 4
  %idxprom275 = sext i32 %171 to i64
  %arrayidx276 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_ac274, i64 0, i64 %idxprom275
  %172 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %fast_ac277 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %172, i32 0, i32 4
  %173 = load i32, i32* %ha269, align 4
  %idxprom278 = sext i32 %173 to i64
  %arrayidx279 = getelementptr inbounds [4 x [512 x i16]], [4 x [512 x i16]]* %fast_ac277, i64 0, i64 %idxprom278
  %arraydecay280 = getelementptr inbounds [512 x i16], [512 x i16]* %arrayidx279, i64 0, i64 0
  %call281 = call i32 @stbi__jpeg_decode_block_prog_ac(%struct.stbi__jpeg* %168, i16* %169, %struct.stbi__huffman* %arrayidx276, i16* %arraydecay280)
  %tobool282 = icmp ne i32 %call281, 0
  br i1 %tobool282, label %if.end284, label %if.then283

if.then283:                                       ; preds = %if.else268
  store i32 0, i32* %retval, align 4
  br label %return

if.end284:                                        ; preds = %if.else268
  br label %if.end285

if.end285:                                        ; preds = %if.end284, %if.end267
  %174 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %todo286 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %174, i32 0, i32 28
  %175 = load i32, i32* %todo286, align 4
  %dec287 = add nsw i32 %175, -1
  store i32 %dec287, i32* %todo286, align 4
  %cmp288 = icmp sle i32 %dec287, 0
  br i1 %cmp288, label %if.then290, label %if.end307

if.then290:                                       ; preds = %if.end285
  %176 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %code_bits291 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %176, i32 0, i32 13
  %177 = load i32, i32* %code_bits291, align 4
  %cmp292 = icmp slt i32 %177, 24
  br i1 %cmp292, label %if.then294, label %if.end295

if.then294:                                       ; preds = %if.then290
  %178 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %178)
  br label %if.end295

if.end295:                                        ; preds = %if.then294, %if.then290
  %179 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %marker296 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %179, i32 0, i32 14
  %180 = load i8, i8* %marker296, align 8
  %conv297 = zext i8 %180 to i32
  %cmp298 = icmp sge i32 %conv297, 208
  br i1 %cmp298, label %land.lhs.true300, label %if.then305

land.lhs.true300:                                 ; preds = %if.end295
  %181 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %marker301 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %181, i32 0, i32 14
  %182 = load i8, i8* %marker301, align 8
  %conv302 = zext i8 %182 to i32
  %cmp303 = icmp sle i32 %conv302, 215
  br i1 %cmp303, label %if.end306, label %if.then305

if.then305:                                       ; preds = %land.lhs.true300, %if.end295
  store i32 1, i32* %retval, align 4
  br label %return

if.end306:                                        ; preds = %land.lhs.true300
  %183 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__jpeg_reset(%struct.stbi__jpeg* %183)
  br label %if.end307

if.end307:                                        ; preds = %if.end306, %if.end285
  br label %for.inc308

for.inc308:                                       ; preds = %if.end307
  %184 = load i32, i32* %i215, align 4
  %inc309 = add nsw i32 %184, 1
  store i32 %inc309, i32* %i215, align 4
  br label %for.cond238

for.end310:                                       ; preds = %for.cond238
  br label %for.inc311

for.inc311:                                       ; preds = %for.end310
  %185 = load i32, i32* %j216, align 4
  %inc312 = add nsw i32 %185, 1
  store i32 %inc312, i32* %j216, align 4
  br label %for.cond234

for.end313:                                       ; preds = %for.cond234
  store i32 1, i32* %retval, align 4
  br label %return

if.else314:                                       ; preds = %if.else210
  store i32 0, i32* %j316, align 4
  br label %for.cond320

for.cond320:                                      ; preds = %for.inc428, %if.else314
  %186 = load i32, i32* %j316, align 4
  %187 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_y321 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %187, i32 0, i32 8
  %188 = load i32, i32* %img_mcu_y321, align 4
  %cmp322 = icmp slt i32 %186, %188
  br i1 %cmp322, label %for.body324, label %for.end430

for.body324:                                      ; preds = %for.cond320
  store i32 0, i32* %i315, align 4
  br label %for.cond325

for.cond325:                                      ; preds = %for.inc425, %for.body324
  %189 = load i32, i32* %i315, align 4
  %190 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_x326 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %190, i32 0, i32 7
  %191 = load i32, i32* %img_mcu_x326, align 8
  %cmp327 = icmp slt i32 %189, %191
  br i1 %cmp327, label %for.body329, label %for.end427

for.body329:                                      ; preds = %for.cond325
  store i32 0, i32* %k317, align 4
  br label %for.cond330

for.cond330:                                      ; preds = %for.inc400, %for.body329
  %192 = load i32, i32* %k317, align 4
  %193 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %scan_n331 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %193, i32 0, i32 25
  %194 = load i32, i32* %scan_n331, align 4
  %cmp332 = icmp slt i32 %192, %194
  br i1 %cmp332, label %for.body334, label %for.end402

for.body334:                                      ; preds = %for.cond330
  %195 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %order336 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %195, i32 0, i32 26
  %196 = load i32, i32* %k317, align 4
  %idxprom337 = sext i32 %196 to i64
  %arrayidx338 = getelementptr inbounds [4 x i32], [4 x i32]* %order336, i64 0, i64 %idxprom337
  %197 = load i32, i32* %arrayidx338, align 4
  store i32 %197, i32* %n335, align 4
  store i32 0, i32* %y319, align 4
  br label %for.cond339

for.cond339:                                      ; preds = %for.inc397, %for.body334
  %198 = load i32, i32* %y319, align 4
  %199 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp340 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %199, i32 0, i32 11
  %200 = load i32, i32* %n335, align 4
  %idxprom341 = sext i32 %200 to i64
  %arrayidx342 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp340, i64 0, i64 %idxprom341
  %v343 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx342, i32 0, i32 2
  %201 = load i32, i32* %v343, align 8
  %cmp344 = icmp slt i32 %198, %201
  br i1 %cmp344, label %for.body346, label %for.end399

for.body346:                                      ; preds = %for.cond339
  store i32 0, i32* %x318, align 4
  br label %for.cond347

for.cond347:                                      ; preds = %for.inc394, %for.body346
  %202 = load i32, i32* %x318, align 4
  %203 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp348 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %203, i32 0, i32 11
  %204 = load i32, i32* %n335, align 4
  %idxprom349 = sext i32 %204 to i64
  %arrayidx350 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp348, i64 0, i64 %idxprom349
  %h351 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx350, i32 0, i32 1
  %205 = load i32, i32* %h351, align 4
  %cmp352 = icmp slt i32 %202, %205
  br i1 %cmp352, label %for.body354, label %for.end396

for.body354:                                      ; preds = %for.cond347
  %206 = load i32, i32* %i315, align 4
  %207 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp356 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %207, i32 0, i32 11
  %208 = load i32, i32* %n335, align 4
  %idxprom357 = sext i32 %208 to i64
  %arrayidx358 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp356, i64 0, i64 %idxprom357
  %h359 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx358, i32 0, i32 1
  %209 = load i32, i32* %h359, align 4
  %mul360 = mul nsw i32 %206, %209
  %210 = load i32, i32* %x318, align 4
  %add361 = add nsw i32 %mul360, %210
  store i32 %add361, i32* %x2355, align 4
  %211 = load i32, i32* %j316, align 4
  %212 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp363 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %212, i32 0, i32 11
  %213 = load i32, i32* %n335, align 4
  %idxprom364 = sext i32 %213 to i64
  %arrayidx365 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp363, i64 0, i64 %idxprom364
  %v366 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx365, i32 0, i32 2
  %214 = load i32, i32* %v366, align 8
  %mul367 = mul nsw i32 %211, %214
  %215 = load i32, i32* %y319, align 4
  %add368 = add nsw i32 %mul367, %215
  store i32 %add368, i32* %y2362, align 4
  %216 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp370 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %216, i32 0, i32 11
  %217 = load i32, i32* %n335, align 4
  %idxprom371 = sext i32 %217 to i64
  %arrayidx372 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp370, i64 0, i64 %idxprom371
  %coeff373 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx372, i32 0, i32 15
  %218 = load i16*, i16** %coeff373, align 8
  %219 = load i32, i32* %x2355, align 4
  %220 = load i32, i32* %y2362, align 4
  %221 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp374 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %221, i32 0, i32 11
  %222 = load i32, i32* %n335, align 4
  %idxprom375 = sext i32 %222 to i64
  %arrayidx376 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp374, i64 0, i64 %idxprom375
  %coeff_w377 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx376, i32 0, i32 16
  %223 = load i32, i32* %coeff_w377, align 8
  %mul378 = mul nsw i32 %220, %223
  %add379 = add nsw i32 %219, %mul378
  %mul380 = mul nsw i32 64, %add379
  %idx.ext381 = sext i32 %mul380 to i64
  %add.ptr382 = getelementptr inbounds i16, i16* %218, i64 %idx.ext381
  store i16* %add.ptr382, i16** %data369, align 8
  %224 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %225 = load i16*, i16** %data369, align 8
  %226 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_dc383 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %226, i32 0, i32 1
  %227 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp384 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %227, i32 0, i32 11
  %228 = load i32, i32* %n335, align 4
  %idxprom385 = sext i32 %228 to i64
  %arrayidx386 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp384, i64 0, i64 %idxprom385
  %hd387 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx386, i32 0, i32 4
  %229 = load i32, i32* %hd387, align 8
  %idxprom388 = sext i32 %229 to i64
  %arrayidx389 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_dc383, i64 0, i64 %idxprom388
  %230 = load i32, i32* %n335, align 4
  %call390 = call i32 @stbi__jpeg_decode_block_prog_dc(%struct.stbi__jpeg* %224, i16* %225, %struct.stbi__huffman* %arrayidx389, i32 %230)
  %tobool391 = icmp ne i32 %call390, 0
  br i1 %tobool391, label %if.end393, label %if.then392

if.then392:                                       ; preds = %for.body354
  store i32 0, i32* %retval, align 4
  br label %return

if.end393:                                        ; preds = %for.body354
  br label %for.inc394

for.inc394:                                       ; preds = %if.end393
  %231 = load i32, i32* %x318, align 4
  %inc395 = add nsw i32 %231, 1
  store i32 %inc395, i32* %x318, align 4
  br label %for.cond347

for.end396:                                       ; preds = %for.cond347
  br label %for.inc397

for.inc397:                                       ; preds = %for.end396
  %232 = load i32, i32* %y319, align 4
  %inc398 = add nsw i32 %232, 1
  store i32 %inc398, i32* %y319, align 4
  br label %for.cond339

for.end399:                                       ; preds = %for.cond339
  br label %for.inc400

for.inc400:                                       ; preds = %for.end399
  %233 = load i32, i32* %k317, align 4
  %inc401 = add nsw i32 %233, 1
  store i32 %inc401, i32* %k317, align 4
  br label %for.cond330

for.end402:                                       ; preds = %for.cond330
  %234 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %todo403 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %234, i32 0, i32 28
  %235 = load i32, i32* %todo403, align 4
  %dec404 = add nsw i32 %235, -1
  store i32 %dec404, i32* %todo403, align 4
  %cmp405 = icmp sle i32 %dec404, 0
  br i1 %cmp405, label %if.then407, label %if.end424

if.then407:                                       ; preds = %for.end402
  %236 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %code_bits408 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %236, i32 0, i32 13
  %237 = load i32, i32* %code_bits408, align 4
  %cmp409 = icmp slt i32 %237, 24
  br i1 %cmp409, label %if.then411, label %if.end412

if.then411:                                       ; preds = %if.then407
  %238 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %238)
  br label %if.end412

if.end412:                                        ; preds = %if.then411, %if.then407
  %239 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %marker413 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %239, i32 0, i32 14
  %240 = load i8, i8* %marker413, align 8
  %conv414 = zext i8 %240 to i32
  %cmp415 = icmp sge i32 %conv414, 208
  br i1 %cmp415, label %land.lhs.true417, label %if.then422

land.lhs.true417:                                 ; preds = %if.end412
  %241 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %marker418 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %241, i32 0, i32 14
  %242 = load i8, i8* %marker418, align 8
  %conv419 = zext i8 %242 to i32
  %cmp420 = icmp sle i32 %conv419, 215
  br i1 %cmp420, label %if.end423, label %if.then422

if.then422:                                       ; preds = %land.lhs.true417, %if.end412
  store i32 1, i32* %retval, align 4
  br label %return

if.end423:                                        ; preds = %land.lhs.true417
  %243 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  call void @stbi__jpeg_reset(%struct.stbi__jpeg* %243)
  br label %if.end424

if.end424:                                        ; preds = %if.end423, %for.end402
  br label %for.inc425

for.inc425:                                       ; preds = %if.end424
  %244 = load i32, i32* %i315, align 4
  %inc426 = add nsw i32 %244, 1
  store i32 %inc426, i32* %i315, align 4
  br label %for.cond325

for.end427:                                       ; preds = %for.cond325
  br label %for.inc428

for.inc428:                                       ; preds = %for.end427
  %245 = load i32, i32* %j316, align 4
  %inc429 = add nsw i32 %245, 1
  store i32 %inc429, i32* %j316, align 4
  br label %for.cond320

for.end430:                                       ; preds = %for.cond320
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end430, %if.then422, %if.then392, %for.end313, %if.then305, %if.then283, %if.then266, %for.end209, %if.then201, %if.then152, %for.end68, %if.then63, %if.then33
  %246 = load i32, i32* %retval, align 4
  ret i32 %246
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__process_marker(%struct.stbi__jpeg* %z, i32 %m) #0 {
entry:
  %retval = alloca i32, align 4
  %z.addr = alloca %struct.stbi__jpeg*, align 8
  %m.addr = alloca i32, align 4
  %L = alloca i32, align 4
  %q = alloca i32, align 4
  %p = alloca i32, align 4
  %sixteen = alloca i32, align 4
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %v = alloca i8*, align 8
  %sizes = alloca [16 x i32], align 16
  %i51 = alloca i32, align 4
  %n = alloca i32, align 4
  %q52 = alloca i32, align 4
  %tc = alloca i32, align 4
  %th = alloca i32, align 4
  %ok = alloca i32, align 4
  %i160 = alloca i32, align 4
  %ok189 = alloca i32, align 4
  %i190 = alloca i32, align 4
  store %struct.stbi__jpeg* %z, %struct.stbi__jpeg** %z.addr, align 8
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %m.addr, align 4
  switch i32 %0, label %sw.epilog [
    i32 255, label %sw.bb
    i32 221, label %sw.bb1
    i32 219, label %sw.bb6
    i32 196, label %sw.bb43
  ]

sw.bb:                                            ; preds = %entry
  %call = call i32 @stbi__err(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.34, i64 0, i64 0))
  store i32 %call, i32* %retval, align 4
  br label %return

sw.bb1:                                           ; preds = %entry
  %1 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %1, i32 0, i32 0
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call2 = call i32 @stbi__get16be(%struct.stbi__context* %2)
  %cmp = icmp ne i32 %call2, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb1
  %call3 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i64 0, i64 0))
  store i32 %call3, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %sw.bb1
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s4 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %3, i32 0, i32 0
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s4, align 8
  %call5 = call i32 @stbi__get16be(%struct.stbi__context* %4)
  %5 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %restart_interval = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %5, i32 0, i32 27
  store i32 %call5, i32* %restart_interval, align 8
  store i32 1, i32* %retval, align 4
  br label %return

sw.bb6:                                           ; preds = %entry
  %6 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s7 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %6, i32 0, i32 0
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s7, align 8
  %call8 = call i32 @stbi__get16be(%struct.stbi__context* %7)
  %sub = sub nsw i32 %call8, 2
  store i32 %sub, i32* %L, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end, %sw.bb6
  %8 = load i32, i32* %L, align 4
  %cmp9 = icmp sgt i32 %8, 0
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s10 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %9, i32 0, i32 0
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s10, align 8
  %call11 = call zeroext i8 @stbi__get8(%struct.stbi__context* %10)
  %conv = zext i8 %call11 to i32
  store i32 %conv, i32* %q, align 4
  %11 = load i32, i32* %q, align 4
  %shr = ashr i32 %11, 4
  store i32 %shr, i32* %p, align 4
  %12 = load i32, i32* %p, align 4
  %cmp12 = icmp ne i32 %12, 0
  %conv13 = zext i1 %cmp12 to i32
  store i32 %conv13, i32* %sixteen, align 4
  %13 = load i32, i32* %q, align 4
  %and = and i32 %13, 15
  store i32 %and, i32* %t, align 4
  %14 = load i32, i32* %p, align 4
  %cmp14 = icmp ne i32 %14, 0
  br i1 %cmp14, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %while.body
  %15 = load i32, i32* %p, align 4
  %cmp16 = icmp ne i32 %15, 1
  br i1 %cmp16, label %if.then18, label %if.end20

if.then18:                                        ; preds = %land.lhs.true
  %call19 = call i32 @stbi__err(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.36, i64 0, i64 0))
  store i32 %call19, i32* %retval, align 4
  br label %return

if.end20:                                         ; preds = %land.lhs.true, %while.body
  %16 = load i32, i32* %t, align 4
  %cmp21 = icmp sgt i32 %16, 3
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end20
  %call24 = call i32 @stbi__err(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.37, i64 0, i64 0))
  store i32 %call24, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %if.end20
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end25
  %17 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %17, 64
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32, i32* %sixteen, align 4
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %19 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s28 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %19, i32 0, i32 0
  %20 = load %struct.stbi__context*, %struct.stbi__context** %s28, align 8
  %call29 = call i32 @stbi__get16be(%struct.stbi__context* %20)
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %21 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s30 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %21, i32 0, i32 0
  %22 = load %struct.stbi__context*, %struct.stbi__context** %s30, align 8
  %call31 = call zeroext i8 @stbi__get8(%struct.stbi__context* %22)
  %conv32 = zext i8 %call31 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call29, %cond.true ], [ %conv32, %cond.false ]
  %conv33 = trunc i32 %cond to i16
  %23 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %dequant = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %23, i32 0, i32 3
  %24 = load i32, i32* %t, align 4
  %idxprom = sext i32 %24 to i64
  %arrayidx = getelementptr inbounds [4 x [64 x i16]], [4 x [64 x i16]]* %dequant, i64 0, i64 %idxprom
  %25 = load i32, i32* %i, align 4
  %idxprom34 = sext i32 %25 to i64
  %arrayidx35 = getelementptr inbounds [79 x i8], [79 x i8]* @stbi__jpeg_dezigzag, i64 0, i64 %idxprom34
  %26 = load i8, i8* %arrayidx35, align 1
  %idxprom36 = zext i8 %26 to i64
  %arrayidx37 = getelementptr inbounds [64 x i16], [64 x i16]* %arrayidx, i64 0, i64 %idxprom36
  store i16 %conv33, i16* %arrayidx37, align 2
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %sixteen, align 4
  %tobool38 = icmp ne i32 %28, 0
  %29 = zext i1 %tobool38 to i64
  %cond39 = select i1 %tobool38, i32 129, i32 65
  %30 = load i32, i32* %L, align 4
  %sub40 = sub nsw i32 %30, %cond39
  store i32 %sub40, i32* %L, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %31 = load i32, i32* %L, align 4
  %cmp41 = icmp eq i32 %31, 0
  %conv42 = zext i1 %cmp41 to i32
  store i32 %conv42, i32* %retval, align 4
  br label %return

sw.bb43:                                          ; preds = %entry
  %32 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s44 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %32, i32 0, i32 0
  %33 = load %struct.stbi__context*, %struct.stbi__context** %s44, align 8
  %call45 = call i32 @stbi__get16be(%struct.stbi__context* %33)
  %sub46 = sub nsw i32 %call45, 2
  store i32 %sub46, i32* %L, align 4
  br label %while.cond47

while.cond47:                                     ; preds = %if.end127, %sw.bb43
  %34 = load i32, i32* %L, align 4
  %cmp48 = icmp sgt i32 %34, 0
  br i1 %cmp48, label %while.body50, label %while.end129

while.body50:                                     ; preds = %while.cond47
  store i32 0, i32* %n, align 4
  %35 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s53 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %35, i32 0, i32 0
  %36 = load %struct.stbi__context*, %struct.stbi__context** %s53, align 8
  %call54 = call zeroext i8 @stbi__get8(%struct.stbi__context* %36)
  %conv55 = zext i8 %call54 to i32
  store i32 %conv55, i32* %q52, align 4
  %37 = load i32, i32* %q52, align 4
  %shr56 = ashr i32 %37, 4
  store i32 %shr56, i32* %tc, align 4
  %38 = load i32, i32* %q52, align 4
  %and57 = and i32 %38, 15
  store i32 %and57, i32* %th, align 4
  %39 = load i32, i32* %tc, align 4
  %cmp58 = icmp sgt i32 %39, 1
  br i1 %cmp58, label %if.then62, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body50
  %40 = load i32, i32* %th, align 4
  %cmp60 = icmp sgt i32 %40, 3
  br i1 %cmp60, label %if.then62, label %if.end64

if.then62:                                        ; preds = %lor.lhs.false, %while.body50
  %call63 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.38, i64 0, i64 0))
  store i32 %call63, i32* %retval, align 4
  br label %return

if.end64:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %i51, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc76, %if.end64
  %41 = load i32, i32* %i51, align 4
  %cmp66 = icmp slt i32 %41, 16
  br i1 %cmp66, label %for.body68, label %for.end78

for.body68:                                       ; preds = %for.cond65
  %42 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s69 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %42, i32 0, i32 0
  %43 = load %struct.stbi__context*, %struct.stbi__context** %s69, align 8
  %call70 = call zeroext i8 @stbi__get8(%struct.stbi__context* %43)
  %conv71 = zext i8 %call70 to i32
  %44 = load i32, i32* %i51, align 4
  %idxprom72 = sext i32 %44 to i64
  %arrayidx73 = getelementptr inbounds [16 x i32], [16 x i32]* %sizes, i64 0, i64 %idxprom72
  store i32 %conv71, i32* %arrayidx73, align 4
  %45 = load i32, i32* %i51, align 4
  %idxprom74 = sext i32 %45 to i64
  %arrayidx75 = getelementptr inbounds [16 x i32], [16 x i32]* %sizes, i64 0, i64 %idxprom74
  %46 = load i32, i32* %arrayidx75, align 4
  %47 = load i32, i32* %n, align 4
  %add = add nsw i32 %47, %46
  store i32 %add, i32* %n, align 4
  br label %for.inc76

for.inc76:                                        ; preds = %for.body68
  %48 = load i32, i32* %i51, align 4
  %inc77 = add nsw i32 %48, 1
  store i32 %inc77, i32* %i51, align 4
  br label %for.cond65

for.end78:                                        ; preds = %for.cond65
  %49 = load i32, i32* %L, align 4
  %sub79 = sub nsw i32 %49, 17
  store i32 %sub79, i32* %L, align 4
  %50 = load i32, i32* %tc, align 4
  %cmp80 = icmp eq i32 %50, 0
  br i1 %cmp80, label %if.then82, label %if.else

if.then82:                                        ; preds = %for.end78
  %51 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_dc = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %51, i32 0, i32 1
  %arraydecay = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_dc, i64 0, i64 0
  %52 = load i32, i32* %th, align 4
  %idx.ext = sext i32 %52 to i64
  %add.ptr = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %arraydecay, i64 %idx.ext
  %arraydecay83 = getelementptr inbounds [16 x i32], [16 x i32]* %sizes, i64 0, i64 0
  %call84 = call i32 @stbi__build_huffman(%struct.stbi__huffman* %add.ptr, i32* %arraydecay83)
  %tobool85 = icmp ne i32 %call84, 0
  br i1 %tobool85, label %if.end87, label %if.then86

if.then86:                                        ; preds = %if.then82
  store i32 0, i32* %retval, align 4
  br label %return

if.end87:                                         ; preds = %if.then82
  %53 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_dc88 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %53, i32 0, i32 1
  %54 = load i32, i32* %th, align 4
  %idxprom89 = sext i32 %54 to i64
  %arrayidx90 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_dc88, i64 0, i64 %idxprom89
  %values = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %arrayidx90, i32 0, i32 2
  %arraydecay91 = getelementptr inbounds [256 x i8], [256 x i8]* %values, i64 0, i64 0
  store i8* %arraydecay91, i8** %v, align 8
  br label %if.end105

if.else:                                          ; preds = %for.end78
  %55 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_ac = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %55, i32 0, i32 2
  %arraydecay92 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_ac, i64 0, i64 0
  %56 = load i32, i32* %th, align 4
  %idx.ext93 = sext i32 %56 to i64
  %add.ptr94 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %arraydecay92, i64 %idx.ext93
  %arraydecay95 = getelementptr inbounds [16 x i32], [16 x i32]* %sizes, i64 0, i64 0
  %call96 = call i32 @stbi__build_huffman(%struct.stbi__huffman* %add.ptr94, i32* %arraydecay95)
  %tobool97 = icmp ne i32 %call96, 0
  br i1 %tobool97, label %if.end99, label %if.then98

if.then98:                                        ; preds = %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.end99:                                         ; preds = %if.else
  %57 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_ac100 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %57, i32 0, i32 2
  %58 = load i32, i32* %th, align 4
  %idxprom101 = sext i32 %58 to i64
  %arrayidx102 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_ac100, i64 0, i64 %idxprom101
  %values103 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %arrayidx102, i32 0, i32 2
  %arraydecay104 = getelementptr inbounds [256 x i8], [256 x i8]* %values103, i64 0, i64 0
  store i8* %arraydecay104, i8** %v, align 8
  br label %if.end105

if.end105:                                        ; preds = %if.end99, %if.end87
  store i32 0, i32* %i51, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc114, %if.end105
  %59 = load i32, i32* %i51, align 4
  %60 = load i32, i32* %n, align 4
  %cmp107 = icmp slt i32 %59, %60
  br i1 %cmp107, label %for.body109, label %for.end116

for.body109:                                      ; preds = %for.cond106
  %61 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s110 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %61, i32 0, i32 0
  %62 = load %struct.stbi__context*, %struct.stbi__context** %s110, align 8
  %call111 = call zeroext i8 @stbi__get8(%struct.stbi__context* %62)
  %63 = load i8*, i8** %v, align 8
  %64 = load i32, i32* %i51, align 4
  %idxprom112 = sext i32 %64 to i64
  %arrayidx113 = getelementptr inbounds i8, i8* %63, i64 %idxprom112
  store i8 %call111, i8* %arrayidx113, align 1
  br label %for.inc114

for.inc114:                                       ; preds = %for.body109
  %65 = load i32, i32* %i51, align 4
  %inc115 = add nsw i32 %65, 1
  store i32 %inc115, i32* %i51, align 4
  br label %for.cond106

for.end116:                                       ; preds = %for.cond106
  %66 = load i32, i32* %tc, align 4
  %cmp117 = icmp ne i32 %66, 0
  br i1 %cmp117, label %if.then119, label %if.end127

if.then119:                                       ; preds = %for.end116
  %67 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %fast_ac = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %67, i32 0, i32 4
  %68 = load i32, i32* %th, align 4
  %idxprom120 = sext i32 %68 to i64
  %arrayidx121 = getelementptr inbounds [4 x [512 x i16]], [4 x [512 x i16]]* %fast_ac, i64 0, i64 %idxprom120
  %arraydecay122 = getelementptr inbounds [512 x i16], [512 x i16]* %arrayidx121, i64 0, i64 0
  %69 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %huff_ac123 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %69, i32 0, i32 2
  %arraydecay124 = getelementptr inbounds [4 x %struct.stbi__huffman], [4 x %struct.stbi__huffman]* %huff_ac123, i64 0, i64 0
  %70 = load i32, i32* %th, align 4
  %idx.ext125 = sext i32 %70 to i64
  %add.ptr126 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %arraydecay124, i64 %idx.ext125
  call void @stbi__build_fast_ac(i16* %arraydecay122, %struct.stbi__huffman* %add.ptr126)
  br label %if.end127

if.end127:                                        ; preds = %if.then119, %for.end116
  %71 = load i32, i32* %n, align 4
  %72 = load i32, i32* %L, align 4
  %sub128 = sub nsw i32 %72, %71
  store i32 %sub128, i32* %L, align 4
  br label %while.cond47

while.end129:                                     ; preds = %while.cond47
  %73 = load i32, i32* %L, align 4
  %cmp130 = icmp eq i32 %73, 0
  %conv131 = zext i1 %cmp130 to i32
  store i32 %conv131, i32* %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %entry
  %74 = load i32, i32* %m.addr, align 4
  %cmp132 = icmp sge i32 %74, 224
  br i1 %cmp132, label %land.lhs.true134, label %lor.lhs.false137

land.lhs.true134:                                 ; preds = %sw.epilog
  %75 = load i32, i32* %m.addr, align 4
  %cmp135 = icmp sle i32 %75, 239
  br i1 %cmp135, label %if.then140, label %lor.lhs.false137

lor.lhs.false137:                                 ; preds = %land.lhs.true134, %sw.epilog
  %76 = load i32, i32* %m.addr, align 4
  %cmp138 = icmp eq i32 %76, 254
  br i1 %cmp138, label %if.then140, label %if.end225

if.then140:                                       ; preds = %lor.lhs.false137, %land.lhs.true134
  %77 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s141 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %77, i32 0, i32 0
  %78 = load %struct.stbi__context*, %struct.stbi__context** %s141, align 8
  %call142 = call i32 @stbi__get16be(%struct.stbi__context* %78)
  store i32 %call142, i32* %L, align 4
  %79 = load i32, i32* %L, align 4
  %cmp143 = icmp slt i32 %79, 2
  br i1 %cmp143, label %if.then145, label %if.end152

if.then145:                                       ; preds = %if.then140
  %80 = load i32, i32* %m.addr, align 4
  %cmp146 = icmp eq i32 %80, 254
  br i1 %cmp146, label %if.then148, label %if.else150

if.then148:                                       ; preds = %if.then145
  %call149 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0))
  store i32 %call149, i32* %retval, align 4
  br label %return

if.else150:                                       ; preds = %if.then145
  %call151 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i64 0, i64 0))
  store i32 %call151, i32* %retval, align 4
  br label %return

if.end152:                                        ; preds = %if.then140
  %81 = load i32, i32* %L, align 4
  %sub153 = sub nsw i32 %81, 2
  store i32 %sub153, i32* %L, align 4
  %82 = load i32, i32* %m.addr, align 4
  %cmp154 = icmp eq i32 %82, 224
  br i1 %cmp154, label %land.lhs.true156, label %if.else182

land.lhs.true156:                                 ; preds = %if.end152
  %83 = load i32, i32* %L, align 4
  %cmp157 = icmp sge i32 %83, 5
  br i1 %cmp157, label %if.then159, label %if.else182

if.then159:                                       ; preds = %land.lhs.true156
  store i32 1, i32* %ok, align 4
  store i32 0, i32* %i160, align 4
  br label %for.cond161

for.cond161:                                      ; preds = %for.inc175, %if.then159
  %84 = load i32, i32* %i160, align 4
  %cmp162 = icmp slt i32 %84, 5
  br i1 %cmp162, label %for.body164, label %for.end177

for.body164:                                      ; preds = %for.cond161
  %85 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s165 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %85, i32 0, i32 0
  %86 = load %struct.stbi__context*, %struct.stbi__context** %s165, align 8
  %call166 = call zeroext i8 @stbi__get8(%struct.stbi__context* %86)
  %conv167 = zext i8 %call166 to i32
  %87 = load i32, i32* %i160, align 4
  %idxprom168 = sext i32 %87 to i64
  %arrayidx169 = getelementptr inbounds [5 x i8], [5 x i8]* @stbi__process_marker.tag, i64 0, i64 %idxprom168
  %88 = load i8, i8* %arrayidx169, align 1
  %conv170 = zext i8 %88 to i32
  %cmp171 = icmp ne i32 %conv167, %conv170
  br i1 %cmp171, label %if.then173, label %if.end174

if.then173:                                       ; preds = %for.body164
  store i32 0, i32* %ok, align 4
  br label %if.end174

if.end174:                                        ; preds = %if.then173, %for.body164
  br label %for.inc175

for.inc175:                                       ; preds = %if.end174
  %89 = load i32, i32* %i160, align 4
  %inc176 = add nsw i32 %89, 1
  store i32 %inc176, i32* %i160, align 4
  br label %for.cond161

for.end177:                                       ; preds = %for.cond161
  %90 = load i32, i32* %L, align 4
  %sub178 = sub nsw i32 %90, 5
  store i32 %sub178, i32* %L, align 4
  %91 = load i32, i32* %ok, align 4
  %tobool179 = icmp ne i32 %91, 0
  br i1 %tobool179, label %if.then180, label %if.end181

if.then180:                                       ; preds = %for.end177
  %92 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %jfif = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %92, i32 0, i32 22
  store i32 1, i32* %jfif, align 8
  br label %if.end181

if.end181:                                        ; preds = %if.then180, %for.end177
  br label %if.end223

if.else182:                                       ; preds = %land.lhs.true156, %if.end152
  %93 = load i32, i32* %m.addr, align 4
  %cmp183 = icmp eq i32 %93, 238
  br i1 %cmp183, label %land.lhs.true185, label %if.end222

land.lhs.true185:                                 ; preds = %if.else182
  %94 = load i32, i32* %L, align 4
  %cmp186 = icmp sge i32 %94, 12
  br i1 %cmp186, label %if.then188, label %if.end222

if.then188:                                       ; preds = %land.lhs.true185
  store i32 1, i32* %ok189, align 4
  store i32 0, i32* %i190, align 4
  br label %for.cond191

for.cond191:                                      ; preds = %for.inc205, %if.then188
  %95 = load i32, i32* %i190, align 4
  %cmp192 = icmp slt i32 %95, 6
  br i1 %cmp192, label %for.body194, label %for.end207

for.body194:                                      ; preds = %for.cond191
  %96 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s195 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %96, i32 0, i32 0
  %97 = load %struct.stbi__context*, %struct.stbi__context** %s195, align 8
  %call196 = call zeroext i8 @stbi__get8(%struct.stbi__context* %97)
  %conv197 = zext i8 %call196 to i32
  %98 = load i32, i32* %i190, align 4
  %idxprom198 = sext i32 %98 to i64
  %arrayidx199 = getelementptr inbounds [6 x i8], [6 x i8]* @stbi__process_marker.tag.41, i64 0, i64 %idxprom198
  %99 = load i8, i8* %arrayidx199, align 1
  %conv200 = zext i8 %99 to i32
  %cmp201 = icmp ne i32 %conv197, %conv200
  br i1 %cmp201, label %if.then203, label %if.end204

if.then203:                                       ; preds = %for.body194
  store i32 0, i32* %ok189, align 4
  br label %if.end204

if.end204:                                        ; preds = %if.then203, %for.body194
  br label %for.inc205

for.inc205:                                       ; preds = %if.end204
  %100 = load i32, i32* %i190, align 4
  %inc206 = add nsw i32 %100, 1
  store i32 %inc206, i32* %i190, align 4
  br label %for.cond191

for.end207:                                       ; preds = %for.cond191
  %101 = load i32, i32* %L, align 4
  %sub208 = sub nsw i32 %101, 6
  store i32 %sub208, i32* %L, align 4
  %102 = load i32, i32* %ok189, align 4
  %tobool209 = icmp ne i32 %102, 0
  br i1 %tobool209, label %if.then210, label %if.end221

if.then210:                                       ; preds = %for.end207
  %103 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s211 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %103, i32 0, i32 0
  %104 = load %struct.stbi__context*, %struct.stbi__context** %s211, align 8
  %call212 = call zeroext i8 @stbi__get8(%struct.stbi__context* %104)
  %105 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s213 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %105, i32 0, i32 0
  %106 = load %struct.stbi__context*, %struct.stbi__context** %s213, align 8
  %call214 = call i32 @stbi__get16be(%struct.stbi__context* %106)
  %107 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s215 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %107, i32 0, i32 0
  %108 = load %struct.stbi__context*, %struct.stbi__context** %s215, align 8
  %call216 = call i32 @stbi__get16be(%struct.stbi__context* %108)
  %109 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s217 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %109, i32 0, i32 0
  %110 = load %struct.stbi__context*, %struct.stbi__context** %s217, align 8
  %call218 = call zeroext i8 @stbi__get8(%struct.stbi__context* %110)
  %conv219 = zext i8 %call218 to i32
  %111 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %app14_color_transform = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %111, i32 0, i32 23
  store i32 %conv219, i32* %app14_color_transform, align 4
  %112 = load i32, i32* %L, align 4
  %sub220 = sub nsw i32 %112, 6
  store i32 %sub220, i32* %L, align 4
  br label %if.end221

if.end221:                                        ; preds = %if.then210, %for.end207
  br label %if.end222

if.end222:                                        ; preds = %if.end221, %land.lhs.true185, %if.else182
  br label %if.end223

if.end223:                                        ; preds = %if.end222, %if.end181
  %113 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s224 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %113, i32 0, i32 0
  %114 = load %struct.stbi__context*, %struct.stbi__context** %s224, align 8
  %115 = load i32, i32* %L, align 4
  call void @stbi__skip(%struct.stbi__context* %114, i32 %115)
  store i32 1, i32* %retval, align 4
  br label %return

if.end225:                                        ; preds = %lor.lhs.false137
  %call226 = call i32 @stbi__err(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.42, i64 0, i64 0))
  store i32 %call226, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end225, %if.end223, %if.else150, %if.then148, %while.end129, %if.then98, %if.then86, %if.then62, %while.end, %if.then23, %if.then18, %if.end, %if.then, %sw.bb
  %116 = load i32, i32* %retval, align 4
  ret i32 %116
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__jpeg_finish(%struct.stbi__jpeg* %z) #0 {
entry:
  %z.addr = alloca %struct.stbi__jpeg*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %data = alloca i16*, align 8
  store %struct.stbi__jpeg* %z, %struct.stbi__jpeg** %z.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %progressive = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 16
  %1 = load i32, i32* %progressive, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc46, %if.then
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %3, i32 0, i32 0
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 2
  %5 = load i32, i32* %img_n, align 8
  %cmp = icmp slt i32 %2, %5
  br i1 %cmp, label %for.body, label %for.end48

for.body:                                         ; preds = %for.cond
  %6 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %6, i32 0, i32 11
  %7 = load i32, i32* %n, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp, i64 0, i64 %idxprom
  %x = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 7
  %8 = load i32, i32* %x, align 4
  %add = add nsw i32 %8, 7
  %shr = ashr i32 %add, 3
  store i32 %shr, i32* %w, align 4
  %9 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %9, i32 0, i32 11
  %10 = load i32, i32* %n, align 4
  %idxprom2 = sext i32 %10 to i64
  %arrayidx3 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp1, i64 0, i64 %idxprom2
  %y = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx3, i32 0, i32 8
  %11 = load i32, i32* %y, align 8
  %add4 = add nsw i32 %11, 7
  %shr5 = ashr i32 %add4, 3
  store i32 %shr5, i32* %h, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc43, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %h, align 4
  %cmp7 = icmp slt i32 %12, %13
  br i1 %cmp7, label %for.body8, label %for.end45

for.body8:                                        ; preds = %for.cond6
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %w, align 4
  %cmp10 = icmp slt i32 %14, %15
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond9
  %16 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp12 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %16, i32 0, i32 11
  %17 = load i32, i32* %n, align 4
  %idxprom13 = sext i32 %17 to i64
  %arrayidx14 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp12, i64 0, i64 %idxprom13
  %coeff = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx14, i32 0, i32 15
  %18 = load i16*, i16** %coeff, align 8
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %j, align 4
  %21 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp15 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %21, i32 0, i32 11
  %22 = load i32, i32* %n, align 4
  %idxprom16 = sext i32 %22 to i64
  %arrayidx17 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp15, i64 0, i64 %idxprom16
  %coeff_w = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx17, i32 0, i32 16
  %23 = load i32, i32* %coeff_w, align 8
  %mul = mul nsw i32 %20, %23
  %add18 = add nsw i32 %19, %mul
  %mul19 = mul nsw i32 64, %add18
  %idx.ext = sext i32 %mul19 to i64
  %add.ptr = getelementptr inbounds i16, i16* %18, i64 %idx.ext
  store i16* %add.ptr, i16** %data, align 8
  %24 = load i16*, i16** %data, align 8
  %25 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %dequant = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %25, i32 0, i32 3
  %26 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp20 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %26, i32 0, i32 11
  %27 = load i32, i32* %n, align 4
  %idxprom21 = sext i32 %27 to i64
  %arrayidx22 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp20, i64 0, i64 %idxprom21
  %tq = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx22, i32 0, i32 3
  %28 = load i32, i32* %tq, align 4
  %idxprom23 = sext i32 %28 to i64
  %arrayidx24 = getelementptr inbounds [4 x [64 x i16]], [4 x [64 x i16]]* %dequant, i64 0, i64 %idxprom23
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %arrayidx24, i64 0, i64 0
  call void @stbi__jpeg_dequantize(i16* %24, i16* %arraydecay)
  %29 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %idct_block_kernel = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %29, i32 0, i32 29
  %30 = load void (i8*, i32, i16*)*, void (i8*, i32, i16*)** %idct_block_kernel, align 8
  %31 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp25 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %31, i32 0, i32 11
  %32 = load i32, i32* %n, align 4
  %idxprom26 = sext i32 %32 to i64
  %arrayidx27 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp25, i64 0, i64 %idxprom26
  %data28 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx27, i32 0, i32 11
  %33 = load i8*, i8** %data28, align 8
  %34 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp29 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %34, i32 0, i32 11
  %35 = load i32, i32* %n, align 4
  %idxprom30 = sext i32 %35 to i64
  %arrayidx31 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp29, i64 0, i64 %idxprom30
  %w2 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx31, i32 0, i32 9
  %36 = load i32, i32* %w2, align 4
  %37 = load i32, i32* %j, align 4
  %mul32 = mul nsw i32 %36, %37
  %mul33 = mul nsw i32 %mul32, 8
  %idx.ext34 = sext i32 %mul33 to i64
  %add.ptr35 = getelementptr inbounds i8, i8* %33, i64 %idx.ext34
  %38 = load i32, i32* %i, align 4
  %mul36 = mul nsw i32 %38, 8
  %idx.ext37 = sext i32 %mul36 to i64
  %add.ptr38 = getelementptr inbounds i8, i8* %add.ptr35, i64 %idx.ext37
  %39 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp39 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %39, i32 0, i32 11
  %40 = load i32, i32* %n, align 4
  %idxprom40 = sext i32 %40 to i64
  %arrayidx41 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp39, i64 0, i64 %idxprom40
  %w242 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx41, i32 0, i32 9
  %41 = load i32, i32* %w242, align 4
  %42 = load i16*, i16** %data, align 8
  call void %30(i8* %add.ptr38, i32 %41, i16* %42)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %43 = load i32, i32* %i, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc43

for.inc43:                                        ; preds = %for.end
  %44 = load i32, i32* %j, align 4
  %inc44 = add nsw i32 %44, 1
  store i32 %inc44, i32* %j, align 4
  br label %for.cond6

for.end45:                                        ; preds = %for.cond6
  br label %for.inc46

for.inc46:                                        ; preds = %for.end45
  %45 = load i32, i32* %n, align 4
  %inc47 = add nsw i32 %45, 1
  store i32 %inc47, i32* %n, align 4
  br label %for.cond

for.end48:                                        ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end48, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__jpeg_dequantize(i16* %data, i16* %dequant) #0 {
entry:
  %data.addr = alloca i16*, align 8
  %dequant.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  store i16* %data, i16** %data.addr, align 8
  store i16* %dequant, i16** %dequant.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i16*, i16** %dequant.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i16, i16* %1, i64 %idxprom
  %3 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %3 to i32
  %4 = load i16*, i16** %data.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %arrayidx2 = getelementptr inbounds i16, i16* %4, i64 %idxprom1
  %6 = load i16, i16* %arrayidx2, align 2
  %conv3 = sext i16 %6 to i32
  %mul = mul nsw i32 %conv3, %conv
  %conv4 = trunc i32 %mul to i16
  store i16 %conv4, i16* %arrayidx2, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__build_huffman(%struct.stbi__huffman* %h, i32* %count) #0 {
entry:
  %retval = alloca i32, align 4
  %h.addr = alloca %struct.stbi__huffman*, align 8
  %count.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %code = alloca i32, align 4
  %s = alloca i32, align 4
  %c = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.stbi__huffman* %h, %struct.stbi__huffman** %h.addr, align 8
  store i32* %count, i32** %count.addr, align 8
  store i32 0, i32* %k, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %2 = load i32*, i32** %count.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %cmp2 = icmp slt i32 %1, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %add = add nsw i32 %5, 1
  %conv = trunc i32 %add to i8
  %6 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %size = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %6, i32 0, i32 3
  %7 = load i32, i32* %k, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %k, align 4
  %idxprom4 = sext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [257 x i8], [257 x i8]* %size, i64 0, i64 %idxprom4
  store i8 %conv, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc6 = add nsw i32 %8, 1
  store i32 %inc6, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %9, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %10 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %size10 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %10, i32 0, i32 3
  %11 = load i32, i32* %k, align 4
  %idxprom11 = sext i32 %11 to i64
  %arrayidx12 = getelementptr inbounds [257 x i8], [257 x i8]* %size10, i64 0, i64 %idxprom11
  store i8 0, i8* %arrayidx12, align 1
  store i32 0, i32* %code, align 4
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc47, %for.end9
  %12 = load i32, i32* %j, align 4
  %cmp14 = icmp sle i32 %12, 16
  br i1 %cmp14, label %for.body16, label %for.end49

for.body16:                                       ; preds = %for.cond13
  %13 = load i32, i32* %k, align 4
  %14 = load i32, i32* %code, align 4
  %sub = sub i32 %13, %14
  %15 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %delta = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %15, i32 0, i32 5
  %16 = load i32, i32* %j, align 4
  %idxprom17 = sext i32 %16 to i64
  %arrayidx18 = getelementptr inbounds [17 x i32], [17 x i32]* %delta, i64 0, i64 %idxprom17
  store i32 %sub, i32* %arrayidx18, align 4
  %17 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %size19 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %17, i32 0, i32 3
  %18 = load i32, i32* %k, align 4
  %idxprom20 = sext i32 %18 to i64
  %arrayidx21 = getelementptr inbounds [257 x i8], [257 x i8]* %size19, i64 0, i64 %idxprom20
  %19 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %19 to i32
  %20 = load i32, i32* %j, align 4
  %cmp23 = icmp eq i32 %conv22, %20
  br i1 %cmp23, label %if.then, label %if.end41

if.then:                                          ; preds = %for.body16
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %21 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %size25 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %21, i32 0, i32 3
  %22 = load i32, i32* %k, align 4
  %idxprom26 = sext i32 %22 to i64
  %arrayidx27 = getelementptr inbounds [257 x i8], [257 x i8]* %size25, i64 0, i64 %idxprom26
  %23 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %23 to i32
  %24 = load i32, i32* %j, align 4
  %cmp29 = icmp eq i32 %conv28, %24
  br i1 %cmp29, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %25 = load i32, i32* %code, align 4
  %inc31 = add i32 %25, 1
  store i32 %inc31, i32* %code, align 4
  %conv32 = trunc i32 %25 to i16
  %26 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %code33 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %26, i32 0, i32 1
  %27 = load i32, i32* %k, align 4
  %inc34 = add nsw i32 %27, 1
  store i32 %inc34, i32* %k, align 4
  %idxprom35 = sext i32 %27 to i64
  %arrayidx36 = getelementptr inbounds [256 x i16], [256 x i16]* %code33, i64 0, i64 %idxprom35
  store i16 %conv32, i16* %arrayidx36, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %28 = load i32, i32* %code, align 4
  %sub37 = sub i32 %28, 1
  %29 = load i32, i32* %j, align 4
  %shl = shl i32 1, %29
  %cmp38 = icmp uge i32 %sub37, %shl
  br i1 %cmp38, label %if.then40, label %if.end

if.then40:                                        ; preds = %while.end
  %call = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i64 0, i64 0))
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end
  br label %if.end41

if.end41:                                         ; preds = %if.end, %for.body16
  %30 = load i32, i32* %code, align 4
  %31 = load i32, i32* %j, align 4
  %sub42 = sub nsw i32 16, %31
  %shl43 = shl i32 %30, %sub42
  %32 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %maxcode = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %32, i32 0, i32 4
  %33 = load i32, i32* %j, align 4
  %idxprom44 = sext i32 %33 to i64
  %arrayidx45 = getelementptr inbounds [18 x i32], [18 x i32]* %maxcode, i64 0, i64 %idxprom44
  store i32 %shl43, i32* %arrayidx45, align 4
  %34 = load i32, i32* %code, align 4
  %shl46 = shl i32 %34, 1
  store i32 %shl46, i32* %code, align 4
  br label %for.inc47

for.inc47:                                        ; preds = %if.end41
  %35 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %35, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond13

for.end49:                                        ; preds = %for.cond13
  %36 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %maxcode50 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %36, i32 0, i32 4
  %37 = load i32, i32* %j, align 4
  %idxprom51 = sext i32 %37 to i64
  %arrayidx52 = getelementptr inbounds [18 x i32], [18 x i32]* %maxcode50, i64 0, i64 %idxprom51
  store i32 -1, i32* %arrayidx52, align 4
  %38 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %fast = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %38, i32 0, i32 0
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %fast, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %arraydecay, i8 -1, i64 512, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc85, %for.end49
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %k, align 4
  %cmp54 = icmp slt i32 %39, %40
  br i1 %cmp54, label %for.body56, label %for.end87

for.body56:                                       ; preds = %for.cond53
  %41 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %size57 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %41, i32 0, i32 3
  %42 = load i32, i32* %i, align 4
  %idxprom58 = sext i32 %42 to i64
  %arrayidx59 = getelementptr inbounds [257 x i8], [257 x i8]* %size57, i64 0, i64 %idxprom58
  %43 = load i8, i8* %arrayidx59, align 1
  %conv60 = zext i8 %43 to i32
  store i32 %conv60, i32* %s, align 4
  %44 = load i32, i32* %s, align 4
  %cmp61 = icmp sle i32 %44, 9
  br i1 %cmp61, label %if.then63, label %if.end84

if.then63:                                        ; preds = %for.body56
  %45 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %code64 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %45, i32 0, i32 1
  %46 = load i32, i32* %i, align 4
  %idxprom65 = sext i32 %46 to i64
  %arrayidx66 = getelementptr inbounds [256 x i16], [256 x i16]* %code64, i64 0, i64 %idxprom65
  %47 = load i16, i16* %arrayidx66, align 2
  %conv67 = zext i16 %47 to i32
  %48 = load i32, i32* %s, align 4
  %sub68 = sub nsw i32 9, %48
  %shl69 = shl i32 %conv67, %sub68
  store i32 %shl69, i32* %c, align 4
  %49 = load i32, i32* %s, align 4
  %sub70 = sub nsw i32 9, %49
  %shl71 = shl i32 1, %sub70
  store i32 %shl71, i32* %m, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc81, %if.then63
  %50 = load i32, i32* %j, align 4
  %51 = load i32, i32* %m, align 4
  %cmp73 = icmp slt i32 %50, %51
  br i1 %cmp73, label %for.body75, label %for.end83

for.body75:                                       ; preds = %for.cond72
  %52 = load i32, i32* %i, align 4
  %conv76 = trunc i32 %52 to i8
  %53 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %fast77 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %53, i32 0, i32 0
  %54 = load i32, i32* %c, align 4
  %55 = load i32, i32* %j, align 4
  %add78 = add nsw i32 %54, %55
  %idxprom79 = sext i32 %add78 to i64
  %arrayidx80 = getelementptr inbounds [512 x i8], [512 x i8]* %fast77, i64 0, i64 %idxprom79
  store i8 %conv76, i8* %arrayidx80, align 1
  br label %for.inc81

for.inc81:                                        ; preds = %for.body75
  %56 = load i32, i32* %j, align 4
  %inc82 = add nsw i32 %56, 1
  store i32 %inc82, i32* %j, align 4
  br label %for.cond72

for.end83:                                        ; preds = %for.cond72
  br label %if.end84

if.end84:                                         ; preds = %for.end83, %for.body56
  br label %for.inc85

for.inc85:                                        ; preds = %if.end84
  %57 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %57, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond53

for.end87:                                        ; preds = %for.cond53
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end87, %if.then40
  %58 = load i32, i32* %retval, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__build_fast_ac(i16* %fast_ac, %struct.stbi__huffman* %h) #0 {
entry:
  %fast_ac.addr = alloca i16*, align 8
  %h.addr = alloca %struct.stbi__huffman*, align 8
  %i = alloca i32, align 4
  %fast = alloca i8, align 1
  %rs = alloca i32, align 4
  %run = alloca i32, align 4
  %magbits = alloca i32, align 4
  %len = alloca i32, align 4
  %k = alloca i32, align 4
  %m = alloca i32, align 4
  store i16* %fast_ac, i16** %fast_ac.addr, align 8
  store %struct.stbi__huffman* %h, %struct.stbi__huffman** %h.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 512
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %fast1 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %1, i32 0, i32 0
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [512 x i8], [512 x i8]* %fast1, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  store i8 %3, i8* %fast, align 1
  %4 = load i16*, i16** %fast_ac.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %5 to i64
  %arrayidx3 = getelementptr inbounds i16, i16* %4, i64 %idxprom2
  store i16 0, i16* %arrayidx3, align 2
  %6 = load i8, i8* %fast, align 1
  %conv = zext i8 %6 to i32
  %cmp4 = icmp slt i32 %conv, 255
  br i1 %cmp4, label %if.then, label %if.end41

if.then:                                          ; preds = %for.body
  %7 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %values = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %7, i32 0, i32 2
  %8 = load i8, i8* %fast, align 1
  %idxprom6 = zext i8 %8 to i64
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %values, i64 0, i64 %idxprom6
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  store i32 %conv8, i32* %rs, align 4
  %10 = load i32, i32* %rs, align 4
  %shr = ashr i32 %10, 4
  %and = and i32 %shr, 15
  store i32 %and, i32* %run, align 4
  %11 = load i32, i32* %rs, align 4
  %and9 = and i32 %11, 15
  store i32 %and9, i32* %magbits, align 4
  %12 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %size = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %12, i32 0, i32 3
  %13 = load i8, i8* %fast, align 1
  %idxprom10 = zext i8 %13 to i64
  %arrayidx11 = getelementptr inbounds [257 x i8], [257 x i8]* %size, i64 0, i64 %idxprom10
  %14 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %14 to i32
  store i32 %conv12, i32* %len, align 4
  %15 = load i32, i32* %magbits, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %land.lhs.true, label %if.end40

land.lhs.true:                                    ; preds = %if.then
  %16 = load i32, i32* %len, align 4
  %17 = load i32, i32* %magbits, align 4
  %add = add nsw i32 %16, %17
  %cmp13 = icmp sle i32 %add, 9
  br i1 %cmp13, label %if.then15, label %if.end40

if.then15:                                        ; preds = %land.lhs.true
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %len, align 4
  %shl = shl i32 %18, %19
  %and16 = and i32 %shl, 511
  %20 = load i32, i32* %magbits, align 4
  %sub = sub nsw i32 9, %20
  %shr17 = ashr i32 %and16, %sub
  store i32 %shr17, i32* %k, align 4
  %21 = load i32, i32* %magbits, align 4
  %sub18 = sub nsw i32 %21, 1
  %shl19 = shl i32 1, %sub18
  store i32 %shl19, i32* %m, align 4
  %22 = load i32, i32* %k, align 4
  %23 = load i32, i32* %m, align 4
  %cmp20 = icmp slt i32 %22, %23
  br i1 %cmp20, label %if.then22, label %if.end

if.then22:                                        ; preds = %if.then15
  %24 = load i32, i32* %magbits, align 4
  %shl23 = shl i32 -1, %24
  %add24 = add i32 %shl23, 1
  %25 = load i32, i32* %k, align 4
  %add25 = add i32 %25, %add24
  store i32 %add25, i32* %k, align 4
  br label %if.end

if.end:                                           ; preds = %if.then22, %if.then15
  %26 = load i32, i32* %k, align 4
  %cmp26 = icmp sge i32 %26, -128
  br i1 %cmp26, label %land.lhs.true28, label %if.end39

land.lhs.true28:                                  ; preds = %if.end
  %27 = load i32, i32* %k, align 4
  %cmp29 = icmp sle i32 %27, 127
  br i1 %cmp29, label %if.then31, label %if.end39

if.then31:                                        ; preds = %land.lhs.true28
  %28 = load i32, i32* %k, align 4
  %mul = mul nsw i32 %28, 256
  %29 = load i32, i32* %run, align 4
  %mul32 = mul nsw i32 %29, 16
  %add33 = add nsw i32 %mul, %mul32
  %30 = load i32, i32* %len, align 4
  %31 = load i32, i32* %magbits, align 4
  %add34 = add nsw i32 %30, %31
  %add35 = add nsw i32 %add33, %add34
  %conv36 = trunc i32 %add35 to i16
  %32 = load i16*, i16** %fast_ac.addr, align 8
  %33 = load i32, i32* %i, align 4
  %idxprom37 = sext i32 %33 to i64
  %arrayidx38 = getelementptr inbounds i16, i16* %32, i64 %idxprom37
  store i16 %conv36, i16* %arrayidx38, align 2
  br label %if.end39

if.end39:                                         ; preds = %if.then31, %land.lhs.true28, %if.end
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %land.lhs.true, %if.then
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end41
  %34 = load i32, i32* %i, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__jpeg_reset(%struct.stbi__jpeg* %j) #0 {
entry:
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 13
  store i32 0, i32* %code_bits, align 4
  %1 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %1, i32 0, i32 12
  store i32 0, i32* %code_buffer, align 8
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %nomore = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 15
  store i32 0, i32* %nomore, align 4
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %img_comp = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %3, i32 0, i32 11
  %arrayidx = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp, i64 0, i64 3
  %dc_pred = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 6
  store i32 0, i32* %dc_pred, align 8
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %img_comp1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %4, i32 0, i32 11
  %arrayidx2 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp1, i64 0, i64 2
  %dc_pred3 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx2, i32 0, i32 6
  store i32 0, i32* %dc_pred3, align 8
  %5 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %img_comp4 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %5, i32 0, i32 11
  %arrayidx5 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp4, i64 0, i64 1
  %dc_pred6 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx5, i32 0, i32 6
  store i32 0, i32* %dc_pred6, align 8
  %6 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %img_comp7 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %6, i32 0, i32 11
  %arrayidx8 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp7, i64 0, i64 0
  %dc_pred9 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx8, i32 0, i32 6
  store i32 0, i32* %dc_pred9, align 8
  %7 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %marker = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %7, i32 0, i32 14
  store i8 -1, i8* %marker, align 8
  %8 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %restart_interval = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %8, i32 0, i32 27
  %9 = load i32, i32* %restart_interval, align 8
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %10 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %restart_interval10 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %10, i32 0, i32 27
  %11 = load i32, i32* %restart_interval10, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ 2147483647, %cond.false ]
  %12 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %todo = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %12, i32 0, i32 28
  store i32 %cond, i32* %todo, align 4
  %13 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %eob_run = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %13, i32 0, i32 21
  store i32 0, i32* %eob_run, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__jpeg_decode_block(%struct.stbi__jpeg* %j, i16* %data, %struct.stbi__huffman* %hdc, %struct.stbi__huffman* %hac, i16* %fac, i32 %b, i16* %dequant) #0 {
entry:
  %retval = alloca i32, align 4
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %data.addr = alloca i16*, align 8
  %hdc.addr = alloca %struct.stbi__huffman*, align 8
  %hac.addr = alloca %struct.stbi__huffman*, align 8
  %fac.addr = alloca i16*, align 8
  %b.addr = alloca i32, align 4
  %dequant.addr = alloca i16*, align 8
  %diff = alloca i32, align 4
  %dc = alloca i32, align 4
  %k = alloca i32, align 4
  %t = alloca i32, align 4
  %zig = alloca i32, align 4
  %c = alloca i32, align 4
  %r = alloca i32, align 4
  %s = alloca i32, align 4
  %rs = alloca i32, align 4
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  store i16* %data, i16** %data.addr, align 8
  store %struct.stbi__huffman* %hdc, %struct.stbi__huffman** %hdc.addr, align 8
  store %struct.stbi__huffman* %hac, %struct.stbi__huffman** %hac.addr, align 8
  store i16* %fac, i16** %fac.addr, align 8
  store i32 %b, i32* %b.addr, align 4
  store i16* %dequant, i16** %dequant.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 13
  %1 = load i32, i32* %code_bits, align 4
  %cmp = icmp slt i32 %1, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %4 = load %struct.stbi__huffman*, %struct.stbi__huffman** %hdc.addr, align 8
  %call = call i32 @stbi__jpeg_huff_decode(%struct.stbi__jpeg* %3, %struct.stbi__huffman* %4)
  store i32 %call, i32* %t, align 4
  %5 = load i32, i32* %t, align 4
  %cmp1 = icmp slt i32 %5, 0
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %call3 = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.62, i64 0, i64 0))
  store i32 %call3, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %6 = load i16*, i16** %data.addr, align 8
  %7 = bitcast i16* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %7, i8 0, i64 128, i1 false)
  %8 = load i32, i32* %t, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %9 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %10 = load i32, i32* %t, align 4
  %call5 = call i32 @stbi__extend_receive(%struct.stbi__jpeg* %9, i32 %10)
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call5, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %diff, align 4
  %11 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %img_comp = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %11, i32 0, i32 11
  %12 = load i32, i32* %b.addr, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp, i64 0, i64 %idxprom
  %dc_pred = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 6
  %13 = load i32, i32* %dc_pred, align 8
  %14 = load i32, i32* %diff, align 4
  %add = add nsw i32 %13, %14
  store i32 %add, i32* %dc, align 4
  %15 = load i32, i32* %dc, align 4
  %16 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %img_comp6 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %16, i32 0, i32 11
  %17 = load i32, i32* %b.addr, align 4
  %idxprom7 = sext i32 %17 to i64
  %arrayidx8 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp6, i64 0, i64 %idxprom7
  %dc_pred9 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx8, i32 0, i32 6
  store i32 %15, i32* %dc_pred9, align 8
  %18 = load i32, i32* %dc, align 4
  %19 = load i16*, i16** %dequant.addr, align 8
  %arrayidx10 = getelementptr inbounds i16, i16* %19, i64 0
  %20 = load i16, i16* %arrayidx10, align 2
  %conv = zext i16 %20 to i32
  %mul = mul nsw i32 %18, %conv
  %conv11 = trunc i32 %mul to i16
  %21 = load i16*, i16** %data.addr, align 8
  %arrayidx12 = getelementptr inbounds i16, i16* %21, i64 0
  store i16 %conv11, i16* %arrayidx12, align 2
  store i32 1, i32* %k, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %cond.end
  %22 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits13 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %22, i32 0, i32 13
  %23 = load i32, i32* %code_bits13, align 4
  %cmp14 = icmp slt i32 %23, 16
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %do.body
  %24 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %24)
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %do.body
  %25 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %25, i32 0, i32 12
  %26 = load i32, i32* %code_buffer, align 8
  %shr = lshr i32 %26, 23
  %and = and i32 %shr, 511
  store i32 %and, i32* %c, align 4
  %27 = load i16*, i16** %fac.addr, align 8
  %28 = load i32, i32* %c, align 4
  %idxprom18 = sext i32 %28 to i64
  %arrayidx19 = getelementptr inbounds i16, i16* %27, i64 %idxprom18
  %29 = load i16, i16* %arrayidx19, align 2
  %conv20 = sext i16 %29 to i32
  store i32 %conv20, i32* %r, align 4
  %30 = load i32, i32* %r, align 4
  %tobool21 = icmp ne i32 %30, 0
  br i1 %tobool21, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.end17
  %31 = load i32, i32* %r, align 4
  %shr23 = ashr i32 %31, 4
  %and24 = and i32 %shr23, 15
  %32 = load i32, i32* %k, align 4
  %add25 = add nsw i32 %32, %and24
  store i32 %add25, i32* %k, align 4
  %33 = load i32, i32* %r, align 4
  %and26 = and i32 %33, 15
  store i32 %and26, i32* %s, align 4
  %34 = load i32, i32* %s, align 4
  %35 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer27 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %35, i32 0, i32 12
  %36 = load i32, i32* %code_buffer27, align 8
  %shl = shl i32 %36, %34
  store i32 %shl, i32* %code_buffer27, align 8
  %37 = load i32, i32* %s, align 4
  %38 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits28 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %38, i32 0, i32 13
  %39 = load i32, i32* %code_bits28, align 4
  %sub = sub nsw i32 %39, %37
  store i32 %sub, i32* %code_bits28, align 4
  %40 = load i32, i32* %k, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %k, align 4
  %idxprom29 = sext i32 %40 to i64
  %arrayidx30 = getelementptr inbounds [79 x i8], [79 x i8]* @stbi__jpeg_dezigzag, i64 0, i64 %idxprom29
  %41 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %41 to i32
  store i32 %conv31, i32* %zig, align 4
  %42 = load i32, i32* %r, align 4
  %shr32 = ashr i32 %42, 8
  %43 = load i16*, i16** %dequant.addr, align 8
  %44 = load i32, i32* %zig, align 4
  %idxprom33 = zext i32 %44 to i64
  %arrayidx34 = getelementptr inbounds i16, i16* %43, i64 %idxprom33
  %45 = load i16, i16* %arrayidx34, align 2
  %conv35 = zext i16 %45 to i32
  %mul36 = mul nsw i32 %shr32, %conv35
  %conv37 = trunc i32 %mul36 to i16
  %46 = load i16*, i16** %data.addr, align 8
  %47 = load i32, i32* %zig, align 4
  %idxprom38 = zext i32 %47 to i64
  %arrayidx39 = getelementptr inbounds i16, i16* %46, i64 %idxprom38
  store i16 %conv37, i16* %arrayidx39, align 2
  br label %if.end71

if.else:                                          ; preds = %if.end17
  %48 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %49 = load %struct.stbi__huffman*, %struct.stbi__huffman** %hac.addr, align 8
  %call40 = call i32 @stbi__jpeg_huff_decode(%struct.stbi__jpeg* %48, %struct.stbi__huffman* %49)
  store i32 %call40, i32* %rs, align 4
  %50 = load i32, i32* %rs, align 4
  %cmp41 = icmp slt i32 %50, 0
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %if.else
  %call44 = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.62, i64 0, i64 0))
  store i32 %call44, i32* %retval, align 4
  br label %return

if.end45:                                         ; preds = %if.else
  %51 = load i32, i32* %rs, align 4
  %and46 = and i32 %51, 15
  store i32 %and46, i32* %s, align 4
  %52 = load i32, i32* %rs, align 4
  %shr47 = ashr i32 %52, 4
  store i32 %shr47, i32* %r, align 4
  %53 = load i32, i32* %s, align 4
  %cmp48 = icmp eq i32 %53, 0
  br i1 %cmp48, label %if.then50, label %if.else56

if.then50:                                        ; preds = %if.end45
  %54 = load i32, i32* %rs, align 4
  %cmp51 = icmp ne i32 %54, 240
  br i1 %cmp51, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.then50
  br label %do.end

if.end54:                                         ; preds = %if.then50
  %55 = load i32, i32* %k, align 4
  %add55 = add nsw i32 %55, 16
  store i32 %add55, i32* %k, align 4
  br label %if.end70

if.else56:                                        ; preds = %if.end45
  %56 = load i32, i32* %r, align 4
  %57 = load i32, i32* %k, align 4
  %add57 = add nsw i32 %57, %56
  store i32 %add57, i32* %k, align 4
  %58 = load i32, i32* %k, align 4
  %inc58 = add nsw i32 %58, 1
  store i32 %inc58, i32* %k, align 4
  %idxprom59 = sext i32 %58 to i64
  %arrayidx60 = getelementptr inbounds [79 x i8], [79 x i8]* @stbi__jpeg_dezigzag, i64 0, i64 %idxprom59
  %59 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %59 to i32
  store i32 %conv61, i32* %zig, align 4
  %60 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %61 = load i32, i32* %s, align 4
  %call62 = call i32 @stbi__extend_receive(%struct.stbi__jpeg* %60, i32 %61)
  %62 = load i16*, i16** %dequant.addr, align 8
  %63 = load i32, i32* %zig, align 4
  %idxprom63 = zext i32 %63 to i64
  %arrayidx64 = getelementptr inbounds i16, i16* %62, i64 %idxprom63
  %64 = load i16, i16* %arrayidx64, align 2
  %conv65 = zext i16 %64 to i32
  %mul66 = mul nsw i32 %call62, %conv65
  %conv67 = trunc i32 %mul66 to i16
  %65 = load i16*, i16** %data.addr, align 8
  %66 = load i32, i32* %zig, align 4
  %idxprom68 = zext i32 %66 to i64
  %arrayidx69 = getelementptr inbounds i16, i16* %65, i64 %idxprom68
  store i16 %conv67, i16* %arrayidx69, align 2
  br label %if.end70

if.end70:                                         ; preds = %if.else56, %if.end54
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.then22
  br label %do.cond

do.cond:                                          ; preds = %if.end71
  %67 = load i32, i32* %k, align 4
  %cmp72 = icmp slt i32 %67, 64
  br i1 %cmp72, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then53
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then43, %if.then2
  %68 = load i32, i32* %retval, align 4
  ret i32 %68
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %j) #0 {
entry:
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %nomore = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 15
  %1 = load i32, i32* %nomore, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 0
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %3)
  %conv = zext i8 %call to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %conv, %cond.false ]
  store i32 %cond, i32* %b, align 4
  %4 = load i32, i32* %b, align 4
  %cmp = icmp eq i32 %4, 255
  br i1 %cmp, label %if.then, label %if.end15

if.then:                                          ; preds = %cond.end
  %5 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s2 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %5, i32 0, i32 0
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s2, align 8
  %call3 = call zeroext i8 @stbi__get8(%struct.stbi__context* %6)
  %conv4 = zext i8 %call3 to i32
  store i32 %conv4, i32* %c, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i32, i32* %c, align 4
  %cmp5 = icmp eq i32 %7, 255
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s7 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %8, i32 0, i32 0
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s7, align 8
  %call8 = call zeroext i8 @stbi__get8(%struct.stbi__context* %9)
  %conv9 = zext i8 %call8 to i32
  store i32 %conv9, i32* %c, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %c, align 4
  %cmp10 = icmp ne i32 %10, 0
  br i1 %cmp10, label %if.then12, label %if.end

if.then12:                                        ; preds = %while.end
  %11 = load i32, i32* %c, align 4
  %conv13 = trunc i32 %11 to i8
  %12 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %marker = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %12, i32 0, i32 14
  store i8 %conv13, i8* %marker, align 8
  %13 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %nomore14 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %13, i32 0, i32 15
  store i32 1, i32* %nomore14, align 4
  br label %do.end

if.end:                                           ; preds = %while.end
  br label %if.end15

if.end15:                                         ; preds = %if.end, %cond.end
  %14 = load i32, i32* %b, align 4
  %15 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %15, i32 0, i32 13
  %16 = load i32, i32* %code_bits, align 4
  %sub = sub nsw i32 24, %16
  %shl = shl i32 %14, %sub
  %17 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %17, i32 0, i32 12
  %18 = load i32, i32* %code_buffer, align 8
  %or = or i32 %18, %shl
  store i32 %or, i32* %code_buffer, align 8
  %19 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits16 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %19, i32 0, i32 13
  %20 = load i32, i32* %code_bits16, align 4
  %add = add nsw i32 %20, 8
  store i32 %add, i32* %code_bits16, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end15
  %21 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits17 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %21, i32 0, i32 13
  %22 = load i32, i32* %code_bits17, align 4
  %cmp18 = icmp sle i32 %22, 24
  br i1 %cmp18, label %do.body, label %do.end

do.end:                                           ; preds = %if.then12, %do.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__jpeg_decode_block_prog_dc(%struct.stbi__jpeg* %j, i16* %data, %struct.stbi__huffman* %hdc, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %data.addr = alloca i16*, align 8
  %hdc.addr = alloca %struct.stbi__huffman*, align 8
  %b.addr = alloca i32, align 4
  %diff = alloca i32, align 4
  %dc = alloca i32, align 4
  %t = alloca i32, align 4
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  store i16* %data, i16** %data.addr, align 8
  store %struct.stbi__huffman* %hdc, %struct.stbi__huffman** %hdc.addr, align 8
  store i32 %b, i32* %b.addr, align 4
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %spec_end = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 18
  %1 = load i32, i32* %spec_end, align 8
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @stbi__err(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.64, i64 0, i64 0))
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 13
  %3 = load i32, i32* %code_bits, align 4
  %cmp1 = icmp slt i32 %3, 16
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %4)
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %5 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %succ_high = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %5, i32 0, i32 19
  %6 = load i32, i32* %succ_high, align 4
  %cmp4 = icmp eq i32 %6, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end3
  %7 = load i16*, i16** %data.addr, align 8
  %8 = bitcast i16* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %8, i8 0, i64 128, i1 false)
  %9 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %10 = load %struct.stbi__huffman*, %struct.stbi__huffman** %hdc.addr, align 8
  %call6 = call i32 @stbi__jpeg_huff_decode(%struct.stbi__jpeg* %9, %struct.stbi__huffman* %10)
  store i32 %call6, i32* %t, align 4
  %11 = load i32, i32* %t, align 4
  %cmp7 = icmp eq i32 %11, -1
  br i1 %cmp7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.then5
  %call9 = call i32 @stbi__err(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.64, i64 0, i64 0))
  store i32 %call9, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.then5
  %12 = load i32, i32* %t, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end10
  %13 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %14 = load i32, i32* %t, align 4
  %call11 = call i32 @stbi__extend_receive(%struct.stbi__jpeg* %13, i32 %14)
  br label %cond.end

cond.false:                                       ; preds = %if.end10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call11, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %diff, align 4
  %15 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %img_comp = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %15, i32 0, i32 11
  %16 = load i32, i32* %b.addr, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp, i64 0, i64 %idxprom
  %dc_pred = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 6
  %17 = load i32, i32* %dc_pred, align 8
  %18 = load i32, i32* %diff, align 4
  %add = add nsw i32 %17, %18
  store i32 %add, i32* %dc, align 4
  %19 = load i32, i32* %dc, align 4
  %20 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %img_comp12 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %20, i32 0, i32 11
  %21 = load i32, i32* %b.addr, align 4
  %idxprom13 = sext i32 %21 to i64
  %arrayidx14 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp12, i64 0, i64 %idxprom13
  %dc_pred15 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx14, i32 0, i32 6
  store i32 %19, i32* %dc_pred15, align 8
  %22 = load i32, i32* %dc, align 4
  %23 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %succ_low = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %23, i32 0, i32 20
  %24 = load i32, i32* %succ_low, align 8
  %shl = shl i32 %22, %24
  %conv = trunc i32 %shl to i16
  %25 = load i16*, i16** %data.addr, align 8
  %arrayidx16 = getelementptr inbounds i16, i16* %25, i64 0
  store i16 %conv, i16* %arrayidx16, align 2
  br label %if.end29

if.else:                                          ; preds = %if.end3
  %26 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %call17 = call i32 @stbi__jpeg_get_bit(%struct.stbi__jpeg* %26)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then19, label %if.end28

if.then19:                                        ; preds = %if.else
  %27 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %succ_low20 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %27, i32 0, i32 20
  %28 = load i32, i32* %succ_low20, align 8
  %shl21 = shl i32 1, %28
  %conv22 = trunc i32 %shl21 to i16
  %conv23 = sext i16 %conv22 to i32
  %29 = load i16*, i16** %data.addr, align 8
  %arrayidx24 = getelementptr inbounds i16, i16* %29, i64 0
  %30 = load i16, i16* %arrayidx24, align 2
  %conv25 = sext i16 %30 to i32
  %add26 = add nsw i32 %conv25, %conv23
  %conv27 = trunc i32 %add26 to i16
  store i16 %conv27, i16* %arrayidx24, align 2
  br label %if.end28

if.end28:                                         ; preds = %if.then19, %if.else
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %cond.end
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end29, %if.then8, %if.then
  %31 = load i32, i32* %retval, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__jpeg_decode_block_prog_ac(%struct.stbi__jpeg* %j, i16* %data, %struct.stbi__huffman* %hac, i16* %fac) #0 {
entry:
  %retval = alloca i32, align 4
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %data.addr = alloca i16*, align 8
  %hac.addr = alloca %struct.stbi__huffman*, align 8
  %fac.addr = alloca i16*, align 8
  %k = alloca i32, align 4
  %shift = alloca i32, align 4
  %zig = alloca i32, align 4
  %c = alloca i32, align 4
  %r = alloca i32, align 4
  %s = alloca i32, align 4
  %rs = alloca i32, align 4
  %bit = alloca i16, align 2
  %p = alloca i16*, align 8
  %r117 = alloca i32, align 4
  %s118 = alloca i32, align 4
  %rs119 = alloca i32, align 4
  %p163 = alloca i16*, align 8
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  store i16* %data, i16** %data.addr, align 8
  store %struct.stbi__huffman* %hac, %struct.stbi__huffman** %hac.addr, align 8
  store i16* %fac, i16** %fac.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %spec_start = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 17
  %1 = load i32, i32* %spec_start, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @stbi__err(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.64, i64 0, i64 0))
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %succ_high = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 19
  %3 = load i32, i32* %succ_high, align 4
  %cmp1 = icmp eq i32 %3, 0
  br i1 %cmp1, label %if.then2, label %if.else66

if.then2:                                         ; preds = %if.end
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %succ_low = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %4, i32 0, i32 20
  %5 = load i32, i32* %succ_low, align 8
  store i32 %5, i32* %shift, align 4
  %6 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %eob_run = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %6, i32 0, i32 21
  %7 = load i32, i32* %eob_run, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.then2
  %8 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %eob_run4 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %8, i32 0, i32 21
  %9 = load i32, i32* %eob_run4, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %eob_run4, align 4
  store i32 1, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %if.then2
  %10 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %spec_start6 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %10, i32 0, i32 17
  %11 = load i32, i32* %spec_start6, align 4
  store i32 %11, i32* %k, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end5
  %12 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %12, i32 0, i32 13
  %13 = load i32, i32* %code_bits, align 4
  %cmp7 = icmp slt i32 %13, 16
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %do.body
  %14 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %14)
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %do.body
  %15 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %15, i32 0, i32 12
  %16 = load i32, i32* %code_buffer, align 8
  %shr = lshr i32 %16, 23
  %and = and i32 %shr, 511
  store i32 %and, i32* %c, align 4
  %17 = load i16*, i16** %fac.addr, align 8
  %18 = load i32, i32* %c, align 4
  %idxprom = sext i32 %18 to i64
  %arrayidx = getelementptr inbounds i16, i16* %17, i64 %idxprom
  %19 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %19 to i32
  store i32 %conv, i32* %r, align 4
  %20 = load i32, i32* %r, align 4
  %tobool10 = icmp ne i32 %20, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end9
  %21 = load i32, i32* %r, align 4
  %shr12 = ashr i32 %21, 4
  %and13 = and i32 %shr12, 15
  %22 = load i32, i32* %k, align 4
  %add = add nsw i32 %22, %and13
  store i32 %add, i32* %k, align 4
  %23 = load i32, i32* %r, align 4
  %and14 = and i32 %23, 15
  store i32 %and14, i32* %s, align 4
  %24 = load i32, i32* %s, align 4
  %25 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer15 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %25, i32 0, i32 12
  %26 = load i32, i32* %code_buffer15, align 8
  %shl = shl i32 %26, %24
  store i32 %shl, i32* %code_buffer15, align 8
  %27 = load i32, i32* %s, align 4
  %28 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits16 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %28, i32 0, i32 13
  %29 = load i32, i32* %code_bits16, align 4
  %sub = sub nsw i32 %29, %27
  store i32 %sub, i32* %code_bits16, align 4
  %30 = load i32, i32* %k, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %k, align 4
  %idxprom17 = sext i32 %30 to i64
  %arrayidx18 = getelementptr inbounds [79 x i8], [79 x i8]* @stbi__jpeg_dezigzag, i64 0, i64 %idxprom17
  %31 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %31 to i32
  store i32 %conv19, i32* %zig, align 4
  %32 = load i32, i32* %r, align 4
  %shr20 = ashr i32 %32, 8
  %33 = load i32, i32* %shift, align 4
  %shl21 = shl i32 %shr20, %33
  %conv22 = trunc i32 %shl21 to i16
  %34 = load i16*, i16** %data.addr, align 8
  %35 = load i32, i32* %zig, align 4
  %idxprom23 = zext i32 %35 to i64
  %arrayidx24 = getelementptr inbounds i16, i16* %34, i64 %idxprom23
  store i16 %conv22, i16* %arrayidx24, align 2
  br label %if.end63

if.else:                                          ; preds = %if.end9
  %36 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %37 = load %struct.stbi__huffman*, %struct.stbi__huffman** %hac.addr, align 8
  %call25 = call i32 @stbi__jpeg_huff_decode(%struct.stbi__jpeg* %36, %struct.stbi__huffman* %37)
  store i32 %call25, i32* %rs, align 4
  %38 = load i32, i32* %rs, align 4
  %cmp26 = icmp slt i32 %38, 0
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %if.else
  %call29 = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.62, i64 0, i64 0))
  store i32 %call29, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.else
  %39 = load i32, i32* %rs, align 4
  %and31 = and i32 %39, 15
  store i32 %and31, i32* %s, align 4
  %40 = load i32, i32* %rs, align 4
  %shr32 = ashr i32 %40, 4
  store i32 %shr32, i32* %r, align 4
  %41 = load i32, i32* %s, align 4
  %cmp33 = icmp eq i32 %41, 0
  br i1 %cmp33, label %if.then35, label %if.else51

if.then35:                                        ; preds = %if.end30
  %42 = load i32, i32* %r, align 4
  %cmp36 = icmp slt i32 %42, 15
  br i1 %cmp36, label %if.then38, label %if.end49

if.then38:                                        ; preds = %if.then35
  %43 = load i32, i32* %r, align 4
  %shl39 = shl i32 1, %43
  %44 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %eob_run40 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %44, i32 0, i32 21
  store i32 %shl39, i32* %eob_run40, align 4
  %45 = load i32, i32* %r, align 4
  %tobool41 = icmp ne i32 %45, 0
  br i1 %tobool41, label %if.then42, label %if.end46

if.then42:                                        ; preds = %if.then38
  %46 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %47 = load i32, i32* %r, align 4
  %call43 = call i32 @stbi__jpeg_get_bits(%struct.stbi__jpeg* %46, i32 %47)
  %48 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %eob_run44 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %48, i32 0, i32 21
  %49 = load i32, i32* %eob_run44, align 4
  %add45 = add nsw i32 %49, %call43
  store i32 %add45, i32* %eob_run44, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then42, %if.then38
  %50 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %eob_run47 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %50, i32 0, i32 21
  %51 = load i32, i32* %eob_run47, align 4
  %dec48 = add nsw i32 %51, -1
  store i32 %dec48, i32* %eob_run47, align 4
  br label %do.end

if.end49:                                         ; preds = %if.then35
  %52 = load i32, i32* %k, align 4
  %add50 = add nsw i32 %52, 16
  store i32 %add50, i32* %k, align 4
  br label %if.end62

if.else51:                                        ; preds = %if.end30
  %53 = load i32, i32* %r, align 4
  %54 = load i32, i32* %k, align 4
  %add52 = add nsw i32 %54, %53
  store i32 %add52, i32* %k, align 4
  %55 = load i32, i32* %k, align 4
  %inc53 = add nsw i32 %55, 1
  store i32 %inc53, i32* %k, align 4
  %idxprom54 = sext i32 %55 to i64
  %arrayidx55 = getelementptr inbounds [79 x i8], [79 x i8]* @stbi__jpeg_dezigzag, i64 0, i64 %idxprom54
  %56 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %56 to i32
  store i32 %conv56, i32* %zig, align 4
  %57 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %58 = load i32, i32* %s, align 4
  %call57 = call i32 @stbi__extend_receive(%struct.stbi__jpeg* %57, i32 %58)
  %59 = load i32, i32* %shift, align 4
  %shl58 = shl i32 %call57, %59
  %conv59 = trunc i32 %shl58 to i16
  %60 = load i16*, i16** %data.addr, align 8
  %61 = load i32, i32* %zig, align 4
  %idxprom60 = zext i32 %61 to i64
  %arrayidx61 = getelementptr inbounds i16, i16* %60, i64 %idxprom60
  store i16 %conv59, i16* %arrayidx61, align 2
  br label %if.end62

if.end62:                                         ; preds = %if.else51, %if.end49
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then11
  br label %do.cond

do.cond:                                          ; preds = %if.end63
  %62 = load i32, i32* %k, align 4
  %63 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %spec_end = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %63, i32 0, i32 18
  %64 = load i32, i32* %spec_end, align 8
  %cmp64 = icmp sle i32 %62, %64
  br i1 %cmp64, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.end46
  br label %if.end212

if.else66:                                        ; preds = %if.end
  %65 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %succ_low67 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %65, i32 0, i32 20
  %66 = load i32, i32* %succ_low67, align 8
  %shl68 = shl i32 1, %66
  %conv69 = trunc i32 %shl68 to i16
  store i16 %conv69, i16* %bit, align 2
  %67 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %eob_run70 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %67, i32 0, i32 21
  %68 = load i32, i32* %eob_run70, align 4
  %tobool71 = icmp ne i32 %68, 0
  br i1 %tobool71, label %if.then72, label %if.else114

if.then72:                                        ; preds = %if.else66
  %69 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %eob_run73 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %69, i32 0, i32 21
  %70 = load i32, i32* %eob_run73, align 4
  %dec74 = add nsw i32 %70, -1
  store i32 %dec74, i32* %eob_run73, align 4
  %71 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %spec_start75 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %71, i32 0, i32 17
  %72 = load i32, i32* %spec_start75, align 4
  store i32 %72, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then72
  %73 = load i32, i32* %k, align 4
  %74 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %spec_end76 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %74, i32 0, i32 18
  %75 = load i32, i32* %spec_end76, align 8
  %cmp77 = icmp sle i32 %73, %75
  br i1 %cmp77, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %76 = load i16*, i16** %data.addr, align 8
  %77 = load i32, i32* %k, align 4
  %idxprom79 = sext i32 %77 to i64
  %arrayidx80 = getelementptr inbounds [79 x i8], [79 x i8]* @stbi__jpeg_dezigzag, i64 0, i64 %idxprom79
  %78 = load i8, i8* %arrayidx80, align 1
  %idxprom81 = zext i8 %78 to i64
  %arrayidx82 = getelementptr inbounds i16, i16* %76, i64 %idxprom81
  store i16* %arrayidx82, i16** %p, align 8
  %79 = load i16*, i16** %p, align 8
  %80 = load i16, i16* %79, align 2
  %conv83 = sext i16 %80 to i32
  %cmp84 = icmp ne i32 %conv83, 0
  br i1 %cmp84, label %if.then86, label %if.end112

if.then86:                                        ; preds = %for.body
  %81 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %call87 = call i32 @stbi__jpeg_get_bit(%struct.stbi__jpeg* %81)
  %tobool88 = icmp ne i32 %call87, 0
  br i1 %tobool88, label %if.then89, label %if.end111

if.then89:                                        ; preds = %if.then86
  %82 = load i16*, i16** %p, align 8
  %83 = load i16, i16* %82, align 2
  %conv90 = sext i16 %83 to i32
  %84 = load i16, i16* %bit, align 2
  %conv91 = sext i16 %84 to i32
  %and92 = and i32 %conv90, %conv91
  %cmp93 = icmp eq i32 %and92, 0
  br i1 %cmp93, label %if.then95, label %if.end110

if.then95:                                        ; preds = %if.then89
  %85 = load i16*, i16** %p, align 8
  %86 = load i16, i16* %85, align 2
  %conv96 = sext i16 %86 to i32
  %cmp97 = icmp sgt i32 %conv96, 0
  br i1 %cmp97, label %if.then99, label %if.else104

if.then99:                                        ; preds = %if.then95
  %87 = load i16, i16* %bit, align 2
  %conv100 = sext i16 %87 to i32
  %88 = load i16*, i16** %p, align 8
  %89 = load i16, i16* %88, align 2
  %conv101 = sext i16 %89 to i32
  %add102 = add nsw i32 %conv101, %conv100
  %conv103 = trunc i32 %add102 to i16
  store i16 %conv103, i16* %88, align 2
  br label %if.end109

if.else104:                                       ; preds = %if.then95
  %90 = load i16, i16* %bit, align 2
  %conv105 = sext i16 %90 to i32
  %91 = load i16*, i16** %p, align 8
  %92 = load i16, i16* %91, align 2
  %conv106 = sext i16 %92 to i32
  %sub107 = sub nsw i32 %conv106, %conv105
  %conv108 = trunc i32 %sub107 to i16
  store i16 %conv108, i16* %91, align 2
  br label %if.end109

if.end109:                                        ; preds = %if.else104, %if.then99
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.then89
  br label %if.end111

if.end111:                                        ; preds = %if.end110, %if.then86
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end112
  %93 = load i32, i32* %k, align 4
  %inc113 = add nsw i32 %93, 1
  store i32 %inc113, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end211

if.else114:                                       ; preds = %if.else66
  %94 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %spec_start115 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %94, i32 0, i32 17
  %95 = load i32, i32* %spec_start115, align 4
  store i32 %95, i32* %k, align 4
  br label %do.body116

do.body116:                                       ; preds = %do.cond206, %if.else114
  %96 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %97 = load %struct.stbi__huffman*, %struct.stbi__huffman** %hac.addr, align 8
  %call120 = call i32 @stbi__jpeg_huff_decode(%struct.stbi__jpeg* %96, %struct.stbi__huffman* %97)
  store i32 %call120, i32* %rs119, align 4
  %98 = load i32, i32* %rs119, align 4
  %cmp121 = icmp slt i32 %98, 0
  br i1 %cmp121, label %if.then123, label %if.end125

if.then123:                                       ; preds = %do.body116
  %call124 = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.62, i64 0, i64 0))
  store i32 %call124, i32* %retval, align 4
  br label %return

if.end125:                                        ; preds = %do.body116
  %99 = load i32, i32* %rs119, align 4
  %and126 = and i32 %99, 15
  store i32 %and126, i32* %s118, align 4
  %100 = load i32, i32* %rs119, align 4
  %shr127 = ashr i32 %100, 4
  store i32 %shr127, i32* %r117, align 4
  %101 = load i32, i32* %s118, align 4
  %cmp128 = icmp eq i32 %101, 0
  br i1 %cmp128, label %if.then130, label %if.else145

if.then130:                                       ; preds = %if.end125
  %102 = load i32, i32* %r117, align 4
  %cmp131 = icmp slt i32 %102, 15
  br i1 %cmp131, label %if.then133, label %if.else143

if.then133:                                       ; preds = %if.then130
  %103 = load i32, i32* %r117, align 4
  %shl134 = shl i32 1, %103
  %sub135 = sub nsw i32 %shl134, 1
  %104 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %eob_run136 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %104, i32 0, i32 21
  store i32 %sub135, i32* %eob_run136, align 4
  %105 = load i32, i32* %r117, align 4
  %tobool137 = icmp ne i32 %105, 0
  br i1 %tobool137, label %if.then138, label %if.end142

if.then138:                                       ; preds = %if.then133
  %106 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %107 = load i32, i32* %r117, align 4
  %call139 = call i32 @stbi__jpeg_get_bits(%struct.stbi__jpeg* %106, i32 %107)
  %108 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %eob_run140 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %108, i32 0, i32 21
  %109 = load i32, i32* %eob_run140, align 4
  %add141 = add nsw i32 %109, %call139
  store i32 %add141, i32* %eob_run140, align 4
  br label %if.end142

if.end142:                                        ; preds = %if.then138, %if.then133
  store i32 64, i32* %r117, align 4
  br label %if.end144

if.else143:                                       ; preds = %if.then130
  br label %if.end144

if.end144:                                        ; preds = %if.else143, %if.end142
  br label %if.end159

if.else145:                                       ; preds = %if.end125
  %110 = load i32, i32* %s118, align 4
  %cmp146 = icmp ne i32 %110, 1
  br i1 %cmp146, label %if.then148, label %if.end150

if.then148:                                       ; preds = %if.else145
  %call149 = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.62, i64 0, i64 0))
  store i32 %call149, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %if.else145
  %111 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %call151 = call i32 @stbi__jpeg_get_bit(%struct.stbi__jpeg* %111)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.then153, label %if.else155

if.then153:                                       ; preds = %if.end150
  %112 = load i16, i16* %bit, align 2
  %conv154 = sext i16 %112 to i32
  store i32 %conv154, i32* %s118, align 4
  br label %if.end158

if.else155:                                       ; preds = %if.end150
  %113 = load i16, i16* %bit, align 2
  %conv156 = sext i16 %113 to i32
  %sub157 = sub nsw i32 0, %conv156
  store i32 %sub157, i32* %s118, align 4
  br label %if.end158

if.end158:                                        ; preds = %if.else155, %if.then153
  br label %if.end159

if.end159:                                        ; preds = %if.end158, %if.end144
  br label %while.cond

while.cond:                                       ; preds = %if.end205, %if.end159
  %114 = load i32, i32* %k, align 4
  %115 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %spec_end160 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %115, i32 0, i32 18
  %116 = load i32, i32* %spec_end160, align 8
  %cmp161 = icmp sle i32 %114, %116
  br i1 %cmp161, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %117 = load i16*, i16** %data.addr, align 8
  %118 = load i32, i32* %k, align 4
  %inc164 = add nsw i32 %118, 1
  store i32 %inc164, i32* %k, align 4
  %idxprom165 = sext i32 %118 to i64
  %arrayidx166 = getelementptr inbounds [79 x i8], [79 x i8]* @stbi__jpeg_dezigzag, i64 0, i64 %idxprom165
  %119 = load i8, i8* %arrayidx166, align 1
  %idxprom167 = zext i8 %119 to i64
  %arrayidx168 = getelementptr inbounds i16, i16* %117, i64 %idxprom167
  store i16* %arrayidx168, i16** %p163, align 8
  %120 = load i16*, i16** %p163, align 8
  %121 = load i16, i16* %120, align 2
  %conv169 = sext i16 %121 to i32
  %cmp170 = icmp ne i32 %conv169, 0
  br i1 %cmp170, label %if.then172, label %if.else198

if.then172:                                       ; preds = %while.body
  %122 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %call173 = call i32 @stbi__jpeg_get_bit(%struct.stbi__jpeg* %122)
  %tobool174 = icmp ne i32 %call173, 0
  br i1 %tobool174, label %if.then175, label %if.end197

if.then175:                                       ; preds = %if.then172
  %123 = load i16*, i16** %p163, align 8
  %124 = load i16, i16* %123, align 2
  %conv176 = sext i16 %124 to i32
  %125 = load i16, i16* %bit, align 2
  %conv177 = sext i16 %125 to i32
  %and178 = and i32 %conv176, %conv177
  %cmp179 = icmp eq i32 %and178, 0
  br i1 %cmp179, label %if.then181, label %if.end196

if.then181:                                       ; preds = %if.then175
  %126 = load i16*, i16** %p163, align 8
  %127 = load i16, i16* %126, align 2
  %conv182 = sext i16 %127 to i32
  %cmp183 = icmp sgt i32 %conv182, 0
  br i1 %cmp183, label %if.then185, label %if.else190

if.then185:                                       ; preds = %if.then181
  %128 = load i16, i16* %bit, align 2
  %conv186 = sext i16 %128 to i32
  %129 = load i16*, i16** %p163, align 8
  %130 = load i16, i16* %129, align 2
  %conv187 = sext i16 %130 to i32
  %add188 = add nsw i32 %conv187, %conv186
  %conv189 = trunc i32 %add188 to i16
  store i16 %conv189, i16* %129, align 2
  br label %if.end195

if.else190:                                       ; preds = %if.then181
  %131 = load i16, i16* %bit, align 2
  %conv191 = sext i16 %131 to i32
  %132 = load i16*, i16** %p163, align 8
  %133 = load i16, i16* %132, align 2
  %conv192 = sext i16 %133 to i32
  %sub193 = sub nsw i32 %conv192, %conv191
  %conv194 = trunc i32 %sub193 to i16
  store i16 %conv194, i16* %132, align 2
  br label %if.end195

if.end195:                                        ; preds = %if.else190, %if.then185
  br label %if.end196

if.end196:                                        ; preds = %if.end195, %if.then175
  br label %if.end197

if.end197:                                        ; preds = %if.end196, %if.then172
  br label %if.end205

if.else198:                                       ; preds = %while.body
  %134 = load i32, i32* %r117, align 4
  %cmp199 = icmp eq i32 %134, 0
  br i1 %cmp199, label %if.then201, label %if.end203

if.then201:                                       ; preds = %if.else198
  %135 = load i32, i32* %s118, align 4
  %conv202 = trunc i32 %135 to i16
  %136 = load i16*, i16** %p163, align 8
  store i16 %conv202, i16* %136, align 2
  br label %while.end

if.end203:                                        ; preds = %if.else198
  %137 = load i32, i32* %r117, align 4
  %dec204 = add nsw i32 %137, -1
  store i32 %dec204, i32* %r117, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.end203, %if.end197
  br label %while.cond

while.end:                                        ; preds = %if.then201, %while.cond
  br label %do.cond206

do.cond206:                                       ; preds = %while.end
  %138 = load i32, i32* %k, align 4
  %139 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %spec_end207 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %139, i32 0, i32 18
  %140 = load i32, i32* %spec_end207, align 8
  %cmp208 = icmp sle i32 %138, %140
  br i1 %cmp208, label %do.body116, label %do.end210

do.end210:                                        ; preds = %do.cond206
  br label %if.end211

if.end211:                                        ; preds = %do.end210, %for.end
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %do.end
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end212, %if.then148, %if.then123, %if.then28, %if.then3, %if.then
  %141 = load i32, i32* %retval, align 4
  ret i32 %141
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__jpeg_huff_decode(%struct.stbi__jpeg* %j, %struct.stbi__huffman* %h) #0 {
entry:
  %retval = alloca i32, align 4
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %h.addr = alloca %struct.stbi__huffman*, align 8
  %temp = alloca i32, align 4
  %c = alloca i32, align 4
  %k = alloca i32, align 4
  %s = alloca i32, align 4
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  store %struct.stbi__huffman* %h, %struct.stbi__huffman** %h.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 13
  %1 = load i32, i32* %code_bits, align 4
  %cmp = icmp slt i32 %1, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %3, i32 0, i32 12
  %4 = load i32, i32* %code_buffer, align 8
  %shr = lshr i32 %4, 23
  %and = and i32 %shr, 511
  store i32 %and, i32* %c, align 4
  %5 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %fast = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %5, i32 0, i32 0
  %6 = load i32, i32* %c, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [512 x i8], [512 x i8]* %fast, i64 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  store i32 %conv, i32* %k, align 4
  %8 = load i32, i32* %k, align 4
  %cmp1 = icmp slt i32 %8, 255
  br i1 %cmp1, label %if.then3, label %if.end17

if.then3:                                         ; preds = %if.end
  %9 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %size = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %9, i32 0, i32 3
  %10 = load i32, i32* %k, align 4
  %idxprom4 = sext i32 %10 to i64
  %arrayidx5 = getelementptr inbounds [257 x i8], [257 x i8]* %size, i64 0, i64 %idxprom4
  %11 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %11 to i32
  store i32 %conv6, i32* %s, align 4
  %12 = load i32, i32* %s, align 4
  %13 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits7 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %13, i32 0, i32 13
  %14 = load i32, i32* %code_bits7, align 4
  %cmp8 = icmp sgt i32 %12, %14
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.then3
  store i32 -1, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %if.then3
  %15 = load i32, i32* %s, align 4
  %16 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer12 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %16, i32 0, i32 12
  %17 = load i32, i32* %code_buffer12, align 8
  %shl = shl i32 %17, %15
  store i32 %shl, i32* %code_buffer12, align 8
  %18 = load i32, i32* %s, align 4
  %19 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits13 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %19, i32 0, i32 13
  %20 = load i32, i32* %code_bits13, align 4
  %sub = sub nsw i32 %20, %18
  store i32 %sub, i32* %code_bits13, align 4
  %21 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %values = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %21, i32 0, i32 2
  %22 = load i32, i32* %k, align 4
  %idxprom14 = sext i32 %22 to i64
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* %values, i64 0, i64 %idxprom14
  %23 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %23 to i32
  store i32 %conv16, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end
  %24 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer18 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %24, i32 0, i32 12
  %25 = load i32, i32* %code_buffer18, align 8
  %shr19 = lshr i32 %25, 16
  store i32 %shr19, i32* %temp, align 4
  store i32 10, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end17
  %26 = load i32, i32* %temp, align 4
  %27 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %maxcode = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %27, i32 0, i32 4
  %28 = load i32, i32* %k, align 4
  %idxprom20 = sext i32 %28 to i64
  %arrayidx21 = getelementptr inbounds [18 x i32], [18 x i32]* %maxcode, i64 0, i64 %idxprom20
  %29 = load i32, i32* %arrayidx21, align 4
  %cmp22 = icmp ult i32 %26, %29
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.cond
  br label %for.end

if.end25:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %if.end25
  %30 = load i32, i32* %k, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then24
  %31 = load i32, i32* %k, align 4
  %cmp26 = icmp eq i32 %31, 17
  br i1 %cmp26, label %if.then28, label %if.end31

if.then28:                                        ; preds = %for.end
  %32 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits29 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %32, i32 0, i32 13
  %33 = load i32, i32* %code_bits29, align 4
  %sub30 = sub nsw i32 %33, 16
  store i32 %sub30, i32* %code_bits29, align 4
  store i32 -1, i32* %retval, align 4
  br label %return

if.end31:                                         ; preds = %for.end
  %34 = load i32, i32* %k, align 4
  %35 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits32 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %35, i32 0, i32 13
  %36 = load i32, i32* %code_bits32, align 4
  %cmp33 = icmp sgt i32 %34, %36
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end31
  store i32 -1, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.end31
  %37 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer37 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %37, i32 0, i32 12
  %38 = load i32, i32* %code_buffer37, align 8
  %39 = load i32, i32* %k, align 4
  %sub38 = sub nsw i32 32, %39
  %shr39 = lshr i32 %38, %sub38
  %40 = load i32, i32* %k, align 4
  %idxprom40 = sext i32 %40 to i64
  %arrayidx41 = getelementptr inbounds [17 x i32], [17 x i32]* @stbi__bmask, i64 0, i64 %idxprom40
  %41 = load i32, i32* %arrayidx41, align 4
  %and42 = and i32 %shr39, %41
  %42 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %delta = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %42, i32 0, i32 5
  %43 = load i32, i32* %k, align 4
  %idxprom43 = sext i32 %43 to i64
  %arrayidx44 = getelementptr inbounds [17 x i32], [17 x i32]* %delta, i64 0, i64 %idxprom43
  %44 = load i32, i32* %arrayidx44, align 4
  %add = add i32 %and42, %44
  store i32 %add, i32* %c, align 4
  %45 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer45 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %45, i32 0, i32 12
  %46 = load i32, i32* %code_buffer45, align 8
  %47 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %size46 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %47, i32 0, i32 3
  %48 = load i32, i32* %c, align 4
  %idxprom47 = sext i32 %48 to i64
  %arrayidx48 = getelementptr inbounds [257 x i8], [257 x i8]* %size46, i64 0, i64 %idxprom47
  %49 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %49 to i32
  %sub50 = sub nsw i32 32, %conv49
  %shr51 = lshr i32 %46, %sub50
  %50 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %size52 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %50, i32 0, i32 3
  %51 = load i32, i32* %c, align 4
  %idxprom53 = sext i32 %51 to i64
  %arrayidx54 = getelementptr inbounds [257 x i8], [257 x i8]* %size52, i64 0, i64 %idxprom53
  %52 = load i8, i8* %arrayidx54, align 1
  %idxprom55 = zext i8 %52 to i64
  %arrayidx56 = getelementptr inbounds [17 x i32], [17 x i32]* @stbi__bmask, i64 0, i64 %idxprom55
  %53 = load i32, i32* %arrayidx56, align 4
  %and57 = and i32 %shr51, %53
  %54 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %code = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %54, i32 0, i32 1
  %55 = load i32, i32* %c, align 4
  %idxprom58 = sext i32 %55 to i64
  %arrayidx59 = getelementptr inbounds [256 x i16], [256 x i16]* %code, i64 0, i64 %idxprom58
  %56 = load i16, i16* %arrayidx59, align 2
  %conv60 = zext i16 %56 to i32
  %cmp61 = icmp eq i32 %and57, %conv60
  br i1 %cmp61, label %if.then63, label %if.else

if.then63:                                        ; preds = %if.end36
  br label %if.end64

if.else:                                          ; preds = %if.end36
  call void @__assert_fail(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 2074, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @__PRETTY_FUNCTION__.stbi__jpeg_huff_decode, i64 0, i64 0)) #11
  unreachable

if.end64:                                         ; preds = %if.then63
  %57 = load i32, i32* %k, align 4
  %58 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits65 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %58, i32 0, i32 13
  %59 = load i32, i32* %code_bits65, align 4
  %sub66 = sub nsw i32 %59, %57
  store i32 %sub66, i32* %code_bits65, align 4
  %60 = load i32, i32* %k, align 4
  %61 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer67 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %61, i32 0, i32 12
  %62 = load i32, i32* %code_buffer67, align 8
  %shl68 = shl i32 %62, %60
  store i32 %shl68, i32* %code_buffer67, align 8
  %63 = load %struct.stbi__huffman*, %struct.stbi__huffman** %h.addr, align 8
  %values69 = getelementptr inbounds %struct.stbi__huffman, %struct.stbi__huffman* %63, i32 0, i32 2
  %64 = load i32, i32* %c, align 4
  %idxprom70 = sext i32 %64 to i64
  %arrayidx71 = getelementptr inbounds [256 x i8], [256 x i8]* %values69, i64 0, i64 %idxprom70
  %65 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %65 to i32
  store i32 %conv72, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end64, %if.then35, %if.then28, %if.end11, %if.then10
  %66 = load i32, i32* %retval, align 4
  ret i32 %66
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__jpeg_get_bits(%struct.stbi__jpeg* %j, i32 %n) #0 {
entry:
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %n.addr = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 13
  %1 = load i32, i32* %code_bits, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %4, i32 0, i32 12
  %5 = load i32, i32* %code_buffer, align 8
  %6 = load i32, i32* %n.addr, align 4
  %shl = shl i32 %5, %6
  %7 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %7, i32 0, i32 12
  %8 = load i32, i32* %code_buffer1, align 8
  %9 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 32, %9
  %shr = lshr i32 %8, %sub
  %or = or i32 %shl, %shr
  store i32 %or, i32* %k, align 4
  %10 = load i32, i32* %k, align 4
  %11 = load i32, i32* %n.addr, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [17 x i32], [17 x i32]* @stbi__bmask, i64 0, i64 %idxprom
  %12 = load i32, i32* %arrayidx, align 4
  %neg = xor i32 %12, -1
  %and = and i32 %10, %neg
  %13 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer2 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %13, i32 0, i32 12
  store i32 %and, i32* %code_buffer2, align 8
  %14 = load i32, i32* %n.addr, align 4
  %idxprom3 = sext i32 %14 to i64
  %arrayidx4 = getelementptr inbounds [17 x i32], [17 x i32]* @stbi__bmask, i64 0, i64 %idxprom3
  %15 = load i32, i32* %arrayidx4, align 4
  %16 = load i32, i32* %k, align 4
  %and5 = and i32 %16, %15
  store i32 %and5, i32* %k, align 4
  %17 = load i32, i32* %n.addr, align 4
  %18 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits6 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %18, i32 0, i32 13
  %19 = load i32, i32* %code_bits6, align 4
  %sub7 = sub nsw i32 %19, %17
  store i32 %sub7, i32* %code_bits6, align 4
  %20 = load i32, i32* %k, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__extend_receive(%struct.stbi__jpeg* %j, i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %n.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %sgn = alloca i32, align 4
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 13
  %1 = load i32, i32* %code_bits, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %4, i32 0, i32 12
  %5 = load i32, i32* %code_buffer, align 8
  %shr = ashr i32 %5, 31
  store i32 %shr, i32* %sgn, align 4
  %6 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %6, i32 0, i32 12
  %7 = load i32, i32* %code_buffer1, align 8
  %8 = load i32, i32* %n.addr, align 4
  %shl = shl i32 %7, %8
  %9 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer2 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %9, i32 0, i32 12
  %10 = load i32, i32* %code_buffer2, align 8
  %11 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 32, %11
  %shr3 = lshr i32 %10, %sub
  %or = or i32 %shl, %shr3
  store i32 %or, i32* %k, align 4
  %12 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp slt i32 %12, 0
  br i1 %cmp4, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %13 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp sge i32 %13, 17
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %lor.lhs.false
  %14 = load i32, i32* %k, align 4
  %15 = load i32, i32* %n.addr, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx = getelementptr inbounds [17 x i32], [17 x i32]* @stbi__bmask, i64 0, i64 %idxprom
  %16 = load i32, i32* %arrayidx, align 4
  %neg = xor i32 %16, -1
  %and = and i32 %14, %neg
  %17 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer8 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %17, i32 0, i32 12
  store i32 %and, i32* %code_buffer8, align 8
  %18 = load i32, i32* %n.addr, align 4
  %idxprom9 = sext i32 %18 to i64
  %arrayidx10 = getelementptr inbounds [17 x i32], [17 x i32]* @stbi__bmask, i64 0, i64 %idxprom9
  %19 = load i32, i32* %arrayidx10, align 4
  %20 = load i32, i32* %k, align 4
  %and11 = and i32 %20, %19
  store i32 %and11, i32* %k, align 4
  %21 = load i32, i32* %n.addr, align 4
  %22 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits12 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %22, i32 0, i32 13
  %23 = load i32, i32* %code_bits12, align 4
  %sub13 = sub nsw i32 %23, %21
  store i32 %sub13, i32* %code_bits12, align 4
  %24 = load i32, i32* %k, align 4
  %25 = load i32, i32* %n.addr, align 4
  %idxprom14 = sext i32 %25 to i64
  %arrayidx15 = getelementptr inbounds [16 x i32], [16 x i32]* @stbi__jbias, i64 0, i64 %idxprom14
  %26 = load i32, i32* %arrayidx15, align 4
  %27 = load i32, i32* %sgn, align 4
  %neg16 = xor i32 %27, -1
  %and17 = and i32 %26, %neg16
  %add = add i32 %24, %and17
  store i32 %add, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end7, %if.then6
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__jpeg_get_bit(%struct.stbi__jpeg* %j) #0 {
entry:
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %k = alloca i32, align 4
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 13
  %1 = load i32, i32* %code_bits, align 4
  %cmp = icmp slt i32 %1, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  call void @stbi__grow_buffer_unsafe(%struct.stbi__jpeg* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %3, i32 0, i32 12
  %4 = load i32, i32* %code_buffer, align 8
  store i32 %4, i32* %k, align 4
  %5 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_buffer1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %5, i32 0, i32 12
  %6 = load i32, i32* %code_buffer1, align 8
  %shl = shl i32 %6, 1
  store i32 %shl, i32* %code_buffer1, align 8
  %7 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %code_bits2 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %7, i32 0, i32 13
  %8 = load i32, i32* %code_bits2, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %code_bits2, align 4
  %9 = load i32, i32* %k, align 4
  %and = and i32 %9, -2147483648
  ret i32 %and
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__process_frame_header(%struct.stbi__jpeg* %z, i32 %scan) #0 {
entry:
  %retval = alloca i32, align 4
  %z.addr = alloca %struct.stbi__jpeg*, align 8
  %scan.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context*, align 8
  %Lf = alloca i32, align 4
  %p = alloca i32, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  %h_max = alloca i32, align 4
  %v_max = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.stbi__jpeg* %z, %struct.stbi__jpeg** %z.addr, align 8
  store i32 %scan, i32* %scan.addr, align 4
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %0, i32 0, i32 0
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s1, align 8
  store %struct.stbi__context* %1, %struct.stbi__context** %s, align 8
  store i32 1, i32* %h_max, align 4
  store i32 1, i32* %v_max, align 4
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call = call i32 @stbi__get16be(%struct.stbi__context* %2)
  store i32 %call, i32* %Lf, align 4
  %3 = load i32, i32* %Lf, align 4
  %cmp = icmp slt i32 %3, 11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.44, i64 0, i64 0))
  store i32 %call2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call3 = call zeroext i8 @stbi__get8(%struct.stbi__context* %4)
  %conv = zext i8 %call3 to i32
  store i32 %conv, i32* %p, align 4
  %5 = load i32, i32* %p, align 4
  %cmp4 = icmp ne i32 %5, 8
  br i1 %cmp4, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = call i32 @stbi__err(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i64 0, i64 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %if.end
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call9 = call i32 @stbi__get16be(%struct.stbi__context* %6)
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %7, i32 0, i32 1
  store i32 %call9, i32* %img_y, align 4
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y10 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %8, i32 0, i32 1
  %9 = load i32, i32* %img_y10, align 4
  %cmp11 = icmp eq i32 %9, 0
  br i1 %cmp11, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.end8
  %call14 = call i32 @stbi__err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.46, i64 0, i64 0))
  store i32 %call14, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.end8
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call16 = call i32 @stbi__get16be(%struct.stbi__context* %10)
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %11, i32 0, i32 0
  store i32 %call16, i32* %img_x, align 8
  %12 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x17 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %12, i32 0, i32 0
  %13 = load i32, i32* %img_x17, align 8
  %cmp18 = icmp eq i32 %13, 0
  br i1 %cmp18, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end15
  %call21 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i64 0, i64 0))
  store i32 %call21, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.end15
  %14 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y23 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %14, i32 0, i32 1
  %15 = load i32, i32* %img_y23, align 4
  %cmp24 = icmp ugt i32 %15, 16777216
  br i1 %cmp24, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end22
  %call27 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  store i32 %call27, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %if.end22
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x29 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %16, i32 0, i32 0
  %17 = load i32, i32* %img_x29, align 8
  %cmp30 = icmp ugt i32 %17, 16777216
  br i1 %cmp30, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end28
  %call33 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  store i32 %call33, i32* %retval, align 4
  br label %return

if.end34:                                         ; preds = %if.end28
  %18 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call35 = call zeroext i8 @stbi__get8(%struct.stbi__context* %18)
  %conv36 = zext i8 %call35 to i32
  store i32 %conv36, i32* %c, align 4
  %19 = load i32, i32* %c, align 4
  %cmp37 = icmp ne i32 %19, 3
  br i1 %cmp37, label %land.lhs.true, label %if.end46

land.lhs.true:                                    ; preds = %if.end34
  %20 = load i32, i32* %c, align 4
  %cmp39 = icmp ne i32 %20, 1
  br i1 %cmp39, label %land.lhs.true41, label %if.end46

land.lhs.true41:                                  ; preds = %land.lhs.true
  %21 = load i32, i32* %c, align 4
  %cmp42 = icmp ne i32 %21, 4
  br i1 %cmp42, label %if.then44, label %if.end46

if.then44:                                        ; preds = %land.lhs.true41
  %call45 = call i32 @stbi__err(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.49, i64 0, i64 0))
  store i32 %call45, i32* %retval, align 4
  br label %return

if.end46:                                         ; preds = %land.lhs.true41, %land.lhs.true, %if.end34
  %22 = load i32, i32* %c, align 4
  %23 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %23, i32 0, i32 2
  store i32 %22, i32* %img_n, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end46
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %c, align 4
  %cmp47 = icmp slt i32 %24, %25
  br i1 %cmp47, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %26, i32 0, i32 11
  %27 = load i32, i32* %i, align 4
  %idxprom = sext i32 %27 to i64
  %arrayidx = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp, i64 0, i64 %idxprom
  %data = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 11
  store i8* null, i8** %data, align 8
  %28 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp49 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %28, i32 0, i32 11
  %29 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %29 to i64
  %arrayidx51 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp49, i64 0, i64 %idxprom50
  %linebuf = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx51, i32 0, i32 14
  store i8* null, i8** %linebuf, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %31 = load i32, i32* %Lf, align 4
  %32 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n52 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %32, i32 0, i32 2
  %33 = load i32, i32* %img_n52, align 8
  %mul = mul nsw i32 3, %33
  %add = add nsw i32 8, %mul
  %cmp53 = icmp ne i32 %31, %add
  br i1 %cmp53, label %if.then55, label %if.end57

if.then55:                                        ; preds = %for.end
  %call56 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.44, i64 0, i64 0))
  store i32 %call56, i32* %retval, align 4
  br label %return

if.end57:                                         ; preds = %for.end
  %34 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %rgb = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %34, i32 0, i32 24
  store i32 0, i32* %rgb, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc135, %if.end57
  %35 = load i32, i32* %i, align 4
  %36 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n59 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %36, i32 0, i32 2
  %37 = load i32, i32* %img_n59, align 8
  %cmp60 = icmp slt i32 %35, %37
  br i1 %cmp60, label %for.body62, label %for.end137

for.body62:                                       ; preds = %for.cond58
  %38 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call63 = call zeroext i8 @stbi__get8(%struct.stbi__context* %38)
  %conv64 = zext i8 %call63 to i32
  %39 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp65 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %39, i32 0, i32 11
  %40 = load i32, i32* %i, align 4
  %idxprom66 = sext i32 %40 to i64
  %arrayidx67 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp65, i64 0, i64 %idxprom66
  %id = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx67, i32 0, i32 0
  store i32 %conv64, i32* %id, align 8
  %41 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n68 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %41, i32 0, i32 2
  %42 = load i32, i32* %img_n68, align 8
  %cmp69 = icmp eq i32 %42, 3
  br i1 %cmp69, label %land.lhs.true71, label %if.end84

land.lhs.true71:                                  ; preds = %for.body62
  %43 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp72 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %43, i32 0, i32 11
  %44 = load i32, i32* %i, align 4
  %idxprom73 = sext i32 %44 to i64
  %arrayidx74 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp72, i64 0, i64 %idxprom73
  %id75 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx74, i32 0, i32 0
  %45 = load i32, i32* %id75, align 8
  %46 = load i32, i32* %i, align 4
  %idxprom76 = sext i32 %46 to i64
  %arrayidx77 = getelementptr inbounds [3 x i8], [3 x i8]* @stbi__process_frame_header.rgb, i64 0, i64 %idxprom76
  %47 = load i8, i8* %arrayidx77, align 1
  %conv78 = zext i8 %47 to i32
  %cmp79 = icmp eq i32 %45, %conv78
  br i1 %cmp79, label %if.then81, label %if.end84

if.then81:                                        ; preds = %land.lhs.true71
  %48 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %rgb82 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %48, i32 0, i32 24
  %49 = load i32, i32* %rgb82, align 8
  %inc83 = add nsw i32 %49, 1
  store i32 %inc83, i32* %rgb82, align 8
  br label %if.end84

if.end84:                                         ; preds = %if.then81, %land.lhs.true71, %for.body62
  %50 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call85 = call zeroext i8 @stbi__get8(%struct.stbi__context* %50)
  %conv86 = zext i8 %call85 to i32
  store i32 %conv86, i32* %q, align 4
  %51 = load i32, i32* %q, align 4
  %shr = ashr i32 %51, 4
  %52 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp87 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %52, i32 0, i32 11
  %53 = load i32, i32* %i, align 4
  %idxprom88 = sext i32 %53 to i64
  %arrayidx89 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp87, i64 0, i64 %idxprom88
  %h = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx89, i32 0, i32 1
  store i32 %shr, i32* %h, align 4
  %54 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp90 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %54, i32 0, i32 11
  %55 = load i32, i32* %i, align 4
  %idxprom91 = sext i32 %55 to i64
  %arrayidx92 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp90, i64 0, i64 %idxprom91
  %h93 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx92, i32 0, i32 1
  %56 = load i32, i32* %h93, align 4
  %tobool = icmp ne i32 %56, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then100

lor.lhs.false:                                    ; preds = %if.end84
  %57 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp94 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %57, i32 0, i32 11
  %58 = load i32, i32* %i, align 4
  %idxprom95 = sext i32 %58 to i64
  %arrayidx96 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp94, i64 0, i64 %idxprom95
  %h97 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx96, i32 0, i32 1
  %59 = load i32, i32* %h97, align 4
  %cmp98 = icmp sgt i32 %59, 4
  br i1 %cmp98, label %if.then100, label %if.end102

if.then100:                                       ; preds = %lor.lhs.false, %if.end84
  %call101 = call i32 @stbi__err(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i64 0, i64 0))
  store i32 %call101, i32* %retval, align 4
  br label %return

if.end102:                                        ; preds = %lor.lhs.false
  %60 = load i32, i32* %q, align 4
  %and = and i32 %60, 15
  %61 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp103 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %61, i32 0, i32 11
  %62 = load i32, i32* %i, align 4
  %idxprom104 = sext i32 %62 to i64
  %arrayidx105 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp103, i64 0, i64 %idxprom104
  %v = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx105, i32 0, i32 2
  store i32 %and, i32* %v, align 8
  %63 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp106 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %63, i32 0, i32 11
  %64 = load i32, i32* %i, align 4
  %idxprom107 = sext i32 %64 to i64
  %arrayidx108 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp106, i64 0, i64 %idxprom107
  %v109 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx108, i32 0, i32 2
  %65 = load i32, i32* %v109, align 8
  %tobool110 = icmp ne i32 %65, 0
  br i1 %tobool110, label %lor.lhs.false111, label %if.then118

lor.lhs.false111:                                 ; preds = %if.end102
  %66 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp112 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %66, i32 0, i32 11
  %67 = load i32, i32* %i, align 4
  %idxprom113 = sext i32 %67 to i64
  %arrayidx114 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp112, i64 0, i64 %idxprom113
  %v115 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx114, i32 0, i32 2
  %68 = load i32, i32* %v115, align 8
  %cmp116 = icmp sgt i32 %68, 4
  br i1 %cmp116, label %if.then118, label %if.end120

if.then118:                                       ; preds = %lor.lhs.false111, %if.end102
  %call119 = call i32 @stbi__err(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i64 0, i64 0))
  store i32 %call119, i32* %retval, align 4
  br label %return

if.end120:                                        ; preds = %lor.lhs.false111
  %69 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %call121 = call zeroext i8 @stbi__get8(%struct.stbi__context* %69)
  %conv122 = zext i8 %call121 to i32
  %70 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp123 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %70, i32 0, i32 11
  %71 = load i32, i32* %i, align 4
  %idxprom124 = sext i32 %71 to i64
  %arrayidx125 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp123, i64 0, i64 %idxprom124
  %tq = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx125, i32 0, i32 3
  store i32 %conv122, i32* %tq, align 4
  %72 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp126 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %72, i32 0, i32 11
  %73 = load i32, i32* %i, align 4
  %idxprom127 = sext i32 %73 to i64
  %arrayidx128 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp126, i64 0, i64 %idxprom127
  %tq129 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx128, i32 0, i32 3
  %74 = load i32, i32* %tq129, align 4
  %cmp130 = icmp sgt i32 %74, 3
  br i1 %cmp130, label %if.then132, label %if.end134

if.then132:                                       ; preds = %if.end120
  %call133 = call i32 @stbi__err(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0))
  store i32 %call133, i32* %retval, align 4
  br label %return

if.end134:                                        ; preds = %if.end120
  br label %for.inc135

for.inc135:                                       ; preds = %if.end134
  %75 = load i32, i32* %i, align 4
  %inc136 = add nsw i32 %75, 1
  store i32 %inc136, i32* %i, align 4
  br label %for.cond58

for.end137:                                       ; preds = %for.cond58
  %76 = load i32, i32* %scan.addr, align 4
  %cmp138 = icmp ne i32 %76, 0
  br i1 %cmp138, label %if.then140, label %if.end141

if.then140:                                       ; preds = %for.end137
  store i32 1, i32* %retval, align 4
  br label %return

if.end141:                                        ; preds = %for.end137
  %77 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x142 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %77, i32 0, i32 0
  %78 = load i32, i32* %img_x142, align 8
  %79 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y143 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %79, i32 0, i32 1
  %80 = load i32, i32* %img_y143, align 4
  %81 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n144 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %81, i32 0, i32 2
  %82 = load i32, i32* %img_n144, align 8
  %call145 = call i32 @stbi__mad3sizes_valid(i32 %78, i32 %80, i32 %82, i32 0)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end149, label %if.then147

if.then147:                                       ; preds = %if.end141
  %call148 = call i32 @stbi__err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0))
  store i32 %call148, i32* %retval, align 4
  br label %return

if.end149:                                        ; preds = %if.end141
  store i32 0, i32* %i, align 4
  br label %for.cond150

for.cond150:                                      ; preds = %for.inc179, %if.end149
  %83 = load i32, i32* %i, align 4
  %84 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n151 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %84, i32 0, i32 2
  %85 = load i32, i32* %img_n151, align 8
  %cmp152 = icmp slt i32 %83, %85
  br i1 %cmp152, label %for.body154, label %for.end181

for.body154:                                      ; preds = %for.cond150
  %86 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp155 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %86, i32 0, i32 11
  %87 = load i32, i32* %i, align 4
  %idxprom156 = sext i32 %87 to i64
  %arrayidx157 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp155, i64 0, i64 %idxprom156
  %h158 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx157, i32 0, i32 1
  %88 = load i32, i32* %h158, align 4
  %89 = load i32, i32* %h_max, align 4
  %cmp159 = icmp sgt i32 %88, %89
  br i1 %cmp159, label %if.then161, label %if.end166

if.then161:                                       ; preds = %for.body154
  %90 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp162 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %90, i32 0, i32 11
  %91 = load i32, i32* %i, align 4
  %idxprom163 = sext i32 %91 to i64
  %arrayidx164 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp162, i64 0, i64 %idxprom163
  %h165 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx164, i32 0, i32 1
  %92 = load i32, i32* %h165, align 4
  store i32 %92, i32* %h_max, align 4
  br label %if.end166

if.end166:                                        ; preds = %if.then161, %for.body154
  %93 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp167 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %93, i32 0, i32 11
  %94 = load i32, i32* %i, align 4
  %idxprom168 = sext i32 %94 to i64
  %arrayidx169 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp167, i64 0, i64 %idxprom168
  %v170 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx169, i32 0, i32 2
  %95 = load i32, i32* %v170, align 8
  %96 = load i32, i32* %v_max, align 4
  %cmp171 = icmp sgt i32 %95, %96
  br i1 %cmp171, label %if.then173, label %if.end178

if.then173:                                       ; preds = %if.end166
  %97 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp174 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %97, i32 0, i32 11
  %98 = load i32, i32* %i, align 4
  %idxprom175 = sext i32 %98 to i64
  %arrayidx176 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp174, i64 0, i64 %idxprom175
  %v177 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx176, i32 0, i32 2
  %99 = load i32, i32* %v177, align 8
  store i32 %99, i32* %v_max, align 4
  br label %if.end178

if.end178:                                        ; preds = %if.then173, %if.end166
  br label %for.inc179

for.inc179:                                       ; preds = %if.end178
  %100 = load i32, i32* %i, align 4
  %inc180 = add nsw i32 %100, 1
  store i32 %inc180, i32* %i, align 4
  br label %for.cond150

for.end181:                                       ; preds = %for.cond150
  %101 = load i32, i32* %h_max, align 4
  %102 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_h_max = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %102, i32 0, i32 5
  store i32 %101, i32* %img_h_max, align 8
  %103 = load i32, i32* %v_max, align 4
  %104 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_v_max = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %104, i32 0, i32 6
  store i32 %103, i32* %img_v_max, align 4
  %105 = load i32, i32* %h_max, align 4
  %mul182 = mul nsw i32 %105, 8
  %106 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_w = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %106, i32 0, i32 9
  store i32 %mul182, i32* %img_mcu_w, align 8
  %107 = load i32, i32* %v_max, align 4
  %mul183 = mul nsw i32 %107, 8
  %108 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_h = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %108, i32 0, i32 10
  store i32 %mul183, i32* %img_mcu_h, align 4
  %109 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x184 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %109, i32 0, i32 0
  %110 = load i32, i32* %img_x184, align 8
  %111 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_w185 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %111, i32 0, i32 9
  %112 = load i32, i32* %img_mcu_w185, align 8
  %add186 = add i32 %110, %112
  %sub = sub i32 %add186, 1
  %113 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_w187 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %113, i32 0, i32 9
  %114 = load i32, i32* %img_mcu_w187, align 8
  %div = udiv i32 %sub, %114
  %115 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_x = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %115, i32 0, i32 7
  store i32 %div, i32* %img_mcu_x, align 8
  %116 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y188 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %116, i32 0, i32 1
  %117 = load i32, i32* %img_y188, align 4
  %118 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_h189 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %118, i32 0, i32 10
  %119 = load i32, i32* %img_mcu_h189, align 4
  %add190 = add i32 %117, %119
  %sub191 = sub i32 %add190, 1
  %120 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_h192 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %120, i32 0, i32 10
  %121 = load i32, i32* %img_mcu_h192, align 4
  %div193 = udiv i32 %sub191, %121
  %122 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_y = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %122, i32 0, i32 8
  store i32 %div193, i32* %img_mcu_y, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond194

for.cond194:                                      ; preds = %for.inc339, %for.end181
  %123 = load i32, i32* %i, align 4
  %124 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_n195 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %124, i32 0, i32 2
  %125 = load i32, i32* %img_n195, align 8
  %cmp196 = icmp slt i32 %123, %125
  br i1 %cmp196, label %for.body198, label %for.end341

for.body198:                                      ; preds = %for.cond194
  %126 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_x199 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %126, i32 0, i32 0
  %127 = load i32, i32* %img_x199, align 8
  %128 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp200 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %128, i32 0, i32 11
  %129 = load i32, i32* %i, align 4
  %idxprom201 = sext i32 %129 to i64
  %arrayidx202 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp200, i64 0, i64 %idxprom201
  %h203 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx202, i32 0, i32 1
  %130 = load i32, i32* %h203, align 4
  %mul204 = mul i32 %127, %130
  %131 = load i32, i32* %h_max, align 4
  %add205 = add i32 %mul204, %131
  %sub206 = sub i32 %add205, 1
  %132 = load i32, i32* %h_max, align 4
  %div207 = udiv i32 %sub206, %132
  %133 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp208 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %133, i32 0, i32 11
  %134 = load i32, i32* %i, align 4
  %idxprom209 = sext i32 %134 to i64
  %arrayidx210 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp208, i64 0, i64 %idxprom209
  %x = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx210, i32 0, i32 7
  store i32 %div207, i32* %x, align 4
  %135 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  %img_y211 = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %135, i32 0, i32 1
  %136 = load i32, i32* %img_y211, align 4
  %137 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp212 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %137, i32 0, i32 11
  %138 = load i32, i32* %i, align 4
  %idxprom213 = sext i32 %138 to i64
  %arrayidx214 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp212, i64 0, i64 %idxprom213
  %v215 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx214, i32 0, i32 2
  %139 = load i32, i32* %v215, align 8
  %mul216 = mul i32 %136, %139
  %140 = load i32, i32* %v_max, align 4
  %add217 = add i32 %mul216, %140
  %sub218 = sub i32 %add217, 1
  %141 = load i32, i32* %v_max, align 4
  %div219 = udiv i32 %sub218, %141
  %142 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp220 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %142, i32 0, i32 11
  %143 = load i32, i32* %i, align 4
  %idxprom221 = sext i32 %143 to i64
  %arrayidx222 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp220, i64 0, i64 %idxprom221
  %y = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx222, i32 0, i32 8
  store i32 %div219, i32* %y, align 8
  %144 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_x223 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %144, i32 0, i32 7
  %145 = load i32, i32* %img_mcu_x223, align 8
  %146 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp224 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %146, i32 0, i32 11
  %147 = load i32, i32* %i, align 4
  %idxprom225 = sext i32 %147 to i64
  %arrayidx226 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp224, i64 0, i64 %idxprom225
  %h227 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx226, i32 0, i32 1
  %148 = load i32, i32* %h227, align 4
  %mul228 = mul nsw i32 %145, %148
  %mul229 = mul nsw i32 %mul228, 8
  %149 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp230 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %149, i32 0, i32 11
  %150 = load i32, i32* %i, align 4
  %idxprom231 = sext i32 %150 to i64
  %arrayidx232 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp230, i64 0, i64 %idxprom231
  %w2 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx232, i32 0, i32 9
  store i32 %mul229, i32* %w2, align 4
  %151 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_mcu_y233 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %151, i32 0, i32 8
  %152 = load i32, i32* %img_mcu_y233, align 4
  %153 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp234 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %153, i32 0, i32 11
  %154 = load i32, i32* %i, align 4
  %idxprom235 = sext i32 %154 to i64
  %arrayidx236 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp234, i64 0, i64 %idxprom235
  %v237 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx236, i32 0, i32 2
  %155 = load i32, i32* %v237, align 8
  %mul238 = mul nsw i32 %152, %155
  %mul239 = mul nsw i32 %mul238, 8
  %156 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp240 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %156, i32 0, i32 11
  %157 = load i32, i32* %i, align 4
  %idxprom241 = sext i32 %157 to i64
  %arrayidx242 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp240, i64 0, i64 %idxprom241
  %h2 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx242, i32 0, i32 10
  store i32 %mul239, i32* %h2, align 8
  %158 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp243 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %158, i32 0, i32 11
  %159 = load i32, i32* %i, align 4
  %idxprom244 = sext i32 %159 to i64
  %arrayidx245 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp243, i64 0, i64 %idxprom244
  %coeff = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx245, i32 0, i32 15
  store i16* null, i16** %coeff, align 8
  %160 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp246 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %160, i32 0, i32 11
  %161 = load i32, i32* %i, align 4
  %idxprom247 = sext i32 %161 to i64
  %arrayidx248 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp246, i64 0, i64 %idxprom247
  %raw_coeff = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx248, i32 0, i32 13
  store i8* null, i8** %raw_coeff, align 8
  %162 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp249 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %162, i32 0, i32 11
  %163 = load i32, i32* %i, align 4
  %idxprom250 = sext i32 %163 to i64
  %arrayidx251 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp249, i64 0, i64 %idxprom250
  %linebuf252 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx251, i32 0, i32 14
  store i8* null, i8** %linebuf252, align 8
  %164 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp253 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %164, i32 0, i32 11
  %165 = load i32, i32* %i, align 4
  %idxprom254 = sext i32 %165 to i64
  %arrayidx255 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp253, i64 0, i64 %idxprom254
  %w2256 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx255, i32 0, i32 9
  %166 = load i32, i32* %w2256, align 4
  %167 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp257 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %167, i32 0, i32 11
  %168 = load i32, i32* %i, align 4
  %idxprom258 = sext i32 %168 to i64
  %arrayidx259 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp257, i64 0, i64 %idxprom258
  %h2260 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx259, i32 0, i32 10
  %169 = load i32, i32* %h2260, align 8
  %call261 = call i8* @stbi__malloc_mad2(i32 %166, i32 %169, i32 15)
  %170 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp262 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %170, i32 0, i32 11
  %171 = load i32, i32* %i, align 4
  %idxprom263 = sext i32 %171 to i64
  %arrayidx264 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp262, i64 0, i64 %idxprom263
  %raw_data = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx264, i32 0, i32 12
  store i8* %call261, i8** %raw_data, align 8
  %172 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp265 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %172, i32 0, i32 11
  %173 = load i32, i32* %i, align 4
  %idxprom266 = sext i32 %173 to i64
  %arrayidx267 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp265, i64 0, i64 %idxprom266
  %raw_data268 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx267, i32 0, i32 12
  %174 = load i8*, i8** %raw_data268, align 8
  %cmp269 = icmp eq i8* %174, null
  br i1 %cmp269, label %if.then271, label %if.end275

if.then271:                                       ; preds = %for.body198
  %175 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %176 = load i32, i32* %i, align 4
  %add272 = add nsw i32 %176, 1
  %call273 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %call274 = call i32 @stbi__free_jpeg_components(%struct.stbi__jpeg* %175, i32 %add272, i32 %call273)
  store i32 %call274, i32* %retval, align 4
  br label %return

if.end275:                                        ; preds = %for.body198
  %177 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp276 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %177, i32 0, i32 11
  %178 = load i32, i32* %i, align 4
  %idxprom277 = sext i32 %178 to i64
  %arrayidx278 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp276, i64 0, i64 %idxprom277
  %raw_data279 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx278, i32 0, i32 12
  %179 = load i8*, i8** %raw_data279, align 8
  %180 = ptrtoint i8* %179 to i64
  %add280 = add i64 %180, 15
  %and281 = and i64 %add280, -16
  %181 = inttoptr i64 %and281 to i8*
  %182 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp282 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %182, i32 0, i32 11
  %183 = load i32, i32* %i, align 4
  %idxprom283 = sext i32 %183 to i64
  %arrayidx284 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp282, i64 0, i64 %idxprom283
  %data285 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx284, i32 0, i32 11
  store i8* %181, i8** %data285, align 8
  %184 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %progressive = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %184, i32 0, i32 16
  %185 = load i32, i32* %progressive, align 8
  %tobool286 = icmp ne i32 %185, 0
  br i1 %tobool286, label %if.then287, label %if.end338

if.then287:                                       ; preds = %if.end275
  %186 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp288 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %186, i32 0, i32 11
  %187 = load i32, i32* %i, align 4
  %idxprom289 = sext i32 %187 to i64
  %arrayidx290 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp288, i64 0, i64 %idxprom289
  %w2291 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx290, i32 0, i32 9
  %188 = load i32, i32* %w2291, align 4
  %div292 = sdiv i32 %188, 8
  %189 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp293 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %189, i32 0, i32 11
  %190 = load i32, i32* %i, align 4
  %idxprom294 = sext i32 %190 to i64
  %arrayidx295 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp293, i64 0, i64 %idxprom294
  %coeff_w = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx295, i32 0, i32 16
  store i32 %div292, i32* %coeff_w, align 8
  %191 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp296 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %191, i32 0, i32 11
  %192 = load i32, i32* %i, align 4
  %idxprom297 = sext i32 %192 to i64
  %arrayidx298 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp296, i64 0, i64 %idxprom297
  %h2299 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx298, i32 0, i32 10
  %193 = load i32, i32* %h2299, align 8
  %div300 = sdiv i32 %193, 8
  %194 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp301 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %194, i32 0, i32 11
  %195 = load i32, i32* %i, align 4
  %idxprom302 = sext i32 %195 to i64
  %arrayidx303 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp301, i64 0, i64 %idxprom302
  %coeff_h = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx303, i32 0, i32 17
  store i32 %div300, i32* %coeff_h, align 4
  %196 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp304 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %196, i32 0, i32 11
  %197 = load i32, i32* %i, align 4
  %idxprom305 = sext i32 %197 to i64
  %arrayidx306 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp304, i64 0, i64 %idxprom305
  %w2307 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx306, i32 0, i32 9
  %198 = load i32, i32* %w2307, align 4
  %199 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp308 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %199, i32 0, i32 11
  %200 = load i32, i32* %i, align 4
  %idxprom309 = sext i32 %200 to i64
  %arrayidx310 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp308, i64 0, i64 %idxprom309
  %h2311 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx310, i32 0, i32 10
  %201 = load i32, i32* %h2311, align 8
  %call312 = call i8* @stbi__malloc_mad3(i32 %198, i32 %201, i32 2, i32 15)
  %202 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp313 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %202, i32 0, i32 11
  %203 = load i32, i32* %i, align 4
  %idxprom314 = sext i32 %203 to i64
  %arrayidx315 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp313, i64 0, i64 %idxprom314
  %raw_coeff316 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx315, i32 0, i32 13
  store i8* %call312, i8** %raw_coeff316, align 8
  %204 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp317 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %204, i32 0, i32 11
  %205 = load i32, i32* %i, align 4
  %idxprom318 = sext i32 %205 to i64
  %arrayidx319 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp317, i64 0, i64 %idxprom318
  %raw_coeff320 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx319, i32 0, i32 13
  %206 = load i8*, i8** %raw_coeff320, align 8
  %cmp321 = icmp eq i8* %206, null
  br i1 %cmp321, label %if.then323, label %if.end327

if.then323:                                       ; preds = %if.then287
  %207 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %208 = load i32, i32* %i, align 4
  %add324 = add nsw i32 %208, 1
  %call325 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %call326 = call i32 @stbi__free_jpeg_components(%struct.stbi__jpeg* %207, i32 %add324, i32 %call325)
  store i32 %call326, i32* %retval, align 4
  br label %return

if.end327:                                        ; preds = %if.then287
  %209 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp328 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %209, i32 0, i32 11
  %210 = load i32, i32* %i, align 4
  %idxprom329 = sext i32 %210 to i64
  %arrayidx330 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp328, i64 0, i64 %idxprom329
  %raw_coeff331 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx330, i32 0, i32 13
  %211 = load i8*, i8** %raw_coeff331, align 8
  %212 = ptrtoint i8* %211 to i64
  %add332 = add i64 %212, 15
  %and333 = and i64 %add332, -16
  %213 = inttoptr i64 %and333 to i16*
  %214 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %z.addr, align 8
  %img_comp334 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %214, i32 0, i32 11
  %215 = load i32, i32* %i, align 4
  %idxprom335 = sext i32 %215 to i64
  %arrayidx336 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* %img_comp334, i64 0, i64 %idxprom335
  %coeff337 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx336, i32 0, i32 15
  store i16* %213, i16** %coeff337, align 8
  br label %if.end338

if.end338:                                        ; preds = %if.end327, %if.end275
  br label %for.inc339

for.inc339:                                       ; preds = %if.end338
  %216 = load i32, i32* %i, align 4
  %inc340 = add nsw i32 %216, 1
  store i32 %inc340, i32* %i, align 4
  br label %for.cond194

for.end341:                                       ; preds = %for.cond194
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end341, %if.then323, %if.then271, %if.then147, %if.then140, %if.then132, %if.then118, %if.then100, %if.then55, %if.then44, %if.then32, %if.then26, %if.then20, %if.then13, %if.then6, %if.then
  %217 = load i32, i32* %retval, align 4
  ret i32 %217
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__idct_block(i8* %out, i32 %out_stride, i16* %data) #0 {
entry:
  %out.addr = alloca i8*, align 8
  %out_stride.addr = alloca i32, align 4
  %data.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  %val = alloca [64 x i32], align 16
  %v = alloca i32*, align 8
  %o = alloca i8*, align 8
  %d = alloca i16*, align 8
  %dcterm = alloca i32, align 4
  %t0 = alloca i32, align 4
  %t1 = alloca i32, align 4
  %t2 = alloca i32, align 4
  %t3 = alloca i32, align 4
  %p1 = alloca i32, align 4
  %p2 = alloca i32, align 4
  %p3 = alloca i32, align 4
  %p4 = alloca i32, align 4
  %p5 = alloca i32, align 4
  %x0 = alloca i32, align 4
  %x1 = alloca i32, align 4
  %x2 = alloca i32, align 4
  %x3 = alloca i32, align 4
  %t0127 = alloca i32, align 4
  %t1128 = alloca i32, align 4
  %t2129 = alloca i32, align 4
  %t3130 = alloca i32, align 4
  %p1131 = alloca i32, align 4
  %p2132 = alloca i32, align 4
  %p3133 = alloca i32, align 4
  %p4134 = alloca i32, align 4
  %p5135 = alloca i32, align 4
  %x0136 = alloca i32, align 4
  %x1137 = alloca i32, align 4
  %x2138 = alloca i32, align 4
  %x3139 = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8
  store i32 %out_stride, i32* %out_stride.addr, align 4
  store i16* %data, i16** %data.addr, align 8
  %arraydecay = getelementptr inbounds [64 x i32], [64 x i32]* %val, i64 0, i64 0
  store i32* %arraydecay, i32** %v, align 8
  %0 = load i16*, i16** %data.addr, align 8
  store i16* %0, i16** %d, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i16*, i16** %d, align 8
  %arrayidx = getelementptr inbounds i16, i16* %2, i64 8
  %3 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %4 = load i16*, i16** %d, align 8
  %arrayidx3 = getelementptr inbounds i16, i16* %4, i64 16
  %5 = load i16, i16* %arrayidx3, align 2
  %conv4 = sext i16 %5 to i32
  %cmp5 = icmp eq i32 %conv4, 0
  br i1 %cmp5, label %land.lhs.true7, label %if.else

land.lhs.true7:                                   ; preds = %land.lhs.true
  %6 = load i16*, i16** %d, align 8
  %arrayidx8 = getelementptr inbounds i16, i16* %6, i64 24
  %7 = load i16, i16* %arrayidx8, align 2
  %conv9 = sext i16 %7 to i32
  %cmp10 = icmp eq i32 %conv9, 0
  br i1 %cmp10, label %land.lhs.true12, label %if.else

land.lhs.true12:                                  ; preds = %land.lhs.true7
  %8 = load i16*, i16** %d, align 8
  %arrayidx13 = getelementptr inbounds i16, i16* %8, i64 32
  %9 = load i16, i16* %arrayidx13, align 2
  %conv14 = sext i16 %9 to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %land.lhs.true17, label %if.else

land.lhs.true17:                                  ; preds = %land.lhs.true12
  %10 = load i16*, i16** %d, align 8
  %arrayidx18 = getelementptr inbounds i16, i16* %10, i64 40
  %11 = load i16, i16* %arrayidx18, align 2
  %conv19 = sext i16 %11 to i32
  %cmp20 = icmp eq i32 %conv19, 0
  br i1 %cmp20, label %land.lhs.true22, label %if.else

land.lhs.true22:                                  ; preds = %land.lhs.true17
  %12 = load i16*, i16** %d, align 8
  %arrayidx23 = getelementptr inbounds i16, i16* %12, i64 48
  %13 = load i16, i16* %arrayidx23, align 2
  %conv24 = sext i16 %13 to i32
  %cmp25 = icmp eq i32 %conv24, 0
  br i1 %cmp25, label %land.lhs.true27, label %if.else

land.lhs.true27:                                  ; preds = %land.lhs.true22
  %14 = load i16*, i16** %d, align 8
  %arrayidx28 = getelementptr inbounds i16, i16* %14, i64 56
  %15 = load i16, i16* %arrayidx28, align 2
  %conv29 = sext i16 %15 to i32
  %cmp30 = icmp eq i32 %conv29, 0
  br i1 %cmp30, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true27
  %16 = load i16*, i16** %d, align 8
  %arrayidx32 = getelementptr inbounds i16, i16* %16, i64 0
  %17 = load i16, i16* %arrayidx32, align 2
  %conv33 = sext i16 %17 to i32
  %mul = mul nsw i32 %conv33, 4
  store i32 %mul, i32* %dcterm, align 4
  %18 = load i32, i32* %dcterm, align 4
  %19 = load i32*, i32** %v, align 8
  %arrayidx34 = getelementptr inbounds i32, i32* %19, i64 56
  store i32 %18, i32* %arrayidx34, align 4
  %20 = load i32*, i32** %v, align 8
  %arrayidx35 = getelementptr inbounds i32, i32* %20, i64 48
  store i32 %18, i32* %arrayidx35, align 4
  %21 = load i32*, i32** %v, align 8
  %arrayidx36 = getelementptr inbounds i32, i32* %21, i64 40
  store i32 %18, i32* %arrayidx36, align 4
  %22 = load i32*, i32** %v, align 8
  %arrayidx37 = getelementptr inbounds i32, i32* %22, i64 32
  store i32 %18, i32* %arrayidx37, align 4
  %23 = load i32*, i32** %v, align 8
  %arrayidx38 = getelementptr inbounds i32, i32* %23, i64 24
  store i32 %18, i32* %arrayidx38, align 4
  %24 = load i32*, i32** %v, align 8
  %arrayidx39 = getelementptr inbounds i32, i32* %24, i64 16
  store i32 %18, i32* %arrayidx39, align 4
  %25 = load i32*, i32** %v, align 8
  %arrayidx40 = getelementptr inbounds i32, i32* %25, i64 8
  store i32 %18, i32* %arrayidx40, align 4
  %26 = load i32*, i32** %v, align 8
  %arrayidx41 = getelementptr inbounds i32, i32* %26, i64 0
  store i32 %18, i32* %arrayidx41, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true27, %land.lhs.true22, %land.lhs.true17, %land.lhs.true12, %land.lhs.true7, %land.lhs.true, %for.body
  %27 = load i16*, i16** %d, align 8
  %arrayidx42 = getelementptr inbounds i16, i16* %27, i64 16
  %28 = load i16, i16* %arrayidx42, align 2
  %conv43 = sext i16 %28 to i32
  store i32 %conv43, i32* %p2, align 4
  %29 = load i16*, i16** %d, align 8
  %arrayidx44 = getelementptr inbounds i16, i16* %29, i64 48
  %30 = load i16, i16* %arrayidx44, align 2
  %conv45 = sext i16 %30 to i32
  store i32 %conv45, i32* %p3, align 4
  %31 = load i32, i32* %p2, align 4
  %32 = load i32, i32* %p3, align 4
  %add = add nsw i32 %31, %32
  %mul46 = mul nsw i32 %add, 2217
  store i32 %mul46, i32* %p1, align 4
  %33 = load i32, i32* %p1, align 4
  %34 = load i32, i32* %p3, align 4
  %mul47 = mul nsw i32 %34, -7567
  %add48 = add nsw i32 %33, %mul47
  store i32 %add48, i32* %t2, align 4
  %35 = load i32, i32* %p1, align 4
  %36 = load i32, i32* %p2, align 4
  %mul49 = mul nsw i32 %36, 3135
  %add50 = add nsw i32 %35, %mul49
  store i32 %add50, i32* %t3, align 4
  %37 = load i16*, i16** %d, align 8
  %arrayidx51 = getelementptr inbounds i16, i16* %37, i64 0
  %38 = load i16, i16* %arrayidx51, align 2
  %conv52 = sext i16 %38 to i32
  store i32 %conv52, i32* %p2, align 4
  %39 = load i16*, i16** %d, align 8
  %arrayidx53 = getelementptr inbounds i16, i16* %39, i64 32
  %40 = load i16, i16* %arrayidx53, align 2
  %conv54 = sext i16 %40 to i32
  store i32 %conv54, i32* %p3, align 4
  %41 = load i32, i32* %p2, align 4
  %42 = load i32, i32* %p3, align 4
  %add55 = add nsw i32 %41, %42
  %mul56 = mul nsw i32 %add55, 4096
  store i32 %mul56, i32* %t0, align 4
  %43 = load i32, i32* %p2, align 4
  %44 = load i32, i32* %p3, align 4
  %sub = sub nsw i32 %43, %44
  %mul57 = mul nsw i32 %sub, 4096
  store i32 %mul57, i32* %t1, align 4
  %45 = load i32, i32* %t0, align 4
  %46 = load i32, i32* %t3, align 4
  %add58 = add nsw i32 %45, %46
  store i32 %add58, i32* %x0, align 4
  %47 = load i32, i32* %t0, align 4
  %48 = load i32, i32* %t3, align 4
  %sub59 = sub nsw i32 %47, %48
  store i32 %sub59, i32* %x3, align 4
  %49 = load i32, i32* %t1, align 4
  %50 = load i32, i32* %t2, align 4
  %add60 = add nsw i32 %49, %50
  store i32 %add60, i32* %x1, align 4
  %51 = load i32, i32* %t1, align 4
  %52 = load i32, i32* %t2, align 4
  %sub61 = sub nsw i32 %51, %52
  store i32 %sub61, i32* %x2, align 4
  %53 = load i16*, i16** %d, align 8
  %arrayidx62 = getelementptr inbounds i16, i16* %53, i64 56
  %54 = load i16, i16* %arrayidx62, align 2
  %conv63 = sext i16 %54 to i32
  store i32 %conv63, i32* %t0, align 4
  %55 = load i16*, i16** %d, align 8
  %arrayidx64 = getelementptr inbounds i16, i16* %55, i64 40
  %56 = load i16, i16* %arrayidx64, align 2
  %conv65 = sext i16 %56 to i32
  store i32 %conv65, i32* %t1, align 4
  %57 = load i16*, i16** %d, align 8
  %arrayidx66 = getelementptr inbounds i16, i16* %57, i64 24
  %58 = load i16, i16* %arrayidx66, align 2
  %conv67 = sext i16 %58 to i32
  store i32 %conv67, i32* %t2, align 4
  %59 = load i16*, i16** %d, align 8
  %arrayidx68 = getelementptr inbounds i16, i16* %59, i64 8
  %60 = load i16, i16* %arrayidx68, align 2
  %conv69 = sext i16 %60 to i32
  store i32 %conv69, i32* %t3, align 4
  %61 = load i32, i32* %t0, align 4
  %62 = load i32, i32* %t2, align 4
  %add70 = add nsw i32 %61, %62
  store i32 %add70, i32* %p3, align 4
  %63 = load i32, i32* %t1, align 4
  %64 = load i32, i32* %t3, align 4
  %add71 = add nsw i32 %63, %64
  store i32 %add71, i32* %p4, align 4
  %65 = load i32, i32* %t0, align 4
  %66 = load i32, i32* %t3, align 4
  %add72 = add nsw i32 %65, %66
  store i32 %add72, i32* %p1, align 4
  %67 = load i32, i32* %t1, align 4
  %68 = load i32, i32* %t2, align 4
  %add73 = add nsw i32 %67, %68
  store i32 %add73, i32* %p2, align 4
  %69 = load i32, i32* %p3, align 4
  %70 = load i32, i32* %p4, align 4
  %add74 = add nsw i32 %69, %70
  %mul75 = mul nsw i32 %add74, 4816
  store i32 %mul75, i32* %p5, align 4
  %71 = load i32, i32* %t0, align 4
  %mul76 = mul nsw i32 %71, 1223
  store i32 %mul76, i32* %t0, align 4
  %72 = load i32, i32* %t1, align 4
  %mul77 = mul nsw i32 %72, 8410
  store i32 %mul77, i32* %t1, align 4
  %73 = load i32, i32* %t2, align 4
  %mul78 = mul nsw i32 %73, 12586
  store i32 %mul78, i32* %t2, align 4
  %74 = load i32, i32* %t3, align 4
  %mul79 = mul nsw i32 %74, 6149
  store i32 %mul79, i32* %t3, align 4
  %75 = load i32, i32* %p5, align 4
  %76 = load i32, i32* %p1, align 4
  %mul80 = mul nsw i32 %76, -3685
  %add81 = add nsw i32 %75, %mul80
  store i32 %add81, i32* %p1, align 4
  %77 = load i32, i32* %p5, align 4
  %78 = load i32, i32* %p2, align 4
  %mul82 = mul nsw i32 %78, -10497
  %add83 = add nsw i32 %77, %mul82
  store i32 %add83, i32* %p2, align 4
  %79 = load i32, i32* %p3, align 4
  %mul84 = mul nsw i32 %79, -8034
  store i32 %mul84, i32* %p3, align 4
  %80 = load i32, i32* %p4, align 4
  %mul85 = mul nsw i32 %80, -1597
  store i32 %mul85, i32* %p4, align 4
  %81 = load i32, i32* %p1, align 4
  %82 = load i32, i32* %p4, align 4
  %add86 = add nsw i32 %81, %82
  %83 = load i32, i32* %t3, align 4
  %add87 = add nsw i32 %83, %add86
  store i32 %add87, i32* %t3, align 4
  %84 = load i32, i32* %p2, align 4
  %85 = load i32, i32* %p3, align 4
  %add88 = add nsw i32 %84, %85
  %86 = load i32, i32* %t2, align 4
  %add89 = add nsw i32 %86, %add88
  store i32 %add89, i32* %t2, align 4
  %87 = load i32, i32* %p2, align 4
  %88 = load i32, i32* %p4, align 4
  %add90 = add nsw i32 %87, %88
  %89 = load i32, i32* %t1, align 4
  %add91 = add nsw i32 %89, %add90
  store i32 %add91, i32* %t1, align 4
  %90 = load i32, i32* %p1, align 4
  %91 = load i32, i32* %p3, align 4
  %add92 = add nsw i32 %90, %91
  %92 = load i32, i32* %t0, align 4
  %add93 = add nsw i32 %92, %add92
  store i32 %add93, i32* %t0, align 4
  %93 = load i32, i32* %x0, align 4
  %add94 = add nsw i32 %93, 512
  store i32 %add94, i32* %x0, align 4
  %94 = load i32, i32* %x1, align 4
  %add95 = add nsw i32 %94, 512
  store i32 %add95, i32* %x1, align 4
  %95 = load i32, i32* %x2, align 4
  %add96 = add nsw i32 %95, 512
  store i32 %add96, i32* %x2, align 4
  %96 = load i32, i32* %x3, align 4
  %add97 = add nsw i32 %96, 512
  store i32 %add97, i32* %x3, align 4
  %97 = load i32, i32* %x0, align 4
  %98 = load i32, i32* %t3, align 4
  %add98 = add nsw i32 %97, %98
  %shr = ashr i32 %add98, 10
  %99 = load i32*, i32** %v, align 8
  %arrayidx99 = getelementptr inbounds i32, i32* %99, i64 0
  store i32 %shr, i32* %arrayidx99, align 4
  %100 = load i32, i32* %x0, align 4
  %101 = load i32, i32* %t3, align 4
  %sub100 = sub nsw i32 %100, %101
  %shr101 = ashr i32 %sub100, 10
  %102 = load i32*, i32** %v, align 8
  %arrayidx102 = getelementptr inbounds i32, i32* %102, i64 56
  store i32 %shr101, i32* %arrayidx102, align 4
  %103 = load i32, i32* %x1, align 4
  %104 = load i32, i32* %t2, align 4
  %add103 = add nsw i32 %103, %104
  %shr104 = ashr i32 %add103, 10
  %105 = load i32*, i32** %v, align 8
  %arrayidx105 = getelementptr inbounds i32, i32* %105, i64 8
  store i32 %shr104, i32* %arrayidx105, align 4
  %106 = load i32, i32* %x1, align 4
  %107 = load i32, i32* %t2, align 4
  %sub106 = sub nsw i32 %106, %107
  %shr107 = ashr i32 %sub106, 10
  %108 = load i32*, i32** %v, align 8
  %arrayidx108 = getelementptr inbounds i32, i32* %108, i64 48
  store i32 %shr107, i32* %arrayidx108, align 4
  %109 = load i32, i32* %x2, align 4
  %110 = load i32, i32* %t1, align 4
  %add109 = add nsw i32 %109, %110
  %shr110 = ashr i32 %add109, 10
  %111 = load i32*, i32** %v, align 8
  %arrayidx111 = getelementptr inbounds i32, i32* %111, i64 16
  store i32 %shr110, i32* %arrayidx111, align 4
  %112 = load i32, i32* %x2, align 4
  %113 = load i32, i32* %t1, align 4
  %sub112 = sub nsw i32 %112, %113
  %shr113 = ashr i32 %sub112, 10
  %114 = load i32*, i32** %v, align 8
  %arrayidx114 = getelementptr inbounds i32, i32* %114, i64 40
  store i32 %shr113, i32* %arrayidx114, align 4
  %115 = load i32, i32* %x3, align 4
  %116 = load i32, i32* %t0, align 4
  %add115 = add nsw i32 %115, %116
  %shr116 = ashr i32 %add115, 10
  %117 = load i32*, i32** %v, align 8
  %arrayidx117 = getelementptr inbounds i32, i32* %117, i64 24
  store i32 %shr116, i32* %arrayidx117, align 4
  %118 = load i32, i32* %x3, align 4
  %119 = load i32, i32* %t0, align 4
  %sub118 = sub nsw i32 %118, %119
  %shr119 = ashr i32 %sub118, 10
  %120 = load i32*, i32** %v, align 8
  %arrayidx120 = getelementptr inbounds i32, i32* %120, i64 32
  store i32 %shr119, i32* %arrayidx120, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %121 = load i32, i32* %i, align 4
  %inc = add nsw i32 %121, 1
  store i32 %inc, i32* %i, align 4
  %122 = load i16*, i16** %d, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %122, i32 1
  store i16* %incdec.ptr, i16** %d, align 8
  %123 = load i32*, i32** %v, align 8
  %incdec.ptr121 = getelementptr inbounds i32, i32* %123, i32 1
  store i32* %incdec.ptr121, i32** %v, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  %arraydecay122 = getelementptr inbounds [64 x i32], [64 x i32]* %val, i64 0, i64 0
  store i32* %arraydecay122, i32** %v, align 8
  %124 = load i8*, i8** %out.addr, align 8
  store i8* %124, i8** %o, align 8
  br label %for.cond123

for.cond123:                                      ; preds = %for.inc221, %for.end
  %125 = load i32, i32* %i, align 4
  %cmp124 = icmp slt i32 %125, 8
  br i1 %cmp124, label %for.body126, label %for.end224

for.body126:                                      ; preds = %for.cond123
  %126 = load i32*, i32** %v, align 8
  %arrayidx140 = getelementptr inbounds i32, i32* %126, i64 2
  %127 = load i32, i32* %arrayidx140, align 4
  store i32 %127, i32* %p2132, align 4
  %128 = load i32*, i32** %v, align 8
  %arrayidx141 = getelementptr inbounds i32, i32* %128, i64 6
  %129 = load i32, i32* %arrayidx141, align 4
  store i32 %129, i32* %p3133, align 4
  %130 = load i32, i32* %p2132, align 4
  %131 = load i32, i32* %p3133, align 4
  %add142 = add nsw i32 %130, %131
  %mul143 = mul nsw i32 %add142, 2217
  store i32 %mul143, i32* %p1131, align 4
  %132 = load i32, i32* %p1131, align 4
  %133 = load i32, i32* %p3133, align 4
  %mul144 = mul nsw i32 %133, -7567
  %add145 = add nsw i32 %132, %mul144
  store i32 %add145, i32* %t2129, align 4
  %134 = load i32, i32* %p1131, align 4
  %135 = load i32, i32* %p2132, align 4
  %mul146 = mul nsw i32 %135, 3135
  %add147 = add nsw i32 %134, %mul146
  store i32 %add147, i32* %t3130, align 4
  %136 = load i32*, i32** %v, align 8
  %arrayidx148 = getelementptr inbounds i32, i32* %136, i64 0
  %137 = load i32, i32* %arrayidx148, align 4
  store i32 %137, i32* %p2132, align 4
  %138 = load i32*, i32** %v, align 8
  %arrayidx149 = getelementptr inbounds i32, i32* %138, i64 4
  %139 = load i32, i32* %arrayidx149, align 4
  store i32 %139, i32* %p3133, align 4
  %140 = load i32, i32* %p2132, align 4
  %141 = load i32, i32* %p3133, align 4
  %add150 = add nsw i32 %140, %141
  %mul151 = mul nsw i32 %add150, 4096
  store i32 %mul151, i32* %t0127, align 4
  %142 = load i32, i32* %p2132, align 4
  %143 = load i32, i32* %p3133, align 4
  %sub152 = sub nsw i32 %142, %143
  %mul153 = mul nsw i32 %sub152, 4096
  store i32 %mul153, i32* %t1128, align 4
  %144 = load i32, i32* %t0127, align 4
  %145 = load i32, i32* %t3130, align 4
  %add154 = add nsw i32 %144, %145
  store i32 %add154, i32* %x0136, align 4
  %146 = load i32, i32* %t0127, align 4
  %147 = load i32, i32* %t3130, align 4
  %sub155 = sub nsw i32 %146, %147
  store i32 %sub155, i32* %x3139, align 4
  %148 = load i32, i32* %t1128, align 4
  %149 = load i32, i32* %t2129, align 4
  %add156 = add nsw i32 %148, %149
  store i32 %add156, i32* %x1137, align 4
  %150 = load i32, i32* %t1128, align 4
  %151 = load i32, i32* %t2129, align 4
  %sub157 = sub nsw i32 %150, %151
  store i32 %sub157, i32* %x2138, align 4
  %152 = load i32*, i32** %v, align 8
  %arrayidx158 = getelementptr inbounds i32, i32* %152, i64 7
  %153 = load i32, i32* %arrayidx158, align 4
  store i32 %153, i32* %t0127, align 4
  %154 = load i32*, i32** %v, align 8
  %arrayidx159 = getelementptr inbounds i32, i32* %154, i64 5
  %155 = load i32, i32* %arrayidx159, align 4
  store i32 %155, i32* %t1128, align 4
  %156 = load i32*, i32** %v, align 8
  %arrayidx160 = getelementptr inbounds i32, i32* %156, i64 3
  %157 = load i32, i32* %arrayidx160, align 4
  store i32 %157, i32* %t2129, align 4
  %158 = load i32*, i32** %v, align 8
  %arrayidx161 = getelementptr inbounds i32, i32* %158, i64 1
  %159 = load i32, i32* %arrayidx161, align 4
  store i32 %159, i32* %t3130, align 4
  %160 = load i32, i32* %t0127, align 4
  %161 = load i32, i32* %t2129, align 4
  %add162 = add nsw i32 %160, %161
  store i32 %add162, i32* %p3133, align 4
  %162 = load i32, i32* %t1128, align 4
  %163 = load i32, i32* %t3130, align 4
  %add163 = add nsw i32 %162, %163
  store i32 %add163, i32* %p4134, align 4
  %164 = load i32, i32* %t0127, align 4
  %165 = load i32, i32* %t3130, align 4
  %add164 = add nsw i32 %164, %165
  store i32 %add164, i32* %p1131, align 4
  %166 = load i32, i32* %t1128, align 4
  %167 = load i32, i32* %t2129, align 4
  %add165 = add nsw i32 %166, %167
  store i32 %add165, i32* %p2132, align 4
  %168 = load i32, i32* %p3133, align 4
  %169 = load i32, i32* %p4134, align 4
  %add166 = add nsw i32 %168, %169
  %mul167 = mul nsw i32 %add166, 4816
  store i32 %mul167, i32* %p5135, align 4
  %170 = load i32, i32* %t0127, align 4
  %mul168 = mul nsw i32 %170, 1223
  store i32 %mul168, i32* %t0127, align 4
  %171 = load i32, i32* %t1128, align 4
  %mul169 = mul nsw i32 %171, 8410
  store i32 %mul169, i32* %t1128, align 4
  %172 = load i32, i32* %t2129, align 4
  %mul170 = mul nsw i32 %172, 12586
  store i32 %mul170, i32* %t2129, align 4
  %173 = load i32, i32* %t3130, align 4
  %mul171 = mul nsw i32 %173, 6149
  store i32 %mul171, i32* %t3130, align 4
  %174 = load i32, i32* %p5135, align 4
  %175 = load i32, i32* %p1131, align 4
  %mul172 = mul nsw i32 %175, -3685
  %add173 = add nsw i32 %174, %mul172
  store i32 %add173, i32* %p1131, align 4
  %176 = load i32, i32* %p5135, align 4
  %177 = load i32, i32* %p2132, align 4
  %mul174 = mul nsw i32 %177, -10497
  %add175 = add nsw i32 %176, %mul174
  store i32 %add175, i32* %p2132, align 4
  %178 = load i32, i32* %p3133, align 4
  %mul176 = mul nsw i32 %178, -8034
  store i32 %mul176, i32* %p3133, align 4
  %179 = load i32, i32* %p4134, align 4
  %mul177 = mul nsw i32 %179, -1597
  store i32 %mul177, i32* %p4134, align 4
  %180 = load i32, i32* %p1131, align 4
  %181 = load i32, i32* %p4134, align 4
  %add178 = add nsw i32 %180, %181
  %182 = load i32, i32* %t3130, align 4
  %add179 = add nsw i32 %182, %add178
  store i32 %add179, i32* %t3130, align 4
  %183 = load i32, i32* %p2132, align 4
  %184 = load i32, i32* %p3133, align 4
  %add180 = add nsw i32 %183, %184
  %185 = load i32, i32* %t2129, align 4
  %add181 = add nsw i32 %185, %add180
  store i32 %add181, i32* %t2129, align 4
  %186 = load i32, i32* %p2132, align 4
  %187 = load i32, i32* %p4134, align 4
  %add182 = add nsw i32 %186, %187
  %188 = load i32, i32* %t1128, align 4
  %add183 = add nsw i32 %188, %add182
  store i32 %add183, i32* %t1128, align 4
  %189 = load i32, i32* %p1131, align 4
  %190 = load i32, i32* %p3133, align 4
  %add184 = add nsw i32 %189, %190
  %191 = load i32, i32* %t0127, align 4
  %add185 = add nsw i32 %191, %add184
  store i32 %add185, i32* %t0127, align 4
  %192 = load i32, i32* %x0136, align 4
  %add186 = add nsw i32 %192, 16842752
  store i32 %add186, i32* %x0136, align 4
  %193 = load i32, i32* %x1137, align 4
  %add187 = add nsw i32 %193, 16842752
  store i32 %add187, i32* %x1137, align 4
  %194 = load i32, i32* %x2138, align 4
  %add188 = add nsw i32 %194, 16842752
  store i32 %add188, i32* %x2138, align 4
  %195 = load i32, i32* %x3139, align 4
  %add189 = add nsw i32 %195, 16842752
  store i32 %add189, i32* %x3139, align 4
  %196 = load i32, i32* %x0136, align 4
  %197 = load i32, i32* %t3130, align 4
  %add190 = add nsw i32 %196, %197
  %shr191 = ashr i32 %add190, 17
  %call = call zeroext i8 @stbi__clamp(i32 %shr191)
  %198 = load i8*, i8** %o, align 8
  %arrayidx192 = getelementptr inbounds i8, i8* %198, i64 0
  store i8 %call, i8* %arrayidx192, align 1
  %199 = load i32, i32* %x0136, align 4
  %200 = load i32, i32* %t3130, align 4
  %sub193 = sub nsw i32 %199, %200
  %shr194 = ashr i32 %sub193, 17
  %call195 = call zeroext i8 @stbi__clamp(i32 %shr194)
  %201 = load i8*, i8** %o, align 8
  %arrayidx196 = getelementptr inbounds i8, i8* %201, i64 7
  store i8 %call195, i8* %arrayidx196, align 1
  %202 = load i32, i32* %x1137, align 4
  %203 = load i32, i32* %t2129, align 4
  %add197 = add nsw i32 %202, %203
  %shr198 = ashr i32 %add197, 17
  %call199 = call zeroext i8 @stbi__clamp(i32 %shr198)
  %204 = load i8*, i8** %o, align 8
  %arrayidx200 = getelementptr inbounds i8, i8* %204, i64 1
  store i8 %call199, i8* %arrayidx200, align 1
  %205 = load i32, i32* %x1137, align 4
  %206 = load i32, i32* %t2129, align 4
  %sub201 = sub nsw i32 %205, %206
  %shr202 = ashr i32 %sub201, 17
  %call203 = call zeroext i8 @stbi__clamp(i32 %shr202)
  %207 = load i8*, i8** %o, align 8
  %arrayidx204 = getelementptr inbounds i8, i8* %207, i64 6
  store i8 %call203, i8* %arrayidx204, align 1
  %208 = load i32, i32* %x2138, align 4
  %209 = load i32, i32* %t1128, align 4
  %add205 = add nsw i32 %208, %209
  %shr206 = ashr i32 %add205, 17
  %call207 = call zeroext i8 @stbi__clamp(i32 %shr206)
  %210 = load i8*, i8** %o, align 8
  %arrayidx208 = getelementptr inbounds i8, i8* %210, i64 2
  store i8 %call207, i8* %arrayidx208, align 1
  %211 = load i32, i32* %x2138, align 4
  %212 = load i32, i32* %t1128, align 4
  %sub209 = sub nsw i32 %211, %212
  %shr210 = ashr i32 %sub209, 17
  %call211 = call zeroext i8 @stbi__clamp(i32 %shr210)
  %213 = load i8*, i8** %o, align 8
  %arrayidx212 = getelementptr inbounds i8, i8* %213, i64 5
  store i8 %call211, i8* %arrayidx212, align 1
  %214 = load i32, i32* %x3139, align 4
  %215 = load i32, i32* %t0127, align 4
  %add213 = add nsw i32 %214, %215
  %shr214 = ashr i32 %add213, 17
  %call215 = call zeroext i8 @stbi__clamp(i32 %shr214)
  %216 = load i8*, i8** %o, align 8
  %arrayidx216 = getelementptr inbounds i8, i8* %216, i64 3
  store i8 %call215, i8* %arrayidx216, align 1
  %217 = load i32, i32* %x3139, align 4
  %218 = load i32, i32* %t0127, align 4
  %sub217 = sub nsw i32 %217, %218
  %shr218 = ashr i32 %sub217, 17
  %call219 = call zeroext i8 @stbi__clamp(i32 %shr218)
  %219 = load i8*, i8** %o, align 8
  %arrayidx220 = getelementptr inbounds i8, i8* %219, i64 4
  store i8 %call219, i8* %arrayidx220, align 1
  br label %for.inc221

for.inc221:                                       ; preds = %for.body126
  %220 = load i32, i32* %i, align 4
  %inc222 = add nsw i32 %220, 1
  store i32 %inc222, i32* %i, align 4
  %221 = load i32*, i32** %v, align 8
  %add.ptr = getelementptr inbounds i32, i32* %221, i64 8
  store i32* %add.ptr, i32** %v, align 8
  %222 = load i32, i32* %out_stride.addr, align 4
  %223 = load i8*, i8** %o, align 8
  %idx.ext = sext i32 %222 to i64
  %add.ptr223 = getelementptr inbounds i8, i8* %223, i64 %idx.ext
  store i8* %add.ptr223, i8** %o, align 8
  br label %for.cond123

for.end224:                                       ; preds = %for.cond123
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__YCbCr_to_RGB_row(i8* %out, i8* %y, i8* %pcb, i8* %pcr, i32 %count, i32 %step) #0 {
entry:
  %out.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %pcb.addr = alloca i8*, align 8
  %pcr.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %y_fixed = alloca i32, align 4
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  %cr = alloca i32, align 4
  %cb = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8
  store i8* %y, i8** %y.addr, align 8
  store i8* %pcb, i8** %pcb.addr, align 8
  store i8* %pcr, i8** %pcr.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %count.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %y.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %shl = shl i32 %conv, 20
  %add = add nsw i32 %shl, 524288
  store i32 %add, i32* %y_fixed, align 4
  %5 = load i8*, i8** %pcr.addr, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %6 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 %idxprom1
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  %sub = sub nsw i32 %conv3, 128
  store i32 %sub, i32* %cr, align 4
  %8 = load i8*, i8** %pcb.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %9 to i64
  %arrayidx5 = getelementptr inbounds i8, i8* %8, i64 %idxprom4
  %10 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %10 to i32
  %sub7 = sub nsw i32 %conv6, 128
  store i32 %sub7, i32* %cb, align 4
  %11 = load i32, i32* %y_fixed, align 4
  %12 = load i32, i32* %cr, align 4
  %mul = mul nsw i32 %12, 1470208
  %add8 = add nsw i32 %11, %mul
  store i32 %add8, i32* %r, align 4
  %13 = load i32, i32* %y_fixed, align 4
  %14 = load i32, i32* %cr, align 4
  %mul9 = mul nsw i32 %14, -748800
  %add10 = add nsw i32 %13, %mul9
  %15 = load i32, i32* %cb, align 4
  %mul11 = mul nsw i32 %15, -360960
  %and = and i32 %mul11, -65536
  %add12 = add i32 %add10, %and
  store i32 %add12, i32* %g, align 4
  %16 = load i32, i32* %y_fixed, align 4
  %17 = load i32, i32* %cb, align 4
  %mul13 = mul nsw i32 %17, 1858048
  %add14 = add nsw i32 %16, %mul13
  store i32 %add14, i32* %b, align 4
  %18 = load i32, i32* %r, align 4
  %shr = ashr i32 %18, 20
  store i32 %shr, i32* %r, align 4
  %19 = load i32, i32* %g, align 4
  %shr15 = ashr i32 %19, 20
  store i32 %shr15, i32* %g, align 4
  %20 = load i32, i32* %b, align 4
  %shr16 = ashr i32 %20, 20
  store i32 %shr16, i32* %b, align 4
  %21 = load i32, i32* %r, align 4
  %cmp17 = icmp ugt i32 %21, 255
  br i1 %cmp17, label %if.then, label %if.end22

if.then:                                          ; preds = %for.body
  %22 = load i32, i32* %r, align 4
  %cmp19 = icmp slt i32 %22, 0
  br i1 %cmp19, label %if.then21, label %if.else

if.then21:                                        ; preds = %if.then
  store i32 0, i32* %r, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 255, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then21
  br label %if.end22

if.end22:                                         ; preds = %if.end, %for.body
  %23 = load i32, i32* %g, align 4
  %cmp23 = icmp ugt i32 %23, 255
  br i1 %cmp23, label %if.then25, label %if.end31

if.then25:                                        ; preds = %if.end22
  %24 = load i32, i32* %g, align 4
  %cmp26 = icmp slt i32 %24, 0
  br i1 %cmp26, label %if.then28, label %if.else29

if.then28:                                        ; preds = %if.then25
  store i32 0, i32* %g, align 4
  br label %if.end30

if.else29:                                        ; preds = %if.then25
  store i32 255, i32* %g, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.else29, %if.then28
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.end22
  %25 = load i32, i32* %b, align 4
  %cmp32 = icmp ugt i32 %25, 255
  br i1 %cmp32, label %if.then34, label %if.end40

if.then34:                                        ; preds = %if.end31
  %26 = load i32, i32* %b, align 4
  %cmp35 = icmp slt i32 %26, 0
  br i1 %cmp35, label %if.then37, label %if.else38

if.then37:                                        ; preds = %if.then34
  store i32 0, i32* %b, align 4
  br label %if.end39

if.else38:                                        ; preds = %if.then34
  store i32 255, i32* %b, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.else38, %if.then37
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end31
  %27 = load i32, i32* %r, align 4
  %conv41 = trunc i32 %27 to i8
  %28 = load i8*, i8** %out.addr, align 8
  %arrayidx42 = getelementptr inbounds i8, i8* %28, i64 0
  store i8 %conv41, i8* %arrayidx42, align 1
  %29 = load i32, i32* %g, align 4
  %conv43 = trunc i32 %29 to i8
  %30 = load i8*, i8** %out.addr, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %30, i64 1
  store i8 %conv43, i8* %arrayidx44, align 1
  %31 = load i32, i32* %b, align 4
  %conv45 = trunc i32 %31 to i8
  %32 = load i8*, i8** %out.addr, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %32, i64 2
  store i8 %conv45, i8* %arrayidx46, align 1
  %33 = load i8*, i8** %out.addr, align 8
  %arrayidx47 = getelementptr inbounds i8, i8* %33, i64 3
  store i8 -1, i8* %arrayidx47, align 1
  %34 = load i32, i32* %step.addr, align 4
  %35 = load i8*, i8** %out.addr, align 8
  %idx.ext = sext i32 %34 to i64
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %idx.ext
  store i8* %add.ptr, i8** %out.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end40
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__resample_row_hv_2(i8* %out, i8* %in_near, i8* %in_far, i32 %w, i32 %hs) #0 {
entry:
  %retval = alloca i8*, align 8
  %out.addr = alloca i8*, align 8
  %in_near.addr = alloca i8*, align 8
  %in_far.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %hs.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t0 = alloca i32, align 4
  %t1 = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8
  store i8* %in_near, i8** %in_near.addr, align 8
  store i8* %in_far, i8** %in_far.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %hs, i32* %hs.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %in_near.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %mul = mul nsw i32 3, %conv
  %3 = load i8*, i8** %in_far.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %4 to i32
  %add = add nsw i32 %mul, %conv2
  %add3 = add nsw i32 %add, 2
  %shr = ashr i32 %add3, 2
  %conv4 = trunc i32 %shr to i8
  %5 = load i8*, i8** %out.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %5, i64 1
  store i8 %conv4, i8* %arrayidx5, align 1
  %6 = load i8*, i8** %out.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %6, i64 0
  store i8 %conv4, i8* %arrayidx6, align 1
  %7 = load i8*, i8** %out.addr, align 8
  store i8* %7, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %in_near.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %mul9 = mul nsw i32 3, %conv8
  %10 = load i8*, i8** %in_far.addr, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %11 to i32
  %add12 = add nsw i32 %mul9, %conv11
  store i32 %add12, i32* %t1, align 4
  %12 = load i32, i32* %t1, align 4
  %add13 = add nsw i32 %12, 2
  %shr14 = ashr i32 %add13, 2
  %conv15 = trunc i32 %shr14 to i8
  %13 = load i8*, i8** %out.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %13, i64 0
  store i8 %conv15, i8* %arrayidx16, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %14, %15
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %t1, align 4
  store i32 %16, i32* %t0, align 4
  %17 = load i8*, i8** %in_near.addr, align 8
  %18 = load i32, i32* %i, align 4
  %idxprom = sext i32 %18 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %17, i64 %idxprom
  %19 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %19 to i32
  %mul21 = mul nsw i32 3, %conv20
  %20 = load i8*, i8** %in_far.addr, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %21 to i64
  %arrayidx23 = getelementptr inbounds i8, i8* %20, i64 %idxprom22
  %22 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %22 to i32
  %add25 = add nsw i32 %mul21, %conv24
  store i32 %add25, i32* %t1, align 4
  %23 = load i32, i32* %t0, align 4
  %mul26 = mul nsw i32 3, %23
  %24 = load i32, i32* %t1, align 4
  %add27 = add nsw i32 %mul26, %24
  %add28 = add nsw i32 %add27, 8
  %shr29 = ashr i32 %add28, 4
  %conv30 = trunc i32 %shr29 to i8
  %25 = load i8*, i8** %out.addr, align 8
  %26 = load i32, i32* %i, align 4
  %mul31 = mul nsw i32 %26, 2
  %sub = sub nsw i32 %mul31, 1
  %idxprom32 = sext i32 %sub to i64
  %arrayidx33 = getelementptr inbounds i8, i8* %25, i64 %idxprom32
  store i8 %conv30, i8* %arrayidx33, align 1
  %27 = load i32, i32* %t1, align 4
  %mul34 = mul nsw i32 3, %27
  %28 = load i32, i32* %t0, align 4
  %add35 = add nsw i32 %mul34, %28
  %add36 = add nsw i32 %add35, 8
  %shr37 = ashr i32 %add36, 4
  %conv38 = trunc i32 %shr37 to i8
  %29 = load i8*, i8** %out.addr, align 8
  %30 = load i32, i32* %i, align 4
  %mul39 = mul nsw i32 %30, 2
  %idxprom40 = sext i32 %mul39 to i64
  %arrayidx41 = getelementptr inbounds i8, i8* %29, i64 %idxprom40
  store i8 %conv38, i8* %arrayidx41, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = load i32, i32* %t1, align 4
  %add42 = add nsw i32 %32, 2
  %shr43 = ashr i32 %add42, 2
  %conv44 = trunc i32 %shr43 to i8
  %33 = load i8*, i8** %out.addr, align 8
  %34 = load i32, i32* %w.addr, align 4
  %mul45 = mul nsw i32 %34, 2
  %sub46 = sub nsw i32 %mul45, 1
  %idxprom47 = sext i32 %sub46 to i64
  %arrayidx48 = getelementptr inbounds i8, i8* %33, i64 %idxprom47
  store i8 %conv44, i8* %arrayidx48, align 1
  %35 = load i8*, i8** %out.addr, align 8
  store i8* %35, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %36 = load i8*, i8** %retval, align 8
  ret i8* %36
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__sse2_available() #0 {
entry:
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__idct_simd(i8* %out, i32 %out_stride, i16* %data) #8 {
entry:
  %__w7.addr.i.i1210 = alloca i16, align 2
  %__w6.addr.i.i1211 = alloca i16, align 2
  %__w5.addr.i.i1212 = alloca i16, align 2
  %__w4.addr.i.i1213 = alloca i16, align 2
  %__w3.addr.i.i1214 = alloca i16, align 2
  %__w2.addr.i.i1215 = alloca i16, align 2
  %__w1.addr.i.i1216 = alloca i16, align 2
  %__w0.addr.i.i1217 = alloca i16, align 2
  %.compoundliteral.i.i1218 = alloca <8 x i16>, align 16
  %__w0.addr.i1219 = alloca i16, align 2
  %__w1.addr.i1220 = alloca i16, align 2
  %__w2.addr.i1221 = alloca i16, align 2
  %__w3.addr.i1222 = alloca i16, align 2
  %__w4.addr.i1223 = alloca i16, align 2
  %__w5.addr.i1224 = alloca i16, align 2
  %__w6.addr.i1225 = alloca i16, align 2
  %__w7.addr.i1226 = alloca i16, align 2
  %__w7.addr.i.i1185 = alloca i16, align 2
  %__w6.addr.i.i1186 = alloca i16, align 2
  %__w5.addr.i.i1187 = alloca i16, align 2
  %__w4.addr.i.i1188 = alloca i16, align 2
  %__w3.addr.i.i1189 = alloca i16, align 2
  %__w2.addr.i.i1190 = alloca i16, align 2
  %__w1.addr.i.i1191 = alloca i16, align 2
  %__w0.addr.i.i1192 = alloca i16, align 2
  %.compoundliteral.i.i1193 = alloca <8 x i16>, align 16
  %__w0.addr.i1194 = alloca i16, align 2
  %__w1.addr.i1195 = alloca i16, align 2
  %__w2.addr.i1196 = alloca i16, align 2
  %__w3.addr.i1197 = alloca i16, align 2
  %__w4.addr.i1198 = alloca i16, align 2
  %__w5.addr.i1199 = alloca i16, align 2
  %__w6.addr.i1200 = alloca i16, align 2
  %__w7.addr.i1201 = alloca i16, align 2
  %__w7.addr.i.i1160 = alloca i16, align 2
  %__w6.addr.i.i1161 = alloca i16, align 2
  %__w5.addr.i.i1162 = alloca i16, align 2
  %__w4.addr.i.i1163 = alloca i16, align 2
  %__w3.addr.i.i1164 = alloca i16, align 2
  %__w2.addr.i.i1165 = alloca i16, align 2
  %__w1.addr.i.i1166 = alloca i16, align 2
  %__w0.addr.i.i1167 = alloca i16, align 2
  %.compoundliteral.i.i1168 = alloca <8 x i16>, align 16
  %__w0.addr.i1169 = alloca i16, align 2
  %__w1.addr.i1170 = alloca i16, align 2
  %__w2.addr.i1171 = alloca i16, align 2
  %__w3.addr.i1172 = alloca i16, align 2
  %__w4.addr.i1173 = alloca i16, align 2
  %__w5.addr.i1174 = alloca i16, align 2
  %__w6.addr.i1175 = alloca i16, align 2
  %__w7.addr.i1176 = alloca i16, align 2
  %__w7.addr.i.i1135 = alloca i16, align 2
  %__w6.addr.i.i1136 = alloca i16, align 2
  %__w5.addr.i.i1137 = alloca i16, align 2
  %__w4.addr.i.i1138 = alloca i16, align 2
  %__w3.addr.i.i1139 = alloca i16, align 2
  %__w2.addr.i.i1140 = alloca i16, align 2
  %__w1.addr.i.i1141 = alloca i16, align 2
  %__w0.addr.i.i1142 = alloca i16, align 2
  %.compoundliteral.i.i1143 = alloca <8 x i16>, align 16
  %__w0.addr.i1144 = alloca i16, align 2
  %__w1.addr.i1145 = alloca i16, align 2
  %__w2.addr.i1146 = alloca i16, align 2
  %__w3.addr.i1147 = alloca i16, align 2
  %__w4.addr.i1148 = alloca i16, align 2
  %__w5.addr.i1149 = alloca i16, align 2
  %__w6.addr.i1150 = alloca i16, align 2
  %__w7.addr.i1151 = alloca i16, align 2
  %__w7.addr.i.i1110 = alloca i16, align 2
  %__w6.addr.i.i1111 = alloca i16, align 2
  %__w5.addr.i.i1112 = alloca i16, align 2
  %__w4.addr.i.i1113 = alloca i16, align 2
  %__w3.addr.i.i1114 = alloca i16, align 2
  %__w2.addr.i.i1115 = alloca i16, align 2
  %__w1.addr.i.i1116 = alloca i16, align 2
  %__w0.addr.i.i1117 = alloca i16, align 2
  %.compoundliteral.i.i1118 = alloca <8 x i16>, align 16
  %__w0.addr.i1119 = alloca i16, align 2
  %__w1.addr.i1120 = alloca i16, align 2
  %__w2.addr.i1121 = alloca i16, align 2
  %__w3.addr.i1122 = alloca i16, align 2
  %__w4.addr.i1123 = alloca i16, align 2
  %__w5.addr.i1124 = alloca i16, align 2
  %__w6.addr.i1125 = alloca i16, align 2
  %__w7.addr.i1126 = alloca i16, align 2
  %__w7.addr.i.i1085 = alloca i16, align 2
  %__w6.addr.i.i1086 = alloca i16, align 2
  %__w5.addr.i.i1087 = alloca i16, align 2
  %__w4.addr.i.i1088 = alloca i16, align 2
  %__w3.addr.i.i1089 = alloca i16, align 2
  %__w2.addr.i.i1090 = alloca i16, align 2
  %__w1.addr.i.i1091 = alloca i16, align 2
  %__w0.addr.i.i1092 = alloca i16, align 2
  %.compoundliteral.i.i1093 = alloca <8 x i16>, align 16
  %__w0.addr.i1094 = alloca i16, align 2
  %__w1.addr.i1095 = alloca i16, align 2
  %__w2.addr.i1096 = alloca i16, align 2
  %__w3.addr.i1097 = alloca i16, align 2
  %__w4.addr.i1098 = alloca i16, align 2
  %__w5.addr.i1099 = alloca i16, align 2
  %__w6.addr.i1100 = alloca i16, align 2
  %__w7.addr.i1101 = alloca i16, align 2
  %__w7.addr.i.i1060 = alloca i16, align 2
  %__w6.addr.i.i1061 = alloca i16, align 2
  %__w5.addr.i.i1062 = alloca i16, align 2
  %__w4.addr.i.i1063 = alloca i16, align 2
  %__w3.addr.i.i1064 = alloca i16, align 2
  %__w2.addr.i.i1065 = alloca i16, align 2
  %__w1.addr.i.i1066 = alloca i16, align 2
  %__w0.addr.i.i1067 = alloca i16, align 2
  %.compoundliteral.i.i1068 = alloca <8 x i16>, align 16
  %__w0.addr.i1069 = alloca i16, align 2
  %__w1.addr.i1070 = alloca i16, align 2
  %__w2.addr.i1071 = alloca i16, align 2
  %__w3.addr.i1072 = alloca i16, align 2
  %__w4.addr.i1073 = alloca i16, align 2
  %__w5.addr.i1074 = alloca i16, align 2
  %__w6.addr.i1075 = alloca i16, align 2
  %__w7.addr.i1076 = alloca i16, align 2
  %__i3.addr.i.i1050 = alloca i32, align 4
  %__i2.addr.i.i1051 = alloca i32, align 4
  %__i1.addr.i.i1052 = alloca i32, align 4
  %__i0.addr.i.i1053 = alloca i32, align 4
  %.compoundliteral.i.i1054 = alloca <4 x i32>, align 16
  %__i.addr.i1055 = alloca i32, align 4
  %__i3.addr.i.i = alloca i32, align 4
  %__i2.addr.i.i = alloca i32, align 4
  %__i1.addr.i.i = alloca i32, align 4
  %__i0.addr.i.i = alloca i32, align 4
  %.compoundliteral.i.i1045 = alloca <4 x i32>, align 16
  %__i.addr.i = alloca i32, align 4
  %__p.addr.i1044 = alloca <2 x i64>*, align 8
  %__p.addr.i1043 = alloca <2 x i64>*, align 8
  %__p.addr.i1042 = alloca <2 x i64>*, align 8
  %__p.addr.i1041 = alloca <2 x i64>*, align 8
  %__p.addr.i1040 = alloca <2 x i64>*, align 8
  %__p.addr.i1039 = alloca <2 x i64>*, align 8
  %__p.addr.i1038 = alloca <2 x i64>*, align 8
  %__p.addr.i1037 = alloca <2 x i64>*, align 8
  %__a.addr.i1034 = alloca <2 x i64>, align 16
  %__b.addr.i1035 = alloca <2 x i64>, align 16
  %__a.addr.i1031 = alloca <2 x i64>, align 16
  %__b.addr.i1032 = alloca <2 x i64>, align 16
  %__a.addr.i1029 = alloca <2 x i64>, align 16
  %__b.addr.i1030 = alloca <2 x i64>, align 16
  %__a.addr.i1027 = alloca <2 x i64>, align 16
  %__b.addr.i1028 = alloca <2 x i64>, align 16
  %__a.addr.i1025 = alloca <2 x i64>, align 16
  %__b.addr.i1026 = alloca <2 x i64>, align 16
  %__a.addr.i1023 = alloca <2 x i64>, align 16
  %__b.addr.i1024 = alloca <2 x i64>, align 16
  %__a.addr.i1020 = alloca <2 x i64>, align 16
  %__b.addr.i1021 = alloca <2 x i64>, align 16
  %__a.addr.i1017 = alloca <2 x i64>, align 16
  %__b.addr.i1018 = alloca <2 x i64>, align 16
  %.compoundliteral.i1016 = alloca <2 x i64>, align 16
  %__a.addr.i1013 = alloca <2 x i64>, align 16
  %__b.addr.i1014 = alloca <2 x i64>, align 16
  %__a.addr.i1011 = alloca <2 x i64>, align 16
  %__count.addr.i1012 = alloca i32, align 4
  %.compoundliteral.i1010 = alloca <2 x i64>, align 16
  %__a.addr.i1007 = alloca <2 x i64>, align 16
  %__b.addr.i1008 = alloca <2 x i64>, align 16
  %__a.addr.i1005 = alloca <2 x i64>, align 16
  %__count.addr.i1006 = alloca i32, align 4
  %.compoundliteral.i1004 = alloca <2 x i64>, align 16
  %__a.addr.i1001 = alloca <2 x i64>, align 16
  %__b.addr.i1002 = alloca <2 x i64>, align 16
  %__a.addr.i999 = alloca <2 x i64>, align 16
  %__count.addr.i1000 = alloca i32, align 4
  %.compoundliteral.i998 = alloca <2 x i64>, align 16
  %__a.addr.i995 = alloca <2 x i64>, align 16
  %__b.addr.i996 = alloca <2 x i64>, align 16
  %__a.addr.i993 = alloca <2 x i64>, align 16
  %__count.addr.i994 = alloca i32, align 4
  %__a.addr.i990 = alloca <2 x i64>, align 16
  %__b.addr.i991 = alloca <2 x i64>, align 16
  %__a.addr.i987 = alloca <2 x i64>, align 16
  %__b.addr.i988 = alloca <2 x i64>, align 16
  %__a.addr.i984 = alloca <2 x i64>, align 16
  %__b.addr.i985 = alloca <2 x i64>, align 16
  %__a.addr.i981 = alloca <2 x i64>, align 16
  %__b.addr.i982 = alloca <2 x i64>, align 16
  %__a.addr.i978 = alloca <2 x i64>, align 16
  %__b.addr.i979 = alloca <2 x i64>, align 16
  %__a.addr.i975 = alloca <2 x i64>, align 16
  %__b.addr.i976 = alloca <2 x i64>, align 16
  %__a.addr.i972 = alloca <2 x i64>, align 16
  %__b.addr.i973 = alloca <2 x i64>, align 16
  %__a.addr.i969 = alloca <2 x i64>, align 16
  %__b.addr.i970 = alloca <2 x i64>, align 16
  %__a.addr.i966 = alloca <2 x i64>, align 16
  %__b.addr.i967 = alloca <2 x i64>, align 16
  %__a.addr.i963 = alloca <2 x i64>, align 16
  %__b.addr.i964 = alloca <2 x i64>, align 16
  %__a.addr.i961 = alloca <2 x i64>, align 16
  %__b.addr.i962 = alloca <2 x i64>, align 16
  %__a.addr.i959 = alloca <2 x i64>, align 16
  %__b.addr.i960 = alloca <2 x i64>, align 16
  %__a.addr.i957 = alloca <2 x i64>, align 16
  %__b.addr.i958 = alloca <2 x i64>, align 16
  %__a.addr.i955 = alloca <2 x i64>, align 16
  %__b.addr.i956 = alloca <2 x i64>, align 16
  %__a.addr.i952 = alloca <2 x i64>, align 16
  %__b.addr.i953 = alloca <2 x i64>, align 16
  %__a.addr.i949 = alloca <2 x i64>, align 16
  %__b.addr.i950 = alloca <2 x i64>, align 16
  %__a.addr.i947 = alloca <2 x i64>, align 16
  %__b.addr.i948 = alloca <2 x i64>, align 16
  %__a.addr.i945 = alloca <2 x i64>, align 16
  %__b.addr.i946 = alloca <2 x i64>, align 16
  %__a.addr.i943 = alloca <2 x i64>, align 16
  %__b.addr.i944 = alloca <2 x i64>, align 16
  %__a.addr.i941 = alloca <2 x i64>, align 16
  %__b.addr.i942 = alloca <2 x i64>, align 16
  %__a.addr.i938 = alloca <2 x i64>, align 16
  %__b.addr.i939 = alloca <2 x i64>, align 16
  %__a.addr.i935 = alloca <2 x i64>, align 16
  %__b.addr.i936 = alloca <2 x i64>, align 16
  %__a.addr.i932 = alloca <2 x i64>, align 16
  %__b.addr.i933 = alloca <2 x i64>, align 16
  %__a.addr.i929 = alloca <2 x i64>, align 16
  %__b.addr.i930 = alloca <2 x i64>, align 16
  %__a.addr.i927 = alloca <2 x i64>, align 16
  %__b.addr.i928 = alloca <2 x i64>, align 16
  %__a.addr.i925 = alloca <2 x i64>, align 16
  %__b.addr.i926 = alloca <2 x i64>, align 16
  %__a.addr.i923 = alloca <2 x i64>, align 16
  %__b.addr.i924 = alloca <2 x i64>, align 16
  %__a.addr.i921 = alloca <2 x i64>, align 16
  %__b.addr.i922 = alloca <2 x i64>, align 16
  %__a.addr.i918 = alloca <2 x i64>, align 16
  %__b.addr.i919 = alloca <2 x i64>, align 16
  %__a.addr.i915 = alloca <2 x i64>, align 16
  %__b.addr.i916 = alloca <2 x i64>, align 16
  %__a.addr.i912 = alloca <2 x i64>, align 16
  %__b.addr.i913 = alloca <2 x i64>, align 16
  %__a.addr.i909 = alloca <2 x i64>, align 16
  %__b.addr.i910 = alloca <2 x i64>, align 16
  %__a.addr.i906 = alloca <2 x i64>, align 16
  %__b.addr.i907 = alloca <2 x i64>, align 16
  %__a.addr.i903 = alloca <2 x i64>, align 16
  %__b.addr.i904 = alloca <2 x i64>, align 16
  %__a.addr.i900 = alloca <2 x i64>, align 16
  %__b.addr.i901 = alloca <2 x i64>, align 16
  %__a.addr.i897 = alloca <2 x i64>, align 16
  %__b.addr.i898 = alloca <2 x i64>, align 16
  %__a.addr.i894 = alloca <2 x i64>, align 16
  %__b.addr.i895 = alloca <2 x i64>, align 16
  %__a.addr.i891 = alloca <2 x i64>, align 16
  %__b.addr.i892 = alloca <2 x i64>, align 16
  %__a.addr.i888 = alloca <2 x i64>, align 16
  %__b.addr.i889 = alloca <2 x i64>, align 16
  %__a.addr.i885 = alloca <2 x i64>, align 16
  %__b.addr.i886 = alloca <2 x i64>, align 16
  %__a.addr.i882 = alloca <2 x i64>, align 16
  %__b.addr.i883 = alloca <2 x i64>, align 16
  %__a.addr.i879 = alloca <2 x i64>, align 16
  %__b.addr.i880 = alloca <2 x i64>, align 16
  %__a.addr.i877 = alloca <2 x i64>, align 16
  %__count.addr.i878 = alloca i32, align 4
  %__a.addr.i875 = alloca <2 x i64>, align 16
  %__count.addr.i876 = alloca i32, align 4
  %__a.addr.i873 = alloca <2 x i64>, align 16
  %__b.addr.i874 = alloca <2 x i64>, align 16
  %__a.addr.i871 = alloca <2 x i64>, align 16
  %__count.addr.i872 = alloca i32, align 4
  %__a.addr.i869 = alloca <2 x i64>, align 16
  %__count.addr.i870 = alloca i32, align 4
  %__a.addr.i867 = alloca <2 x i64>, align 16
  %__b.addr.i868 = alloca <2 x i64>, align 16
  %__a.addr.i864 = alloca <2 x i64>, align 16
  %__b.addr.i865 = alloca <2 x i64>, align 16
  %__a.addr.i861 = alloca <2 x i64>, align 16
  %__b.addr.i862 = alloca <2 x i64>, align 16
  %__a.addr.i858 = alloca <2 x i64>, align 16
  %__b.addr.i859 = alloca <2 x i64>, align 16
  %__a.addr.i855 = alloca <2 x i64>, align 16
  %__b.addr.i856 = alloca <2 x i64>, align 16
  %__a.addr.i852 = alloca <2 x i64>, align 16
  %__b.addr.i853 = alloca <2 x i64>, align 16
  %__a.addr.i849 = alloca <2 x i64>, align 16
  %__b.addr.i850 = alloca <2 x i64>, align 16
  %__a.addr.i847 = alloca <2 x i64>, align 16
  %__count.addr.i848 = alloca i32, align 4
  %__a.addr.i845 = alloca <2 x i64>, align 16
  %__count.addr.i846 = alloca i32, align 4
  %__a.addr.i843 = alloca <2 x i64>, align 16
  %__b.addr.i844 = alloca <2 x i64>, align 16
  %__a.addr.i841 = alloca <2 x i64>, align 16
  %__count.addr.i842 = alloca i32, align 4
  %__a.addr.i839 = alloca <2 x i64>, align 16
  %__count.addr.i840 = alloca i32, align 4
  %__a.addr.i837 = alloca <2 x i64>, align 16
  %__b.addr.i838 = alloca <2 x i64>, align 16
  %__a.addr.i834 = alloca <2 x i64>, align 16
  %__b.addr.i835 = alloca <2 x i64>, align 16
  %__a.addr.i831 = alloca <2 x i64>, align 16
  %__b.addr.i832 = alloca <2 x i64>, align 16
  %__a.addr.i828 = alloca <2 x i64>, align 16
  %__b.addr.i829 = alloca <2 x i64>, align 16
  %__a.addr.i825 = alloca <2 x i64>, align 16
  %__b.addr.i826 = alloca <2 x i64>, align 16
  %__a.addr.i822 = alloca <2 x i64>, align 16
  %__b.addr.i823 = alloca <2 x i64>, align 16
  %__a.addr.i819 = alloca <2 x i64>, align 16
  %__b.addr.i820 = alloca <2 x i64>, align 16
  %__a.addr.i817 = alloca <2 x i64>, align 16
  %__count.addr.i818 = alloca i32, align 4
  %__a.addr.i815 = alloca <2 x i64>, align 16
  %__count.addr.i816 = alloca i32, align 4
  %__a.addr.i813 = alloca <2 x i64>, align 16
  %__b.addr.i814 = alloca <2 x i64>, align 16
  %__a.addr.i811 = alloca <2 x i64>, align 16
  %__count.addr.i812 = alloca i32, align 4
  %__a.addr.i809 = alloca <2 x i64>, align 16
  %__count.addr.i810 = alloca i32, align 4
  %__a.addr.i807 = alloca <2 x i64>, align 16
  %__b.addr.i808 = alloca <2 x i64>, align 16
  %__a.addr.i804 = alloca <2 x i64>, align 16
  %__b.addr.i805 = alloca <2 x i64>, align 16
  %__a.addr.i801 = alloca <2 x i64>, align 16
  %__b.addr.i802 = alloca <2 x i64>, align 16
  %__a.addr.i798 = alloca <2 x i64>, align 16
  %__b.addr.i799 = alloca <2 x i64>, align 16
  %__a.addr.i795 = alloca <2 x i64>, align 16
  %__b.addr.i796 = alloca <2 x i64>, align 16
  %__a.addr.i792 = alloca <2 x i64>, align 16
  %__b.addr.i793 = alloca <2 x i64>, align 16
  %__a.addr.i789 = alloca <2 x i64>, align 16
  %__b.addr.i790 = alloca <2 x i64>, align 16
  %__a.addr.i787 = alloca <2 x i64>, align 16
  %__count.addr.i788 = alloca i32, align 4
  %__a.addr.i785 = alloca <2 x i64>, align 16
  %__count.addr.i786 = alloca i32, align 4
  %__a.addr.i783 = alloca <2 x i64>, align 16
  %__b.addr.i784 = alloca <2 x i64>, align 16
  %__a.addr.i781 = alloca <2 x i64>, align 16
  %__count.addr.i782 = alloca i32, align 4
  %__a.addr.i779 = alloca <2 x i64>, align 16
  %__count.addr.i780 = alloca i32, align 4
  %__a.addr.i777 = alloca <2 x i64>, align 16
  %__b.addr.i778 = alloca <2 x i64>, align 16
  %__a.addr.i774 = alloca <2 x i64>, align 16
  %__b.addr.i775 = alloca <2 x i64>, align 16
  %__a.addr.i771 = alloca <2 x i64>, align 16
  %__b.addr.i772 = alloca <2 x i64>, align 16
  %__a.addr.i768 = alloca <2 x i64>, align 16
  %__b.addr.i769 = alloca <2 x i64>, align 16
  %__a.addr.i765 = alloca <2 x i64>, align 16
  %__b.addr.i766 = alloca <2 x i64>, align 16
  %__a.addr.i762 = alloca <2 x i64>, align 16
  %__b.addr.i763 = alloca <2 x i64>, align 16
  %__a.addr.i759 = alloca <2 x i64>, align 16
  %__b.addr.i760 = alloca <2 x i64>, align 16
  %__a.addr.i756 = alloca <2 x i64>, align 16
  %__b.addr.i757 = alloca <2 x i64>, align 16
  %__a.addr.i753 = alloca <2 x i64>, align 16
  %__b.addr.i754 = alloca <2 x i64>, align 16
  %__a.addr.i750 = alloca <2 x i64>, align 16
  %__b.addr.i751 = alloca <2 x i64>, align 16
  %__a.addr.i747 = alloca <2 x i64>, align 16
  %__b.addr.i748 = alloca <2 x i64>, align 16
  %__a.addr.i744 = alloca <2 x i64>, align 16
  %__b.addr.i745 = alloca <2 x i64>, align 16
  %__a.addr.i741 = alloca <2 x i64>, align 16
  %__b.addr.i742 = alloca <2 x i64>, align 16
  %__a.addr.i738 = alloca <2 x i64>, align 16
  %__b.addr.i739 = alloca <2 x i64>, align 16
  %__a.addr.i735 = alloca <2 x i64>, align 16
  %__b.addr.i736 = alloca <2 x i64>, align 16
  %__a.addr.i732 = alloca <2 x i64>, align 16
  %__b.addr.i733 = alloca <2 x i64>, align 16
  %__a.addr.i729 = alloca <2 x i64>, align 16
  %__b.addr.i730 = alloca <2 x i64>, align 16
  %__a.addr.i726 = alloca <2 x i64>, align 16
  %__b.addr.i727 = alloca <2 x i64>, align 16
  %__a.addr.i723 = alloca <2 x i64>, align 16
  %__b.addr.i724 = alloca <2 x i64>, align 16
  %__a.addr.i720 = alloca <2 x i64>, align 16
  %__b.addr.i721 = alloca <2 x i64>, align 16
  %__a.addr.i717 = alloca <2 x i64>, align 16
  %__b.addr.i718 = alloca <2 x i64>, align 16
  %__a.addr.i714 = alloca <2 x i64>, align 16
  %__b.addr.i715 = alloca <2 x i64>, align 16
  %__a.addr.i711 = alloca <2 x i64>, align 16
  %__b.addr.i712 = alloca <2 x i64>, align 16
  %__a.addr.i708 = alloca <2 x i64>, align 16
  %__b.addr.i709 = alloca <2 x i64>, align 16
  %__a.addr.i705 = alloca <2 x i64>, align 16
  %__b.addr.i706 = alloca <2 x i64>, align 16
  %__a.addr.i702 = alloca <2 x i64>, align 16
  %__b.addr.i703 = alloca <2 x i64>, align 16
  %__a.addr.i699 = alloca <2 x i64>, align 16
  %__b.addr.i700 = alloca <2 x i64>, align 16
  %__a.addr.i697 = alloca <2 x i64>, align 16
  %__b.addr.i698 = alloca <2 x i64>, align 16
  %__a.addr.i695 = alloca <2 x i64>, align 16
  %__b.addr.i696 = alloca <2 x i64>, align 16
  %__a.addr.i693 = alloca <2 x i64>, align 16
  %__b.addr.i694 = alloca <2 x i64>, align 16
  %__a.addr.i691 = alloca <2 x i64>, align 16
  %__b.addr.i692 = alloca <2 x i64>, align 16
  %__a.addr.i688 = alloca <2 x i64>, align 16
  %__b.addr.i689 = alloca <2 x i64>, align 16
  %__a.addr.i685 = alloca <2 x i64>, align 16
  %__b.addr.i686 = alloca <2 x i64>, align 16
  %.compoundliteral.i684 = alloca <2 x i64>, align 16
  %__a.addr.i681 = alloca <2 x i64>, align 16
  %__b.addr.i682 = alloca <2 x i64>, align 16
  %__a.addr.i679 = alloca <2 x i64>, align 16
  %__count.addr.i680 = alloca i32, align 4
  %.compoundliteral.i678 = alloca <2 x i64>, align 16
  %__a.addr.i675 = alloca <2 x i64>, align 16
  %__b.addr.i676 = alloca <2 x i64>, align 16
  %__a.addr.i673 = alloca <2 x i64>, align 16
  %__count.addr.i674 = alloca i32, align 4
  %.compoundliteral.i672 = alloca <2 x i64>, align 16
  %__a.addr.i669 = alloca <2 x i64>, align 16
  %__b.addr.i670 = alloca <2 x i64>, align 16
  %__a.addr.i667 = alloca <2 x i64>, align 16
  %__count.addr.i668 = alloca i32, align 4
  %.compoundliteral.i = alloca <2 x i64>, align 16
  %__a.addr.i664 = alloca <2 x i64>, align 16
  %__b.addr.i665 = alloca <2 x i64>, align 16
  %__a.addr.i662 = alloca <2 x i64>, align 16
  %__count.addr.i663 = alloca i32, align 4
  %__a.addr.i659 = alloca <2 x i64>, align 16
  %__b.addr.i660 = alloca <2 x i64>, align 16
  %__a.addr.i656 = alloca <2 x i64>, align 16
  %__b.addr.i657 = alloca <2 x i64>, align 16
  %__a.addr.i653 = alloca <2 x i64>, align 16
  %__b.addr.i654 = alloca <2 x i64>, align 16
  %__a.addr.i650 = alloca <2 x i64>, align 16
  %__b.addr.i651 = alloca <2 x i64>, align 16
  %__a.addr.i647 = alloca <2 x i64>, align 16
  %__b.addr.i648 = alloca <2 x i64>, align 16
  %__a.addr.i644 = alloca <2 x i64>, align 16
  %__b.addr.i645 = alloca <2 x i64>, align 16
  %__a.addr.i641 = alloca <2 x i64>, align 16
  %__b.addr.i642 = alloca <2 x i64>, align 16
  %__a.addr.i638 = alloca <2 x i64>, align 16
  %__b.addr.i639 = alloca <2 x i64>, align 16
  %__a.addr.i635 = alloca <2 x i64>, align 16
  %__b.addr.i636 = alloca <2 x i64>, align 16
  %__a.addr.i632 = alloca <2 x i64>, align 16
  %__b.addr.i633 = alloca <2 x i64>, align 16
  %__a.addr.i630 = alloca <2 x i64>, align 16
  %__b.addr.i631 = alloca <2 x i64>, align 16
  %__a.addr.i628 = alloca <2 x i64>, align 16
  %__b.addr.i629 = alloca <2 x i64>, align 16
  %__a.addr.i626 = alloca <2 x i64>, align 16
  %__b.addr.i627 = alloca <2 x i64>, align 16
  %__a.addr.i624 = alloca <2 x i64>, align 16
  %__b.addr.i625 = alloca <2 x i64>, align 16
  %__a.addr.i621 = alloca <2 x i64>, align 16
  %__b.addr.i622 = alloca <2 x i64>, align 16
  %__a.addr.i618 = alloca <2 x i64>, align 16
  %__b.addr.i619 = alloca <2 x i64>, align 16
  %__a.addr.i616 = alloca <2 x i64>, align 16
  %__b.addr.i617 = alloca <2 x i64>, align 16
  %__a.addr.i614 = alloca <2 x i64>, align 16
  %__b.addr.i615 = alloca <2 x i64>, align 16
  %__a.addr.i612 = alloca <2 x i64>, align 16
  %__b.addr.i613 = alloca <2 x i64>, align 16
  %__a.addr.i610 = alloca <2 x i64>, align 16
  %__b.addr.i611 = alloca <2 x i64>, align 16
  %__a.addr.i607 = alloca <2 x i64>, align 16
  %__b.addr.i608 = alloca <2 x i64>, align 16
  %__a.addr.i604 = alloca <2 x i64>, align 16
  %__b.addr.i605 = alloca <2 x i64>, align 16
  %__a.addr.i601 = alloca <2 x i64>, align 16
  %__b.addr.i602 = alloca <2 x i64>, align 16
  %__a.addr.i598 = alloca <2 x i64>, align 16
  %__b.addr.i599 = alloca <2 x i64>, align 16
  %__a.addr.i596 = alloca <2 x i64>, align 16
  %__b.addr.i597 = alloca <2 x i64>, align 16
  %__a.addr.i594 = alloca <2 x i64>, align 16
  %__b.addr.i595 = alloca <2 x i64>, align 16
  %__a.addr.i592 = alloca <2 x i64>, align 16
  %__b.addr.i593 = alloca <2 x i64>, align 16
  %__a.addr.i590 = alloca <2 x i64>, align 16
  %__b.addr.i591 = alloca <2 x i64>, align 16
  %__a.addr.i587 = alloca <2 x i64>, align 16
  %__b.addr.i588 = alloca <2 x i64>, align 16
  %__a.addr.i584 = alloca <2 x i64>, align 16
  %__b.addr.i585 = alloca <2 x i64>, align 16
  %__a.addr.i581 = alloca <2 x i64>, align 16
  %__b.addr.i582 = alloca <2 x i64>, align 16
  %__a.addr.i578 = alloca <2 x i64>, align 16
  %__b.addr.i579 = alloca <2 x i64>, align 16
  %__a.addr.i575 = alloca <2 x i64>, align 16
  %__b.addr.i576 = alloca <2 x i64>, align 16
  %__a.addr.i572 = alloca <2 x i64>, align 16
  %__b.addr.i573 = alloca <2 x i64>, align 16
  %__a.addr.i569 = alloca <2 x i64>, align 16
  %__b.addr.i570 = alloca <2 x i64>, align 16
  %__a.addr.i566 = alloca <2 x i64>, align 16
  %__b.addr.i567 = alloca <2 x i64>, align 16
  %__a.addr.i563 = alloca <2 x i64>, align 16
  %__b.addr.i564 = alloca <2 x i64>, align 16
  %__a.addr.i560 = alloca <2 x i64>, align 16
  %__b.addr.i561 = alloca <2 x i64>, align 16
  %__a.addr.i557 = alloca <2 x i64>, align 16
  %__b.addr.i558 = alloca <2 x i64>, align 16
  %__a.addr.i554 = alloca <2 x i64>, align 16
  %__b.addr.i555 = alloca <2 x i64>, align 16
  %__a.addr.i551 = alloca <2 x i64>, align 16
  %__b.addr.i552 = alloca <2 x i64>, align 16
  %__a.addr.i548 = alloca <2 x i64>, align 16
  %__b.addr.i549 = alloca <2 x i64>, align 16
  %__a.addr.i546 = alloca <2 x i64>, align 16
  %__count.addr.i547 = alloca i32, align 4
  %__a.addr.i544 = alloca <2 x i64>, align 16
  %__count.addr.i545 = alloca i32, align 4
  %__a.addr.i542 = alloca <2 x i64>, align 16
  %__b.addr.i543 = alloca <2 x i64>, align 16
  %__a.addr.i540 = alloca <2 x i64>, align 16
  %__count.addr.i541 = alloca i32, align 4
  %__a.addr.i538 = alloca <2 x i64>, align 16
  %__count.addr.i539 = alloca i32, align 4
  %__a.addr.i536 = alloca <2 x i64>, align 16
  %__b.addr.i537 = alloca <2 x i64>, align 16
  %__a.addr.i533 = alloca <2 x i64>, align 16
  %__b.addr.i534 = alloca <2 x i64>, align 16
  %__a.addr.i530 = alloca <2 x i64>, align 16
  %__b.addr.i531 = alloca <2 x i64>, align 16
  %__a.addr.i527 = alloca <2 x i64>, align 16
  %__b.addr.i528 = alloca <2 x i64>, align 16
  %__a.addr.i524 = alloca <2 x i64>, align 16
  %__b.addr.i525 = alloca <2 x i64>, align 16
  %__a.addr.i521 = alloca <2 x i64>, align 16
  %__b.addr.i522 = alloca <2 x i64>, align 16
  %__a.addr.i518 = alloca <2 x i64>, align 16
  %__b.addr.i519 = alloca <2 x i64>, align 16
  %__a.addr.i516 = alloca <2 x i64>, align 16
  %__count.addr.i517 = alloca i32, align 4
  %__a.addr.i514 = alloca <2 x i64>, align 16
  %__count.addr.i515 = alloca i32, align 4
  %__a.addr.i512 = alloca <2 x i64>, align 16
  %__b.addr.i513 = alloca <2 x i64>, align 16
  %__a.addr.i510 = alloca <2 x i64>, align 16
  %__count.addr.i511 = alloca i32, align 4
  %__a.addr.i508 = alloca <2 x i64>, align 16
  %__count.addr.i509 = alloca i32, align 4
  %__a.addr.i506 = alloca <2 x i64>, align 16
  %__b.addr.i507 = alloca <2 x i64>, align 16
  %__a.addr.i503 = alloca <2 x i64>, align 16
  %__b.addr.i504 = alloca <2 x i64>, align 16
  %__a.addr.i500 = alloca <2 x i64>, align 16
  %__b.addr.i501 = alloca <2 x i64>, align 16
  %__a.addr.i497 = alloca <2 x i64>, align 16
  %__b.addr.i498 = alloca <2 x i64>, align 16
  %__a.addr.i494 = alloca <2 x i64>, align 16
  %__b.addr.i495 = alloca <2 x i64>, align 16
  %__a.addr.i491 = alloca <2 x i64>, align 16
  %__b.addr.i492 = alloca <2 x i64>, align 16
  %__a.addr.i488 = alloca <2 x i64>, align 16
  %__b.addr.i489 = alloca <2 x i64>, align 16
  %__a.addr.i486 = alloca <2 x i64>, align 16
  %__count.addr.i487 = alloca i32, align 4
  %__a.addr.i484 = alloca <2 x i64>, align 16
  %__count.addr.i485 = alloca i32, align 4
  %__a.addr.i482 = alloca <2 x i64>, align 16
  %__b.addr.i483 = alloca <2 x i64>, align 16
  %__a.addr.i480 = alloca <2 x i64>, align 16
  %__count.addr.i481 = alloca i32, align 4
  %__a.addr.i478 = alloca <2 x i64>, align 16
  %__count.addr.i479 = alloca i32, align 4
  %__a.addr.i476 = alloca <2 x i64>, align 16
  %__b.addr.i477 = alloca <2 x i64>, align 16
  %__a.addr.i473 = alloca <2 x i64>, align 16
  %__b.addr.i474 = alloca <2 x i64>, align 16
  %__a.addr.i470 = alloca <2 x i64>, align 16
  %__b.addr.i471 = alloca <2 x i64>, align 16
  %__a.addr.i467 = alloca <2 x i64>, align 16
  %__b.addr.i468 = alloca <2 x i64>, align 16
  %__a.addr.i465 = alloca <2 x i64>, align 16
  %__b.addr.i466 = alloca <2 x i64>, align 16
  %__a.addr.i462 = alloca <2 x i64>, align 16
  %__b.addr.i463 = alloca <2 x i64>, align 16
  %__a.addr.i460 = alloca <2 x i64>, align 16
  %__b.addr.i461 = alloca <2 x i64>, align 16
  %__a.addr.i458 = alloca <2 x i64>, align 16
  %__count.addr.i459 = alloca i32, align 4
  %__a.addr.i456 = alloca <2 x i64>, align 16
  %__count.addr.i457 = alloca i32, align 4
  %__a.addr.i454 = alloca <2 x i64>, align 16
  %__b.addr.i455 = alloca <2 x i64>, align 16
  %__a.addr.i452 = alloca <2 x i64>, align 16
  %__count.addr.i453 = alloca i32, align 4
  %__a.addr.i451 = alloca <2 x i64>, align 16
  %__count.addr.i = alloca i32, align 4
  %__a.addr.i449 = alloca <2 x i64>, align 16
  %__b.addr.i450 = alloca <2 x i64>, align 16
  %__a.addr.i447 = alloca <2 x i64>, align 16
  %__b.addr.i448 = alloca <2 x i64>, align 16
  %__a.addr.i445 = alloca <2 x i64>, align 16
  %__b.addr.i446 = alloca <2 x i64>, align 16
  %__a.addr.i443 = alloca <2 x i64>, align 16
  %__b.addr.i444 = alloca <2 x i64>, align 16
  %__a.addr.i441 = alloca <2 x i64>, align 16
  %__b.addr.i442 = alloca <2 x i64>, align 16
  %__a.addr.i438 = alloca <2 x i64>, align 16
  %__b.addr.i439 = alloca <2 x i64>, align 16
  %__a.addr.i435 = alloca <2 x i64>, align 16
  %__b.addr.i436 = alloca <2 x i64>, align 16
  %__a.addr.i432 = alloca <2 x i64>, align 16
  %__b.addr.i433 = alloca <2 x i64>, align 16
  %__a.addr.i429 = alloca <2 x i64>, align 16
  %__b.addr.i430 = alloca <2 x i64>, align 16
  %__a.addr.i426 = alloca <2 x i64>, align 16
  %__b.addr.i427 = alloca <2 x i64>, align 16
  %__a.addr.i423 = alloca <2 x i64>, align 16
  %__b.addr.i424 = alloca <2 x i64>, align 16
  %__a.addr.i420 = alloca <2 x i64>, align 16
  %__b.addr.i421 = alloca <2 x i64>, align 16
  %__a.addr.i417 = alloca <2 x i64>, align 16
  %__b.addr.i418 = alloca <2 x i64>, align 16
  %__a.addr.i414 = alloca <2 x i64>, align 16
  %__b.addr.i415 = alloca <2 x i64>, align 16
  %__a.addr.i411 = alloca <2 x i64>, align 16
  %__b.addr.i412 = alloca <2 x i64>, align 16
  %__a.addr.i408 = alloca <2 x i64>, align 16
  %__b.addr.i409 = alloca <2 x i64>, align 16
  %__a.addr.i407 = alloca <2 x i64>, align 16
  %__b.addr.i = alloca <2 x i64>, align 16
  %__p.addr.i403 = alloca <2 x i64>*, align 8
  %__a.addr.i404 = alloca <2 x i64>, align 16
  %__p.addr.i399 = alloca <2 x i64>*, align 8
  %__a.addr.i400 = alloca <2 x i64>, align 16
  %__p.addr.i395 = alloca <2 x i64>*, align 8
  %__a.addr.i396 = alloca <2 x i64>, align 16
  %__p.addr.i391 = alloca <2 x i64>*, align 8
  %__a.addr.i392 = alloca <2 x i64>, align 16
  %__p.addr.i387 = alloca <2 x i64>*, align 8
  %__a.addr.i388 = alloca <2 x i64>, align 16
  %__p.addr.i383 = alloca <2 x i64>*, align 8
  %__a.addr.i384 = alloca <2 x i64>, align 16
  %__p.addr.i379 = alloca <2 x i64>*, align 8
  %__a.addr.i380 = alloca <2 x i64>, align 16
  %__p.addr.i = alloca <2 x i64>*, align 8
  %__a.addr.i = alloca <2 x i64>, align 16
  %__w7.addr.i.i = alloca i16, align 2
  %__w6.addr.i.i = alloca i16, align 2
  %__w5.addr.i.i = alloca i16, align 2
  %__w4.addr.i.i = alloca i16, align 2
  %__w3.addr.i.i = alloca i16, align 2
  %__w2.addr.i.i = alloca i16, align 2
  %__w1.addr.i.i = alloca i16, align 2
  %__w0.addr.i.i = alloca i16, align 2
  %.compoundliteral.i.i = alloca <8 x i16>, align 16
  %__w0.addr.i = alloca i16, align 2
  %__w1.addr.i = alloca i16, align 2
  %__w2.addr.i = alloca i16, align 2
  %__w3.addr.i = alloca i16, align 2
  %__w4.addr.i = alloca i16, align 2
  %__w5.addr.i = alloca i16, align 2
  %__w6.addr.i = alloca i16, align 2
  %__w7.addr.i = alloca i16, align 2
  %out.addr = alloca i8*, align 8
  %out_stride.addr = alloca i32, align 4
  %data.addr = alloca i16*, align 8
  %row0 = alloca <2 x i64>, align 16
  %row1 = alloca <2 x i64>, align 16
  %row2 = alloca <2 x i64>, align 16
  %row3 = alloca <2 x i64>, align 16
  %row4 = alloca <2 x i64>, align 16
  %row5 = alloca <2 x i64>, align 16
  %row6 = alloca <2 x i64>, align 16
  %row7 = alloca <2 x i64>, align 16
  %tmp = alloca <2 x i64>, align 16
  %rot0_0 = alloca <2 x i64>, align 16
  %rot0_1 = alloca <2 x i64>, align 16
  %rot1_0 = alloca <2 x i64>, align 16
  %rot1_1 = alloca <2 x i64>, align 16
  %rot2_0 = alloca <2 x i64>, align 16
  %rot2_1 = alloca <2 x i64>, align 16
  %rot3_0 = alloca <2 x i64>, align 16
  %rot3_1 = alloca <2 x i64>, align 16
  %bias_0 = alloca <2 x i64>, align 16
  %bias_1 = alloca <2 x i64>, align 16
  %rot0_0lo = alloca <2 x i64>, align 16
  %rot0_0hi = alloca <2 x i64>, align 16
  %t2e_l = alloca <2 x i64>, align 16
  %t2e_h = alloca <2 x i64>, align 16
  %t3e_l = alloca <2 x i64>, align 16
  %t3e_h = alloca <2 x i64>, align 16
  %sum04 = alloca <2 x i64>, align 16
  %dif04 = alloca <2 x i64>, align 16
  %t0e_l = alloca <2 x i64>, align 16
  %t0e_h = alloca <2 x i64>, align 16
  %t1e_l = alloca <2 x i64>, align 16
  %t1e_h = alloca <2 x i64>, align 16
  %x0_l = alloca <2 x i64>, align 16
  %x0_h = alloca <2 x i64>, align 16
  %x3_l = alloca <2 x i64>, align 16
  %x3_h = alloca <2 x i64>, align 16
  %x1_l = alloca <2 x i64>, align 16
  %x1_h = alloca <2 x i64>, align 16
  %x2_l = alloca <2 x i64>, align 16
  %x2_h = alloca <2 x i64>, align 16
  %rot2_0lo = alloca <2 x i64>, align 16
  %rot2_0hi = alloca <2 x i64>, align 16
  %y0o_l = alloca <2 x i64>, align 16
  %y0o_h = alloca <2 x i64>, align 16
  %y2o_l = alloca <2 x i64>, align 16
  %y2o_h = alloca <2 x i64>, align 16
  %rot3_0lo = alloca <2 x i64>, align 16
  %rot3_0hi = alloca <2 x i64>, align 16
  %y1o_l = alloca <2 x i64>, align 16
  %y1o_h = alloca <2 x i64>, align 16
  %y3o_l = alloca <2 x i64>, align 16
  %y3o_h = alloca <2 x i64>, align 16
  %sum17 = alloca <2 x i64>, align 16
  %sum35 = alloca <2 x i64>, align 16
  %rot1_0lo = alloca <2 x i64>, align 16
  %rot1_0hi = alloca <2 x i64>, align 16
  %y4o_l = alloca <2 x i64>, align 16
  %y4o_h = alloca <2 x i64>, align 16
  %y5o_l = alloca <2 x i64>, align 16
  %y5o_h = alloca <2 x i64>, align 16
  %x4_l = alloca <2 x i64>, align 16
  %x4_h = alloca <2 x i64>, align 16
  %x5_l = alloca <2 x i64>, align 16
  %x5_h = alloca <2 x i64>, align 16
  %x6_l = alloca <2 x i64>, align 16
  %x6_h = alloca <2 x i64>, align 16
  %x7_l = alloca <2 x i64>, align 16
  %x7_h = alloca <2 x i64>, align 16
  %abiased_l = alloca <2 x i64>, align 16
  %abiased_h = alloca <2 x i64>, align 16
  %sum_l = alloca <2 x i64>, align 16
  %sum_h = alloca <2 x i64>, align 16
  %dif_l = alloca <2 x i64>, align 16
  %dif_h = alloca <2 x i64>, align 16
  %abiased_l93 = alloca <2 x i64>, align 16
  %abiased_h95 = alloca <2 x i64>, align 16
  %sum_l97 = alloca <2 x i64>, align 16
  %sum_h99 = alloca <2 x i64>, align 16
  %dif_l101 = alloca <2 x i64>, align 16
  %dif_h103 = alloca <2 x i64>, align 16
  %abiased_l111 = alloca <2 x i64>, align 16
  %abiased_h113 = alloca <2 x i64>, align 16
  %sum_l115 = alloca <2 x i64>, align 16
  %sum_h117 = alloca <2 x i64>, align 16
  %dif_l119 = alloca <2 x i64>, align 16
  %dif_h121 = alloca <2 x i64>, align 16
  %abiased_l129 = alloca <2 x i64>, align 16
  %abiased_h131 = alloca <2 x i64>, align 16
  %sum_l133 = alloca <2 x i64>, align 16
  %sum_h135 = alloca <2 x i64>, align 16
  %dif_l137 = alloca <2 x i64>, align 16
  %dif_h139 = alloca <2 x i64>, align 16
  %rot0_0lo171 = alloca <2 x i64>, align 16
  %rot0_0hi173 = alloca <2 x i64>, align 16
  %t2e_l175 = alloca <2 x i64>, align 16
  %t2e_h177 = alloca <2 x i64>, align 16
  %t3e_l179 = alloca <2 x i64>, align 16
  %t3e_h181 = alloca <2 x i64>, align 16
  %sum04183 = alloca <2 x i64>, align 16
  %dif04185 = alloca <2 x i64>, align 16
  %t0e_l187 = alloca <2 x i64>, align 16
  %t0e_h191 = alloca <2 x i64>, align 16
  %t1e_l195 = alloca <2 x i64>, align 16
  %t1e_h199 = alloca <2 x i64>, align 16
  %x0_l203 = alloca <2 x i64>, align 16
  %x0_h205 = alloca <2 x i64>, align 16
  %x3_l207 = alloca <2 x i64>, align 16
  %x3_h209 = alloca <2 x i64>, align 16
  %x1_l211 = alloca <2 x i64>, align 16
  %x1_h213 = alloca <2 x i64>, align 16
  %x2_l215 = alloca <2 x i64>, align 16
  %x2_h217 = alloca <2 x i64>, align 16
  %rot2_0lo219 = alloca <2 x i64>, align 16
  %rot2_0hi221 = alloca <2 x i64>, align 16
  %y0o_l223 = alloca <2 x i64>, align 16
  %y0o_h225 = alloca <2 x i64>, align 16
  %y2o_l227 = alloca <2 x i64>, align 16
  %y2o_h229 = alloca <2 x i64>, align 16
  %rot3_0lo231 = alloca <2 x i64>, align 16
  %rot3_0hi233 = alloca <2 x i64>, align 16
  %y1o_l235 = alloca <2 x i64>, align 16
  %y1o_h237 = alloca <2 x i64>, align 16
  %y3o_l239 = alloca <2 x i64>, align 16
  %y3o_h241 = alloca <2 x i64>, align 16
  %sum17243 = alloca <2 x i64>, align 16
  %sum35245 = alloca <2 x i64>, align 16
  %rot1_0lo247 = alloca <2 x i64>, align 16
  %rot1_0hi249 = alloca <2 x i64>, align 16
  %y4o_l251 = alloca <2 x i64>, align 16
  %y4o_h253 = alloca <2 x i64>, align 16
  %y5o_l255 = alloca <2 x i64>, align 16
  %y5o_h257 = alloca <2 x i64>, align 16
  %x4_l259 = alloca <2 x i64>, align 16
  %x4_h261 = alloca <2 x i64>, align 16
  %x5_l263 = alloca <2 x i64>, align 16
  %x5_h265 = alloca <2 x i64>, align 16
  %x6_l267 = alloca <2 x i64>, align 16
  %x6_h269 = alloca <2 x i64>, align 16
  %x7_l271 = alloca <2 x i64>, align 16
  %x7_h273 = alloca <2 x i64>, align 16
  %abiased_l275 = alloca <2 x i64>, align 16
  %abiased_h277 = alloca <2 x i64>, align 16
  %sum_l279 = alloca <2 x i64>, align 16
  %sum_h281 = alloca <2 x i64>, align 16
  %dif_l283 = alloca <2 x i64>, align 16
  %dif_h285 = alloca <2 x i64>, align 16
  %abiased_l293 = alloca <2 x i64>, align 16
  %abiased_h295 = alloca <2 x i64>, align 16
  %sum_l297 = alloca <2 x i64>, align 16
  %sum_h299 = alloca <2 x i64>, align 16
  %dif_l301 = alloca <2 x i64>, align 16
  %dif_h303 = alloca <2 x i64>, align 16
  %abiased_l311 = alloca <2 x i64>, align 16
  %abiased_h313 = alloca <2 x i64>, align 16
  %sum_l315 = alloca <2 x i64>, align 16
  %sum_h317 = alloca <2 x i64>, align 16
  %dif_l319 = alloca <2 x i64>, align 16
  %dif_h321 = alloca <2 x i64>, align 16
  %abiased_l329 = alloca <2 x i64>, align 16
  %abiased_h331 = alloca <2 x i64>, align 16
  %sum_l333 = alloca <2 x i64>, align 16
  %sum_h335 = alloca <2 x i64>, align 16
  %dif_l337 = alloca <2 x i64>, align 16
  %dif_h339 = alloca <2 x i64>, align 16
  %p0 = alloca <2 x i64>, align 16
  %p1 = alloca <2 x i64>, align 16
  %p2 = alloca <2 x i64>, align 16
  %p3 = alloca <2 x i64>, align 16
  store i8* %out, i8** %out.addr, align 8
  store i32 %out_stride, i32* %out_stride.addr, align 4
  store i16* %data, i16** %data.addr, align 8
  store i16 2217, i16* %__w0.addr.i, align 2
  store i16 -5350, i16* %__w1.addr.i, align 2
  store i16 2217, i16* %__w2.addr.i, align 2
  store i16 -5350, i16* %__w3.addr.i, align 2
  store i16 2217, i16* %__w4.addr.i, align 2
  store i16 -5350, i16* %__w5.addr.i, align 2
  store i16 2217, i16* %__w6.addr.i, align 2
  store i16 -5350, i16* %__w7.addr.i, align 2
  %0 = load i16, i16* %__w7.addr.i, align 2
  %1 = load i16, i16* %__w6.addr.i, align 2
  %2 = load i16, i16* %__w5.addr.i, align 2
  %3 = load i16, i16* %__w4.addr.i, align 2
  %4 = load i16, i16* %__w3.addr.i, align 2
  %5 = load i16, i16* %__w2.addr.i, align 2
  %6 = load i16, i16* %__w1.addr.i, align 2
  %7 = load i16, i16* %__w0.addr.i, align 2
  store i16 %0, i16* %__w7.addr.i.i, align 2
  store i16 %1, i16* %__w6.addr.i.i, align 2
  store i16 %2, i16* %__w5.addr.i.i, align 2
  store i16 %3, i16* %__w4.addr.i.i, align 2
  store i16 %4, i16* %__w3.addr.i.i, align 2
  store i16 %5, i16* %__w2.addr.i.i, align 2
  store i16 %6, i16* %__w1.addr.i.i, align 2
  store i16 %7, i16* %__w0.addr.i.i, align 2
  %8 = load i16, i16* %__w0.addr.i.i, align 2
  %vecinit.i.i = insertelement <8 x i16> undef, i16 %8, i32 0
  %9 = load i16, i16* %__w1.addr.i.i, align 2
  %vecinit1.i.i = insertelement <8 x i16> %vecinit.i.i, i16 %9, i32 1
  %10 = load i16, i16* %__w2.addr.i.i, align 2
  %vecinit2.i.i = insertelement <8 x i16> %vecinit1.i.i, i16 %10, i32 2
  %11 = load i16, i16* %__w3.addr.i.i, align 2
  %vecinit3.i.i = insertelement <8 x i16> %vecinit2.i.i, i16 %11, i32 3
  %12 = load i16, i16* %__w4.addr.i.i, align 2
  %vecinit4.i.i = insertelement <8 x i16> %vecinit3.i.i, i16 %12, i32 4
  %13 = load i16, i16* %__w5.addr.i.i, align 2
  %vecinit5.i.i = insertelement <8 x i16> %vecinit4.i.i, i16 %13, i32 5
  %14 = load i16, i16* %__w6.addr.i.i, align 2
  %vecinit6.i.i = insertelement <8 x i16> %vecinit5.i.i, i16 %14, i32 6
  %15 = load i16, i16* %__w7.addr.i.i, align 2
  %vecinit7.i.i = insertelement <8 x i16> %vecinit6.i.i, i16 %15, i32 7
  store <8 x i16> %vecinit7.i.i, <8 x i16>* %.compoundliteral.i.i, align 16
  %16 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i, align 16
  %17 = bitcast <8 x i16> %16 to <2 x i64>
  store <2 x i64> %17, <2 x i64>* %rot0_0, align 16
  store i16 5352, i16* %__w0.addr.i1219, align 2
  store i16 2217, i16* %__w1.addr.i1220, align 2
  store i16 5352, i16* %__w2.addr.i1221, align 2
  store i16 2217, i16* %__w3.addr.i1222, align 2
  store i16 5352, i16* %__w4.addr.i1223, align 2
  store i16 2217, i16* %__w5.addr.i1224, align 2
  store i16 5352, i16* %__w6.addr.i1225, align 2
  store i16 2217, i16* %__w7.addr.i1226, align 2
  %18 = load i16, i16* %__w7.addr.i1226, align 2
  %19 = load i16, i16* %__w6.addr.i1225, align 2
  %20 = load i16, i16* %__w5.addr.i1224, align 2
  %21 = load i16, i16* %__w4.addr.i1223, align 2
  %22 = load i16, i16* %__w3.addr.i1222, align 2
  %23 = load i16, i16* %__w2.addr.i1221, align 2
  %24 = load i16, i16* %__w1.addr.i1220, align 2
  %25 = load i16, i16* %__w0.addr.i1219, align 2
  store i16 %18, i16* %__w7.addr.i.i1210, align 2
  store i16 %19, i16* %__w6.addr.i.i1211, align 2
  store i16 %20, i16* %__w5.addr.i.i1212, align 2
  store i16 %21, i16* %__w4.addr.i.i1213, align 2
  store i16 %22, i16* %__w3.addr.i.i1214, align 2
  store i16 %23, i16* %__w2.addr.i.i1215, align 2
  store i16 %24, i16* %__w1.addr.i.i1216, align 2
  store i16 %25, i16* %__w0.addr.i.i1217, align 2
  %26 = load i16, i16* %__w0.addr.i.i1217, align 2
  %vecinit.i.i1227 = insertelement <8 x i16> undef, i16 %26, i32 0
  %27 = load i16, i16* %__w1.addr.i.i1216, align 2
  %vecinit1.i.i1228 = insertelement <8 x i16> %vecinit.i.i1227, i16 %27, i32 1
  %28 = load i16, i16* %__w2.addr.i.i1215, align 2
  %vecinit2.i.i1229 = insertelement <8 x i16> %vecinit1.i.i1228, i16 %28, i32 2
  %29 = load i16, i16* %__w3.addr.i.i1214, align 2
  %vecinit3.i.i1230 = insertelement <8 x i16> %vecinit2.i.i1229, i16 %29, i32 3
  %30 = load i16, i16* %__w4.addr.i.i1213, align 2
  %vecinit4.i.i1231 = insertelement <8 x i16> %vecinit3.i.i1230, i16 %30, i32 4
  %31 = load i16, i16* %__w5.addr.i.i1212, align 2
  %vecinit5.i.i1232 = insertelement <8 x i16> %vecinit4.i.i1231, i16 %31, i32 5
  %32 = load i16, i16* %__w6.addr.i.i1211, align 2
  %vecinit6.i.i1233 = insertelement <8 x i16> %vecinit5.i.i1232, i16 %32, i32 6
  %33 = load i16, i16* %__w7.addr.i.i1210, align 2
  %vecinit7.i.i1234 = insertelement <8 x i16> %vecinit6.i.i1233, i16 %33, i32 7
  store <8 x i16> %vecinit7.i.i1234, <8 x i16>* %.compoundliteral.i.i1218, align 16
  %34 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i1218, align 16
  %35 = bitcast <8 x i16> %34 to <2 x i64>
  store <2 x i64> %35, <2 x i64>* %rot0_1, align 16
  store i16 1131, i16* %__w0.addr.i1194, align 2
  store i16 4816, i16* %__w1.addr.i1195, align 2
  store i16 1131, i16* %__w2.addr.i1196, align 2
  store i16 4816, i16* %__w3.addr.i1197, align 2
  store i16 1131, i16* %__w4.addr.i1198, align 2
  store i16 4816, i16* %__w5.addr.i1199, align 2
  store i16 1131, i16* %__w6.addr.i1200, align 2
  store i16 4816, i16* %__w7.addr.i1201, align 2
  %36 = load i16, i16* %__w7.addr.i1201, align 2
  %37 = load i16, i16* %__w6.addr.i1200, align 2
  %38 = load i16, i16* %__w5.addr.i1199, align 2
  %39 = load i16, i16* %__w4.addr.i1198, align 2
  %40 = load i16, i16* %__w3.addr.i1197, align 2
  %41 = load i16, i16* %__w2.addr.i1196, align 2
  %42 = load i16, i16* %__w1.addr.i1195, align 2
  %43 = load i16, i16* %__w0.addr.i1194, align 2
  store i16 %36, i16* %__w7.addr.i.i1185, align 2
  store i16 %37, i16* %__w6.addr.i.i1186, align 2
  store i16 %38, i16* %__w5.addr.i.i1187, align 2
  store i16 %39, i16* %__w4.addr.i.i1188, align 2
  store i16 %40, i16* %__w3.addr.i.i1189, align 2
  store i16 %41, i16* %__w2.addr.i.i1190, align 2
  store i16 %42, i16* %__w1.addr.i.i1191, align 2
  store i16 %43, i16* %__w0.addr.i.i1192, align 2
  %44 = load i16, i16* %__w0.addr.i.i1192, align 2
  %vecinit.i.i1202 = insertelement <8 x i16> undef, i16 %44, i32 0
  %45 = load i16, i16* %__w1.addr.i.i1191, align 2
  %vecinit1.i.i1203 = insertelement <8 x i16> %vecinit.i.i1202, i16 %45, i32 1
  %46 = load i16, i16* %__w2.addr.i.i1190, align 2
  %vecinit2.i.i1204 = insertelement <8 x i16> %vecinit1.i.i1203, i16 %46, i32 2
  %47 = load i16, i16* %__w3.addr.i.i1189, align 2
  %vecinit3.i.i1205 = insertelement <8 x i16> %vecinit2.i.i1204, i16 %47, i32 3
  %48 = load i16, i16* %__w4.addr.i.i1188, align 2
  %vecinit4.i.i1206 = insertelement <8 x i16> %vecinit3.i.i1205, i16 %48, i32 4
  %49 = load i16, i16* %__w5.addr.i.i1187, align 2
  %vecinit5.i.i1207 = insertelement <8 x i16> %vecinit4.i.i1206, i16 %49, i32 5
  %50 = load i16, i16* %__w6.addr.i.i1186, align 2
  %vecinit6.i.i1208 = insertelement <8 x i16> %vecinit5.i.i1207, i16 %50, i32 6
  %51 = load i16, i16* %__w7.addr.i.i1185, align 2
  %vecinit7.i.i1209 = insertelement <8 x i16> %vecinit6.i.i1208, i16 %51, i32 7
  store <8 x i16> %vecinit7.i.i1209, <8 x i16>* %.compoundliteral.i.i1193, align 16
  %52 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i1193, align 16
  %53 = bitcast <8 x i16> %52 to <2 x i64>
  store <2 x i64> %53, <2 x i64>* %rot1_0, align 16
  store i16 4816, i16* %__w0.addr.i1169, align 2
  store i16 -5681, i16* %__w1.addr.i1170, align 2
  store i16 4816, i16* %__w2.addr.i1171, align 2
  store i16 -5681, i16* %__w3.addr.i1172, align 2
  store i16 4816, i16* %__w4.addr.i1173, align 2
  store i16 -5681, i16* %__w5.addr.i1174, align 2
  store i16 4816, i16* %__w6.addr.i1175, align 2
  store i16 -5681, i16* %__w7.addr.i1176, align 2
  %54 = load i16, i16* %__w7.addr.i1176, align 2
  %55 = load i16, i16* %__w6.addr.i1175, align 2
  %56 = load i16, i16* %__w5.addr.i1174, align 2
  %57 = load i16, i16* %__w4.addr.i1173, align 2
  %58 = load i16, i16* %__w3.addr.i1172, align 2
  %59 = load i16, i16* %__w2.addr.i1171, align 2
  %60 = load i16, i16* %__w1.addr.i1170, align 2
  %61 = load i16, i16* %__w0.addr.i1169, align 2
  store i16 %54, i16* %__w7.addr.i.i1160, align 2
  store i16 %55, i16* %__w6.addr.i.i1161, align 2
  store i16 %56, i16* %__w5.addr.i.i1162, align 2
  store i16 %57, i16* %__w4.addr.i.i1163, align 2
  store i16 %58, i16* %__w3.addr.i.i1164, align 2
  store i16 %59, i16* %__w2.addr.i.i1165, align 2
  store i16 %60, i16* %__w1.addr.i.i1166, align 2
  store i16 %61, i16* %__w0.addr.i.i1167, align 2
  %62 = load i16, i16* %__w0.addr.i.i1167, align 2
  %vecinit.i.i1177 = insertelement <8 x i16> undef, i16 %62, i32 0
  %63 = load i16, i16* %__w1.addr.i.i1166, align 2
  %vecinit1.i.i1178 = insertelement <8 x i16> %vecinit.i.i1177, i16 %63, i32 1
  %64 = load i16, i16* %__w2.addr.i.i1165, align 2
  %vecinit2.i.i1179 = insertelement <8 x i16> %vecinit1.i.i1178, i16 %64, i32 2
  %65 = load i16, i16* %__w3.addr.i.i1164, align 2
  %vecinit3.i.i1180 = insertelement <8 x i16> %vecinit2.i.i1179, i16 %65, i32 3
  %66 = load i16, i16* %__w4.addr.i.i1163, align 2
  %vecinit4.i.i1181 = insertelement <8 x i16> %vecinit3.i.i1180, i16 %66, i32 4
  %67 = load i16, i16* %__w5.addr.i.i1162, align 2
  %vecinit5.i.i1182 = insertelement <8 x i16> %vecinit4.i.i1181, i16 %67, i32 5
  %68 = load i16, i16* %__w6.addr.i.i1161, align 2
  %vecinit6.i.i1183 = insertelement <8 x i16> %vecinit5.i.i1182, i16 %68, i32 6
  %69 = load i16, i16* %__w7.addr.i.i1160, align 2
  %vecinit7.i.i1184 = insertelement <8 x i16> %vecinit6.i.i1183, i16 %69, i32 7
  store <8 x i16> %vecinit7.i.i1184, <8 x i16>* %.compoundliteral.i.i1168, align 16
  %70 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i1168, align 16
  %71 = bitcast <8 x i16> %70 to <2 x i64>
  store <2 x i64> %71, <2 x i64>* %rot1_1, align 16
  store i16 -6811, i16* %__w0.addr.i1144, align 2
  store i16 -8034, i16* %__w1.addr.i1145, align 2
  store i16 -6811, i16* %__w2.addr.i1146, align 2
  store i16 -8034, i16* %__w3.addr.i1147, align 2
  store i16 -6811, i16* %__w4.addr.i1148, align 2
  store i16 -8034, i16* %__w5.addr.i1149, align 2
  store i16 -6811, i16* %__w6.addr.i1150, align 2
  store i16 -8034, i16* %__w7.addr.i1151, align 2
  %72 = load i16, i16* %__w7.addr.i1151, align 2
  %73 = load i16, i16* %__w6.addr.i1150, align 2
  %74 = load i16, i16* %__w5.addr.i1149, align 2
  %75 = load i16, i16* %__w4.addr.i1148, align 2
  %76 = load i16, i16* %__w3.addr.i1147, align 2
  %77 = load i16, i16* %__w2.addr.i1146, align 2
  %78 = load i16, i16* %__w1.addr.i1145, align 2
  %79 = load i16, i16* %__w0.addr.i1144, align 2
  store i16 %72, i16* %__w7.addr.i.i1135, align 2
  store i16 %73, i16* %__w6.addr.i.i1136, align 2
  store i16 %74, i16* %__w5.addr.i.i1137, align 2
  store i16 %75, i16* %__w4.addr.i.i1138, align 2
  store i16 %76, i16* %__w3.addr.i.i1139, align 2
  store i16 %77, i16* %__w2.addr.i.i1140, align 2
  store i16 %78, i16* %__w1.addr.i.i1141, align 2
  store i16 %79, i16* %__w0.addr.i.i1142, align 2
  %80 = load i16, i16* %__w0.addr.i.i1142, align 2
  %vecinit.i.i1152 = insertelement <8 x i16> undef, i16 %80, i32 0
  %81 = load i16, i16* %__w1.addr.i.i1141, align 2
  %vecinit1.i.i1153 = insertelement <8 x i16> %vecinit.i.i1152, i16 %81, i32 1
  %82 = load i16, i16* %__w2.addr.i.i1140, align 2
  %vecinit2.i.i1154 = insertelement <8 x i16> %vecinit1.i.i1153, i16 %82, i32 2
  %83 = load i16, i16* %__w3.addr.i.i1139, align 2
  %vecinit3.i.i1155 = insertelement <8 x i16> %vecinit2.i.i1154, i16 %83, i32 3
  %84 = load i16, i16* %__w4.addr.i.i1138, align 2
  %vecinit4.i.i1156 = insertelement <8 x i16> %vecinit3.i.i1155, i16 %84, i32 4
  %85 = load i16, i16* %__w5.addr.i.i1137, align 2
  %vecinit5.i.i1157 = insertelement <8 x i16> %vecinit4.i.i1156, i16 %85, i32 5
  %86 = load i16, i16* %__w6.addr.i.i1136, align 2
  %vecinit6.i.i1158 = insertelement <8 x i16> %vecinit5.i.i1157, i16 %86, i32 6
  %87 = load i16, i16* %__w7.addr.i.i1135, align 2
  %vecinit7.i.i1159 = insertelement <8 x i16> %vecinit6.i.i1158, i16 %87, i32 7
  store <8 x i16> %vecinit7.i.i1159, <8 x i16>* %.compoundliteral.i.i1143, align 16
  %88 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i1143, align 16
  %89 = bitcast <8 x i16> %88 to <2 x i64>
  store <2 x i64> %89, <2 x i64>* %rot2_0, align 16
  store i16 -8034, i16* %__w0.addr.i1119, align 2
  store i16 4552, i16* %__w1.addr.i1120, align 2
  store i16 -8034, i16* %__w2.addr.i1121, align 2
  store i16 4552, i16* %__w3.addr.i1122, align 2
  store i16 -8034, i16* %__w4.addr.i1123, align 2
  store i16 4552, i16* %__w5.addr.i1124, align 2
  store i16 -8034, i16* %__w6.addr.i1125, align 2
  store i16 4552, i16* %__w7.addr.i1126, align 2
  %90 = load i16, i16* %__w7.addr.i1126, align 2
  %91 = load i16, i16* %__w6.addr.i1125, align 2
  %92 = load i16, i16* %__w5.addr.i1124, align 2
  %93 = load i16, i16* %__w4.addr.i1123, align 2
  %94 = load i16, i16* %__w3.addr.i1122, align 2
  %95 = load i16, i16* %__w2.addr.i1121, align 2
  %96 = load i16, i16* %__w1.addr.i1120, align 2
  %97 = load i16, i16* %__w0.addr.i1119, align 2
  store i16 %90, i16* %__w7.addr.i.i1110, align 2
  store i16 %91, i16* %__w6.addr.i.i1111, align 2
  store i16 %92, i16* %__w5.addr.i.i1112, align 2
  store i16 %93, i16* %__w4.addr.i.i1113, align 2
  store i16 %94, i16* %__w3.addr.i.i1114, align 2
  store i16 %95, i16* %__w2.addr.i.i1115, align 2
  store i16 %96, i16* %__w1.addr.i.i1116, align 2
  store i16 %97, i16* %__w0.addr.i.i1117, align 2
  %98 = load i16, i16* %__w0.addr.i.i1117, align 2
  %vecinit.i.i1127 = insertelement <8 x i16> undef, i16 %98, i32 0
  %99 = load i16, i16* %__w1.addr.i.i1116, align 2
  %vecinit1.i.i1128 = insertelement <8 x i16> %vecinit.i.i1127, i16 %99, i32 1
  %100 = load i16, i16* %__w2.addr.i.i1115, align 2
  %vecinit2.i.i1129 = insertelement <8 x i16> %vecinit1.i.i1128, i16 %100, i32 2
  %101 = load i16, i16* %__w3.addr.i.i1114, align 2
  %vecinit3.i.i1130 = insertelement <8 x i16> %vecinit2.i.i1129, i16 %101, i32 3
  %102 = load i16, i16* %__w4.addr.i.i1113, align 2
  %vecinit4.i.i1131 = insertelement <8 x i16> %vecinit3.i.i1130, i16 %102, i32 4
  %103 = load i16, i16* %__w5.addr.i.i1112, align 2
  %vecinit5.i.i1132 = insertelement <8 x i16> %vecinit4.i.i1131, i16 %103, i32 5
  %104 = load i16, i16* %__w6.addr.i.i1111, align 2
  %vecinit6.i.i1133 = insertelement <8 x i16> %vecinit5.i.i1132, i16 %104, i32 6
  %105 = load i16, i16* %__w7.addr.i.i1110, align 2
  %vecinit7.i.i1134 = insertelement <8 x i16> %vecinit6.i.i1133, i16 %105, i32 7
  store <8 x i16> %vecinit7.i.i1134, <8 x i16>* %.compoundliteral.i.i1118, align 16
  %106 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i1118, align 16
  %107 = bitcast <8 x i16> %106 to <2 x i64>
  store <2 x i64> %107, <2 x i64>* %rot2_1, align 16
  store i16 6813, i16* %__w0.addr.i1094, align 2
  store i16 -1597, i16* %__w1.addr.i1095, align 2
  store i16 6813, i16* %__w2.addr.i1096, align 2
  store i16 -1597, i16* %__w3.addr.i1097, align 2
  store i16 6813, i16* %__w4.addr.i1098, align 2
  store i16 -1597, i16* %__w5.addr.i1099, align 2
  store i16 6813, i16* %__w6.addr.i1100, align 2
  store i16 -1597, i16* %__w7.addr.i1101, align 2
  %108 = load i16, i16* %__w7.addr.i1101, align 2
  %109 = load i16, i16* %__w6.addr.i1100, align 2
  %110 = load i16, i16* %__w5.addr.i1099, align 2
  %111 = load i16, i16* %__w4.addr.i1098, align 2
  %112 = load i16, i16* %__w3.addr.i1097, align 2
  %113 = load i16, i16* %__w2.addr.i1096, align 2
  %114 = load i16, i16* %__w1.addr.i1095, align 2
  %115 = load i16, i16* %__w0.addr.i1094, align 2
  store i16 %108, i16* %__w7.addr.i.i1085, align 2
  store i16 %109, i16* %__w6.addr.i.i1086, align 2
  store i16 %110, i16* %__w5.addr.i.i1087, align 2
  store i16 %111, i16* %__w4.addr.i.i1088, align 2
  store i16 %112, i16* %__w3.addr.i.i1089, align 2
  store i16 %113, i16* %__w2.addr.i.i1090, align 2
  store i16 %114, i16* %__w1.addr.i.i1091, align 2
  store i16 %115, i16* %__w0.addr.i.i1092, align 2
  %116 = load i16, i16* %__w0.addr.i.i1092, align 2
  %vecinit.i.i1102 = insertelement <8 x i16> undef, i16 %116, i32 0
  %117 = load i16, i16* %__w1.addr.i.i1091, align 2
  %vecinit1.i.i1103 = insertelement <8 x i16> %vecinit.i.i1102, i16 %117, i32 1
  %118 = load i16, i16* %__w2.addr.i.i1090, align 2
  %vecinit2.i.i1104 = insertelement <8 x i16> %vecinit1.i.i1103, i16 %118, i32 2
  %119 = load i16, i16* %__w3.addr.i.i1089, align 2
  %vecinit3.i.i1105 = insertelement <8 x i16> %vecinit2.i.i1104, i16 %119, i32 3
  %120 = load i16, i16* %__w4.addr.i.i1088, align 2
  %vecinit4.i.i1106 = insertelement <8 x i16> %vecinit3.i.i1105, i16 %120, i32 4
  %121 = load i16, i16* %__w5.addr.i.i1087, align 2
  %vecinit5.i.i1107 = insertelement <8 x i16> %vecinit4.i.i1106, i16 %121, i32 5
  %122 = load i16, i16* %__w6.addr.i.i1086, align 2
  %vecinit6.i.i1108 = insertelement <8 x i16> %vecinit5.i.i1107, i16 %122, i32 6
  %123 = load i16, i16* %__w7.addr.i.i1085, align 2
  %vecinit7.i.i1109 = insertelement <8 x i16> %vecinit6.i.i1108, i16 %123, i32 7
  store <8 x i16> %vecinit7.i.i1109, <8 x i16>* %.compoundliteral.i.i1093, align 16
  %124 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i1093, align 16
  %125 = bitcast <8 x i16> %124 to <2 x i64>
  store <2 x i64> %125, <2 x i64>* %rot3_0, align 16
  store i16 -1597, i16* %__w0.addr.i1069, align 2
  store i16 4552, i16* %__w1.addr.i1070, align 2
  store i16 -1597, i16* %__w2.addr.i1071, align 2
  store i16 4552, i16* %__w3.addr.i1072, align 2
  store i16 -1597, i16* %__w4.addr.i1073, align 2
  store i16 4552, i16* %__w5.addr.i1074, align 2
  store i16 -1597, i16* %__w6.addr.i1075, align 2
  store i16 4552, i16* %__w7.addr.i1076, align 2
  %126 = load i16, i16* %__w7.addr.i1076, align 2
  %127 = load i16, i16* %__w6.addr.i1075, align 2
  %128 = load i16, i16* %__w5.addr.i1074, align 2
  %129 = load i16, i16* %__w4.addr.i1073, align 2
  %130 = load i16, i16* %__w3.addr.i1072, align 2
  %131 = load i16, i16* %__w2.addr.i1071, align 2
  %132 = load i16, i16* %__w1.addr.i1070, align 2
  %133 = load i16, i16* %__w0.addr.i1069, align 2
  store i16 %126, i16* %__w7.addr.i.i1060, align 2
  store i16 %127, i16* %__w6.addr.i.i1061, align 2
  store i16 %128, i16* %__w5.addr.i.i1062, align 2
  store i16 %129, i16* %__w4.addr.i.i1063, align 2
  store i16 %130, i16* %__w3.addr.i.i1064, align 2
  store i16 %131, i16* %__w2.addr.i.i1065, align 2
  store i16 %132, i16* %__w1.addr.i.i1066, align 2
  store i16 %133, i16* %__w0.addr.i.i1067, align 2
  %134 = load i16, i16* %__w0.addr.i.i1067, align 2
  %vecinit.i.i1077 = insertelement <8 x i16> undef, i16 %134, i32 0
  %135 = load i16, i16* %__w1.addr.i.i1066, align 2
  %vecinit1.i.i1078 = insertelement <8 x i16> %vecinit.i.i1077, i16 %135, i32 1
  %136 = load i16, i16* %__w2.addr.i.i1065, align 2
  %vecinit2.i.i1079 = insertelement <8 x i16> %vecinit1.i.i1078, i16 %136, i32 2
  %137 = load i16, i16* %__w3.addr.i.i1064, align 2
  %vecinit3.i.i1080 = insertelement <8 x i16> %vecinit2.i.i1079, i16 %137, i32 3
  %138 = load i16, i16* %__w4.addr.i.i1063, align 2
  %vecinit4.i.i1081 = insertelement <8 x i16> %vecinit3.i.i1080, i16 %138, i32 4
  %139 = load i16, i16* %__w5.addr.i.i1062, align 2
  %vecinit5.i.i1082 = insertelement <8 x i16> %vecinit4.i.i1081, i16 %139, i32 5
  %140 = load i16, i16* %__w6.addr.i.i1061, align 2
  %vecinit6.i.i1083 = insertelement <8 x i16> %vecinit5.i.i1082, i16 %140, i32 6
  %141 = load i16, i16* %__w7.addr.i.i1060, align 2
  %vecinit7.i.i1084 = insertelement <8 x i16> %vecinit6.i.i1083, i16 %141, i32 7
  store <8 x i16> %vecinit7.i.i1084, <8 x i16>* %.compoundliteral.i.i1068, align 16
  %142 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i1068, align 16
  %143 = bitcast <8 x i16> %142 to <2 x i64>
  store <2 x i64> %143, <2 x i64>* %rot3_1, align 16
  store i32 512, i32* %__i.addr.i1055, align 4
  %144 = load i32, i32* %__i.addr.i1055, align 4
  %145 = load i32, i32* %__i.addr.i1055, align 4
  %146 = load i32, i32* %__i.addr.i1055, align 4
  %147 = load i32, i32* %__i.addr.i1055, align 4
  store i32 %144, i32* %__i3.addr.i.i1050, align 4
  store i32 %145, i32* %__i2.addr.i.i1051, align 4
  store i32 %146, i32* %__i1.addr.i.i1052, align 4
  store i32 %147, i32* %__i0.addr.i.i1053, align 4
  %148 = load i32, i32* %__i0.addr.i.i1053, align 4
  %vecinit.i.i1056 = insertelement <4 x i32> undef, i32 %148, i32 0
  %149 = load i32, i32* %__i1.addr.i.i1052, align 4
  %vecinit1.i.i1057 = insertelement <4 x i32> %vecinit.i.i1056, i32 %149, i32 1
  %150 = load i32, i32* %__i2.addr.i.i1051, align 4
  %vecinit2.i.i1058 = insertelement <4 x i32> %vecinit1.i.i1057, i32 %150, i32 2
  %151 = load i32, i32* %__i3.addr.i.i1050, align 4
  %vecinit3.i.i1059 = insertelement <4 x i32> %vecinit2.i.i1058, i32 %151, i32 3
  store <4 x i32> %vecinit3.i.i1059, <4 x i32>* %.compoundliteral.i.i1054, align 16
  %152 = load <4 x i32>, <4 x i32>* %.compoundliteral.i.i1054, align 16
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  store <2 x i64> %153, <2 x i64>* %bias_0, align 16
  store i32 16842752, i32* %__i.addr.i, align 4
  %154 = load i32, i32* %__i.addr.i, align 4
  %155 = load i32, i32* %__i.addr.i, align 4
  %156 = load i32, i32* %__i.addr.i, align 4
  %157 = load i32, i32* %__i.addr.i, align 4
  store i32 %154, i32* %__i3.addr.i.i, align 4
  store i32 %155, i32* %__i2.addr.i.i, align 4
  store i32 %156, i32* %__i1.addr.i.i, align 4
  store i32 %157, i32* %__i0.addr.i.i, align 4
  %158 = load i32, i32* %__i0.addr.i.i, align 4
  %vecinit.i.i1046 = insertelement <4 x i32> undef, i32 %158, i32 0
  %159 = load i32, i32* %__i1.addr.i.i, align 4
  %vecinit1.i.i1047 = insertelement <4 x i32> %vecinit.i.i1046, i32 %159, i32 1
  %160 = load i32, i32* %__i2.addr.i.i, align 4
  %vecinit2.i.i1048 = insertelement <4 x i32> %vecinit1.i.i1047, i32 %160, i32 2
  %161 = load i32, i32* %__i3.addr.i.i, align 4
  %vecinit3.i.i1049 = insertelement <4 x i32> %vecinit2.i.i1048, i32 %161, i32 3
  store <4 x i32> %vecinit3.i.i1049, <4 x i32>* %.compoundliteral.i.i1045, align 16
  %162 = load <4 x i32>, <4 x i32>* %.compoundliteral.i.i1045, align 16
  %163 = bitcast <4 x i32> %162 to <2 x i64>
  store <2 x i64> %163, <2 x i64>* %bias_1, align 16
  %164 = load i16*, i16** %data.addr, align 8
  %add.ptr = getelementptr inbounds i16, i16* %164, i64 0
  %165 = bitcast i16* %add.ptr to <2 x i64>*
  store <2 x i64>* %165, <2 x i64>** %__p.addr.i1044, align 8
  %166 = load <2 x i64>*, <2 x i64>** %__p.addr.i1044, align 8
  %167 = load <2 x i64>, <2 x i64>* %166, align 16
  store <2 x i64> %167, <2 x i64>* %row0, align 16
  %168 = load i16*, i16** %data.addr, align 8
  %add.ptr11 = getelementptr inbounds i16, i16* %168, i64 8
  %169 = bitcast i16* %add.ptr11 to <2 x i64>*
  store <2 x i64>* %169, <2 x i64>** %__p.addr.i1043, align 8
  %170 = load <2 x i64>*, <2 x i64>** %__p.addr.i1043, align 8
  %171 = load <2 x i64>, <2 x i64>* %170, align 16
  store <2 x i64> %171, <2 x i64>* %row1, align 16
  %172 = load i16*, i16** %data.addr, align 8
  %add.ptr13 = getelementptr inbounds i16, i16* %172, i64 16
  %173 = bitcast i16* %add.ptr13 to <2 x i64>*
  store <2 x i64>* %173, <2 x i64>** %__p.addr.i1042, align 8
  %174 = load <2 x i64>*, <2 x i64>** %__p.addr.i1042, align 8
  %175 = load <2 x i64>, <2 x i64>* %174, align 16
  store <2 x i64> %175, <2 x i64>* %row2, align 16
  %176 = load i16*, i16** %data.addr, align 8
  %add.ptr15 = getelementptr inbounds i16, i16* %176, i64 24
  %177 = bitcast i16* %add.ptr15 to <2 x i64>*
  store <2 x i64>* %177, <2 x i64>** %__p.addr.i1041, align 8
  %178 = load <2 x i64>*, <2 x i64>** %__p.addr.i1041, align 8
  %179 = load <2 x i64>, <2 x i64>* %178, align 16
  store <2 x i64> %179, <2 x i64>* %row3, align 16
  %180 = load i16*, i16** %data.addr, align 8
  %add.ptr17 = getelementptr inbounds i16, i16* %180, i64 32
  %181 = bitcast i16* %add.ptr17 to <2 x i64>*
  store <2 x i64>* %181, <2 x i64>** %__p.addr.i1040, align 8
  %182 = load <2 x i64>*, <2 x i64>** %__p.addr.i1040, align 8
  %183 = load <2 x i64>, <2 x i64>* %182, align 16
  store <2 x i64> %183, <2 x i64>* %row4, align 16
  %184 = load i16*, i16** %data.addr, align 8
  %add.ptr19 = getelementptr inbounds i16, i16* %184, i64 40
  %185 = bitcast i16* %add.ptr19 to <2 x i64>*
  store <2 x i64>* %185, <2 x i64>** %__p.addr.i1039, align 8
  %186 = load <2 x i64>*, <2 x i64>** %__p.addr.i1039, align 8
  %187 = load <2 x i64>, <2 x i64>* %186, align 16
  store <2 x i64> %187, <2 x i64>* %row5, align 16
  %188 = load i16*, i16** %data.addr, align 8
  %add.ptr21 = getelementptr inbounds i16, i16* %188, i64 48
  %189 = bitcast i16* %add.ptr21 to <2 x i64>*
  store <2 x i64>* %189, <2 x i64>** %__p.addr.i1038, align 8
  %190 = load <2 x i64>*, <2 x i64>** %__p.addr.i1038, align 8
  %191 = load <2 x i64>, <2 x i64>* %190, align 16
  store <2 x i64> %191, <2 x i64>* %row6, align 16
  %192 = load i16*, i16** %data.addr, align 8
  %add.ptr23 = getelementptr inbounds i16, i16* %192, i64 56
  %193 = bitcast i16* %add.ptr23 to <2 x i64>*
  store <2 x i64>* %193, <2 x i64>** %__p.addr.i1037, align 8
  %194 = load <2 x i64>*, <2 x i64>** %__p.addr.i1037, align 8
  %195 = load <2 x i64>, <2 x i64>* %194, align 16
  store <2 x i64> %195, <2 x i64>* %row7, align 16
  %196 = load <2 x i64>, <2 x i64>* %row2, align 16
  %197 = load <2 x i64>, <2 x i64>* %row6, align 16
  store <2 x i64> %196, <2 x i64>* %__a.addr.i1034, align 16
  store <2 x i64> %197, <2 x i64>* %__b.addr.i1035, align 16
  %198 = load <2 x i64>, <2 x i64>* %__a.addr.i1034, align 16
  %199 = bitcast <2 x i64> %198 to <8 x i16>
  %200 = load <2 x i64>, <2 x i64>* %__b.addr.i1035, align 16
  %201 = bitcast <2 x i64> %200 to <8 x i16>
  %shuffle.i1036 = shufflevector <8 x i16> %199, <8 x i16> %201, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %202 = bitcast <8 x i16> %shuffle.i1036 to <2 x i64>
  store <2 x i64> %202, <2 x i64>* %rot0_0lo, align 16
  %203 = load <2 x i64>, <2 x i64>* %row2, align 16
  %204 = load <2 x i64>, <2 x i64>* %row6, align 16
  store <2 x i64> %203, <2 x i64>* %__a.addr.i1031, align 16
  store <2 x i64> %204, <2 x i64>* %__b.addr.i1032, align 16
  %205 = load <2 x i64>, <2 x i64>* %__a.addr.i1031, align 16
  %206 = bitcast <2 x i64> %205 to <8 x i16>
  %207 = load <2 x i64>, <2 x i64>* %__b.addr.i1032, align 16
  %208 = bitcast <2 x i64> %207 to <8 x i16>
  %shuffle.i1033 = shufflevector <8 x i16> %206, <8 x i16> %208, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %209 = bitcast <8 x i16> %shuffle.i1033 to <2 x i64>
  store <2 x i64> %209, <2 x i64>* %rot0_0hi, align 16
  %210 = load <2 x i64>, <2 x i64>* %rot0_0lo, align 16
  %211 = load <2 x i64>, <2 x i64>* %rot0_0, align 16
  store <2 x i64> %210, <2 x i64>* %__a.addr.i1029, align 16
  store <2 x i64> %211, <2 x i64>* %__b.addr.i1030, align 16
  %212 = load <2 x i64>, <2 x i64>* %__a.addr.i1029, align 16
  %213 = bitcast <2 x i64> %212 to <8 x i16>
  %214 = load <2 x i64>, <2 x i64>* %__b.addr.i1030, align 16
  %215 = bitcast <2 x i64> %214 to <8 x i16>
  %216 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %213, <8 x i16> %215) #10
  %217 = bitcast <4 x i32> %216 to <2 x i64>
  store <2 x i64> %217, <2 x i64>* %t2e_l, align 16
  %218 = load <2 x i64>, <2 x i64>* %rot0_0hi, align 16
  %219 = load <2 x i64>, <2 x i64>* %rot0_0, align 16
  store <2 x i64> %218, <2 x i64>* %__a.addr.i1027, align 16
  store <2 x i64> %219, <2 x i64>* %__b.addr.i1028, align 16
  %220 = load <2 x i64>, <2 x i64>* %__a.addr.i1027, align 16
  %221 = bitcast <2 x i64> %220 to <8 x i16>
  %222 = load <2 x i64>, <2 x i64>* %__b.addr.i1028, align 16
  %223 = bitcast <2 x i64> %222 to <8 x i16>
  %224 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %221, <8 x i16> %223) #10
  %225 = bitcast <4 x i32> %224 to <2 x i64>
  store <2 x i64> %225, <2 x i64>* %t2e_h, align 16
  %226 = load <2 x i64>, <2 x i64>* %rot0_0lo, align 16
  %227 = load <2 x i64>, <2 x i64>* %rot0_1, align 16
  store <2 x i64> %226, <2 x i64>* %__a.addr.i1025, align 16
  store <2 x i64> %227, <2 x i64>* %__b.addr.i1026, align 16
  %228 = load <2 x i64>, <2 x i64>* %__a.addr.i1025, align 16
  %229 = bitcast <2 x i64> %228 to <8 x i16>
  %230 = load <2 x i64>, <2 x i64>* %__b.addr.i1026, align 16
  %231 = bitcast <2 x i64> %230 to <8 x i16>
  %232 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %229, <8 x i16> %231) #10
  %233 = bitcast <4 x i32> %232 to <2 x i64>
  store <2 x i64> %233, <2 x i64>* %t3e_l, align 16
  %234 = load <2 x i64>, <2 x i64>* %rot0_0hi, align 16
  %235 = load <2 x i64>, <2 x i64>* %rot0_1, align 16
  store <2 x i64> %234, <2 x i64>* %__a.addr.i1023, align 16
  store <2 x i64> %235, <2 x i64>* %__b.addr.i1024, align 16
  %236 = load <2 x i64>, <2 x i64>* %__a.addr.i1023, align 16
  %237 = bitcast <2 x i64> %236 to <8 x i16>
  %238 = load <2 x i64>, <2 x i64>* %__b.addr.i1024, align 16
  %239 = bitcast <2 x i64> %238 to <8 x i16>
  %240 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %237, <8 x i16> %239) #10
  %241 = bitcast <4 x i32> %240 to <2 x i64>
  store <2 x i64> %241, <2 x i64>* %t3e_h, align 16
  %242 = load <2 x i64>, <2 x i64>* %row0, align 16
  %243 = load <2 x i64>, <2 x i64>* %row4, align 16
  store <2 x i64> %242, <2 x i64>* %__a.addr.i1020, align 16
  store <2 x i64> %243, <2 x i64>* %__b.addr.i1021, align 16
  %244 = load <2 x i64>, <2 x i64>* %__a.addr.i1020, align 16
  %245 = bitcast <2 x i64> %244 to <8 x i16>
  %246 = load <2 x i64>, <2 x i64>* %__b.addr.i1021, align 16
  %247 = bitcast <2 x i64> %246 to <8 x i16>
  %add.i1022 = add <8 x i16> %245, %247
  %248 = bitcast <8 x i16> %add.i1022 to <2 x i64>
  store <2 x i64> %248, <2 x i64>* %sum04, align 16
  %249 = load <2 x i64>, <2 x i64>* %row0, align 16
  %250 = load <2 x i64>, <2 x i64>* %row4, align 16
  store <2 x i64> %249, <2 x i64>* %__a.addr.i1017, align 16
  store <2 x i64> %250, <2 x i64>* %__b.addr.i1018, align 16
  %251 = load <2 x i64>, <2 x i64>* %__a.addr.i1017, align 16
  %252 = bitcast <2 x i64> %251 to <8 x i16>
  %253 = load <2 x i64>, <2 x i64>* %__b.addr.i1018, align 16
  %254 = bitcast <2 x i64> %253 to <8 x i16>
  %sub.i1019 = sub <8 x i16> %252, %254
  %255 = bitcast <8 x i16> %sub.i1019 to <2 x i64>
  store <2 x i64> %255, <2 x i64>* %dif04, align 16
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i1016, align 16
  %256 = load <2 x i64>, <2 x i64>* %.compoundliteral.i1016, align 16
  %257 = load <2 x i64>, <2 x i64>* %sum04, align 16
  store <2 x i64> %256, <2 x i64>* %__a.addr.i1013, align 16
  store <2 x i64> %257, <2 x i64>* %__b.addr.i1014, align 16
  %258 = load <2 x i64>, <2 x i64>* %__a.addr.i1013, align 16
  %259 = bitcast <2 x i64> %258 to <8 x i16>
  %260 = load <2 x i64>, <2 x i64>* %__b.addr.i1014, align 16
  %261 = bitcast <2 x i64> %260 to <8 x i16>
  %shuffle.i1015 = shufflevector <8 x i16> %259, <8 x i16> %261, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %262 = bitcast <8 x i16> %shuffle.i1015 to <2 x i64>
  store <2 x i64> %262, <2 x i64>* %__a.addr.i1011, align 16
  store i32 4, i32* %__count.addr.i1012, align 4
  %263 = load <2 x i64>, <2 x i64>* %__a.addr.i1011, align 16
  %264 = bitcast <2 x i64> %263 to <4 x i32>
  %265 = load i32, i32* %__count.addr.i1012, align 4
  %266 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %264, i32 %265) #10
  %267 = bitcast <4 x i32> %266 to <2 x i64>
  store <2 x i64> %267, <2 x i64>* %t0e_l, align 16
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i1010, align 16
  %268 = load <2 x i64>, <2 x i64>* %.compoundliteral.i1010, align 16
  %269 = load <2 x i64>, <2 x i64>* %sum04, align 16
  store <2 x i64> %268, <2 x i64>* %__a.addr.i1007, align 16
  store <2 x i64> %269, <2 x i64>* %__b.addr.i1008, align 16
  %270 = load <2 x i64>, <2 x i64>* %__a.addr.i1007, align 16
  %271 = bitcast <2 x i64> %270 to <8 x i16>
  %272 = load <2 x i64>, <2 x i64>* %__b.addr.i1008, align 16
  %273 = bitcast <2 x i64> %272 to <8 x i16>
  %shuffle.i1009 = shufflevector <8 x i16> %271, <8 x i16> %273, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %274 = bitcast <8 x i16> %shuffle.i1009 to <2 x i64>
  store <2 x i64> %274, <2 x i64>* %__a.addr.i1005, align 16
  store i32 4, i32* %__count.addr.i1006, align 4
  %275 = load <2 x i64>, <2 x i64>* %__a.addr.i1005, align 16
  %276 = bitcast <2 x i64> %275 to <4 x i32>
  %277 = load i32, i32* %__count.addr.i1006, align 4
  %278 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %276, i32 %277) #10
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  store <2 x i64> %279, <2 x i64>* %t0e_h, align 16
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i1004, align 16
  %280 = load <2 x i64>, <2 x i64>* %.compoundliteral.i1004, align 16
  %281 = load <2 x i64>, <2 x i64>* %dif04, align 16
  store <2 x i64> %280, <2 x i64>* %__a.addr.i1001, align 16
  store <2 x i64> %281, <2 x i64>* %__b.addr.i1002, align 16
  %282 = load <2 x i64>, <2 x i64>* %__a.addr.i1001, align 16
  %283 = bitcast <2 x i64> %282 to <8 x i16>
  %284 = load <2 x i64>, <2 x i64>* %__b.addr.i1002, align 16
  %285 = bitcast <2 x i64> %284 to <8 x i16>
  %shuffle.i1003 = shufflevector <8 x i16> %283, <8 x i16> %285, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %286 = bitcast <8 x i16> %shuffle.i1003 to <2 x i64>
  store <2 x i64> %286, <2 x i64>* %__a.addr.i999, align 16
  store i32 4, i32* %__count.addr.i1000, align 4
  %287 = load <2 x i64>, <2 x i64>* %__a.addr.i999, align 16
  %288 = bitcast <2 x i64> %287 to <4 x i32>
  %289 = load i32, i32* %__count.addr.i1000, align 4
  %290 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %288, i32 %289) #10
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  store <2 x i64> %291, <2 x i64>* %t1e_l, align 16
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i998, align 16
  %292 = load <2 x i64>, <2 x i64>* %.compoundliteral.i998, align 16
  %293 = load <2 x i64>, <2 x i64>* %dif04, align 16
  store <2 x i64> %292, <2 x i64>* %__a.addr.i995, align 16
  store <2 x i64> %293, <2 x i64>* %__b.addr.i996, align 16
  %294 = load <2 x i64>, <2 x i64>* %__a.addr.i995, align 16
  %295 = bitcast <2 x i64> %294 to <8 x i16>
  %296 = load <2 x i64>, <2 x i64>* %__b.addr.i996, align 16
  %297 = bitcast <2 x i64> %296 to <8 x i16>
  %shuffle.i997 = shufflevector <8 x i16> %295, <8 x i16> %297, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %298 = bitcast <8 x i16> %shuffle.i997 to <2 x i64>
  store <2 x i64> %298, <2 x i64>* %__a.addr.i993, align 16
  store i32 4, i32* %__count.addr.i994, align 4
  %299 = load <2 x i64>, <2 x i64>* %__a.addr.i993, align 16
  %300 = bitcast <2 x i64> %299 to <4 x i32>
  %301 = load i32, i32* %__count.addr.i994, align 4
  %302 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %300, i32 %301) #10
  %303 = bitcast <4 x i32> %302 to <2 x i64>
  store <2 x i64> %303, <2 x i64>* %t1e_h, align 16
  %304 = load <2 x i64>, <2 x i64>* %t0e_l, align 16
  %305 = load <2 x i64>, <2 x i64>* %t3e_l, align 16
  store <2 x i64> %304, <2 x i64>* %__a.addr.i990, align 16
  store <2 x i64> %305, <2 x i64>* %__b.addr.i991, align 16
  %306 = load <2 x i64>, <2 x i64>* %__a.addr.i990, align 16
  %307 = bitcast <2 x i64> %306 to <4 x i32>
  %308 = load <2 x i64>, <2 x i64>* %__b.addr.i991, align 16
  %309 = bitcast <2 x i64> %308 to <4 x i32>
  %add.i992 = add <4 x i32> %307, %309
  %310 = bitcast <4 x i32> %add.i992 to <2 x i64>
  store <2 x i64> %310, <2 x i64>* %x0_l, align 16
  %311 = load <2 x i64>, <2 x i64>* %t0e_h, align 16
  %312 = load <2 x i64>, <2 x i64>* %t3e_h, align 16
  store <2 x i64> %311, <2 x i64>* %__a.addr.i987, align 16
  store <2 x i64> %312, <2 x i64>* %__b.addr.i988, align 16
  %313 = load <2 x i64>, <2 x i64>* %__a.addr.i987, align 16
  %314 = bitcast <2 x i64> %313 to <4 x i32>
  %315 = load <2 x i64>, <2 x i64>* %__b.addr.i988, align 16
  %316 = bitcast <2 x i64> %315 to <4 x i32>
  %add.i989 = add <4 x i32> %314, %316
  %317 = bitcast <4 x i32> %add.i989 to <2 x i64>
  store <2 x i64> %317, <2 x i64>* %x0_h, align 16
  %318 = load <2 x i64>, <2 x i64>* %t0e_l, align 16
  %319 = load <2 x i64>, <2 x i64>* %t3e_l, align 16
  store <2 x i64> %318, <2 x i64>* %__a.addr.i984, align 16
  store <2 x i64> %319, <2 x i64>* %__b.addr.i985, align 16
  %320 = load <2 x i64>, <2 x i64>* %__a.addr.i984, align 16
  %321 = bitcast <2 x i64> %320 to <4 x i32>
  %322 = load <2 x i64>, <2 x i64>* %__b.addr.i985, align 16
  %323 = bitcast <2 x i64> %322 to <4 x i32>
  %sub.i986 = sub <4 x i32> %321, %323
  %324 = bitcast <4 x i32> %sub.i986 to <2 x i64>
  store <2 x i64> %324, <2 x i64>* %x3_l, align 16
  %325 = load <2 x i64>, <2 x i64>* %t0e_h, align 16
  %326 = load <2 x i64>, <2 x i64>* %t3e_h, align 16
  store <2 x i64> %325, <2 x i64>* %__a.addr.i981, align 16
  store <2 x i64> %326, <2 x i64>* %__b.addr.i982, align 16
  %327 = load <2 x i64>, <2 x i64>* %__a.addr.i981, align 16
  %328 = bitcast <2 x i64> %327 to <4 x i32>
  %329 = load <2 x i64>, <2 x i64>* %__b.addr.i982, align 16
  %330 = bitcast <2 x i64> %329 to <4 x i32>
  %sub.i983 = sub <4 x i32> %328, %330
  %331 = bitcast <4 x i32> %sub.i983 to <2 x i64>
  store <2 x i64> %331, <2 x i64>* %x3_h, align 16
  %332 = load <2 x i64>, <2 x i64>* %t1e_l, align 16
  %333 = load <2 x i64>, <2 x i64>* %t2e_l, align 16
  store <2 x i64> %332, <2 x i64>* %__a.addr.i978, align 16
  store <2 x i64> %333, <2 x i64>* %__b.addr.i979, align 16
  %334 = load <2 x i64>, <2 x i64>* %__a.addr.i978, align 16
  %335 = bitcast <2 x i64> %334 to <4 x i32>
  %336 = load <2 x i64>, <2 x i64>* %__b.addr.i979, align 16
  %337 = bitcast <2 x i64> %336 to <4 x i32>
  %add.i980 = add <4 x i32> %335, %337
  %338 = bitcast <4 x i32> %add.i980 to <2 x i64>
  store <2 x i64> %338, <2 x i64>* %x1_l, align 16
  %339 = load <2 x i64>, <2 x i64>* %t1e_h, align 16
  %340 = load <2 x i64>, <2 x i64>* %t2e_h, align 16
  store <2 x i64> %339, <2 x i64>* %__a.addr.i975, align 16
  store <2 x i64> %340, <2 x i64>* %__b.addr.i976, align 16
  %341 = load <2 x i64>, <2 x i64>* %__a.addr.i975, align 16
  %342 = bitcast <2 x i64> %341 to <4 x i32>
  %343 = load <2 x i64>, <2 x i64>* %__b.addr.i976, align 16
  %344 = bitcast <2 x i64> %343 to <4 x i32>
  %add.i977 = add <4 x i32> %342, %344
  %345 = bitcast <4 x i32> %add.i977 to <2 x i64>
  store <2 x i64> %345, <2 x i64>* %x1_h, align 16
  %346 = load <2 x i64>, <2 x i64>* %t1e_l, align 16
  %347 = load <2 x i64>, <2 x i64>* %t2e_l, align 16
  store <2 x i64> %346, <2 x i64>* %__a.addr.i972, align 16
  store <2 x i64> %347, <2 x i64>* %__b.addr.i973, align 16
  %348 = load <2 x i64>, <2 x i64>* %__a.addr.i972, align 16
  %349 = bitcast <2 x i64> %348 to <4 x i32>
  %350 = load <2 x i64>, <2 x i64>* %__b.addr.i973, align 16
  %351 = bitcast <2 x i64> %350 to <4 x i32>
  %sub.i974 = sub <4 x i32> %349, %351
  %352 = bitcast <4 x i32> %sub.i974 to <2 x i64>
  store <2 x i64> %352, <2 x i64>* %x2_l, align 16
  %353 = load <2 x i64>, <2 x i64>* %t1e_h, align 16
  %354 = load <2 x i64>, <2 x i64>* %t2e_h, align 16
  store <2 x i64> %353, <2 x i64>* %__a.addr.i969, align 16
  store <2 x i64> %354, <2 x i64>* %__b.addr.i970, align 16
  %355 = load <2 x i64>, <2 x i64>* %__a.addr.i969, align 16
  %356 = bitcast <2 x i64> %355 to <4 x i32>
  %357 = load <2 x i64>, <2 x i64>* %__b.addr.i970, align 16
  %358 = bitcast <2 x i64> %357 to <4 x i32>
  %sub.i971 = sub <4 x i32> %356, %358
  %359 = bitcast <4 x i32> %sub.i971 to <2 x i64>
  store <2 x i64> %359, <2 x i64>* %x2_h, align 16
  %360 = load <2 x i64>, <2 x i64>* %row7, align 16
  %361 = load <2 x i64>, <2 x i64>* %row3, align 16
  store <2 x i64> %360, <2 x i64>* %__a.addr.i966, align 16
  store <2 x i64> %361, <2 x i64>* %__b.addr.i967, align 16
  %362 = load <2 x i64>, <2 x i64>* %__a.addr.i966, align 16
  %363 = bitcast <2 x i64> %362 to <8 x i16>
  %364 = load <2 x i64>, <2 x i64>* %__b.addr.i967, align 16
  %365 = bitcast <2 x i64> %364 to <8 x i16>
  %shuffle.i968 = shufflevector <8 x i16> %363, <8 x i16> %365, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %366 = bitcast <8 x i16> %shuffle.i968 to <2 x i64>
  store <2 x i64> %366, <2 x i64>* %rot2_0lo, align 16
  %367 = load <2 x i64>, <2 x i64>* %row7, align 16
  %368 = load <2 x i64>, <2 x i64>* %row3, align 16
  store <2 x i64> %367, <2 x i64>* %__a.addr.i963, align 16
  store <2 x i64> %368, <2 x i64>* %__b.addr.i964, align 16
  %369 = load <2 x i64>, <2 x i64>* %__a.addr.i963, align 16
  %370 = bitcast <2 x i64> %369 to <8 x i16>
  %371 = load <2 x i64>, <2 x i64>* %__b.addr.i964, align 16
  %372 = bitcast <2 x i64> %371 to <8 x i16>
  %shuffle.i965 = shufflevector <8 x i16> %370, <8 x i16> %372, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %373 = bitcast <8 x i16> %shuffle.i965 to <2 x i64>
  store <2 x i64> %373, <2 x i64>* %rot2_0hi, align 16
  %374 = load <2 x i64>, <2 x i64>* %rot2_0lo, align 16
  %375 = load <2 x i64>, <2 x i64>* %rot2_0, align 16
  store <2 x i64> %374, <2 x i64>* %__a.addr.i961, align 16
  store <2 x i64> %375, <2 x i64>* %__b.addr.i962, align 16
  %376 = load <2 x i64>, <2 x i64>* %__a.addr.i961, align 16
  %377 = bitcast <2 x i64> %376 to <8 x i16>
  %378 = load <2 x i64>, <2 x i64>* %__b.addr.i962, align 16
  %379 = bitcast <2 x i64> %378 to <8 x i16>
  %380 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %377, <8 x i16> %379) #10
  %381 = bitcast <4 x i32> %380 to <2 x i64>
  store <2 x i64> %381, <2 x i64>* %y0o_l, align 16
  %382 = load <2 x i64>, <2 x i64>* %rot2_0hi, align 16
  %383 = load <2 x i64>, <2 x i64>* %rot2_0, align 16
  store <2 x i64> %382, <2 x i64>* %__a.addr.i959, align 16
  store <2 x i64> %383, <2 x i64>* %__b.addr.i960, align 16
  %384 = load <2 x i64>, <2 x i64>* %__a.addr.i959, align 16
  %385 = bitcast <2 x i64> %384 to <8 x i16>
  %386 = load <2 x i64>, <2 x i64>* %__b.addr.i960, align 16
  %387 = bitcast <2 x i64> %386 to <8 x i16>
  %388 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %385, <8 x i16> %387) #10
  %389 = bitcast <4 x i32> %388 to <2 x i64>
  store <2 x i64> %389, <2 x i64>* %y0o_h, align 16
  %390 = load <2 x i64>, <2 x i64>* %rot2_0lo, align 16
  %391 = load <2 x i64>, <2 x i64>* %rot2_1, align 16
  store <2 x i64> %390, <2 x i64>* %__a.addr.i957, align 16
  store <2 x i64> %391, <2 x i64>* %__b.addr.i958, align 16
  %392 = load <2 x i64>, <2 x i64>* %__a.addr.i957, align 16
  %393 = bitcast <2 x i64> %392 to <8 x i16>
  %394 = load <2 x i64>, <2 x i64>* %__b.addr.i958, align 16
  %395 = bitcast <2 x i64> %394 to <8 x i16>
  %396 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %393, <8 x i16> %395) #10
  %397 = bitcast <4 x i32> %396 to <2 x i64>
  store <2 x i64> %397, <2 x i64>* %y2o_l, align 16
  %398 = load <2 x i64>, <2 x i64>* %rot2_0hi, align 16
  %399 = load <2 x i64>, <2 x i64>* %rot2_1, align 16
  store <2 x i64> %398, <2 x i64>* %__a.addr.i955, align 16
  store <2 x i64> %399, <2 x i64>* %__b.addr.i956, align 16
  %400 = load <2 x i64>, <2 x i64>* %__a.addr.i955, align 16
  %401 = bitcast <2 x i64> %400 to <8 x i16>
  %402 = load <2 x i64>, <2 x i64>* %__b.addr.i956, align 16
  %403 = bitcast <2 x i64> %402 to <8 x i16>
  %404 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %401, <8 x i16> %403) #10
  %405 = bitcast <4 x i32> %404 to <2 x i64>
  store <2 x i64> %405, <2 x i64>* %y2o_h, align 16
  %406 = load <2 x i64>, <2 x i64>* %row5, align 16
  %407 = load <2 x i64>, <2 x i64>* %row1, align 16
  store <2 x i64> %406, <2 x i64>* %__a.addr.i952, align 16
  store <2 x i64> %407, <2 x i64>* %__b.addr.i953, align 16
  %408 = load <2 x i64>, <2 x i64>* %__a.addr.i952, align 16
  %409 = bitcast <2 x i64> %408 to <8 x i16>
  %410 = load <2 x i64>, <2 x i64>* %__b.addr.i953, align 16
  %411 = bitcast <2 x i64> %410 to <8 x i16>
  %shuffle.i954 = shufflevector <8 x i16> %409, <8 x i16> %411, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %412 = bitcast <8 x i16> %shuffle.i954 to <2 x i64>
  store <2 x i64> %412, <2 x i64>* %rot3_0lo, align 16
  %413 = load <2 x i64>, <2 x i64>* %row5, align 16
  %414 = load <2 x i64>, <2 x i64>* %row1, align 16
  store <2 x i64> %413, <2 x i64>* %__a.addr.i949, align 16
  store <2 x i64> %414, <2 x i64>* %__b.addr.i950, align 16
  %415 = load <2 x i64>, <2 x i64>* %__a.addr.i949, align 16
  %416 = bitcast <2 x i64> %415 to <8 x i16>
  %417 = load <2 x i64>, <2 x i64>* %__b.addr.i950, align 16
  %418 = bitcast <2 x i64> %417 to <8 x i16>
  %shuffle.i951 = shufflevector <8 x i16> %416, <8 x i16> %418, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %419 = bitcast <8 x i16> %shuffle.i951 to <2 x i64>
  store <2 x i64> %419, <2 x i64>* %rot3_0hi, align 16
  %420 = load <2 x i64>, <2 x i64>* %rot3_0lo, align 16
  %421 = load <2 x i64>, <2 x i64>* %rot3_0, align 16
  store <2 x i64> %420, <2 x i64>* %__a.addr.i947, align 16
  store <2 x i64> %421, <2 x i64>* %__b.addr.i948, align 16
  %422 = load <2 x i64>, <2 x i64>* %__a.addr.i947, align 16
  %423 = bitcast <2 x i64> %422 to <8 x i16>
  %424 = load <2 x i64>, <2 x i64>* %__b.addr.i948, align 16
  %425 = bitcast <2 x i64> %424 to <8 x i16>
  %426 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %423, <8 x i16> %425) #10
  %427 = bitcast <4 x i32> %426 to <2 x i64>
  store <2 x i64> %427, <2 x i64>* %y1o_l, align 16
  %428 = load <2 x i64>, <2 x i64>* %rot3_0hi, align 16
  %429 = load <2 x i64>, <2 x i64>* %rot3_0, align 16
  store <2 x i64> %428, <2 x i64>* %__a.addr.i945, align 16
  store <2 x i64> %429, <2 x i64>* %__b.addr.i946, align 16
  %430 = load <2 x i64>, <2 x i64>* %__a.addr.i945, align 16
  %431 = bitcast <2 x i64> %430 to <8 x i16>
  %432 = load <2 x i64>, <2 x i64>* %__b.addr.i946, align 16
  %433 = bitcast <2 x i64> %432 to <8 x i16>
  %434 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %431, <8 x i16> %433) #10
  %435 = bitcast <4 x i32> %434 to <2 x i64>
  store <2 x i64> %435, <2 x i64>* %y1o_h, align 16
  %436 = load <2 x i64>, <2 x i64>* %rot3_0lo, align 16
  %437 = load <2 x i64>, <2 x i64>* %rot3_1, align 16
  store <2 x i64> %436, <2 x i64>* %__a.addr.i943, align 16
  store <2 x i64> %437, <2 x i64>* %__b.addr.i944, align 16
  %438 = load <2 x i64>, <2 x i64>* %__a.addr.i943, align 16
  %439 = bitcast <2 x i64> %438 to <8 x i16>
  %440 = load <2 x i64>, <2 x i64>* %__b.addr.i944, align 16
  %441 = bitcast <2 x i64> %440 to <8 x i16>
  %442 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %439, <8 x i16> %441) #10
  %443 = bitcast <4 x i32> %442 to <2 x i64>
  store <2 x i64> %443, <2 x i64>* %y3o_l, align 16
  %444 = load <2 x i64>, <2 x i64>* %rot3_0hi, align 16
  %445 = load <2 x i64>, <2 x i64>* %rot3_1, align 16
  store <2 x i64> %444, <2 x i64>* %__a.addr.i941, align 16
  store <2 x i64> %445, <2 x i64>* %__b.addr.i942, align 16
  %446 = load <2 x i64>, <2 x i64>* %__a.addr.i941, align 16
  %447 = bitcast <2 x i64> %446 to <8 x i16>
  %448 = load <2 x i64>, <2 x i64>* %__b.addr.i942, align 16
  %449 = bitcast <2 x i64> %448 to <8 x i16>
  %450 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %447, <8 x i16> %449) #10
  %451 = bitcast <4 x i32> %450 to <2 x i64>
  store <2 x i64> %451, <2 x i64>* %y3o_h, align 16
  %452 = load <2 x i64>, <2 x i64>* %row1, align 16
  %453 = load <2 x i64>, <2 x i64>* %row7, align 16
  store <2 x i64> %452, <2 x i64>* %__a.addr.i938, align 16
  store <2 x i64> %453, <2 x i64>* %__b.addr.i939, align 16
  %454 = load <2 x i64>, <2 x i64>* %__a.addr.i938, align 16
  %455 = bitcast <2 x i64> %454 to <8 x i16>
  %456 = load <2 x i64>, <2 x i64>* %__b.addr.i939, align 16
  %457 = bitcast <2 x i64> %456 to <8 x i16>
  %add.i940 = add <8 x i16> %455, %457
  %458 = bitcast <8 x i16> %add.i940 to <2 x i64>
  store <2 x i64> %458, <2 x i64>* %sum17, align 16
  %459 = load <2 x i64>, <2 x i64>* %row3, align 16
  %460 = load <2 x i64>, <2 x i64>* %row5, align 16
  store <2 x i64> %459, <2 x i64>* %__a.addr.i935, align 16
  store <2 x i64> %460, <2 x i64>* %__b.addr.i936, align 16
  %461 = load <2 x i64>, <2 x i64>* %__a.addr.i935, align 16
  %462 = bitcast <2 x i64> %461 to <8 x i16>
  %463 = load <2 x i64>, <2 x i64>* %__b.addr.i936, align 16
  %464 = bitcast <2 x i64> %463 to <8 x i16>
  %add.i937 = add <8 x i16> %462, %464
  %465 = bitcast <8 x i16> %add.i937 to <2 x i64>
  store <2 x i64> %465, <2 x i64>* %sum35, align 16
  %466 = load <2 x i64>, <2 x i64>* %sum17, align 16
  %467 = load <2 x i64>, <2 x i64>* %sum35, align 16
  store <2 x i64> %466, <2 x i64>* %__a.addr.i932, align 16
  store <2 x i64> %467, <2 x i64>* %__b.addr.i933, align 16
  %468 = load <2 x i64>, <2 x i64>* %__a.addr.i932, align 16
  %469 = bitcast <2 x i64> %468 to <8 x i16>
  %470 = load <2 x i64>, <2 x i64>* %__b.addr.i933, align 16
  %471 = bitcast <2 x i64> %470 to <8 x i16>
  %shuffle.i934 = shufflevector <8 x i16> %469, <8 x i16> %471, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %472 = bitcast <8 x i16> %shuffle.i934 to <2 x i64>
  store <2 x i64> %472, <2 x i64>* %rot1_0lo, align 16
  %473 = load <2 x i64>, <2 x i64>* %sum17, align 16
  %474 = load <2 x i64>, <2 x i64>* %sum35, align 16
  store <2 x i64> %473, <2 x i64>* %__a.addr.i929, align 16
  store <2 x i64> %474, <2 x i64>* %__b.addr.i930, align 16
  %475 = load <2 x i64>, <2 x i64>* %__a.addr.i929, align 16
  %476 = bitcast <2 x i64> %475 to <8 x i16>
  %477 = load <2 x i64>, <2 x i64>* %__b.addr.i930, align 16
  %478 = bitcast <2 x i64> %477 to <8 x i16>
  %shuffle.i931 = shufflevector <8 x i16> %476, <8 x i16> %478, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %479 = bitcast <8 x i16> %shuffle.i931 to <2 x i64>
  store <2 x i64> %479, <2 x i64>* %rot1_0hi, align 16
  %480 = load <2 x i64>, <2 x i64>* %rot1_0lo, align 16
  %481 = load <2 x i64>, <2 x i64>* %rot1_0, align 16
  store <2 x i64> %480, <2 x i64>* %__a.addr.i927, align 16
  store <2 x i64> %481, <2 x i64>* %__b.addr.i928, align 16
  %482 = load <2 x i64>, <2 x i64>* %__a.addr.i927, align 16
  %483 = bitcast <2 x i64> %482 to <8 x i16>
  %484 = load <2 x i64>, <2 x i64>* %__b.addr.i928, align 16
  %485 = bitcast <2 x i64> %484 to <8 x i16>
  %486 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %483, <8 x i16> %485) #10
  %487 = bitcast <4 x i32> %486 to <2 x i64>
  store <2 x i64> %487, <2 x i64>* %y4o_l, align 16
  %488 = load <2 x i64>, <2 x i64>* %rot1_0hi, align 16
  %489 = load <2 x i64>, <2 x i64>* %rot1_0, align 16
  store <2 x i64> %488, <2 x i64>* %__a.addr.i925, align 16
  store <2 x i64> %489, <2 x i64>* %__b.addr.i926, align 16
  %490 = load <2 x i64>, <2 x i64>* %__a.addr.i925, align 16
  %491 = bitcast <2 x i64> %490 to <8 x i16>
  %492 = load <2 x i64>, <2 x i64>* %__b.addr.i926, align 16
  %493 = bitcast <2 x i64> %492 to <8 x i16>
  %494 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %491, <8 x i16> %493) #10
  %495 = bitcast <4 x i32> %494 to <2 x i64>
  store <2 x i64> %495, <2 x i64>* %y4o_h, align 16
  %496 = load <2 x i64>, <2 x i64>* %rot1_0lo, align 16
  %497 = load <2 x i64>, <2 x i64>* %rot1_1, align 16
  store <2 x i64> %496, <2 x i64>* %__a.addr.i923, align 16
  store <2 x i64> %497, <2 x i64>* %__b.addr.i924, align 16
  %498 = load <2 x i64>, <2 x i64>* %__a.addr.i923, align 16
  %499 = bitcast <2 x i64> %498 to <8 x i16>
  %500 = load <2 x i64>, <2 x i64>* %__b.addr.i924, align 16
  %501 = bitcast <2 x i64> %500 to <8 x i16>
  %502 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %499, <8 x i16> %501) #10
  %503 = bitcast <4 x i32> %502 to <2 x i64>
  store <2 x i64> %503, <2 x i64>* %y5o_l, align 16
  %504 = load <2 x i64>, <2 x i64>* %rot1_0hi, align 16
  %505 = load <2 x i64>, <2 x i64>* %rot1_1, align 16
  store <2 x i64> %504, <2 x i64>* %__a.addr.i921, align 16
  store <2 x i64> %505, <2 x i64>* %__b.addr.i922, align 16
  %506 = load <2 x i64>, <2 x i64>* %__a.addr.i921, align 16
  %507 = bitcast <2 x i64> %506 to <8 x i16>
  %508 = load <2 x i64>, <2 x i64>* %__b.addr.i922, align 16
  %509 = bitcast <2 x i64> %508 to <8 x i16>
  %510 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %507, <8 x i16> %509) #10
  %511 = bitcast <4 x i32> %510 to <2 x i64>
  store <2 x i64> %511, <2 x i64>* %y5o_h, align 16
  %512 = load <2 x i64>, <2 x i64>* %y0o_l, align 16
  %513 = load <2 x i64>, <2 x i64>* %y4o_l, align 16
  store <2 x i64> %512, <2 x i64>* %__a.addr.i918, align 16
  store <2 x i64> %513, <2 x i64>* %__b.addr.i919, align 16
  %514 = load <2 x i64>, <2 x i64>* %__a.addr.i918, align 16
  %515 = bitcast <2 x i64> %514 to <4 x i32>
  %516 = load <2 x i64>, <2 x i64>* %__b.addr.i919, align 16
  %517 = bitcast <2 x i64> %516 to <4 x i32>
  %add.i920 = add <4 x i32> %515, %517
  %518 = bitcast <4 x i32> %add.i920 to <2 x i64>
  store <2 x i64> %518, <2 x i64>* %x4_l, align 16
  %519 = load <2 x i64>, <2 x i64>* %y0o_h, align 16
  %520 = load <2 x i64>, <2 x i64>* %y4o_h, align 16
  store <2 x i64> %519, <2 x i64>* %__a.addr.i915, align 16
  store <2 x i64> %520, <2 x i64>* %__b.addr.i916, align 16
  %521 = load <2 x i64>, <2 x i64>* %__a.addr.i915, align 16
  %522 = bitcast <2 x i64> %521 to <4 x i32>
  %523 = load <2 x i64>, <2 x i64>* %__b.addr.i916, align 16
  %524 = bitcast <2 x i64> %523 to <4 x i32>
  %add.i917 = add <4 x i32> %522, %524
  %525 = bitcast <4 x i32> %add.i917 to <2 x i64>
  store <2 x i64> %525, <2 x i64>* %x4_h, align 16
  %526 = load <2 x i64>, <2 x i64>* %y1o_l, align 16
  %527 = load <2 x i64>, <2 x i64>* %y5o_l, align 16
  store <2 x i64> %526, <2 x i64>* %__a.addr.i912, align 16
  store <2 x i64> %527, <2 x i64>* %__b.addr.i913, align 16
  %528 = load <2 x i64>, <2 x i64>* %__a.addr.i912, align 16
  %529 = bitcast <2 x i64> %528 to <4 x i32>
  %530 = load <2 x i64>, <2 x i64>* %__b.addr.i913, align 16
  %531 = bitcast <2 x i64> %530 to <4 x i32>
  %add.i914 = add <4 x i32> %529, %531
  %532 = bitcast <4 x i32> %add.i914 to <2 x i64>
  store <2 x i64> %532, <2 x i64>* %x5_l, align 16
  %533 = load <2 x i64>, <2 x i64>* %y1o_h, align 16
  %534 = load <2 x i64>, <2 x i64>* %y5o_h, align 16
  store <2 x i64> %533, <2 x i64>* %__a.addr.i909, align 16
  store <2 x i64> %534, <2 x i64>* %__b.addr.i910, align 16
  %535 = load <2 x i64>, <2 x i64>* %__a.addr.i909, align 16
  %536 = bitcast <2 x i64> %535 to <4 x i32>
  %537 = load <2 x i64>, <2 x i64>* %__b.addr.i910, align 16
  %538 = bitcast <2 x i64> %537 to <4 x i32>
  %add.i911 = add <4 x i32> %536, %538
  %539 = bitcast <4 x i32> %add.i911 to <2 x i64>
  store <2 x i64> %539, <2 x i64>* %x5_h, align 16
  %540 = load <2 x i64>, <2 x i64>* %y2o_l, align 16
  %541 = load <2 x i64>, <2 x i64>* %y5o_l, align 16
  store <2 x i64> %540, <2 x i64>* %__a.addr.i906, align 16
  store <2 x i64> %541, <2 x i64>* %__b.addr.i907, align 16
  %542 = load <2 x i64>, <2 x i64>* %__a.addr.i906, align 16
  %543 = bitcast <2 x i64> %542 to <4 x i32>
  %544 = load <2 x i64>, <2 x i64>* %__b.addr.i907, align 16
  %545 = bitcast <2 x i64> %544 to <4 x i32>
  %add.i908 = add <4 x i32> %543, %545
  %546 = bitcast <4 x i32> %add.i908 to <2 x i64>
  store <2 x i64> %546, <2 x i64>* %x6_l, align 16
  %547 = load <2 x i64>, <2 x i64>* %y2o_h, align 16
  %548 = load <2 x i64>, <2 x i64>* %y5o_h, align 16
  store <2 x i64> %547, <2 x i64>* %__a.addr.i903, align 16
  store <2 x i64> %548, <2 x i64>* %__b.addr.i904, align 16
  %549 = load <2 x i64>, <2 x i64>* %__a.addr.i903, align 16
  %550 = bitcast <2 x i64> %549 to <4 x i32>
  %551 = load <2 x i64>, <2 x i64>* %__b.addr.i904, align 16
  %552 = bitcast <2 x i64> %551 to <4 x i32>
  %add.i905 = add <4 x i32> %550, %552
  %553 = bitcast <4 x i32> %add.i905 to <2 x i64>
  store <2 x i64> %553, <2 x i64>* %x6_h, align 16
  %554 = load <2 x i64>, <2 x i64>* %y3o_l, align 16
  %555 = load <2 x i64>, <2 x i64>* %y4o_l, align 16
  store <2 x i64> %554, <2 x i64>* %__a.addr.i900, align 16
  store <2 x i64> %555, <2 x i64>* %__b.addr.i901, align 16
  %556 = load <2 x i64>, <2 x i64>* %__a.addr.i900, align 16
  %557 = bitcast <2 x i64> %556 to <4 x i32>
  %558 = load <2 x i64>, <2 x i64>* %__b.addr.i901, align 16
  %559 = bitcast <2 x i64> %558 to <4 x i32>
  %add.i902 = add <4 x i32> %557, %559
  %560 = bitcast <4 x i32> %add.i902 to <2 x i64>
  store <2 x i64> %560, <2 x i64>* %x7_l, align 16
  %561 = load <2 x i64>, <2 x i64>* %y3o_h, align 16
  %562 = load <2 x i64>, <2 x i64>* %y4o_h, align 16
  store <2 x i64> %561, <2 x i64>* %__a.addr.i897, align 16
  store <2 x i64> %562, <2 x i64>* %__b.addr.i898, align 16
  %563 = load <2 x i64>, <2 x i64>* %__a.addr.i897, align 16
  %564 = bitcast <2 x i64> %563 to <4 x i32>
  %565 = load <2 x i64>, <2 x i64>* %__b.addr.i898, align 16
  %566 = bitcast <2 x i64> %565 to <4 x i32>
  %add.i899 = add <4 x i32> %564, %566
  %567 = bitcast <4 x i32> %add.i899 to <2 x i64>
  store <2 x i64> %567, <2 x i64>* %x7_h, align 16
  %568 = load <2 x i64>, <2 x i64>* %x0_l, align 16
  %569 = load <2 x i64>, <2 x i64>* %bias_0, align 16
  store <2 x i64> %568, <2 x i64>* %__a.addr.i894, align 16
  store <2 x i64> %569, <2 x i64>* %__b.addr.i895, align 16
  %570 = load <2 x i64>, <2 x i64>* %__a.addr.i894, align 16
  %571 = bitcast <2 x i64> %570 to <4 x i32>
  %572 = load <2 x i64>, <2 x i64>* %__b.addr.i895, align 16
  %573 = bitcast <2 x i64> %572 to <4 x i32>
  %add.i896 = add <4 x i32> %571, %573
  %574 = bitcast <4 x i32> %add.i896 to <2 x i64>
  store <2 x i64> %574, <2 x i64>* %abiased_l, align 16
  %575 = load <2 x i64>, <2 x i64>* %x0_h, align 16
  %576 = load <2 x i64>, <2 x i64>* %bias_0, align 16
  store <2 x i64> %575, <2 x i64>* %__a.addr.i891, align 16
  store <2 x i64> %576, <2 x i64>* %__b.addr.i892, align 16
  %577 = load <2 x i64>, <2 x i64>* %__a.addr.i891, align 16
  %578 = bitcast <2 x i64> %577 to <4 x i32>
  %579 = load <2 x i64>, <2 x i64>* %__b.addr.i892, align 16
  %580 = bitcast <2 x i64> %579 to <4 x i32>
  %add.i893 = add <4 x i32> %578, %580
  %581 = bitcast <4 x i32> %add.i893 to <2 x i64>
  store <2 x i64> %581, <2 x i64>* %abiased_h, align 16
  %582 = load <2 x i64>, <2 x i64>* %abiased_l, align 16
  %583 = load <2 x i64>, <2 x i64>* %x7_l, align 16
  store <2 x i64> %582, <2 x i64>* %__a.addr.i888, align 16
  store <2 x i64> %583, <2 x i64>* %__b.addr.i889, align 16
  %584 = load <2 x i64>, <2 x i64>* %__a.addr.i888, align 16
  %585 = bitcast <2 x i64> %584 to <4 x i32>
  %586 = load <2 x i64>, <2 x i64>* %__b.addr.i889, align 16
  %587 = bitcast <2 x i64> %586 to <4 x i32>
  %add.i890 = add <4 x i32> %585, %587
  %588 = bitcast <4 x i32> %add.i890 to <2 x i64>
  store <2 x i64> %588, <2 x i64>* %sum_l, align 16
  %589 = load <2 x i64>, <2 x i64>* %abiased_h, align 16
  %590 = load <2 x i64>, <2 x i64>* %x7_h, align 16
  store <2 x i64> %589, <2 x i64>* %__a.addr.i885, align 16
  store <2 x i64> %590, <2 x i64>* %__b.addr.i886, align 16
  %591 = load <2 x i64>, <2 x i64>* %__a.addr.i885, align 16
  %592 = bitcast <2 x i64> %591 to <4 x i32>
  %593 = load <2 x i64>, <2 x i64>* %__b.addr.i886, align 16
  %594 = bitcast <2 x i64> %593 to <4 x i32>
  %add.i887 = add <4 x i32> %592, %594
  %595 = bitcast <4 x i32> %add.i887 to <2 x i64>
  store <2 x i64> %595, <2 x i64>* %sum_h, align 16
  %596 = load <2 x i64>, <2 x i64>* %abiased_l, align 16
  %597 = load <2 x i64>, <2 x i64>* %x7_l, align 16
  store <2 x i64> %596, <2 x i64>* %__a.addr.i882, align 16
  store <2 x i64> %597, <2 x i64>* %__b.addr.i883, align 16
  %598 = load <2 x i64>, <2 x i64>* %__a.addr.i882, align 16
  %599 = bitcast <2 x i64> %598 to <4 x i32>
  %600 = load <2 x i64>, <2 x i64>* %__b.addr.i883, align 16
  %601 = bitcast <2 x i64> %600 to <4 x i32>
  %sub.i884 = sub <4 x i32> %599, %601
  %602 = bitcast <4 x i32> %sub.i884 to <2 x i64>
  store <2 x i64> %602, <2 x i64>* %dif_l, align 16
  %603 = load <2 x i64>, <2 x i64>* %abiased_h, align 16
  %604 = load <2 x i64>, <2 x i64>* %x7_h, align 16
  store <2 x i64> %603, <2 x i64>* %__a.addr.i879, align 16
  store <2 x i64> %604, <2 x i64>* %__b.addr.i880, align 16
  %605 = load <2 x i64>, <2 x i64>* %__a.addr.i879, align 16
  %606 = bitcast <2 x i64> %605 to <4 x i32>
  %607 = load <2 x i64>, <2 x i64>* %__b.addr.i880, align 16
  %608 = bitcast <2 x i64> %607 to <4 x i32>
  %sub.i881 = sub <4 x i32> %606, %608
  %609 = bitcast <4 x i32> %sub.i881 to <2 x i64>
  store <2 x i64> %609, <2 x i64>* %dif_h, align 16
  %610 = load <2 x i64>, <2 x i64>* %sum_l, align 16
  store <2 x i64> %610, <2 x i64>* %__a.addr.i877, align 16
  store i32 10, i32* %__count.addr.i878, align 4
  %611 = load <2 x i64>, <2 x i64>* %__a.addr.i877, align 16
  %612 = bitcast <2 x i64> %611 to <4 x i32>
  %613 = load i32, i32* %__count.addr.i878, align 4
  %614 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %612, i32 %613) #10
  %615 = bitcast <4 x i32> %614 to <2 x i64>
  %616 = load <2 x i64>, <2 x i64>* %sum_h, align 16
  store <2 x i64> %616, <2 x i64>* %__a.addr.i875, align 16
  store i32 10, i32* %__count.addr.i876, align 4
  %617 = load <2 x i64>, <2 x i64>* %__a.addr.i875, align 16
  %618 = bitcast <2 x i64> %617 to <4 x i32>
  %619 = load i32, i32* %__count.addr.i876, align 4
  %620 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %618, i32 %619) #10
  %621 = bitcast <4 x i32> %620 to <2 x i64>
  store <2 x i64> %615, <2 x i64>* %__a.addr.i873, align 16
  store <2 x i64> %621, <2 x i64>* %__b.addr.i874, align 16
  %622 = load <2 x i64>, <2 x i64>* %__a.addr.i873, align 16
  %623 = bitcast <2 x i64> %622 to <4 x i32>
  %624 = load <2 x i64>, <2 x i64>* %__b.addr.i874, align 16
  %625 = bitcast <2 x i64> %624 to <4 x i32>
  %626 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %623, <4 x i32> %625) #10
  %627 = bitcast <8 x i16> %626 to <2 x i64>
  store <2 x i64> %627, <2 x i64>* %row0, align 16
  %628 = load <2 x i64>, <2 x i64>* %dif_l, align 16
  store <2 x i64> %628, <2 x i64>* %__a.addr.i871, align 16
  store i32 10, i32* %__count.addr.i872, align 4
  %629 = load <2 x i64>, <2 x i64>* %__a.addr.i871, align 16
  %630 = bitcast <2 x i64> %629 to <4 x i32>
  %631 = load i32, i32* %__count.addr.i872, align 4
  %632 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %630, i32 %631) #10
  %633 = bitcast <4 x i32> %632 to <2 x i64>
  %634 = load <2 x i64>, <2 x i64>* %dif_h, align 16
  store <2 x i64> %634, <2 x i64>* %__a.addr.i869, align 16
  store i32 10, i32* %__count.addr.i870, align 4
  %635 = load <2 x i64>, <2 x i64>* %__a.addr.i869, align 16
  %636 = bitcast <2 x i64> %635 to <4 x i32>
  %637 = load i32, i32* %__count.addr.i870, align 4
  %638 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %636, i32 %637) #10
  %639 = bitcast <4 x i32> %638 to <2 x i64>
  store <2 x i64> %633, <2 x i64>* %__a.addr.i867, align 16
  store <2 x i64> %639, <2 x i64>* %__b.addr.i868, align 16
  %640 = load <2 x i64>, <2 x i64>* %__a.addr.i867, align 16
  %641 = bitcast <2 x i64> %640 to <4 x i32>
  %642 = load <2 x i64>, <2 x i64>* %__b.addr.i868, align 16
  %643 = bitcast <2 x i64> %642 to <4 x i32>
  %644 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %641, <4 x i32> %643) #10
  %645 = bitcast <8 x i16> %644 to <2 x i64>
  store <2 x i64> %645, <2 x i64>* %row7, align 16
  %646 = load <2 x i64>, <2 x i64>* %x1_l, align 16
  %647 = load <2 x i64>, <2 x i64>* %bias_0, align 16
  store <2 x i64> %646, <2 x i64>* %__a.addr.i864, align 16
  store <2 x i64> %647, <2 x i64>* %__b.addr.i865, align 16
  %648 = load <2 x i64>, <2 x i64>* %__a.addr.i864, align 16
  %649 = bitcast <2 x i64> %648 to <4 x i32>
  %650 = load <2 x i64>, <2 x i64>* %__b.addr.i865, align 16
  %651 = bitcast <2 x i64> %650 to <4 x i32>
  %add.i866 = add <4 x i32> %649, %651
  %652 = bitcast <4 x i32> %add.i866 to <2 x i64>
  store <2 x i64> %652, <2 x i64>* %abiased_l93, align 16
  %653 = load <2 x i64>, <2 x i64>* %x1_h, align 16
  %654 = load <2 x i64>, <2 x i64>* %bias_0, align 16
  store <2 x i64> %653, <2 x i64>* %__a.addr.i861, align 16
  store <2 x i64> %654, <2 x i64>* %__b.addr.i862, align 16
  %655 = load <2 x i64>, <2 x i64>* %__a.addr.i861, align 16
  %656 = bitcast <2 x i64> %655 to <4 x i32>
  %657 = load <2 x i64>, <2 x i64>* %__b.addr.i862, align 16
  %658 = bitcast <2 x i64> %657 to <4 x i32>
  %add.i863 = add <4 x i32> %656, %658
  %659 = bitcast <4 x i32> %add.i863 to <2 x i64>
  store <2 x i64> %659, <2 x i64>* %abiased_h95, align 16
  %660 = load <2 x i64>, <2 x i64>* %abiased_l93, align 16
  %661 = load <2 x i64>, <2 x i64>* %x6_l, align 16
  store <2 x i64> %660, <2 x i64>* %__a.addr.i858, align 16
  store <2 x i64> %661, <2 x i64>* %__b.addr.i859, align 16
  %662 = load <2 x i64>, <2 x i64>* %__a.addr.i858, align 16
  %663 = bitcast <2 x i64> %662 to <4 x i32>
  %664 = load <2 x i64>, <2 x i64>* %__b.addr.i859, align 16
  %665 = bitcast <2 x i64> %664 to <4 x i32>
  %add.i860 = add <4 x i32> %663, %665
  %666 = bitcast <4 x i32> %add.i860 to <2 x i64>
  store <2 x i64> %666, <2 x i64>* %sum_l97, align 16
  %667 = load <2 x i64>, <2 x i64>* %abiased_h95, align 16
  %668 = load <2 x i64>, <2 x i64>* %x6_h, align 16
  store <2 x i64> %667, <2 x i64>* %__a.addr.i855, align 16
  store <2 x i64> %668, <2 x i64>* %__b.addr.i856, align 16
  %669 = load <2 x i64>, <2 x i64>* %__a.addr.i855, align 16
  %670 = bitcast <2 x i64> %669 to <4 x i32>
  %671 = load <2 x i64>, <2 x i64>* %__b.addr.i856, align 16
  %672 = bitcast <2 x i64> %671 to <4 x i32>
  %add.i857 = add <4 x i32> %670, %672
  %673 = bitcast <4 x i32> %add.i857 to <2 x i64>
  store <2 x i64> %673, <2 x i64>* %sum_h99, align 16
  %674 = load <2 x i64>, <2 x i64>* %abiased_l93, align 16
  %675 = load <2 x i64>, <2 x i64>* %x6_l, align 16
  store <2 x i64> %674, <2 x i64>* %__a.addr.i852, align 16
  store <2 x i64> %675, <2 x i64>* %__b.addr.i853, align 16
  %676 = load <2 x i64>, <2 x i64>* %__a.addr.i852, align 16
  %677 = bitcast <2 x i64> %676 to <4 x i32>
  %678 = load <2 x i64>, <2 x i64>* %__b.addr.i853, align 16
  %679 = bitcast <2 x i64> %678 to <4 x i32>
  %sub.i854 = sub <4 x i32> %677, %679
  %680 = bitcast <4 x i32> %sub.i854 to <2 x i64>
  store <2 x i64> %680, <2 x i64>* %dif_l101, align 16
  %681 = load <2 x i64>, <2 x i64>* %abiased_h95, align 16
  %682 = load <2 x i64>, <2 x i64>* %x6_h, align 16
  store <2 x i64> %681, <2 x i64>* %__a.addr.i849, align 16
  store <2 x i64> %682, <2 x i64>* %__b.addr.i850, align 16
  %683 = load <2 x i64>, <2 x i64>* %__a.addr.i849, align 16
  %684 = bitcast <2 x i64> %683 to <4 x i32>
  %685 = load <2 x i64>, <2 x i64>* %__b.addr.i850, align 16
  %686 = bitcast <2 x i64> %685 to <4 x i32>
  %sub.i851 = sub <4 x i32> %684, %686
  %687 = bitcast <4 x i32> %sub.i851 to <2 x i64>
  store <2 x i64> %687, <2 x i64>* %dif_h103, align 16
  %688 = load <2 x i64>, <2 x i64>* %sum_l97, align 16
  store <2 x i64> %688, <2 x i64>* %__a.addr.i847, align 16
  store i32 10, i32* %__count.addr.i848, align 4
  %689 = load <2 x i64>, <2 x i64>* %__a.addr.i847, align 16
  %690 = bitcast <2 x i64> %689 to <4 x i32>
  %691 = load i32, i32* %__count.addr.i848, align 4
  %692 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %690, i32 %691) #10
  %693 = bitcast <4 x i32> %692 to <2 x i64>
  %694 = load <2 x i64>, <2 x i64>* %sum_h99, align 16
  store <2 x i64> %694, <2 x i64>* %__a.addr.i845, align 16
  store i32 10, i32* %__count.addr.i846, align 4
  %695 = load <2 x i64>, <2 x i64>* %__a.addr.i845, align 16
  %696 = bitcast <2 x i64> %695 to <4 x i32>
  %697 = load i32, i32* %__count.addr.i846, align 4
  %698 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %696, i32 %697) #10
  %699 = bitcast <4 x i32> %698 to <2 x i64>
  store <2 x i64> %693, <2 x i64>* %__a.addr.i843, align 16
  store <2 x i64> %699, <2 x i64>* %__b.addr.i844, align 16
  %700 = load <2 x i64>, <2 x i64>* %__a.addr.i843, align 16
  %701 = bitcast <2 x i64> %700 to <4 x i32>
  %702 = load <2 x i64>, <2 x i64>* %__b.addr.i844, align 16
  %703 = bitcast <2 x i64> %702 to <4 x i32>
  %704 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %701, <4 x i32> %703) #10
  %705 = bitcast <8 x i16> %704 to <2 x i64>
  store <2 x i64> %705, <2 x i64>* %row1, align 16
  %706 = load <2 x i64>, <2 x i64>* %dif_l101, align 16
  store <2 x i64> %706, <2 x i64>* %__a.addr.i841, align 16
  store i32 10, i32* %__count.addr.i842, align 4
  %707 = load <2 x i64>, <2 x i64>* %__a.addr.i841, align 16
  %708 = bitcast <2 x i64> %707 to <4 x i32>
  %709 = load i32, i32* %__count.addr.i842, align 4
  %710 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %708, i32 %709) #10
  %711 = bitcast <4 x i32> %710 to <2 x i64>
  %712 = load <2 x i64>, <2 x i64>* %dif_h103, align 16
  store <2 x i64> %712, <2 x i64>* %__a.addr.i839, align 16
  store i32 10, i32* %__count.addr.i840, align 4
  %713 = load <2 x i64>, <2 x i64>* %__a.addr.i839, align 16
  %714 = bitcast <2 x i64> %713 to <4 x i32>
  %715 = load i32, i32* %__count.addr.i840, align 4
  %716 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %714, i32 %715) #10
  %717 = bitcast <4 x i32> %716 to <2 x i64>
  store <2 x i64> %711, <2 x i64>* %__a.addr.i837, align 16
  store <2 x i64> %717, <2 x i64>* %__b.addr.i838, align 16
  %718 = load <2 x i64>, <2 x i64>* %__a.addr.i837, align 16
  %719 = bitcast <2 x i64> %718 to <4 x i32>
  %720 = load <2 x i64>, <2 x i64>* %__b.addr.i838, align 16
  %721 = bitcast <2 x i64> %720 to <4 x i32>
  %722 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %719, <4 x i32> %721) #10
  %723 = bitcast <8 x i16> %722 to <2 x i64>
  store <2 x i64> %723, <2 x i64>* %row6, align 16
  %724 = load <2 x i64>, <2 x i64>* %x2_l, align 16
  %725 = load <2 x i64>, <2 x i64>* %bias_0, align 16
  store <2 x i64> %724, <2 x i64>* %__a.addr.i834, align 16
  store <2 x i64> %725, <2 x i64>* %__b.addr.i835, align 16
  %726 = load <2 x i64>, <2 x i64>* %__a.addr.i834, align 16
  %727 = bitcast <2 x i64> %726 to <4 x i32>
  %728 = load <2 x i64>, <2 x i64>* %__b.addr.i835, align 16
  %729 = bitcast <2 x i64> %728 to <4 x i32>
  %add.i836 = add <4 x i32> %727, %729
  %730 = bitcast <4 x i32> %add.i836 to <2 x i64>
  store <2 x i64> %730, <2 x i64>* %abiased_l111, align 16
  %731 = load <2 x i64>, <2 x i64>* %x2_h, align 16
  %732 = load <2 x i64>, <2 x i64>* %bias_0, align 16
  store <2 x i64> %731, <2 x i64>* %__a.addr.i831, align 16
  store <2 x i64> %732, <2 x i64>* %__b.addr.i832, align 16
  %733 = load <2 x i64>, <2 x i64>* %__a.addr.i831, align 16
  %734 = bitcast <2 x i64> %733 to <4 x i32>
  %735 = load <2 x i64>, <2 x i64>* %__b.addr.i832, align 16
  %736 = bitcast <2 x i64> %735 to <4 x i32>
  %add.i833 = add <4 x i32> %734, %736
  %737 = bitcast <4 x i32> %add.i833 to <2 x i64>
  store <2 x i64> %737, <2 x i64>* %abiased_h113, align 16
  %738 = load <2 x i64>, <2 x i64>* %abiased_l111, align 16
  %739 = load <2 x i64>, <2 x i64>* %x5_l, align 16
  store <2 x i64> %738, <2 x i64>* %__a.addr.i828, align 16
  store <2 x i64> %739, <2 x i64>* %__b.addr.i829, align 16
  %740 = load <2 x i64>, <2 x i64>* %__a.addr.i828, align 16
  %741 = bitcast <2 x i64> %740 to <4 x i32>
  %742 = load <2 x i64>, <2 x i64>* %__b.addr.i829, align 16
  %743 = bitcast <2 x i64> %742 to <4 x i32>
  %add.i830 = add <4 x i32> %741, %743
  %744 = bitcast <4 x i32> %add.i830 to <2 x i64>
  store <2 x i64> %744, <2 x i64>* %sum_l115, align 16
  %745 = load <2 x i64>, <2 x i64>* %abiased_h113, align 16
  %746 = load <2 x i64>, <2 x i64>* %x5_h, align 16
  store <2 x i64> %745, <2 x i64>* %__a.addr.i825, align 16
  store <2 x i64> %746, <2 x i64>* %__b.addr.i826, align 16
  %747 = load <2 x i64>, <2 x i64>* %__a.addr.i825, align 16
  %748 = bitcast <2 x i64> %747 to <4 x i32>
  %749 = load <2 x i64>, <2 x i64>* %__b.addr.i826, align 16
  %750 = bitcast <2 x i64> %749 to <4 x i32>
  %add.i827 = add <4 x i32> %748, %750
  %751 = bitcast <4 x i32> %add.i827 to <2 x i64>
  store <2 x i64> %751, <2 x i64>* %sum_h117, align 16
  %752 = load <2 x i64>, <2 x i64>* %abiased_l111, align 16
  %753 = load <2 x i64>, <2 x i64>* %x5_l, align 16
  store <2 x i64> %752, <2 x i64>* %__a.addr.i822, align 16
  store <2 x i64> %753, <2 x i64>* %__b.addr.i823, align 16
  %754 = load <2 x i64>, <2 x i64>* %__a.addr.i822, align 16
  %755 = bitcast <2 x i64> %754 to <4 x i32>
  %756 = load <2 x i64>, <2 x i64>* %__b.addr.i823, align 16
  %757 = bitcast <2 x i64> %756 to <4 x i32>
  %sub.i824 = sub <4 x i32> %755, %757
  %758 = bitcast <4 x i32> %sub.i824 to <2 x i64>
  store <2 x i64> %758, <2 x i64>* %dif_l119, align 16
  %759 = load <2 x i64>, <2 x i64>* %abiased_h113, align 16
  %760 = load <2 x i64>, <2 x i64>* %x5_h, align 16
  store <2 x i64> %759, <2 x i64>* %__a.addr.i819, align 16
  store <2 x i64> %760, <2 x i64>* %__b.addr.i820, align 16
  %761 = load <2 x i64>, <2 x i64>* %__a.addr.i819, align 16
  %762 = bitcast <2 x i64> %761 to <4 x i32>
  %763 = load <2 x i64>, <2 x i64>* %__b.addr.i820, align 16
  %764 = bitcast <2 x i64> %763 to <4 x i32>
  %sub.i821 = sub <4 x i32> %762, %764
  %765 = bitcast <4 x i32> %sub.i821 to <2 x i64>
  store <2 x i64> %765, <2 x i64>* %dif_h121, align 16
  %766 = load <2 x i64>, <2 x i64>* %sum_l115, align 16
  store <2 x i64> %766, <2 x i64>* %__a.addr.i817, align 16
  store i32 10, i32* %__count.addr.i818, align 4
  %767 = load <2 x i64>, <2 x i64>* %__a.addr.i817, align 16
  %768 = bitcast <2 x i64> %767 to <4 x i32>
  %769 = load i32, i32* %__count.addr.i818, align 4
  %770 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %768, i32 %769) #10
  %771 = bitcast <4 x i32> %770 to <2 x i64>
  %772 = load <2 x i64>, <2 x i64>* %sum_h117, align 16
  store <2 x i64> %772, <2 x i64>* %__a.addr.i815, align 16
  store i32 10, i32* %__count.addr.i816, align 4
  %773 = load <2 x i64>, <2 x i64>* %__a.addr.i815, align 16
  %774 = bitcast <2 x i64> %773 to <4 x i32>
  %775 = load i32, i32* %__count.addr.i816, align 4
  %776 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %774, i32 %775) #10
  %777 = bitcast <4 x i32> %776 to <2 x i64>
  store <2 x i64> %771, <2 x i64>* %__a.addr.i813, align 16
  store <2 x i64> %777, <2 x i64>* %__b.addr.i814, align 16
  %778 = load <2 x i64>, <2 x i64>* %__a.addr.i813, align 16
  %779 = bitcast <2 x i64> %778 to <4 x i32>
  %780 = load <2 x i64>, <2 x i64>* %__b.addr.i814, align 16
  %781 = bitcast <2 x i64> %780 to <4 x i32>
  %782 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %779, <4 x i32> %781) #10
  %783 = bitcast <8 x i16> %782 to <2 x i64>
  store <2 x i64> %783, <2 x i64>* %row2, align 16
  %784 = load <2 x i64>, <2 x i64>* %dif_l119, align 16
  store <2 x i64> %784, <2 x i64>* %__a.addr.i811, align 16
  store i32 10, i32* %__count.addr.i812, align 4
  %785 = load <2 x i64>, <2 x i64>* %__a.addr.i811, align 16
  %786 = bitcast <2 x i64> %785 to <4 x i32>
  %787 = load i32, i32* %__count.addr.i812, align 4
  %788 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %786, i32 %787) #10
  %789 = bitcast <4 x i32> %788 to <2 x i64>
  %790 = load <2 x i64>, <2 x i64>* %dif_h121, align 16
  store <2 x i64> %790, <2 x i64>* %__a.addr.i809, align 16
  store i32 10, i32* %__count.addr.i810, align 4
  %791 = load <2 x i64>, <2 x i64>* %__a.addr.i809, align 16
  %792 = bitcast <2 x i64> %791 to <4 x i32>
  %793 = load i32, i32* %__count.addr.i810, align 4
  %794 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %792, i32 %793) #10
  %795 = bitcast <4 x i32> %794 to <2 x i64>
  store <2 x i64> %789, <2 x i64>* %__a.addr.i807, align 16
  store <2 x i64> %795, <2 x i64>* %__b.addr.i808, align 16
  %796 = load <2 x i64>, <2 x i64>* %__a.addr.i807, align 16
  %797 = bitcast <2 x i64> %796 to <4 x i32>
  %798 = load <2 x i64>, <2 x i64>* %__b.addr.i808, align 16
  %799 = bitcast <2 x i64> %798 to <4 x i32>
  %800 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %797, <4 x i32> %799) #10
  %801 = bitcast <8 x i16> %800 to <2 x i64>
  store <2 x i64> %801, <2 x i64>* %row5, align 16
  %802 = load <2 x i64>, <2 x i64>* %x3_l, align 16
  %803 = load <2 x i64>, <2 x i64>* %bias_0, align 16
  store <2 x i64> %802, <2 x i64>* %__a.addr.i804, align 16
  store <2 x i64> %803, <2 x i64>* %__b.addr.i805, align 16
  %804 = load <2 x i64>, <2 x i64>* %__a.addr.i804, align 16
  %805 = bitcast <2 x i64> %804 to <4 x i32>
  %806 = load <2 x i64>, <2 x i64>* %__b.addr.i805, align 16
  %807 = bitcast <2 x i64> %806 to <4 x i32>
  %add.i806 = add <4 x i32> %805, %807
  %808 = bitcast <4 x i32> %add.i806 to <2 x i64>
  store <2 x i64> %808, <2 x i64>* %abiased_l129, align 16
  %809 = load <2 x i64>, <2 x i64>* %x3_h, align 16
  %810 = load <2 x i64>, <2 x i64>* %bias_0, align 16
  store <2 x i64> %809, <2 x i64>* %__a.addr.i801, align 16
  store <2 x i64> %810, <2 x i64>* %__b.addr.i802, align 16
  %811 = load <2 x i64>, <2 x i64>* %__a.addr.i801, align 16
  %812 = bitcast <2 x i64> %811 to <4 x i32>
  %813 = load <2 x i64>, <2 x i64>* %__b.addr.i802, align 16
  %814 = bitcast <2 x i64> %813 to <4 x i32>
  %add.i803 = add <4 x i32> %812, %814
  %815 = bitcast <4 x i32> %add.i803 to <2 x i64>
  store <2 x i64> %815, <2 x i64>* %abiased_h131, align 16
  %816 = load <2 x i64>, <2 x i64>* %abiased_l129, align 16
  %817 = load <2 x i64>, <2 x i64>* %x4_l, align 16
  store <2 x i64> %816, <2 x i64>* %__a.addr.i798, align 16
  store <2 x i64> %817, <2 x i64>* %__b.addr.i799, align 16
  %818 = load <2 x i64>, <2 x i64>* %__a.addr.i798, align 16
  %819 = bitcast <2 x i64> %818 to <4 x i32>
  %820 = load <2 x i64>, <2 x i64>* %__b.addr.i799, align 16
  %821 = bitcast <2 x i64> %820 to <4 x i32>
  %add.i800 = add <4 x i32> %819, %821
  %822 = bitcast <4 x i32> %add.i800 to <2 x i64>
  store <2 x i64> %822, <2 x i64>* %sum_l133, align 16
  %823 = load <2 x i64>, <2 x i64>* %abiased_h131, align 16
  %824 = load <2 x i64>, <2 x i64>* %x4_h, align 16
  store <2 x i64> %823, <2 x i64>* %__a.addr.i795, align 16
  store <2 x i64> %824, <2 x i64>* %__b.addr.i796, align 16
  %825 = load <2 x i64>, <2 x i64>* %__a.addr.i795, align 16
  %826 = bitcast <2 x i64> %825 to <4 x i32>
  %827 = load <2 x i64>, <2 x i64>* %__b.addr.i796, align 16
  %828 = bitcast <2 x i64> %827 to <4 x i32>
  %add.i797 = add <4 x i32> %826, %828
  %829 = bitcast <4 x i32> %add.i797 to <2 x i64>
  store <2 x i64> %829, <2 x i64>* %sum_h135, align 16
  %830 = load <2 x i64>, <2 x i64>* %abiased_l129, align 16
  %831 = load <2 x i64>, <2 x i64>* %x4_l, align 16
  store <2 x i64> %830, <2 x i64>* %__a.addr.i792, align 16
  store <2 x i64> %831, <2 x i64>* %__b.addr.i793, align 16
  %832 = load <2 x i64>, <2 x i64>* %__a.addr.i792, align 16
  %833 = bitcast <2 x i64> %832 to <4 x i32>
  %834 = load <2 x i64>, <2 x i64>* %__b.addr.i793, align 16
  %835 = bitcast <2 x i64> %834 to <4 x i32>
  %sub.i794 = sub <4 x i32> %833, %835
  %836 = bitcast <4 x i32> %sub.i794 to <2 x i64>
  store <2 x i64> %836, <2 x i64>* %dif_l137, align 16
  %837 = load <2 x i64>, <2 x i64>* %abiased_h131, align 16
  %838 = load <2 x i64>, <2 x i64>* %x4_h, align 16
  store <2 x i64> %837, <2 x i64>* %__a.addr.i789, align 16
  store <2 x i64> %838, <2 x i64>* %__b.addr.i790, align 16
  %839 = load <2 x i64>, <2 x i64>* %__a.addr.i789, align 16
  %840 = bitcast <2 x i64> %839 to <4 x i32>
  %841 = load <2 x i64>, <2 x i64>* %__b.addr.i790, align 16
  %842 = bitcast <2 x i64> %841 to <4 x i32>
  %sub.i791 = sub <4 x i32> %840, %842
  %843 = bitcast <4 x i32> %sub.i791 to <2 x i64>
  store <2 x i64> %843, <2 x i64>* %dif_h139, align 16
  %844 = load <2 x i64>, <2 x i64>* %sum_l133, align 16
  store <2 x i64> %844, <2 x i64>* %__a.addr.i787, align 16
  store i32 10, i32* %__count.addr.i788, align 4
  %845 = load <2 x i64>, <2 x i64>* %__a.addr.i787, align 16
  %846 = bitcast <2 x i64> %845 to <4 x i32>
  %847 = load i32, i32* %__count.addr.i788, align 4
  %848 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %846, i32 %847) #10
  %849 = bitcast <4 x i32> %848 to <2 x i64>
  %850 = load <2 x i64>, <2 x i64>* %sum_h135, align 16
  store <2 x i64> %850, <2 x i64>* %__a.addr.i785, align 16
  store i32 10, i32* %__count.addr.i786, align 4
  %851 = load <2 x i64>, <2 x i64>* %__a.addr.i785, align 16
  %852 = bitcast <2 x i64> %851 to <4 x i32>
  %853 = load i32, i32* %__count.addr.i786, align 4
  %854 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %852, i32 %853) #10
  %855 = bitcast <4 x i32> %854 to <2 x i64>
  store <2 x i64> %849, <2 x i64>* %__a.addr.i783, align 16
  store <2 x i64> %855, <2 x i64>* %__b.addr.i784, align 16
  %856 = load <2 x i64>, <2 x i64>* %__a.addr.i783, align 16
  %857 = bitcast <2 x i64> %856 to <4 x i32>
  %858 = load <2 x i64>, <2 x i64>* %__b.addr.i784, align 16
  %859 = bitcast <2 x i64> %858 to <4 x i32>
  %860 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %857, <4 x i32> %859) #10
  %861 = bitcast <8 x i16> %860 to <2 x i64>
  store <2 x i64> %861, <2 x i64>* %row3, align 16
  %862 = load <2 x i64>, <2 x i64>* %dif_l137, align 16
  store <2 x i64> %862, <2 x i64>* %__a.addr.i781, align 16
  store i32 10, i32* %__count.addr.i782, align 4
  %863 = load <2 x i64>, <2 x i64>* %__a.addr.i781, align 16
  %864 = bitcast <2 x i64> %863 to <4 x i32>
  %865 = load i32, i32* %__count.addr.i782, align 4
  %866 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %864, i32 %865) #10
  %867 = bitcast <4 x i32> %866 to <2 x i64>
  %868 = load <2 x i64>, <2 x i64>* %dif_h139, align 16
  store <2 x i64> %868, <2 x i64>* %__a.addr.i779, align 16
  store i32 10, i32* %__count.addr.i780, align 4
  %869 = load <2 x i64>, <2 x i64>* %__a.addr.i779, align 16
  %870 = bitcast <2 x i64> %869 to <4 x i32>
  %871 = load i32, i32* %__count.addr.i780, align 4
  %872 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %870, i32 %871) #10
  %873 = bitcast <4 x i32> %872 to <2 x i64>
  store <2 x i64> %867, <2 x i64>* %__a.addr.i777, align 16
  store <2 x i64> %873, <2 x i64>* %__b.addr.i778, align 16
  %874 = load <2 x i64>, <2 x i64>* %__a.addr.i777, align 16
  %875 = bitcast <2 x i64> %874 to <4 x i32>
  %876 = load <2 x i64>, <2 x i64>* %__b.addr.i778, align 16
  %877 = bitcast <2 x i64> %876 to <4 x i32>
  %878 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %875, <4 x i32> %877) #10
  %879 = bitcast <8 x i16> %878 to <2 x i64>
  store <2 x i64> %879, <2 x i64>* %row4, align 16
  %880 = load <2 x i64>, <2 x i64>* %row0, align 16
  store <2 x i64> %880, <2 x i64>* %tmp, align 16
  %881 = load <2 x i64>, <2 x i64>* %row0, align 16
  %882 = load <2 x i64>, <2 x i64>* %row4, align 16
  store <2 x i64> %881, <2 x i64>* %__a.addr.i774, align 16
  store <2 x i64> %882, <2 x i64>* %__b.addr.i775, align 16
  %883 = load <2 x i64>, <2 x i64>* %__a.addr.i774, align 16
  %884 = bitcast <2 x i64> %883 to <8 x i16>
  %885 = load <2 x i64>, <2 x i64>* %__b.addr.i775, align 16
  %886 = bitcast <2 x i64> %885 to <8 x i16>
  %shuffle.i776 = shufflevector <8 x i16> %884, <8 x i16> %886, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %887 = bitcast <8 x i16> %shuffle.i776 to <2 x i64>
  store <2 x i64> %887, <2 x i64>* %row0, align 16
  %888 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %889 = load <2 x i64>, <2 x i64>* %row4, align 16
  store <2 x i64> %888, <2 x i64>* %__a.addr.i771, align 16
  store <2 x i64> %889, <2 x i64>* %__b.addr.i772, align 16
  %890 = load <2 x i64>, <2 x i64>* %__a.addr.i771, align 16
  %891 = bitcast <2 x i64> %890 to <8 x i16>
  %892 = load <2 x i64>, <2 x i64>* %__b.addr.i772, align 16
  %893 = bitcast <2 x i64> %892 to <8 x i16>
  %shuffle.i773 = shufflevector <8 x i16> %891, <8 x i16> %893, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %894 = bitcast <8 x i16> %shuffle.i773 to <2 x i64>
  store <2 x i64> %894, <2 x i64>* %row4, align 16
  %895 = load <2 x i64>, <2 x i64>* %row1, align 16
  store <2 x i64> %895, <2 x i64>* %tmp, align 16
  %896 = load <2 x i64>, <2 x i64>* %row1, align 16
  %897 = load <2 x i64>, <2 x i64>* %row5, align 16
  store <2 x i64> %896, <2 x i64>* %__a.addr.i768, align 16
  store <2 x i64> %897, <2 x i64>* %__b.addr.i769, align 16
  %898 = load <2 x i64>, <2 x i64>* %__a.addr.i768, align 16
  %899 = bitcast <2 x i64> %898 to <8 x i16>
  %900 = load <2 x i64>, <2 x i64>* %__b.addr.i769, align 16
  %901 = bitcast <2 x i64> %900 to <8 x i16>
  %shuffle.i770 = shufflevector <8 x i16> %899, <8 x i16> %901, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %902 = bitcast <8 x i16> %shuffle.i770 to <2 x i64>
  store <2 x i64> %902, <2 x i64>* %row1, align 16
  %903 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %904 = load <2 x i64>, <2 x i64>* %row5, align 16
  store <2 x i64> %903, <2 x i64>* %__a.addr.i765, align 16
  store <2 x i64> %904, <2 x i64>* %__b.addr.i766, align 16
  %905 = load <2 x i64>, <2 x i64>* %__a.addr.i765, align 16
  %906 = bitcast <2 x i64> %905 to <8 x i16>
  %907 = load <2 x i64>, <2 x i64>* %__b.addr.i766, align 16
  %908 = bitcast <2 x i64> %907 to <8 x i16>
  %shuffle.i767 = shufflevector <8 x i16> %906, <8 x i16> %908, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %909 = bitcast <8 x i16> %shuffle.i767 to <2 x i64>
  store <2 x i64> %909, <2 x i64>* %row5, align 16
  %910 = load <2 x i64>, <2 x i64>* %row2, align 16
  store <2 x i64> %910, <2 x i64>* %tmp, align 16
  %911 = load <2 x i64>, <2 x i64>* %row2, align 16
  %912 = load <2 x i64>, <2 x i64>* %row6, align 16
  store <2 x i64> %911, <2 x i64>* %__a.addr.i762, align 16
  store <2 x i64> %912, <2 x i64>* %__b.addr.i763, align 16
  %913 = load <2 x i64>, <2 x i64>* %__a.addr.i762, align 16
  %914 = bitcast <2 x i64> %913 to <8 x i16>
  %915 = load <2 x i64>, <2 x i64>* %__b.addr.i763, align 16
  %916 = bitcast <2 x i64> %915 to <8 x i16>
  %shuffle.i764 = shufflevector <8 x i16> %914, <8 x i16> %916, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %917 = bitcast <8 x i16> %shuffle.i764 to <2 x i64>
  store <2 x i64> %917, <2 x i64>* %row2, align 16
  %918 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %919 = load <2 x i64>, <2 x i64>* %row6, align 16
  store <2 x i64> %918, <2 x i64>* %__a.addr.i759, align 16
  store <2 x i64> %919, <2 x i64>* %__b.addr.i760, align 16
  %920 = load <2 x i64>, <2 x i64>* %__a.addr.i759, align 16
  %921 = bitcast <2 x i64> %920 to <8 x i16>
  %922 = load <2 x i64>, <2 x i64>* %__b.addr.i760, align 16
  %923 = bitcast <2 x i64> %922 to <8 x i16>
  %shuffle.i761 = shufflevector <8 x i16> %921, <8 x i16> %923, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %924 = bitcast <8 x i16> %shuffle.i761 to <2 x i64>
  store <2 x i64> %924, <2 x i64>* %row6, align 16
  %925 = load <2 x i64>, <2 x i64>* %row3, align 16
  store <2 x i64> %925, <2 x i64>* %tmp, align 16
  %926 = load <2 x i64>, <2 x i64>* %row3, align 16
  %927 = load <2 x i64>, <2 x i64>* %row7, align 16
  store <2 x i64> %926, <2 x i64>* %__a.addr.i756, align 16
  store <2 x i64> %927, <2 x i64>* %__b.addr.i757, align 16
  %928 = load <2 x i64>, <2 x i64>* %__a.addr.i756, align 16
  %929 = bitcast <2 x i64> %928 to <8 x i16>
  %930 = load <2 x i64>, <2 x i64>* %__b.addr.i757, align 16
  %931 = bitcast <2 x i64> %930 to <8 x i16>
  %shuffle.i758 = shufflevector <8 x i16> %929, <8 x i16> %931, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %932 = bitcast <8 x i16> %shuffle.i758 to <2 x i64>
  store <2 x i64> %932, <2 x i64>* %row3, align 16
  %933 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %934 = load <2 x i64>, <2 x i64>* %row7, align 16
  store <2 x i64> %933, <2 x i64>* %__a.addr.i753, align 16
  store <2 x i64> %934, <2 x i64>* %__b.addr.i754, align 16
  %935 = load <2 x i64>, <2 x i64>* %__a.addr.i753, align 16
  %936 = bitcast <2 x i64> %935 to <8 x i16>
  %937 = load <2 x i64>, <2 x i64>* %__b.addr.i754, align 16
  %938 = bitcast <2 x i64> %937 to <8 x i16>
  %shuffle.i755 = shufflevector <8 x i16> %936, <8 x i16> %938, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %939 = bitcast <8 x i16> %shuffle.i755 to <2 x i64>
  store <2 x i64> %939, <2 x i64>* %row7, align 16
  %940 = load <2 x i64>, <2 x i64>* %row0, align 16
  store <2 x i64> %940, <2 x i64>* %tmp, align 16
  %941 = load <2 x i64>, <2 x i64>* %row0, align 16
  %942 = load <2 x i64>, <2 x i64>* %row2, align 16
  store <2 x i64> %941, <2 x i64>* %__a.addr.i750, align 16
  store <2 x i64> %942, <2 x i64>* %__b.addr.i751, align 16
  %943 = load <2 x i64>, <2 x i64>* %__a.addr.i750, align 16
  %944 = bitcast <2 x i64> %943 to <8 x i16>
  %945 = load <2 x i64>, <2 x i64>* %__b.addr.i751, align 16
  %946 = bitcast <2 x i64> %945 to <8 x i16>
  %shuffle.i752 = shufflevector <8 x i16> %944, <8 x i16> %946, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %947 = bitcast <8 x i16> %shuffle.i752 to <2 x i64>
  store <2 x i64> %947, <2 x i64>* %row0, align 16
  %948 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %949 = load <2 x i64>, <2 x i64>* %row2, align 16
  store <2 x i64> %948, <2 x i64>* %__a.addr.i747, align 16
  store <2 x i64> %949, <2 x i64>* %__b.addr.i748, align 16
  %950 = load <2 x i64>, <2 x i64>* %__a.addr.i747, align 16
  %951 = bitcast <2 x i64> %950 to <8 x i16>
  %952 = load <2 x i64>, <2 x i64>* %__b.addr.i748, align 16
  %953 = bitcast <2 x i64> %952 to <8 x i16>
  %shuffle.i749 = shufflevector <8 x i16> %951, <8 x i16> %953, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %954 = bitcast <8 x i16> %shuffle.i749 to <2 x i64>
  store <2 x i64> %954, <2 x i64>* %row2, align 16
  %955 = load <2 x i64>, <2 x i64>* %row1, align 16
  store <2 x i64> %955, <2 x i64>* %tmp, align 16
  %956 = load <2 x i64>, <2 x i64>* %row1, align 16
  %957 = load <2 x i64>, <2 x i64>* %row3, align 16
  store <2 x i64> %956, <2 x i64>* %__a.addr.i744, align 16
  store <2 x i64> %957, <2 x i64>* %__b.addr.i745, align 16
  %958 = load <2 x i64>, <2 x i64>* %__a.addr.i744, align 16
  %959 = bitcast <2 x i64> %958 to <8 x i16>
  %960 = load <2 x i64>, <2 x i64>* %__b.addr.i745, align 16
  %961 = bitcast <2 x i64> %960 to <8 x i16>
  %shuffle.i746 = shufflevector <8 x i16> %959, <8 x i16> %961, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %962 = bitcast <8 x i16> %shuffle.i746 to <2 x i64>
  store <2 x i64> %962, <2 x i64>* %row1, align 16
  %963 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %964 = load <2 x i64>, <2 x i64>* %row3, align 16
  store <2 x i64> %963, <2 x i64>* %__a.addr.i741, align 16
  store <2 x i64> %964, <2 x i64>* %__b.addr.i742, align 16
  %965 = load <2 x i64>, <2 x i64>* %__a.addr.i741, align 16
  %966 = bitcast <2 x i64> %965 to <8 x i16>
  %967 = load <2 x i64>, <2 x i64>* %__b.addr.i742, align 16
  %968 = bitcast <2 x i64> %967 to <8 x i16>
  %shuffle.i743 = shufflevector <8 x i16> %966, <8 x i16> %968, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %969 = bitcast <8 x i16> %shuffle.i743 to <2 x i64>
  store <2 x i64> %969, <2 x i64>* %row3, align 16
  %970 = load <2 x i64>, <2 x i64>* %row4, align 16
  store <2 x i64> %970, <2 x i64>* %tmp, align 16
  %971 = load <2 x i64>, <2 x i64>* %row4, align 16
  %972 = load <2 x i64>, <2 x i64>* %row6, align 16
  store <2 x i64> %971, <2 x i64>* %__a.addr.i738, align 16
  store <2 x i64> %972, <2 x i64>* %__b.addr.i739, align 16
  %973 = load <2 x i64>, <2 x i64>* %__a.addr.i738, align 16
  %974 = bitcast <2 x i64> %973 to <8 x i16>
  %975 = load <2 x i64>, <2 x i64>* %__b.addr.i739, align 16
  %976 = bitcast <2 x i64> %975 to <8 x i16>
  %shuffle.i740 = shufflevector <8 x i16> %974, <8 x i16> %976, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %977 = bitcast <8 x i16> %shuffle.i740 to <2 x i64>
  store <2 x i64> %977, <2 x i64>* %row4, align 16
  %978 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %979 = load <2 x i64>, <2 x i64>* %row6, align 16
  store <2 x i64> %978, <2 x i64>* %__a.addr.i735, align 16
  store <2 x i64> %979, <2 x i64>* %__b.addr.i736, align 16
  %980 = load <2 x i64>, <2 x i64>* %__a.addr.i735, align 16
  %981 = bitcast <2 x i64> %980 to <8 x i16>
  %982 = load <2 x i64>, <2 x i64>* %__b.addr.i736, align 16
  %983 = bitcast <2 x i64> %982 to <8 x i16>
  %shuffle.i737 = shufflevector <8 x i16> %981, <8 x i16> %983, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %984 = bitcast <8 x i16> %shuffle.i737 to <2 x i64>
  store <2 x i64> %984, <2 x i64>* %row6, align 16
  %985 = load <2 x i64>, <2 x i64>* %row5, align 16
  store <2 x i64> %985, <2 x i64>* %tmp, align 16
  %986 = load <2 x i64>, <2 x i64>* %row5, align 16
  %987 = load <2 x i64>, <2 x i64>* %row7, align 16
  store <2 x i64> %986, <2 x i64>* %__a.addr.i732, align 16
  store <2 x i64> %987, <2 x i64>* %__b.addr.i733, align 16
  %988 = load <2 x i64>, <2 x i64>* %__a.addr.i732, align 16
  %989 = bitcast <2 x i64> %988 to <8 x i16>
  %990 = load <2 x i64>, <2 x i64>* %__b.addr.i733, align 16
  %991 = bitcast <2 x i64> %990 to <8 x i16>
  %shuffle.i734 = shufflevector <8 x i16> %989, <8 x i16> %991, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %992 = bitcast <8 x i16> %shuffle.i734 to <2 x i64>
  store <2 x i64> %992, <2 x i64>* %row5, align 16
  %993 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %994 = load <2 x i64>, <2 x i64>* %row7, align 16
  store <2 x i64> %993, <2 x i64>* %__a.addr.i729, align 16
  store <2 x i64> %994, <2 x i64>* %__b.addr.i730, align 16
  %995 = load <2 x i64>, <2 x i64>* %__a.addr.i729, align 16
  %996 = bitcast <2 x i64> %995 to <8 x i16>
  %997 = load <2 x i64>, <2 x i64>* %__b.addr.i730, align 16
  %998 = bitcast <2 x i64> %997 to <8 x i16>
  %shuffle.i731 = shufflevector <8 x i16> %996, <8 x i16> %998, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %999 = bitcast <8 x i16> %shuffle.i731 to <2 x i64>
  store <2 x i64> %999, <2 x i64>* %row7, align 16
  %1000 = load <2 x i64>, <2 x i64>* %row0, align 16
  store <2 x i64> %1000, <2 x i64>* %tmp, align 16
  %1001 = load <2 x i64>, <2 x i64>* %row0, align 16
  %1002 = load <2 x i64>, <2 x i64>* %row1, align 16
  store <2 x i64> %1001, <2 x i64>* %__a.addr.i726, align 16
  store <2 x i64> %1002, <2 x i64>* %__b.addr.i727, align 16
  %1003 = load <2 x i64>, <2 x i64>* %__a.addr.i726, align 16
  %1004 = bitcast <2 x i64> %1003 to <8 x i16>
  %1005 = load <2 x i64>, <2 x i64>* %__b.addr.i727, align 16
  %1006 = bitcast <2 x i64> %1005 to <8 x i16>
  %shuffle.i728 = shufflevector <8 x i16> %1004, <8 x i16> %1006, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1007 = bitcast <8 x i16> %shuffle.i728 to <2 x i64>
  store <2 x i64> %1007, <2 x i64>* %row0, align 16
  %1008 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %1009 = load <2 x i64>, <2 x i64>* %row1, align 16
  store <2 x i64> %1008, <2 x i64>* %__a.addr.i723, align 16
  store <2 x i64> %1009, <2 x i64>* %__b.addr.i724, align 16
  %1010 = load <2 x i64>, <2 x i64>* %__a.addr.i723, align 16
  %1011 = bitcast <2 x i64> %1010 to <8 x i16>
  %1012 = load <2 x i64>, <2 x i64>* %__b.addr.i724, align 16
  %1013 = bitcast <2 x i64> %1012 to <8 x i16>
  %shuffle.i725 = shufflevector <8 x i16> %1011, <8 x i16> %1013, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1014 = bitcast <8 x i16> %shuffle.i725 to <2 x i64>
  store <2 x i64> %1014, <2 x i64>* %row1, align 16
  %1015 = load <2 x i64>, <2 x i64>* %row2, align 16
  store <2 x i64> %1015, <2 x i64>* %tmp, align 16
  %1016 = load <2 x i64>, <2 x i64>* %row2, align 16
  %1017 = load <2 x i64>, <2 x i64>* %row3, align 16
  store <2 x i64> %1016, <2 x i64>* %__a.addr.i720, align 16
  store <2 x i64> %1017, <2 x i64>* %__b.addr.i721, align 16
  %1018 = load <2 x i64>, <2 x i64>* %__a.addr.i720, align 16
  %1019 = bitcast <2 x i64> %1018 to <8 x i16>
  %1020 = load <2 x i64>, <2 x i64>* %__b.addr.i721, align 16
  %1021 = bitcast <2 x i64> %1020 to <8 x i16>
  %shuffle.i722 = shufflevector <8 x i16> %1019, <8 x i16> %1021, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1022 = bitcast <8 x i16> %shuffle.i722 to <2 x i64>
  store <2 x i64> %1022, <2 x i64>* %row2, align 16
  %1023 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %1024 = load <2 x i64>, <2 x i64>* %row3, align 16
  store <2 x i64> %1023, <2 x i64>* %__a.addr.i717, align 16
  store <2 x i64> %1024, <2 x i64>* %__b.addr.i718, align 16
  %1025 = load <2 x i64>, <2 x i64>* %__a.addr.i717, align 16
  %1026 = bitcast <2 x i64> %1025 to <8 x i16>
  %1027 = load <2 x i64>, <2 x i64>* %__b.addr.i718, align 16
  %1028 = bitcast <2 x i64> %1027 to <8 x i16>
  %shuffle.i719 = shufflevector <8 x i16> %1026, <8 x i16> %1028, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1029 = bitcast <8 x i16> %shuffle.i719 to <2 x i64>
  store <2 x i64> %1029, <2 x i64>* %row3, align 16
  %1030 = load <2 x i64>, <2 x i64>* %row4, align 16
  store <2 x i64> %1030, <2 x i64>* %tmp, align 16
  %1031 = load <2 x i64>, <2 x i64>* %row4, align 16
  %1032 = load <2 x i64>, <2 x i64>* %row5, align 16
  store <2 x i64> %1031, <2 x i64>* %__a.addr.i714, align 16
  store <2 x i64> %1032, <2 x i64>* %__b.addr.i715, align 16
  %1033 = load <2 x i64>, <2 x i64>* %__a.addr.i714, align 16
  %1034 = bitcast <2 x i64> %1033 to <8 x i16>
  %1035 = load <2 x i64>, <2 x i64>* %__b.addr.i715, align 16
  %1036 = bitcast <2 x i64> %1035 to <8 x i16>
  %shuffle.i716 = shufflevector <8 x i16> %1034, <8 x i16> %1036, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1037 = bitcast <8 x i16> %shuffle.i716 to <2 x i64>
  store <2 x i64> %1037, <2 x i64>* %row4, align 16
  %1038 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %1039 = load <2 x i64>, <2 x i64>* %row5, align 16
  store <2 x i64> %1038, <2 x i64>* %__a.addr.i711, align 16
  store <2 x i64> %1039, <2 x i64>* %__b.addr.i712, align 16
  %1040 = load <2 x i64>, <2 x i64>* %__a.addr.i711, align 16
  %1041 = bitcast <2 x i64> %1040 to <8 x i16>
  %1042 = load <2 x i64>, <2 x i64>* %__b.addr.i712, align 16
  %1043 = bitcast <2 x i64> %1042 to <8 x i16>
  %shuffle.i713 = shufflevector <8 x i16> %1041, <8 x i16> %1043, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1044 = bitcast <8 x i16> %shuffle.i713 to <2 x i64>
  store <2 x i64> %1044, <2 x i64>* %row5, align 16
  %1045 = load <2 x i64>, <2 x i64>* %row6, align 16
  store <2 x i64> %1045, <2 x i64>* %tmp, align 16
  %1046 = load <2 x i64>, <2 x i64>* %row6, align 16
  %1047 = load <2 x i64>, <2 x i64>* %row7, align 16
  store <2 x i64> %1046, <2 x i64>* %__a.addr.i708, align 16
  store <2 x i64> %1047, <2 x i64>* %__b.addr.i709, align 16
  %1048 = load <2 x i64>, <2 x i64>* %__a.addr.i708, align 16
  %1049 = bitcast <2 x i64> %1048 to <8 x i16>
  %1050 = load <2 x i64>, <2 x i64>* %__b.addr.i709, align 16
  %1051 = bitcast <2 x i64> %1050 to <8 x i16>
  %shuffle.i710 = shufflevector <8 x i16> %1049, <8 x i16> %1051, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1052 = bitcast <8 x i16> %shuffle.i710 to <2 x i64>
  store <2 x i64> %1052, <2 x i64>* %row6, align 16
  %1053 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %1054 = load <2 x i64>, <2 x i64>* %row7, align 16
  store <2 x i64> %1053, <2 x i64>* %__a.addr.i705, align 16
  store <2 x i64> %1054, <2 x i64>* %__b.addr.i706, align 16
  %1055 = load <2 x i64>, <2 x i64>* %__a.addr.i705, align 16
  %1056 = bitcast <2 x i64> %1055 to <8 x i16>
  %1057 = load <2 x i64>, <2 x i64>* %__b.addr.i706, align 16
  %1058 = bitcast <2 x i64> %1057 to <8 x i16>
  %shuffle.i707 = shufflevector <8 x i16> %1056, <8 x i16> %1058, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1059 = bitcast <8 x i16> %shuffle.i707 to <2 x i64>
  store <2 x i64> %1059, <2 x i64>* %row7, align 16
  %1060 = load <2 x i64>, <2 x i64>* %row2, align 16
  %1061 = load <2 x i64>, <2 x i64>* %row6, align 16
  store <2 x i64> %1060, <2 x i64>* %__a.addr.i702, align 16
  store <2 x i64> %1061, <2 x i64>* %__b.addr.i703, align 16
  %1062 = load <2 x i64>, <2 x i64>* %__a.addr.i702, align 16
  %1063 = bitcast <2 x i64> %1062 to <8 x i16>
  %1064 = load <2 x i64>, <2 x i64>* %__b.addr.i703, align 16
  %1065 = bitcast <2 x i64> %1064 to <8 x i16>
  %shuffle.i704 = shufflevector <8 x i16> %1063, <8 x i16> %1065, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1066 = bitcast <8 x i16> %shuffle.i704 to <2 x i64>
  store <2 x i64> %1066, <2 x i64>* %rot0_0lo171, align 16
  %1067 = load <2 x i64>, <2 x i64>* %row2, align 16
  %1068 = load <2 x i64>, <2 x i64>* %row6, align 16
  store <2 x i64> %1067, <2 x i64>* %__a.addr.i699, align 16
  store <2 x i64> %1068, <2 x i64>* %__b.addr.i700, align 16
  %1069 = load <2 x i64>, <2 x i64>* %__a.addr.i699, align 16
  %1070 = bitcast <2 x i64> %1069 to <8 x i16>
  %1071 = load <2 x i64>, <2 x i64>* %__b.addr.i700, align 16
  %1072 = bitcast <2 x i64> %1071 to <8 x i16>
  %shuffle.i701 = shufflevector <8 x i16> %1070, <8 x i16> %1072, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1073 = bitcast <8 x i16> %shuffle.i701 to <2 x i64>
  store <2 x i64> %1073, <2 x i64>* %rot0_0hi173, align 16
  %1074 = load <2 x i64>, <2 x i64>* %rot0_0lo171, align 16
  %1075 = load <2 x i64>, <2 x i64>* %rot0_0, align 16
  store <2 x i64> %1074, <2 x i64>* %__a.addr.i697, align 16
  store <2 x i64> %1075, <2 x i64>* %__b.addr.i698, align 16
  %1076 = load <2 x i64>, <2 x i64>* %__a.addr.i697, align 16
  %1077 = bitcast <2 x i64> %1076 to <8 x i16>
  %1078 = load <2 x i64>, <2 x i64>* %__b.addr.i698, align 16
  %1079 = bitcast <2 x i64> %1078 to <8 x i16>
  %1080 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1077, <8 x i16> %1079) #10
  %1081 = bitcast <4 x i32> %1080 to <2 x i64>
  store <2 x i64> %1081, <2 x i64>* %t2e_l175, align 16
  %1082 = load <2 x i64>, <2 x i64>* %rot0_0hi173, align 16
  %1083 = load <2 x i64>, <2 x i64>* %rot0_0, align 16
  store <2 x i64> %1082, <2 x i64>* %__a.addr.i695, align 16
  store <2 x i64> %1083, <2 x i64>* %__b.addr.i696, align 16
  %1084 = load <2 x i64>, <2 x i64>* %__a.addr.i695, align 16
  %1085 = bitcast <2 x i64> %1084 to <8 x i16>
  %1086 = load <2 x i64>, <2 x i64>* %__b.addr.i696, align 16
  %1087 = bitcast <2 x i64> %1086 to <8 x i16>
  %1088 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1085, <8 x i16> %1087) #10
  %1089 = bitcast <4 x i32> %1088 to <2 x i64>
  store <2 x i64> %1089, <2 x i64>* %t2e_h177, align 16
  %1090 = load <2 x i64>, <2 x i64>* %rot0_0lo171, align 16
  %1091 = load <2 x i64>, <2 x i64>* %rot0_1, align 16
  store <2 x i64> %1090, <2 x i64>* %__a.addr.i693, align 16
  store <2 x i64> %1091, <2 x i64>* %__b.addr.i694, align 16
  %1092 = load <2 x i64>, <2 x i64>* %__a.addr.i693, align 16
  %1093 = bitcast <2 x i64> %1092 to <8 x i16>
  %1094 = load <2 x i64>, <2 x i64>* %__b.addr.i694, align 16
  %1095 = bitcast <2 x i64> %1094 to <8 x i16>
  %1096 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1093, <8 x i16> %1095) #10
  %1097 = bitcast <4 x i32> %1096 to <2 x i64>
  store <2 x i64> %1097, <2 x i64>* %t3e_l179, align 16
  %1098 = load <2 x i64>, <2 x i64>* %rot0_0hi173, align 16
  %1099 = load <2 x i64>, <2 x i64>* %rot0_1, align 16
  store <2 x i64> %1098, <2 x i64>* %__a.addr.i691, align 16
  store <2 x i64> %1099, <2 x i64>* %__b.addr.i692, align 16
  %1100 = load <2 x i64>, <2 x i64>* %__a.addr.i691, align 16
  %1101 = bitcast <2 x i64> %1100 to <8 x i16>
  %1102 = load <2 x i64>, <2 x i64>* %__b.addr.i692, align 16
  %1103 = bitcast <2 x i64> %1102 to <8 x i16>
  %1104 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1101, <8 x i16> %1103) #10
  %1105 = bitcast <4 x i32> %1104 to <2 x i64>
  store <2 x i64> %1105, <2 x i64>* %t3e_h181, align 16
  %1106 = load <2 x i64>, <2 x i64>* %row0, align 16
  %1107 = load <2 x i64>, <2 x i64>* %row4, align 16
  store <2 x i64> %1106, <2 x i64>* %__a.addr.i688, align 16
  store <2 x i64> %1107, <2 x i64>* %__b.addr.i689, align 16
  %1108 = load <2 x i64>, <2 x i64>* %__a.addr.i688, align 16
  %1109 = bitcast <2 x i64> %1108 to <8 x i16>
  %1110 = load <2 x i64>, <2 x i64>* %__b.addr.i689, align 16
  %1111 = bitcast <2 x i64> %1110 to <8 x i16>
  %add.i690 = add <8 x i16> %1109, %1111
  %1112 = bitcast <8 x i16> %add.i690 to <2 x i64>
  store <2 x i64> %1112, <2 x i64>* %sum04183, align 16
  %1113 = load <2 x i64>, <2 x i64>* %row0, align 16
  %1114 = load <2 x i64>, <2 x i64>* %row4, align 16
  store <2 x i64> %1113, <2 x i64>* %__a.addr.i685, align 16
  store <2 x i64> %1114, <2 x i64>* %__b.addr.i686, align 16
  %1115 = load <2 x i64>, <2 x i64>* %__a.addr.i685, align 16
  %1116 = bitcast <2 x i64> %1115 to <8 x i16>
  %1117 = load <2 x i64>, <2 x i64>* %__b.addr.i686, align 16
  %1118 = bitcast <2 x i64> %1117 to <8 x i16>
  %sub.i687 = sub <8 x i16> %1116, %1118
  %1119 = bitcast <8 x i16> %sub.i687 to <2 x i64>
  store <2 x i64> %1119, <2 x i64>* %dif04185, align 16
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i684, align 16
  %1120 = load <2 x i64>, <2 x i64>* %.compoundliteral.i684, align 16
  %1121 = load <2 x i64>, <2 x i64>* %sum04183, align 16
  store <2 x i64> %1120, <2 x i64>* %__a.addr.i681, align 16
  store <2 x i64> %1121, <2 x i64>* %__b.addr.i682, align 16
  %1122 = load <2 x i64>, <2 x i64>* %__a.addr.i681, align 16
  %1123 = bitcast <2 x i64> %1122 to <8 x i16>
  %1124 = load <2 x i64>, <2 x i64>* %__b.addr.i682, align 16
  %1125 = bitcast <2 x i64> %1124 to <8 x i16>
  %shuffle.i683 = shufflevector <8 x i16> %1123, <8 x i16> %1125, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1126 = bitcast <8 x i16> %shuffle.i683 to <2 x i64>
  store <2 x i64> %1126, <2 x i64>* %__a.addr.i679, align 16
  store i32 4, i32* %__count.addr.i680, align 4
  %1127 = load <2 x i64>, <2 x i64>* %__a.addr.i679, align 16
  %1128 = bitcast <2 x i64> %1127 to <4 x i32>
  %1129 = load i32, i32* %__count.addr.i680, align 4
  %1130 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1128, i32 %1129) #10
  %1131 = bitcast <4 x i32> %1130 to <2 x i64>
  store <2 x i64> %1131, <2 x i64>* %t0e_l187, align 16
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i678, align 16
  %1132 = load <2 x i64>, <2 x i64>* %.compoundliteral.i678, align 16
  %1133 = load <2 x i64>, <2 x i64>* %sum04183, align 16
  store <2 x i64> %1132, <2 x i64>* %__a.addr.i675, align 16
  store <2 x i64> %1133, <2 x i64>* %__b.addr.i676, align 16
  %1134 = load <2 x i64>, <2 x i64>* %__a.addr.i675, align 16
  %1135 = bitcast <2 x i64> %1134 to <8 x i16>
  %1136 = load <2 x i64>, <2 x i64>* %__b.addr.i676, align 16
  %1137 = bitcast <2 x i64> %1136 to <8 x i16>
  %shuffle.i677 = shufflevector <8 x i16> %1135, <8 x i16> %1137, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1138 = bitcast <8 x i16> %shuffle.i677 to <2 x i64>
  store <2 x i64> %1138, <2 x i64>* %__a.addr.i673, align 16
  store i32 4, i32* %__count.addr.i674, align 4
  %1139 = load <2 x i64>, <2 x i64>* %__a.addr.i673, align 16
  %1140 = bitcast <2 x i64> %1139 to <4 x i32>
  %1141 = load i32, i32* %__count.addr.i674, align 4
  %1142 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1140, i32 %1141) #10
  %1143 = bitcast <4 x i32> %1142 to <2 x i64>
  store <2 x i64> %1143, <2 x i64>* %t0e_h191, align 16
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i672, align 16
  %1144 = load <2 x i64>, <2 x i64>* %.compoundliteral.i672, align 16
  %1145 = load <2 x i64>, <2 x i64>* %dif04185, align 16
  store <2 x i64> %1144, <2 x i64>* %__a.addr.i669, align 16
  store <2 x i64> %1145, <2 x i64>* %__b.addr.i670, align 16
  %1146 = load <2 x i64>, <2 x i64>* %__a.addr.i669, align 16
  %1147 = bitcast <2 x i64> %1146 to <8 x i16>
  %1148 = load <2 x i64>, <2 x i64>* %__b.addr.i670, align 16
  %1149 = bitcast <2 x i64> %1148 to <8 x i16>
  %shuffle.i671 = shufflevector <8 x i16> %1147, <8 x i16> %1149, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1150 = bitcast <8 x i16> %shuffle.i671 to <2 x i64>
  store <2 x i64> %1150, <2 x i64>* %__a.addr.i667, align 16
  store i32 4, i32* %__count.addr.i668, align 4
  %1151 = load <2 x i64>, <2 x i64>* %__a.addr.i667, align 16
  %1152 = bitcast <2 x i64> %1151 to <4 x i32>
  %1153 = load i32, i32* %__count.addr.i668, align 4
  %1154 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1152, i32 %1153) #10
  %1155 = bitcast <4 x i32> %1154 to <2 x i64>
  store <2 x i64> %1155, <2 x i64>* %t1e_l195, align 16
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i, align 16
  %1156 = load <2 x i64>, <2 x i64>* %.compoundliteral.i, align 16
  %1157 = load <2 x i64>, <2 x i64>* %dif04185, align 16
  store <2 x i64> %1156, <2 x i64>* %__a.addr.i664, align 16
  store <2 x i64> %1157, <2 x i64>* %__b.addr.i665, align 16
  %1158 = load <2 x i64>, <2 x i64>* %__a.addr.i664, align 16
  %1159 = bitcast <2 x i64> %1158 to <8 x i16>
  %1160 = load <2 x i64>, <2 x i64>* %__b.addr.i665, align 16
  %1161 = bitcast <2 x i64> %1160 to <8 x i16>
  %shuffle.i666 = shufflevector <8 x i16> %1159, <8 x i16> %1161, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1162 = bitcast <8 x i16> %shuffle.i666 to <2 x i64>
  store <2 x i64> %1162, <2 x i64>* %__a.addr.i662, align 16
  store i32 4, i32* %__count.addr.i663, align 4
  %1163 = load <2 x i64>, <2 x i64>* %__a.addr.i662, align 16
  %1164 = bitcast <2 x i64> %1163 to <4 x i32>
  %1165 = load i32, i32* %__count.addr.i663, align 4
  %1166 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1164, i32 %1165) #10
  %1167 = bitcast <4 x i32> %1166 to <2 x i64>
  store <2 x i64> %1167, <2 x i64>* %t1e_h199, align 16
  %1168 = load <2 x i64>, <2 x i64>* %t0e_l187, align 16
  %1169 = load <2 x i64>, <2 x i64>* %t3e_l179, align 16
  store <2 x i64> %1168, <2 x i64>* %__a.addr.i659, align 16
  store <2 x i64> %1169, <2 x i64>* %__b.addr.i660, align 16
  %1170 = load <2 x i64>, <2 x i64>* %__a.addr.i659, align 16
  %1171 = bitcast <2 x i64> %1170 to <4 x i32>
  %1172 = load <2 x i64>, <2 x i64>* %__b.addr.i660, align 16
  %1173 = bitcast <2 x i64> %1172 to <4 x i32>
  %add.i661 = add <4 x i32> %1171, %1173
  %1174 = bitcast <4 x i32> %add.i661 to <2 x i64>
  store <2 x i64> %1174, <2 x i64>* %x0_l203, align 16
  %1175 = load <2 x i64>, <2 x i64>* %t0e_h191, align 16
  %1176 = load <2 x i64>, <2 x i64>* %t3e_h181, align 16
  store <2 x i64> %1175, <2 x i64>* %__a.addr.i656, align 16
  store <2 x i64> %1176, <2 x i64>* %__b.addr.i657, align 16
  %1177 = load <2 x i64>, <2 x i64>* %__a.addr.i656, align 16
  %1178 = bitcast <2 x i64> %1177 to <4 x i32>
  %1179 = load <2 x i64>, <2 x i64>* %__b.addr.i657, align 16
  %1180 = bitcast <2 x i64> %1179 to <4 x i32>
  %add.i658 = add <4 x i32> %1178, %1180
  %1181 = bitcast <4 x i32> %add.i658 to <2 x i64>
  store <2 x i64> %1181, <2 x i64>* %x0_h205, align 16
  %1182 = load <2 x i64>, <2 x i64>* %t0e_l187, align 16
  %1183 = load <2 x i64>, <2 x i64>* %t3e_l179, align 16
  store <2 x i64> %1182, <2 x i64>* %__a.addr.i653, align 16
  store <2 x i64> %1183, <2 x i64>* %__b.addr.i654, align 16
  %1184 = load <2 x i64>, <2 x i64>* %__a.addr.i653, align 16
  %1185 = bitcast <2 x i64> %1184 to <4 x i32>
  %1186 = load <2 x i64>, <2 x i64>* %__b.addr.i654, align 16
  %1187 = bitcast <2 x i64> %1186 to <4 x i32>
  %sub.i655 = sub <4 x i32> %1185, %1187
  %1188 = bitcast <4 x i32> %sub.i655 to <2 x i64>
  store <2 x i64> %1188, <2 x i64>* %x3_l207, align 16
  %1189 = load <2 x i64>, <2 x i64>* %t0e_h191, align 16
  %1190 = load <2 x i64>, <2 x i64>* %t3e_h181, align 16
  store <2 x i64> %1189, <2 x i64>* %__a.addr.i650, align 16
  store <2 x i64> %1190, <2 x i64>* %__b.addr.i651, align 16
  %1191 = load <2 x i64>, <2 x i64>* %__a.addr.i650, align 16
  %1192 = bitcast <2 x i64> %1191 to <4 x i32>
  %1193 = load <2 x i64>, <2 x i64>* %__b.addr.i651, align 16
  %1194 = bitcast <2 x i64> %1193 to <4 x i32>
  %sub.i652 = sub <4 x i32> %1192, %1194
  %1195 = bitcast <4 x i32> %sub.i652 to <2 x i64>
  store <2 x i64> %1195, <2 x i64>* %x3_h209, align 16
  %1196 = load <2 x i64>, <2 x i64>* %t1e_l195, align 16
  %1197 = load <2 x i64>, <2 x i64>* %t2e_l175, align 16
  store <2 x i64> %1196, <2 x i64>* %__a.addr.i647, align 16
  store <2 x i64> %1197, <2 x i64>* %__b.addr.i648, align 16
  %1198 = load <2 x i64>, <2 x i64>* %__a.addr.i647, align 16
  %1199 = bitcast <2 x i64> %1198 to <4 x i32>
  %1200 = load <2 x i64>, <2 x i64>* %__b.addr.i648, align 16
  %1201 = bitcast <2 x i64> %1200 to <4 x i32>
  %add.i649 = add <4 x i32> %1199, %1201
  %1202 = bitcast <4 x i32> %add.i649 to <2 x i64>
  store <2 x i64> %1202, <2 x i64>* %x1_l211, align 16
  %1203 = load <2 x i64>, <2 x i64>* %t1e_h199, align 16
  %1204 = load <2 x i64>, <2 x i64>* %t2e_h177, align 16
  store <2 x i64> %1203, <2 x i64>* %__a.addr.i644, align 16
  store <2 x i64> %1204, <2 x i64>* %__b.addr.i645, align 16
  %1205 = load <2 x i64>, <2 x i64>* %__a.addr.i644, align 16
  %1206 = bitcast <2 x i64> %1205 to <4 x i32>
  %1207 = load <2 x i64>, <2 x i64>* %__b.addr.i645, align 16
  %1208 = bitcast <2 x i64> %1207 to <4 x i32>
  %add.i646 = add <4 x i32> %1206, %1208
  %1209 = bitcast <4 x i32> %add.i646 to <2 x i64>
  store <2 x i64> %1209, <2 x i64>* %x1_h213, align 16
  %1210 = load <2 x i64>, <2 x i64>* %t1e_l195, align 16
  %1211 = load <2 x i64>, <2 x i64>* %t2e_l175, align 16
  store <2 x i64> %1210, <2 x i64>* %__a.addr.i641, align 16
  store <2 x i64> %1211, <2 x i64>* %__b.addr.i642, align 16
  %1212 = load <2 x i64>, <2 x i64>* %__a.addr.i641, align 16
  %1213 = bitcast <2 x i64> %1212 to <4 x i32>
  %1214 = load <2 x i64>, <2 x i64>* %__b.addr.i642, align 16
  %1215 = bitcast <2 x i64> %1214 to <4 x i32>
  %sub.i643 = sub <4 x i32> %1213, %1215
  %1216 = bitcast <4 x i32> %sub.i643 to <2 x i64>
  store <2 x i64> %1216, <2 x i64>* %x2_l215, align 16
  %1217 = load <2 x i64>, <2 x i64>* %t1e_h199, align 16
  %1218 = load <2 x i64>, <2 x i64>* %t2e_h177, align 16
  store <2 x i64> %1217, <2 x i64>* %__a.addr.i638, align 16
  store <2 x i64> %1218, <2 x i64>* %__b.addr.i639, align 16
  %1219 = load <2 x i64>, <2 x i64>* %__a.addr.i638, align 16
  %1220 = bitcast <2 x i64> %1219 to <4 x i32>
  %1221 = load <2 x i64>, <2 x i64>* %__b.addr.i639, align 16
  %1222 = bitcast <2 x i64> %1221 to <4 x i32>
  %sub.i640 = sub <4 x i32> %1220, %1222
  %1223 = bitcast <4 x i32> %sub.i640 to <2 x i64>
  store <2 x i64> %1223, <2 x i64>* %x2_h217, align 16
  %1224 = load <2 x i64>, <2 x i64>* %row7, align 16
  %1225 = load <2 x i64>, <2 x i64>* %row3, align 16
  store <2 x i64> %1224, <2 x i64>* %__a.addr.i635, align 16
  store <2 x i64> %1225, <2 x i64>* %__b.addr.i636, align 16
  %1226 = load <2 x i64>, <2 x i64>* %__a.addr.i635, align 16
  %1227 = bitcast <2 x i64> %1226 to <8 x i16>
  %1228 = load <2 x i64>, <2 x i64>* %__b.addr.i636, align 16
  %1229 = bitcast <2 x i64> %1228 to <8 x i16>
  %shuffle.i637 = shufflevector <8 x i16> %1227, <8 x i16> %1229, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1230 = bitcast <8 x i16> %shuffle.i637 to <2 x i64>
  store <2 x i64> %1230, <2 x i64>* %rot2_0lo219, align 16
  %1231 = load <2 x i64>, <2 x i64>* %row7, align 16
  %1232 = load <2 x i64>, <2 x i64>* %row3, align 16
  store <2 x i64> %1231, <2 x i64>* %__a.addr.i632, align 16
  store <2 x i64> %1232, <2 x i64>* %__b.addr.i633, align 16
  %1233 = load <2 x i64>, <2 x i64>* %__a.addr.i632, align 16
  %1234 = bitcast <2 x i64> %1233 to <8 x i16>
  %1235 = load <2 x i64>, <2 x i64>* %__b.addr.i633, align 16
  %1236 = bitcast <2 x i64> %1235 to <8 x i16>
  %shuffle.i634 = shufflevector <8 x i16> %1234, <8 x i16> %1236, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1237 = bitcast <8 x i16> %shuffle.i634 to <2 x i64>
  store <2 x i64> %1237, <2 x i64>* %rot2_0hi221, align 16
  %1238 = load <2 x i64>, <2 x i64>* %rot2_0lo219, align 16
  %1239 = load <2 x i64>, <2 x i64>* %rot2_0, align 16
  store <2 x i64> %1238, <2 x i64>* %__a.addr.i630, align 16
  store <2 x i64> %1239, <2 x i64>* %__b.addr.i631, align 16
  %1240 = load <2 x i64>, <2 x i64>* %__a.addr.i630, align 16
  %1241 = bitcast <2 x i64> %1240 to <8 x i16>
  %1242 = load <2 x i64>, <2 x i64>* %__b.addr.i631, align 16
  %1243 = bitcast <2 x i64> %1242 to <8 x i16>
  %1244 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1241, <8 x i16> %1243) #10
  %1245 = bitcast <4 x i32> %1244 to <2 x i64>
  store <2 x i64> %1245, <2 x i64>* %y0o_l223, align 16
  %1246 = load <2 x i64>, <2 x i64>* %rot2_0hi221, align 16
  %1247 = load <2 x i64>, <2 x i64>* %rot2_0, align 16
  store <2 x i64> %1246, <2 x i64>* %__a.addr.i628, align 16
  store <2 x i64> %1247, <2 x i64>* %__b.addr.i629, align 16
  %1248 = load <2 x i64>, <2 x i64>* %__a.addr.i628, align 16
  %1249 = bitcast <2 x i64> %1248 to <8 x i16>
  %1250 = load <2 x i64>, <2 x i64>* %__b.addr.i629, align 16
  %1251 = bitcast <2 x i64> %1250 to <8 x i16>
  %1252 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1249, <8 x i16> %1251) #10
  %1253 = bitcast <4 x i32> %1252 to <2 x i64>
  store <2 x i64> %1253, <2 x i64>* %y0o_h225, align 16
  %1254 = load <2 x i64>, <2 x i64>* %rot2_0lo219, align 16
  %1255 = load <2 x i64>, <2 x i64>* %rot2_1, align 16
  store <2 x i64> %1254, <2 x i64>* %__a.addr.i626, align 16
  store <2 x i64> %1255, <2 x i64>* %__b.addr.i627, align 16
  %1256 = load <2 x i64>, <2 x i64>* %__a.addr.i626, align 16
  %1257 = bitcast <2 x i64> %1256 to <8 x i16>
  %1258 = load <2 x i64>, <2 x i64>* %__b.addr.i627, align 16
  %1259 = bitcast <2 x i64> %1258 to <8 x i16>
  %1260 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1257, <8 x i16> %1259) #10
  %1261 = bitcast <4 x i32> %1260 to <2 x i64>
  store <2 x i64> %1261, <2 x i64>* %y2o_l227, align 16
  %1262 = load <2 x i64>, <2 x i64>* %rot2_0hi221, align 16
  %1263 = load <2 x i64>, <2 x i64>* %rot2_1, align 16
  store <2 x i64> %1262, <2 x i64>* %__a.addr.i624, align 16
  store <2 x i64> %1263, <2 x i64>* %__b.addr.i625, align 16
  %1264 = load <2 x i64>, <2 x i64>* %__a.addr.i624, align 16
  %1265 = bitcast <2 x i64> %1264 to <8 x i16>
  %1266 = load <2 x i64>, <2 x i64>* %__b.addr.i625, align 16
  %1267 = bitcast <2 x i64> %1266 to <8 x i16>
  %1268 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1265, <8 x i16> %1267) #10
  %1269 = bitcast <4 x i32> %1268 to <2 x i64>
  store <2 x i64> %1269, <2 x i64>* %y2o_h229, align 16
  %1270 = load <2 x i64>, <2 x i64>* %row5, align 16
  %1271 = load <2 x i64>, <2 x i64>* %row1, align 16
  store <2 x i64> %1270, <2 x i64>* %__a.addr.i621, align 16
  store <2 x i64> %1271, <2 x i64>* %__b.addr.i622, align 16
  %1272 = load <2 x i64>, <2 x i64>* %__a.addr.i621, align 16
  %1273 = bitcast <2 x i64> %1272 to <8 x i16>
  %1274 = load <2 x i64>, <2 x i64>* %__b.addr.i622, align 16
  %1275 = bitcast <2 x i64> %1274 to <8 x i16>
  %shuffle.i623 = shufflevector <8 x i16> %1273, <8 x i16> %1275, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1276 = bitcast <8 x i16> %shuffle.i623 to <2 x i64>
  store <2 x i64> %1276, <2 x i64>* %rot3_0lo231, align 16
  %1277 = load <2 x i64>, <2 x i64>* %row5, align 16
  %1278 = load <2 x i64>, <2 x i64>* %row1, align 16
  store <2 x i64> %1277, <2 x i64>* %__a.addr.i618, align 16
  store <2 x i64> %1278, <2 x i64>* %__b.addr.i619, align 16
  %1279 = load <2 x i64>, <2 x i64>* %__a.addr.i618, align 16
  %1280 = bitcast <2 x i64> %1279 to <8 x i16>
  %1281 = load <2 x i64>, <2 x i64>* %__b.addr.i619, align 16
  %1282 = bitcast <2 x i64> %1281 to <8 x i16>
  %shuffle.i620 = shufflevector <8 x i16> %1280, <8 x i16> %1282, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1283 = bitcast <8 x i16> %shuffle.i620 to <2 x i64>
  store <2 x i64> %1283, <2 x i64>* %rot3_0hi233, align 16
  %1284 = load <2 x i64>, <2 x i64>* %rot3_0lo231, align 16
  %1285 = load <2 x i64>, <2 x i64>* %rot3_0, align 16
  store <2 x i64> %1284, <2 x i64>* %__a.addr.i616, align 16
  store <2 x i64> %1285, <2 x i64>* %__b.addr.i617, align 16
  %1286 = load <2 x i64>, <2 x i64>* %__a.addr.i616, align 16
  %1287 = bitcast <2 x i64> %1286 to <8 x i16>
  %1288 = load <2 x i64>, <2 x i64>* %__b.addr.i617, align 16
  %1289 = bitcast <2 x i64> %1288 to <8 x i16>
  %1290 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1287, <8 x i16> %1289) #10
  %1291 = bitcast <4 x i32> %1290 to <2 x i64>
  store <2 x i64> %1291, <2 x i64>* %y1o_l235, align 16
  %1292 = load <2 x i64>, <2 x i64>* %rot3_0hi233, align 16
  %1293 = load <2 x i64>, <2 x i64>* %rot3_0, align 16
  store <2 x i64> %1292, <2 x i64>* %__a.addr.i614, align 16
  store <2 x i64> %1293, <2 x i64>* %__b.addr.i615, align 16
  %1294 = load <2 x i64>, <2 x i64>* %__a.addr.i614, align 16
  %1295 = bitcast <2 x i64> %1294 to <8 x i16>
  %1296 = load <2 x i64>, <2 x i64>* %__b.addr.i615, align 16
  %1297 = bitcast <2 x i64> %1296 to <8 x i16>
  %1298 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1295, <8 x i16> %1297) #10
  %1299 = bitcast <4 x i32> %1298 to <2 x i64>
  store <2 x i64> %1299, <2 x i64>* %y1o_h237, align 16
  %1300 = load <2 x i64>, <2 x i64>* %rot3_0lo231, align 16
  %1301 = load <2 x i64>, <2 x i64>* %rot3_1, align 16
  store <2 x i64> %1300, <2 x i64>* %__a.addr.i612, align 16
  store <2 x i64> %1301, <2 x i64>* %__b.addr.i613, align 16
  %1302 = load <2 x i64>, <2 x i64>* %__a.addr.i612, align 16
  %1303 = bitcast <2 x i64> %1302 to <8 x i16>
  %1304 = load <2 x i64>, <2 x i64>* %__b.addr.i613, align 16
  %1305 = bitcast <2 x i64> %1304 to <8 x i16>
  %1306 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1303, <8 x i16> %1305) #10
  %1307 = bitcast <4 x i32> %1306 to <2 x i64>
  store <2 x i64> %1307, <2 x i64>* %y3o_l239, align 16
  %1308 = load <2 x i64>, <2 x i64>* %rot3_0hi233, align 16
  %1309 = load <2 x i64>, <2 x i64>* %rot3_1, align 16
  store <2 x i64> %1308, <2 x i64>* %__a.addr.i610, align 16
  store <2 x i64> %1309, <2 x i64>* %__b.addr.i611, align 16
  %1310 = load <2 x i64>, <2 x i64>* %__a.addr.i610, align 16
  %1311 = bitcast <2 x i64> %1310 to <8 x i16>
  %1312 = load <2 x i64>, <2 x i64>* %__b.addr.i611, align 16
  %1313 = bitcast <2 x i64> %1312 to <8 x i16>
  %1314 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1311, <8 x i16> %1313) #10
  %1315 = bitcast <4 x i32> %1314 to <2 x i64>
  store <2 x i64> %1315, <2 x i64>* %y3o_h241, align 16
  %1316 = load <2 x i64>, <2 x i64>* %row1, align 16
  %1317 = load <2 x i64>, <2 x i64>* %row7, align 16
  store <2 x i64> %1316, <2 x i64>* %__a.addr.i607, align 16
  store <2 x i64> %1317, <2 x i64>* %__b.addr.i608, align 16
  %1318 = load <2 x i64>, <2 x i64>* %__a.addr.i607, align 16
  %1319 = bitcast <2 x i64> %1318 to <8 x i16>
  %1320 = load <2 x i64>, <2 x i64>* %__b.addr.i608, align 16
  %1321 = bitcast <2 x i64> %1320 to <8 x i16>
  %add.i609 = add <8 x i16> %1319, %1321
  %1322 = bitcast <8 x i16> %add.i609 to <2 x i64>
  store <2 x i64> %1322, <2 x i64>* %sum17243, align 16
  %1323 = load <2 x i64>, <2 x i64>* %row3, align 16
  %1324 = load <2 x i64>, <2 x i64>* %row5, align 16
  store <2 x i64> %1323, <2 x i64>* %__a.addr.i604, align 16
  store <2 x i64> %1324, <2 x i64>* %__b.addr.i605, align 16
  %1325 = load <2 x i64>, <2 x i64>* %__a.addr.i604, align 16
  %1326 = bitcast <2 x i64> %1325 to <8 x i16>
  %1327 = load <2 x i64>, <2 x i64>* %__b.addr.i605, align 16
  %1328 = bitcast <2 x i64> %1327 to <8 x i16>
  %add.i606 = add <8 x i16> %1326, %1328
  %1329 = bitcast <8 x i16> %add.i606 to <2 x i64>
  store <2 x i64> %1329, <2 x i64>* %sum35245, align 16
  %1330 = load <2 x i64>, <2 x i64>* %sum17243, align 16
  %1331 = load <2 x i64>, <2 x i64>* %sum35245, align 16
  store <2 x i64> %1330, <2 x i64>* %__a.addr.i601, align 16
  store <2 x i64> %1331, <2 x i64>* %__b.addr.i602, align 16
  %1332 = load <2 x i64>, <2 x i64>* %__a.addr.i601, align 16
  %1333 = bitcast <2 x i64> %1332 to <8 x i16>
  %1334 = load <2 x i64>, <2 x i64>* %__b.addr.i602, align 16
  %1335 = bitcast <2 x i64> %1334 to <8 x i16>
  %shuffle.i603 = shufflevector <8 x i16> %1333, <8 x i16> %1335, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1336 = bitcast <8 x i16> %shuffle.i603 to <2 x i64>
  store <2 x i64> %1336, <2 x i64>* %rot1_0lo247, align 16
  %1337 = load <2 x i64>, <2 x i64>* %sum17243, align 16
  %1338 = load <2 x i64>, <2 x i64>* %sum35245, align 16
  store <2 x i64> %1337, <2 x i64>* %__a.addr.i598, align 16
  store <2 x i64> %1338, <2 x i64>* %__b.addr.i599, align 16
  %1339 = load <2 x i64>, <2 x i64>* %__a.addr.i598, align 16
  %1340 = bitcast <2 x i64> %1339 to <8 x i16>
  %1341 = load <2 x i64>, <2 x i64>* %__b.addr.i599, align 16
  %1342 = bitcast <2 x i64> %1341 to <8 x i16>
  %shuffle.i600 = shufflevector <8 x i16> %1340, <8 x i16> %1342, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1343 = bitcast <8 x i16> %shuffle.i600 to <2 x i64>
  store <2 x i64> %1343, <2 x i64>* %rot1_0hi249, align 16
  %1344 = load <2 x i64>, <2 x i64>* %rot1_0lo247, align 16
  %1345 = load <2 x i64>, <2 x i64>* %rot1_0, align 16
  store <2 x i64> %1344, <2 x i64>* %__a.addr.i596, align 16
  store <2 x i64> %1345, <2 x i64>* %__b.addr.i597, align 16
  %1346 = load <2 x i64>, <2 x i64>* %__a.addr.i596, align 16
  %1347 = bitcast <2 x i64> %1346 to <8 x i16>
  %1348 = load <2 x i64>, <2 x i64>* %__b.addr.i597, align 16
  %1349 = bitcast <2 x i64> %1348 to <8 x i16>
  %1350 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1347, <8 x i16> %1349) #10
  %1351 = bitcast <4 x i32> %1350 to <2 x i64>
  store <2 x i64> %1351, <2 x i64>* %y4o_l251, align 16
  %1352 = load <2 x i64>, <2 x i64>* %rot1_0hi249, align 16
  %1353 = load <2 x i64>, <2 x i64>* %rot1_0, align 16
  store <2 x i64> %1352, <2 x i64>* %__a.addr.i594, align 16
  store <2 x i64> %1353, <2 x i64>* %__b.addr.i595, align 16
  %1354 = load <2 x i64>, <2 x i64>* %__a.addr.i594, align 16
  %1355 = bitcast <2 x i64> %1354 to <8 x i16>
  %1356 = load <2 x i64>, <2 x i64>* %__b.addr.i595, align 16
  %1357 = bitcast <2 x i64> %1356 to <8 x i16>
  %1358 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1355, <8 x i16> %1357) #10
  %1359 = bitcast <4 x i32> %1358 to <2 x i64>
  store <2 x i64> %1359, <2 x i64>* %y4o_h253, align 16
  %1360 = load <2 x i64>, <2 x i64>* %rot1_0lo247, align 16
  %1361 = load <2 x i64>, <2 x i64>* %rot1_1, align 16
  store <2 x i64> %1360, <2 x i64>* %__a.addr.i592, align 16
  store <2 x i64> %1361, <2 x i64>* %__b.addr.i593, align 16
  %1362 = load <2 x i64>, <2 x i64>* %__a.addr.i592, align 16
  %1363 = bitcast <2 x i64> %1362 to <8 x i16>
  %1364 = load <2 x i64>, <2 x i64>* %__b.addr.i593, align 16
  %1365 = bitcast <2 x i64> %1364 to <8 x i16>
  %1366 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1363, <8 x i16> %1365) #10
  %1367 = bitcast <4 x i32> %1366 to <2 x i64>
  store <2 x i64> %1367, <2 x i64>* %y5o_l255, align 16
  %1368 = load <2 x i64>, <2 x i64>* %rot1_0hi249, align 16
  %1369 = load <2 x i64>, <2 x i64>* %rot1_1, align 16
  store <2 x i64> %1368, <2 x i64>* %__a.addr.i590, align 16
  store <2 x i64> %1369, <2 x i64>* %__b.addr.i591, align 16
  %1370 = load <2 x i64>, <2 x i64>* %__a.addr.i590, align 16
  %1371 = bitcast <2 x i64> %1370 to <8 x i16>
  %1372 = load <2 x i64>, <2 x i64>* %__b.addr.i591, align 16
  %1373 = bitcast <2 x i64> %1372 to <8 x i16>
  %1374 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1371, <8 x i16> %1373) #10
  %1375 = bitcast <4 x i32> %1374 to <2 x i64>
  store <2 x i64> %1375, <2 x i64>* %y5o_h257, align 16
  %1376 = load <2 x i64>, <2 x i64>* %y0o_l223, align 16
  %1377 = load <2 x i64>, <2 x i64>* %y4o_l251, align 16
  store <2 x i64> %1376, <2 x i64>* %__a.addr.i587, align 16
  store <2 x i64> %1377, <2 x i64>* %__b.addr.i588, align 16
  %1378 = load <2 x i64>, <2 x i64>* %__a.addr.i587, align 16
  %1379 = bitcast <2 x i64> %1378 to <4 x i32>
  %1380 = load <2 x i64>, <2 x i64>* %__b.addr.i588, align 16
  %1381 = bitcast <2 x i64> %1380 to <4 x i32>
  %add.i589 = add <4 x i32> %1379, %1381
  %1382 = bitcast <4 x i32> %add.i589 to <2 x i64>
  store <2 x i64> %1382, <2 x i64>* %x4_l259, align 16
  %1383 = load <2 x i64>, <2 x i64>* %y0o_h225, align 16
  %1384 = load <2 x i64>, <2 x i64>* %y4o_h253, align 16
  store <2 x i64> %1383, <2 x i64>* %__a.addr.i584, align 16
  store <2 x i64> %1384, <2 x i64>* %__b.addr.i585, align 16
  %1385 = load <2 x i64>, <2 x i64>* %__a.addr.i584, align 16
  %1386 = bitcast <2 x i64> %1385 to <4 x i32>
  %1387 = load <2 x i64>, <2 x i64>* %__b.addr.i585, align 16
  %1388 = bitcast <2 x i64> %1387 to <4 x i32>
  %add.i586 = add <4 x i32> %1386, %1388
  %1389 = bitcast <4 x i32> %add.i586 to <2 x i64>
  store <2 x i64> %1389, <2 x i64>* %x4_h261, align 16
  %1390 = load <2 x i64>, <2 x i64>* %y1o_l235, align 16
  %1391 = load <2 x i64>, <2 x i64>* %y5o_l255, align 16
  store <2 x i64> %1390, <2 x i64>* %__a.addr.i581, align 16
  store <2 x i64> %1391, <2 x i64>* %__b.addr.i582, align 16
  %1392 = load <2 x i64>, <2 x i64>* %__a.addr.i581, align 16
  %1393 = bitcast <2 x i64> %1392 to <4 x i32>
  %1394 = load <2 x i64>, <2 x i64>* %__b.addr.i582, align 16
  %1395 = bitcast <2 x i64> %1394 to <4 x i32>
  %add.i583 = add <4 x i32> %1393, %1395
  %1396 = bitcast <4 x i32> %add.i583 to <2 x i64>
  store <2 x i64> %1396, <2 x i64>* %x5_l263, align 16
  %1397 = load <2 x i64>, <2 x i64>* %y1o_h237, align 16
  %1398 = load <2 x i64>, <2 x i64>* %y5o_h257, align 16
  store <2 x i64> %1397, <2 x i64>* %__a.addr.i578, align 16
  store <2 x i64> %1398, <2 x i64>* %__b.addr.i579, align 16
  %1399 = load <2 x i64>, <2 x i64>* %__a.addr.i578, align 16
  %1400 = bitcast <2 x i64> %1399 to <4 x i32>
  %1401 = load <2 x i64>, <2 x i64>* %__b.addr.i579, align 16
  %1402 = bitcast <2 x i64> %1401 to <4 x i32>
  %add.i580 = add <4 x i32> %1400, %1402
  %1403 = bitcast <4 x i32> %add.i580 to <2 x i64>
  store <2 x i64> %1403, <2 x i64>* %x5_h265, align 16
  %1404 = load <2 x i64>, <2 x i64>* %y2o_l227, align 16
  %1405 = load <2 x i64>, <2 x i64>* %y5o_l255, align 16
  store <2 x i64> %1404, <2 x i64>* %__a.addr.i575, align 16
  store <2 x i64> %1405, <2 x i64>* %__b.addr.i576, align 16
  %1406 = load <2 x i64>, <2 x i64>* %__a.addr.i575, align 16
  %1407 = bitcast <2 x i64> %1406 to <4 x i32>
  %1408 = load <2 x i64>, <2 x i64>* %__b.addr.i576, align 16
  %1409 = bitcast <2 x i64> %1408 to <4 x i32>
  %add.i577 = add <4 x i32> %1407, %1409
  %1410 = bitcast <4 x i32> %add.i577 to <2 x i64>
  store <2 x i64> %1410, <2 x i64>* %x6_l267, align 16
  %1411 = load <2 x i64>, <2 x i64>* %y2o_h229, align 16
  %1412 = load <2 x i64>, <2 x i64>* %y5o_h257, align 16
  store <2 x i64> %1411, <2 x i64>* %__a.addr.i572, align 16
  store <2 x i64> %1412, <2 x i64>* %__b.addr.i573, align 16
  %1413 = load <2 x i64>, <2 x i64>* %__a.addr.i572, align 16
  %1414 = bitcast <2 x i64> %1413 to <4 x i32>
  %1415 = load <2 x i64>, <2 x i64>* %__b.addr.i573, align 16
  %1416 = bitcast <2 x i64> %1415 to <4 x i32>
  %add.i574 = add <4 x i32> %1414, %1416
  %1417 = bitcast <4 x i32> %add.i574 to <2 x i64>
  store <2 x i64> %1417, <2 x i64>* %x6_h269, align 16
  %1418 = load <2 x i64>, <2 x i64>* %y3o_l239, align 16
  %1419 = load <2 x i64>, <2 x i64>* %y4o_l251, align 16
  store <2 x i64> %1418, <2 x i64>* %__a.addr.i569, align 16
  store <2 x i64> %1419, <2 x i64>* %__b.addr.i570, align 16
  %1420 = load <2 x i64>, <2 x i64>* %__a.addr.i569, align 16
  %1421 = bitcast <2 x i64> %1420 to <4 x i32>
  %1422 = load <2 x i64>, <2 x i64>* %__b.addr.i570, align 16
  %1423 = bitcast <2 x i64> %1422 to <4 x i32>
  %add.i571 = add <4 x i32> %1421, %1423
  %1424 = bitcast <4 x i32> %add.i571 to <2 x i64>
  store <2 x i64> %1424, <2 x i64>* %x7_l271, align 16
  %1425 = load <2 x i64>, <2 x i64>* %y3o_h241, align 16
  %1426 = load <2 x i64>, <2 x i64>* %y4o_h253, align 16
  store <2 x i64> %1425, <2 x i64>* %__a.addr.i566, align 16
  store <2 x i64> %1426, <2 x i64>* %__b.addr.i567, align 16
  %1427 = load <2 x i64>, <2 x i64>* %__a.addr.i566, align 16
  %1428 = bitcast <2 x i64> %1427 to <4 x i32>
  %1429 = load <2 x i64>, <2 x i64>* %__b.addr.i567, align 16
  %1430 = bitcast <2 x i64> %1429 to <4 x i32>
  %add.i568 = add <4 x i32> %1428, %1430
  %1431 = bitcast <4 x i32> %add.i568 to <2 x i64>
  store <2 x i64> %1431, <2 x i64>* %x7_h273, align 16
  %1432 = load <2 x i64>, <2 x i64>* %x0_l203, align 16
  %1433 = load <2 x i64>, <2 x i64>* %bias_1, align 16
  store <2 x i64> %1432, <2 x i64>* %__a.addr.i563, align 16
  store <2 x i64> %1433, <2 x i64>* %__b.addr.i564, align 16
  %1434 = load <2 x i64>, <2 x i64>* %__a.addr.i563, align 16
  %1435 = bitcast <2 x i64> %1434 to <4 x i32>
  %1436 = load <2 x i64>, <2 x i64>* %__b.addr.i564, align 16
  %1437 = bitcast <2 x i64> %1436 to <4 x i32>
  %add.i565 = add <4 x i32> %1435, %1437
  %1438 = bitcast <4 x i32> %add.i565 to <2 x i64>
  store <2 x i64> %1438, <2 x i64>* %abiased_l275, align 16
  %1439 = load <2 x i64>, <2 x i64>* %x0_h205, align 16
  %1440 = load <2 x i64>, <2 x i64>* %bias_1, align 16
  store <2 x i64> %1439, <2 x i64>* %__a.addr.i560, align 16
  store <2 x i64> %1440, <2 x i64>* %__b.addr.i561, align 16
  %1441 = load <2 x i64>, <2 x i64>* %__a.addr.i560, align 16
  %1442 = bitcast <2 x i64> %1441 to <4 x i32>
  %1443 = load <2 x i64>, <2 x i64>* %__b.addr.i561, align 16
  %1444 = bitcast <2 x i64> %1443 to <4 x i32>
  %add.i562 = add <4 x i32> %1442, %1444
  %1445 = bitcast <4 x i32> %add.i562 to <2 x i64>
  store <2 x i64> %1445, <2 x i64>* %abiased_h277, align 16
  %1446 = load <2 x i64>, <2 x i64>* %abiased_l275, align 16
  %1447 = load <2 x i64>, <2 x i64>* %x7_l271, align 16
  store <2 x i64> %1446, <2 x i64>* %__a.addr.i557, align 16
  store <2 x i64> %1447, <2 x i64>* %__b.addr.i558, align 16
  %1448 = load <2 x i64>, <2 x i64>* %__a.addr.i557, align 16
  %1449 = bitcast <2 x i64> %1448 to <4 x i32>
  %1450 = load <2 x i64>, <2 x i64>* %__b.addr.i558, align 16
  %1451 = bitcast <2 x i64> %1450 to <4 x i32>
  %add.i559 = add <4 x i32> %1449, %1451
  %1452 = bitcast <4 x i32> %add.i559 to <2 x i64>
  store <2 x i64> %1452, <2 x i64>* %sum_l279, align 16
  %1453 = load <2 x i64>, <2 x i64>* %abiased_h277, align 16
  %1454 = load <2 x i64>, <2 x i64>* %x7_h273, align 16
  store <2 x i64> %1453, <2 x i64>* %__a.addr.i554, align 16
  store <2 x i64> %1454, <2 x i64>* %__b.addr.i555, align 16
  %1455 = load <2 x i64>, <2 x i64>* %__a.addr.i554, align 16
  %1456 = bitcast <2 x i64> %1455 to <4 x i32>
  %1457 = load <2 x i64>, <2 x i64>* %__b.addr.i555, align 16
  %1458 = bitcast <2 x i64> %1457 to <4 x i32>
  %add.i556 = add <4 x i32> %1456, %1458
  %1459 = bitcast <4 x i32> %add.i556 to <2 x i64>
  store <2 x i64> %1459, <2 x i64>* %sum_h281, align 16
  %1460 = load <2 x i64>, <2 x i64>* %abiased_l275, align 16
  %1461 = load <2 x i64>, <2 x i64>* %x7_l271, align 16
  store <2 x i64> %1460, <2 x i64>* %__a.addr.i551, align 16
  store <2 x i64> %1461, <2 x i64>* %__b.addr.i552, align 16
  %1462 = load <2 x i64>, <2 x i64>* %__a.addr.i551, align 16
  %1463 = bitcast <2 x i64> %1462 to <4 x i32>
  %1464 = load <2 x i64>, <2 x i64>* %__b.addr.i552, align 16
  %1465 = bitcast <2 x i64> %1464 to <4 x i32>
  %sub.i553 = sub <4 x i32> %1463, %1465
  %1466 = bitcast <4 x i32> %sub.i553 to <2 x i64>
  store <2 x i64> %1466, <2 x i64>* %dif_l283, align 16
  %1467 = load <2 x i64>, <2 x i64>* %abiased_h277, align 16
  %1468 = load <2 x i64>, <2 x i64>* %x7_h273, align 16
  store <2 x i64> %1467, <2 x i64>* %__a.addr.i548, align 16
  store <2 x i64> %1468, <2 x i64>* %__b.addr.i549, align 16
  %1469 = load <2 x i64>, <2 x i64>* %__a.addr.i548, align 16
  %1470 = bitcast <2 x i64> %1469 to <4 x i32>
  %1471 = load <2 x i64>, <2 x i64>* %__b.addr.i549, align 16
  %1472 = bitcast <2 x i64> %1471 to <4 x i32>
  %sub.i550 = sub <4 x i32> %1470, %1472
  %1473 = bitcast <4 x i32> %sub.i550 to <2 x i64>
  store <2 x i64> %1473, <2 x i64>* %dif_h285, align 16
  %1474 = load <2 x i64>, <2 x i64>* %sum_l279, align 16
  store <2 x i64> %1474, <2 x i64>* %__a.addr.i546, align 16
  store i32 17, i32* %__count.addr.i547, align 4
  %1475 = load <2 x i64>, <2 x i64>* %__a.addr.i546, align 16
  %1476 = bitcast <2 x i64> %1475 to <4 x i32>
  %1477 = load i32, i32* %__count.addr.i547, align 4
  %1478 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1476, i32 %1477) #10
  %1479 = bitcast <4 x i32> %1478 to <2 x i64>
  %1480 = load <2 x i64>, <2 x i64>* %sum_h281, align 16
  store <2 x i64> %1480, <2 x i64>* %__a.addr.i544, align 16
  store i32 17, i32* %__count.addr.i545, align 4
  %1481 = load <2 x i64>, <2 x i64>* %__a.addr.i544, align 16
  %1482 = bitcast <2 x i64> %1481 to <4 x i32>
  %1483 = load i32, i32* %__count.addr.i545, align 4
  %1484 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1482, i32 %1483) #10
  %1485 = bitcast <4 x i32> %1484 to <2 x i64>
  store <2 x i64> %1479, <2 x i64>* %__a.addr.i542, align 16
  store <2 x i64> %1485, <2 x i64>* %__b.addr.i543, align 16
  %1486 = load <2 x i64>, <2 x i64>* %__a.addr.i542, align 16
  %1487 = bitcast <2 x i64> %1486 to <4 x i32>
  %1488 = load <2 x i64>, <2 x i64>* %__b.addr.i543, align 16
  %1489 = bitcast <2 x i64> %1488 to <4 x i32>
  %1490 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1487, <4 x i32> %1489) #10
  %1491 = bitcast <8 x i16> %1490 to <2 x i64>
  store <2 x i64> %1491, <2 x i64>* %row0, align 16
  %1492 = load <2 x i64>, <2 x i64>* %dif_l283, align 16
  store <2 x i64> %1492, <2 x i64>* %__a.addr.i540, align 16
  store i32 17, i32* %__count.addr.i541, align 4
  %1493 = load <2 x i64>, <2 x i64>* %__a.addr.i540, align 16
  %1494 = bitcast <2 x i64> %1493 to <4 x i32>
  %1495 = load i32, i32* %__count.addr.i541, align 4
  %1496 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1494, i32 %1495) #10
  %1497 = bitcast <4 x i32> %1496 to <2 x i64>
  %1498 = load <2 x i64>, <2 x i64>* %dif_h285, align 16
  store <2 x i64> %1498, <2 x i64>* %__a.addr.i538, align 16
  store i32 17, i32* %__count.addr.i539, align 4
  %1499 = load <2 x i64>, <2 x i64>* %__a.addr.i538, align 16
  %1500 = bitcast <2 x i64> %1499 to <4 x i32>
  %1501 = load i32, i32* %__count.addr.i539, align 4
  %1502 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1500, i32 %1501) #10
  %1503 = bitcast <4 x i32> %1502 to <2 x i64>
  store <2 x i64> %1497, <2 x i64>* %__a.addr.i536, align 16
  store <2 x i64> %1503, <2 x i64>* %__b.addr.i537, align 16
  %1504 = load <2 x i64>, <2 x i64>* %__a.addr.i536, align 16
  %1505 = bitcast <2 x i64> %1504 to <4 x i32>
  %1506 = load <2 x i64>, <2 x i64>* %__b.addr.i537, align 16
  %1507 = bitcast <2 x i64> %1506 to <4 x i32>
  %1508 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1505, <4 x i32> %1507) #10
  %1509 = bitcast <8 x i16> %1508 to <2 x i64>
  store <2 x i64> %1509, <2 x i64>* %row7, align 16
  %1510 = load <2 x i64>, <2 x i64>* %x1_l211, align 16
  %1511 = load <2 x i64>, <2 x i64>* %bias_1, align 16
  store <2 x i64> %1510, <2 x i64>* %__a.addr.i533, align 16
  store <2 x i64> %1511, <2 x i64>* %__b.addr.i534, align 16
  %1512 = load <2 x i64>, <2 x i64>* %__a.addr.i533, align 16
  %1513 = bitcast <2 x i64> %1512 to <4 x i32>
  %1514 = load <2 x i64>, <2 x i64>* %__b.addr.i534, align 16
  %1515 = bitcast <2 x i64> %1514 to <4 x i32>
  %add.i535 = add <4 x i32> %1513, %1515
  %1516 = bitcast <4 x i32> %add.i535 to <2 x i64>
  store <2 x i64> %1516, <2 x i64>* %abiased_l293, align 16
  %1517 = load <2 x i64>, <2 x i64>* %x1_h213, align 16
  %1518 = load <2 x i64>, <2 x i64>* %bias_1, align 16
  store <2 x i64> %1517, <2 x i64>* %__a.addr.i530, align 16
  store <2 x i64> %1518, <2 x i64>* %__b.addr.i531, align 16
  %1519 = load <2 x i64>, <2 x i64>* %__a.addr.i530, align 16
  %1520 = bitcast <2 x i64> %1519 to <4 x i32>
  %1521 = load <2 x i64>, <2 x i64>* %__b.addr.i531, align 16
  %1522 = bitcast <2 x i64> %1521 to <4 x i32>
  %add.i532 = add <4 x i32> %1520, %1522
  %1523 = bitcast <4 x i32> %add.i532 to <2 x i64>
  store <2 x i64> %1523, <2 x i64>* %abiased_h295, align 16
  %1524 = load <2 x i64>, <2 x i64>* %abiased_l293, align 16
  %1525 = load <2 x i64>, <2 x i64>* %x6_l267, align 16
  store <2 x i64> %1524, <2 x i64>* %__a.addr.i527, align 16
  store <2 x i64> %1525, <2 x i64>* %__b.addr.i528, align 16
  %1526 = load <2 x i64>, <2 x i64>* %__a.addr.i527, align 16
  %1527 = bitcast <2 x i64> %1526 to <4 x i32>
  %1528 = load <2 x i64>, <2 x i64>* %__b.addr.i528, align 16
  %1529 = bitcast <2 x i64> %1528 to <4 x i32>
  %add.i529 = add <4 x i32> %1527, %1529
  %1530 = bitcast <4 x i32> %add.i529 to <2 x i64>
  store <2 x i64> %1530, <2 x i64>* %sum_l297, align 16
  %1531 = load <2 x i64>, <2 x i64>* %abiased_h295, align 16
  %1532 = load <2 x i64>, <2 x i64>* %x6_h269, align 16
  store <2 x i64> %1531, <2 x i64>* %__a.addr.i524, align 16
  store <2 x i64> %1532, <2 x i64>* %__b.addr.i525, align 16
  %1533 = load <2 x i64>, <2 x i64>* %__a.addr.i524, align 16
  %1534 = bitcast <2 x i64> %1533 to <4 x i32>
  %1535 = load <2 x i64>, <2 x i64>* %__b.addr.i525, align 16
  %1536 = bitcast <2 x i64> %1535 to <4 x i32>
  %add.i526 = add <4 x i32> %1534, %1536
  %1537 = bitcast <4 x i32> %add.i526 to <2 x i64>
  store <2 x i64> %1537, <2 x i64>* %sum_h299, align 16
  %1538 = load <2 x i64>, <2 x i64>* %abiased_l293, align 16
  %1539 = load <2 x i64>, <2 x i64>* %x6_l267, align 16
  store <2 x i64> %1538, <2 x i64>* %__a.addr.i521, align 16
  store <2 x i64> %1539, <2 x i64>* %__b.addr.i522, align 16
  %1540 = load <2 x i64>, <2 x i64>* %__a.addr.i521, align 16
  %1541 = bitcast <2 x i64> %1540 to <4 x i32>
  %1542 = load <2 x i64>, <2 x i64>* %__b.addr.i522, align 16
  %1543 = bitcast <2 x i64> %1542 to <4 x i32>
  %sub.i523 = sub <4 x i32> %1541, %1543
  %1544 = bitcast <4 x i32> %sub.i523 to <2 x i64>
  store <2 x i64> %1544, <2 x i64>* %dif_l301, align 16
  %1545 = load <2 x i64>, <2 x i64>* %abiased_h295, align 16
  %1546 = load <2 x i64>, <2 x i64>* %x6_h269, align 16
  store <2 x i64> %1545, <2 x i64>* %__a.addr.i518, align 16
  store <2 x i64> %1546, <2 x i64>* %__b.addr.i519, align 16
  %1547 = load <2 x i64>, <2 x i64>* %__a.addr.i518, align 16
  %1548 = bitcast <2 x i64> %1547 to <4 x i32>
  %1549 = load <2 x i64>, <2 x i64>* %__b.addr.i519, align 16
  %1550 = bitcast <2 x i64> %1549 to <4 x i32>
  %sub.i520 = sub <4 x i32> %1548, %1550
  %1551 = bitcast <4 x i32> %sub.i520 to <2 x i64>
  store <2 x i64> %1551, <2 x i64>* %dif_h303, align 16
  %1552 = load <2 x i64>, <2 x i64>* %sum_l297, align 16
  store <2 x i64> %1552, <2 x i64>* %__a.addr.i516, align 16
  store i32 17, i32* %__count.addr.i517, align 4
  %1553 = load <2 x i64>, <2 x i64>* %__a.addr.i516, align 16
  %1554 = bitcast <2 x i64> %1553 to <4 x i32>
  %1555 = load i32, i32* %__count.addr.i517, align 4
  %1556 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1554, i32 %1555) #10
  %1557 = bitcast <4 x i32> %1556 to <2 x i64>
  %1558 = load <2 x i64>, <2 x i64>* %sum_h299, align 16
  store <2 x i64> %1558, <2 x i64>* %__a.addr.i514, align 16
  store i32 17, i32* %__count.addr.i515, align 4
  %1559 = load <2 x i64>, <2 x i64>* %__a.addr.i514, align 16
  %1560 = bitcast <2 x i64> %1559 to <4 x i32>
  %1561 = load i32, i32* %__count.addr.i515, align 4
  %1562 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1560, i32 %1561) #10
  %1563 = bitcast <4 x i32> %1562 to <2 x i64>
  store <2 x i64> %1557, <2 x i64>* %__a.addr.i512, align 16
  store <2 x i64> %1563, <2 x i64>* %__b.addr.i513, align 16
  %1564 = load <2 x i64>, <2 x i64>* %__a.addr.i512, align 16
  %1565 = bitcast <2 x i64> %1564 to <4 x i32>
  %1566 = load <2 x i64>, <2 x i64>* %__b.addr.i513, align 16
  %1567 = bitcast <2 x i64> %1566 to <4 x i32>
  %1568 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1565, <4 x i32> %1567) #10
  %1569 = bitcast <8 x i16> %1568 to <2 x i64>
  store <2 x i64> %1569, <2 x i64>* %row1, align 16
  %1570 = load <2 x i64>, <2 x i64>* %dif_l301, align 16
  store <2 x i64> %1570, <2 x i64>* %__a.addr.i510, align 16
  store i32 17, i32* %__count.addr.i511, align 4
  %1571 = load <2 x i64>, <2 x i64>* %__a.addr.i510, align 16
  %1572 = bitcast <2 x i64> %1571 to <4 x i32>
  %1573 = load i32, i32* %__count.addr.i511, align 4
  %1574 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1572, i32 %1573) #10
  %1575 = bitcast <4 x i32> %1574 to <2 x i64>
  %1576 = load <2 x i64>, <2 x i64>* %dif_h303, align 16
  store <2 x i64> %1576, <2 x i64>* %__a.addr.i508, align 16
  store i32 17, i32* %__count.addr.i509, align 4
  %1577 = load <2 x i64>, <2 x i64>* %__a.addr.i508, align 16
  %1578 = bitcast <2 x i64> %1577 to <4 x i32>
  %1579 = load i32, i32* %__count.addr.i509, align 4
  %1580 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1578, i32 %1579) #10
  %1581 = bitcast <4 x i32> %1580 to <2 x i64>
  store <2 x i64> %1575, <2 x i64>* %__a.addr.i506, align 16
  store <2 x i64> %1581, <2 x i64>* %__b.addr.i507, align 16
  %1582 = load <2 x i64>, <2 x i64>* %__a.addr.i506, align 16
  %1583 = bitcast <2 x i64> %1582 to <4 x i32>
  %1584 = load <2 x i64>, <2 x i64>* %__b.addr.i507, align 16
  %1585 = bitcast <2 x i64> %1584 to <4 x i32>
  %1586 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1583, <4 x i32> %1585) #10
  %1587 = bitcast <8 x i16> %1586 to <2 x i64>
  store <2 x i64> %1587, <2 x i64>* %row6, align 16
  %1588 = load <2 x i64>, <2 x i64>* %x2_l215, align 16
  %1589 = load <2 x i64>, <2 x i64>* %bias_1, align 16
  store <2 x i64> %1588, <2 x i64>* %__a.addr.i503, align 16
  store <2 x i64> %1589, <2 x i64>* %__b.addr.i504, align 16
  %1590 = load <2 x i64>, <2 x i64>* %__a.addr.i503, align 16
  %1591 = bitcast <2 x i64> %1590 to <4 x i32>
  %1592 = load <2 x i64>, <2 x i64>* %__b.addr.i504, align 16
  %1593 = bitcast <2 x i64> %1592 to <4 x i32>
  %add.i505 = add <4 x i32> %1591, %1593
  %1594 = bitcast <4 x i32> %add.i505 to <2 x i64>
  store <2 x i64> %1594, <2 x i64>* %abiased_l311, align 16
  %1595 = load <2 x i64>, <2 x i64>* %x2_h217, align 16
  %1596 = load <2 x i64>, <2 x i64>* %bias_1, align 16
  store <2 x i64> %1595, <2 x i64>* %__a.addr.i500, align 16
  store <2 x i64> %1596, <2 x i64>* %__b.addr.i501, align 16
  %1597 = load <2 x i64>, <2 x i64>* %__a.addr.i500, align 16
  %1598 = bitcast <2 x i64> %1597 to <4 x i32>
  %1599 = load <2 x i64>, <2 x i64>* %__b.addr.i501, align 16
  %1600 = bitcast <2 x i64> %1599 to <4 x i32>
  %add.i502 = add <4 x i32> %1598, %1600
  %1601 = bitcast <4 x i32> %add.i502 to <2 x i64>
  store <2 x i64> %1601, <2 x i64>* %abiased_h313, align 16
  %1602 = load <2 x i64>, <2 x i64>* %abiased_l311, align 16
  %1603 = load <2 x i64>, <2 x i64>* %x5_l263, align 16
  store <2 x i64> %1602, <2 x i64>* %__a.addr.i497, align 16
  store <2 x i64> %1603, <2 x i64>* %__b.addr.i498, align 16
  %1604 = load <2 x i64>, <2 x i64>* %__a.addr.i497, align 16
  %1605 = bitcast <2 x i64> %1604 to <4 x i32>
  %1606 = load <2 x i64>, <2 x i64>* %__b.addr.i498, align 16
  %1607 = bitcast <2 x i64> %1606 to <4 x i32>
  %add.i499 = add <4 x i32> %1605, %1607
  %1608 = bitcast <4 x i32> %add.i499 to <2 x i64>
  store <2 x i64> %1608, <2 x i64>* %sum_l315, align 16
  %1609 = load <2 x i64>, <2 x i64>* %abiased_h313, align 16
  %1610 = load <2 x i64>, <2 x i64>* %x5_h265, align 16
  store <2 x i64> %1609, <2 x i64>* %__a.addr.i494, align 16
  store <2 x i64> %1610, <2 x i64>* %__b.addr.i495, align 16
  %1611 = load <2 x i64>, <2 x i64>* %__a.addr.i494, align 16
  %1612 = bitcast <2 x i64> %1611 to <4 x i32>
  %1613 = load <2 x i64>, <2 x i64>* %__b.addr.i495, align 16
  %1614 = bitcast <2 x i64> %1613 to <4 x i32>
  %add.i496 = add <4 x i32> %1612, %1614
  %1615 = bitcast <4 x i32> %add.i496 to <2 x i64>
  store <2 x i64> %1615, <2 x i64>* %sum_h317, align 16
  %1616 = load <2 x i64>, <2 x i64>* %abiased_l311, align 16
  %1617 = load <2 x i64>, <2 x i64>* %x5_l263, align 16
  store <2 x i64> %1616, <2 x i64>* %__a.addr.i491, align 16
  store <2 x i64> %1617, <2 x i64>* %__b.addr.i492, align 16
  %1618 = load <2 x i64>, <2 x i64>* %__a.addr.i491, align 16
  %1619 = bitcast <2 x i64> %1618 to <4 x i32>
  %1620 = load <2 x i64>, <2 x i64>* %__b.addr.i492, align 16
  %1621 = bitcast <2 x i64> %1620 to <4 x i32>
  %sub.i493 = sub <4 x i32> %1619, %1621
  %1622 = bitcast <4 x i32> %sub.i493 to <2 x i64>
  store <2 x i64> %1622, <2 x i64>* %dif_l319, align 16
  %1623 = load <2 x i64>, <2 x i64>* %abiased_h313, align 16
  %1624 = load <2 x i64>, <2 x i64>* %x5_h265, align 16
  store <2 x i64> %1623, <2 x i64>* %__a.addr.i488, align 16
  store <2 x i64> %1624, <2 x i64>* %__b.addr.i489, align 16
  %1625 = load <2 x i64>, <2 x i64>* %__a.addr.i488, align 16
  %1626 = bitcast <2 x i64> %1625 to <4 x i32>
  %1627 = load <2 x i64>, <2 x i64>* %__b.addr.i489, align 16
  %1628 = bitcast <2 x i64> %1627 to <4 x i32>
  %sub.i490 = sub <4 x i32> %1626, %1628
  %1629 = bitcast <4 x i32> %sub.i490 to <2 x i64>
  store <2 x i64> %1629, <2 x i64>* %dif_h321, align 16
  %1630 = load <2 x i64>, <2 x i64>* %sum_l315, align 16
  store <2 x i64> %1630, <2 x i64>* %__a.addr.i486, align 16
  store i32 17, i32* %__count.addr.i487, align 4
  %1631 = load <2 x i64>, <2 x i64>* %__a.addr.i486, align 16
  %1632 = bitcast <2 x i64> %1631 to <4 x i32>
  %1633 = load i32, i32* %__count.addr.i487, align 4
  %1634 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1632, i32 %1633) #10
  %1635 = bitcast <4 x i32> %1634 to <2 x i64>
  %1636 = load <2 x i64>, <2 x i64>* %sum_h317, align 16
  store <2 x i64> %1636, <2 x i64>* %__a.addr.i484, align 16
  store i32 17, i32* %__count.addr.i485, align 4
  %1637 = load <2 x i64>, <2 x i64>* %__a.addr.i484, align 16
  %1638 = bitcast <2 x i64> %1637 to <4 x i32>
  %1639 = load i32, i32* %__count.addr.i485, align 4
  %1640 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1638, i32 %1639) #10
  %1641 = bitcast <4 x i32> %1640 to <2 x i64>
  store <2 x i64> %1635, <2 x i64>* %__a.addr.i482, align 16
  store <2 x i64> %1641, <2 x i64>* %__b.addr.i483, align 16
  %1642 = load <2 x i64>, <2 x i64>* %__a.addr.i482, align 16
  %1643 = bitcast <2 x i64> %1642 to <4 x i32>
  %1644 = load <2 x i64>, <2 x i64>* %__b.addr.i483, align 16
  %1645 = bitcast <2 x i64> %1644 to <4 x i32>
  %1646 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1643, <4 x i32> %1645) #10
  %1647 = bitcast <8 x i16> %1646 to <2 x i64>
  store <2 x i64> %1647, <2 x i64>* %row2, align 16
  %1648 = load <2 x i64>, <2 x i64>* %dif_l319, align 16
  store <2 x i64> %1648, <2 x i64>* %__a.addr.i480, align 16
  store i32 17, i32* %__count.addr.i481, align 4
  %1649 = load <2 x i64>, <2 x i64>* %__a.addr.i480, align 16
  %1650 = bitcast <2 x i64> %1649 to <4 x i32>
  %1651 = load i32, i32* %__count.addr.i481, align 4
  %1652 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1650, i32 %1651) #10
  %1653 = bitcast <4 x i32> %1652 to <2 x i64>
  %1654 = load <2 x i64>, <2 x i64>* %dif_h321, align 16
  store <2 x i64> %1654, <2 x i64>* %__a.addr.i478, align 16
  store i32 17, i32* %__count.addr.i479, align 4
  %1655 = load <2 x i64>, <2 x i64>* %__a.addr.i478, align 16
  %1656 = bitcast <2 x i64> %1655 to <4 x i32>
  %1657 = load i32, i32* %__count.addr.i479, align 4
  %1658 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1656, i32 %1657) #10
  %1659 = bitcast <4 x i32> %1658 to <2 x i64>
  store <2 x i64> %1653, <2 x i64>* %__a.addr.i476, align 16
  store <2 x i64> %1659, <2 x i64>* %__b.addr.i477, align 16
  %1660 = load <2 x i64>, <2 x i64>* %__a.addr.i476, align 16
  %1661 = bitcast <2 x i64> %1660 to <4 x i32>
  %1662 = load <2 x i64>, <2 x i64>* %__b.addr.i477, align 16
  %1663 = bitcast <2 x i64> %1662 to <4 x i32>
  %1664 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1661, <4 x i32> %1663) #10
  %1665 = bitcast <8 x i16> %1664 to <2 x i64>
  store <2 x i64> %1665, <2 x i64>* %row5, align 16
  %1666 = load <2 x i64>, <2 x i64>* %x3_l207, align 16
  %1667 = load <2 x i64>, <2 x i64>* %bias_1, align 16
  store <2 x i64> %1666, <2 x i64>* %__a.addr.i473, align 16
  store <2 x i64> %1667, <2 x i64>* %__b.addr.i474, align 16
  %1668 = load <2 x i64>, <2 x i64>* %__a.addr.i473, align 16
  %1669 = bitcast <2 x i64> %1668 to <4 x i32>
  %1670 = load <2 x i64>, <2 x i64>* %__b.addr.i474, align 16
  %1671 = bitcast <2 x i64> %1670 to <4 x i32>
  %add.i475 = add <4 x i32> %1669, %1671
  %1672 = bitcast <4 x i32> %add.i475 to <2 x i64>
  store <2 x i64> %1672, <2 x i64>* %abiased_l329, align 16
  %1673 = load <2 x i64>, <2 x i64>* %x3_h209, align 16
  %1674 = load <2 x i64>, <2 x i64>* %bias_1, align 16
  store <2 x i64> %1673, <2 x i64>* %__a.addr.i470, align 16
  store <2 x i64> %1674, <2 x i64>* %__b.addr.i471, align 16
  %1675 = load <2 x i64>, <2 x i64>* %__a.addr.i470, align 16
  %1676 = bitcast <2 x i64> %1675 to <4 x i32>
  %1677 = load <2 x i64>, <2 x i64>* %__b.addr.i471, align 16
  %1678 = bitcast <2 x i64> %1677 to <4 x i32>
  %add.i472 = add <4 x i32> %1676, %1678
  %1679 = bitcast <4 x i32> %add.i472 to <2 x i64>
  store <2 x i64> %1679, <2 x i64>* %abiased_h331, align 16
  %1680 = load <2 x i64>, <2 x i64>* %abiased_l329, align 16
  %1681 = load <2 x i64>, <2 x i64>* %x4_l259, align 16
  store <2 x i64> %1680, <2 x i64>* %__a.addr.i467, align 16
  store <2 x i64> %1681, <2 x i64>* %__b.addr.i468, align 16
  %1682 = load <2 x i64>, <2 x i64>* %__a.addr.i467, align 16
  %1683 = bitcast <2 x i64> %1682 to <4 x i32>
  %1684 = load <2 x i64>, <2 x i64>* %__b.addr.i468, align 16
  %1685 = bitcast <2 x i64> %1684 to <4 x i32>
  %add.i469 = add <4 x i32> %1683, %1685
  %1686 = bitcast <4 x i32> %add.i469 to <2 x i64>
  store <2 x i64> %1686, <2 x i64>* %sum_l333, align 16
  %1687 = load <2 x i64>, <2 x i64>* %abiased_h331, align 16
  %1688 = load <2 x i64>, <2 x i64>* %x4_h261, align 16
  store <2 x i64> %1687, <2 x i64>* %__a.addr.i465, align 16
  store <2 x i64> %1688, <2 x i64>* %__b.addr.i466, align 16
  %1689 = load <2 x i64>, <2 x i64>* %__a.addr.i465, align 16
  %1690 = bitcast <2 x i64> %1689 to <4 x i32>
  %1691 = load <2 x i64>, <2 x i64>* %__b.addr.i466, align 16
  %1692 = bitcast <2 x i64> %1691 to <4 x i32>
  %add.i = add <4 x i32> %1690, %1692
  %1693 = bitcast <4 x i32> %add.i to <2 x i64>
  store <2 x i64> %1693, <2 x i64>* %sum_h335, align 16
  %1694 = load <2 x i64>, <2 x i64>* %abiased_l329, align 16
  %1695 = load <2 x i64>, <2 x i64>* %x4_l259, align 16
  store <2 x i64> %1694, <2 x i64>* %__a.addr.i462, align 16
  store <2 x i64> %1695, <2 x i64>* %__b.addr.i463, align 16
  %1696 = load <2 x i64>, <2 x i64>* %__a.addr.i462, align 16
  %1697 = bitcast <2 x i64> %1696 to <4 x i32>
  %1698 = load <2 x i64>, <2 x i64>* %__b.addr.i463, align 16
  %1699 = bitcast <2 x i64> %1698 to <4 x i32>
  %sub.i464 = sub <4 x i32> %1697, %1699
  %1700 = bitcast <4 x i32> %sub.i464 to <2 x i64>
  store <2 x i64> %1700, <2 x i64>* %dif_l337, align 16
  %1701 = load <2 x i64>, <2 x i64>* %abiased_h331, align 16
  %1702 = load <2 x i64>, <2 x i64>* %x4_h261, align 16
  store <2 x i64> %1701, <2 x i64>* %__a.addr.i460, align 16
  store <2 x i64> %1702, <2 x i64>* %__b.addr.i461, align 16
  %1703 = load <2 x i64>, <2 x i64>* %__a.addr.i460, align 16
  %1704 = bitcast <2 x i64> %1703 to <4 x i32>
  %1705 = load <2 x i64>, <2 x i64>* %__b.addr.i461, align 16
  %1706 = bitcast <2 x i64> %1705 to <4 x i32>
  %sub.i = sub <4 x i32> %1704, %1706
  %1707 = bitcast <4 x i32> %sub.i to <2 x i64>
  store <2 x i64> %1707, <2 x i64>* %dif_h339, align 16
  %1708 = load <2 x i64>, <2 x i64>* %sum_l333, align 16
  store <2 x i64> %1708, <2 x i64>* %__a.addr.i458, align 16
  store i32 17, i32* %__count.addr.i459, align 4
  %1709 = load <2 x i64>, <2 x i64>* %__a.addr.i458, align 16
  %1710 = bitcast <2 x i64> %1709 to <4 x i32>
  %1711 = load i32, i32* %__count.addr.i459, align 4
  %1712 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1710, i32 %1711) #10
  %1713 = bitcast <4 x i32> %1712 to <2 x i64>
  %1714 = load <2 x i64>, <2 x i64>* %sum_h335, align 16
  store <2 x i64> %1714, <2 x i64>* %__a.addr.i456, align 16
  store i32 17, i32* %__count.addr.i457, align 4
  %1715 = load <2 x i64>, <2 x i64>* %__a.addr.i456, align 16
  %1716 = bitcast <2 x i64> %1715 to <4 x i32>
  %1717 = load i32, i32* %__count.addr.i457, align 4
  %1718 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1716, i32 %1717) #10
  %1719 = bitcast <4 x i32> %1718 to <2 x i64>
  store <2 x i64> %1713, <2 x i64>* %__a.addr.i454, align 16
  store <2 x i64> %1719, <2 x i64>* %__b.addr.i455, align 16
  %1720 = load <2 x i64>, <2 x i64>* %__a.addr.i454, align 16
  %1721 = bitcast <2 x i64> %1720 to <4 x i32>
  %1722 = load <2 x i64>, <2 x i64>* %__b.addr.i455, align 16
  %1723 = bitcast <2 x i64> %1722 to <4 x i32>
  %1724 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1721, <4 x i32> %1723) #10
  %1725 = bitcast <8 x i16> %1724 to <2 x i64>
  store <2 x i64> %1725, <2 x i64>* %row3, align 16
  %1726 = load <2 x i64>, <2 x i64>* %dif_l337, align 16
  store <2 x i64> %1726, <2 x i64>* %__a.addr.i452, align 16
  store i32 17, i32* %__count.addr.i453, align 4
  %1727 = load <2 x i64>, <2 x i64>* %__a.addr.i452, align 16
  %1728 = bitcast <2 x i64> %1727 to <4 x i32>
  %1729 = load i32, i32* %__count.addr.i453, align 4
  %1730 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1728, i32 %1729) #10
  %1731 = bitcast <4 x i32> %1730 to <2 x i64>
  %1732 = load <2 x i64>, <2 x i64>* %dif_h339, align 16
  store <2 x i64> %1732, <2 x i64>* %__a.addr.i451, align 16
  store i32 17, i32* %__count.addr.i, align 4
  %1733 = load <2 x i64>, <2 x i64>* %__a.addr.i451, align 16
  %1734 = bitcast <2 x i64> %1733 to <4 x i32>
  %1735 = load i32, i32* %__count.addr.i, align 4
  %1736 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1734, i32 %1735) #10
  %1737 = bitcast <4 x i32> %1736 to <2 x i64>
  store <2 x i64> %1731, <2 x i64>* %__a.addr.i449, align 16
  store <2 x i64> %1737, <2 x i64>* %__b.addr.i450, align 16
  %1738 = load <2 x i64>, <2 x i64>* %__a.addr.i449, align 16
  %1739 = bitcast <2 x i64> %1738 to <4 x i32>
  %1740 = load <2 x i64>, <2 x i64>* %__b.addr.i450, align 16
  %1741 = bitcast <2 x i64> %1740 to <4 x i32>
  %1742 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1739, <4 x i32> %1741) #10
  %1743 = bitcast <8 x i16> %1742 to <2 x i64>
  store <2 x i64> %1743, <2 x i64>* %row4, align 16
  %1744 = load <2 x i64>, <2 x i64>* %row0, align 16
  %1745 = load <2 x i64>, <2 x i64>* %row1, align 16
  store <2 x i64> %1744, <2 x i64>* %__a.addr.i447, align 16
  store <2 x i64> %1745, <2 x i64>* %__b.addr.i448, align 16
  %1746 = load <2 x i64>, <2 x i64>* %__a.addr.i447, align 16
  %1747 = bitcast <2 x i64> %1746 to <8 x i16>
  %1748 = load <2 x i64>, <2 x i64>* %__b.addr.i448, align 16
  %1749 = bitcast <2 x i64> %1748 to <8 x i16>
  %1750 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1747, <8 x i16> %1749) #10
  %1751 = bitcast <16 x i8> %1750 to <2 x i64>
  store <2 x i64> %1751, <2 x i64>* %p0, align 16
  %1752 = load <2 x i64>, <2 x i64>* %row2, align 16
  %1753 = load <2 x i64>, <2 x i64>* %row3, align 16
  store <2 x i64> %1752, <2 x i64>* %__a.addr.i445, align 16
  store <2 x i64> %1753, <2 x i64>* %__b.addr.i446, align 16
  %1754 = load <2 x i64>, <2 x i64>* %__a.addr.i445, align 16
  %1755 = bitcast <2 x i64> %1754 to <8 x i16>
  %1756 = load <2 x i64>, <2 x i64>* %__b.addr.i446, align 16
  %1757 = bitcast <2 x i64> %1756 to <8 x i16>
  %1758 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1755, <8 x i16> %1757) #10
  %1759 = bitcast <16 x i8> %1758 to <2 x i64>
  store <2 x i64> %1759, <2 x i64>* %p1, align 16
  %1760 = load <2 x i64>, <2 x i64>* %row4, align 16
  %1761 = load <2 x i64>, <2 x i64>* %row5, align 16
  store <2 x i64> %1760, <2 x i64>* %__a.addr.i443, align 16
  store <2 x i64> %1761, <2 x i64>* %__b.addr.i444, align 16
  %1762 = load <2 x i64>, <2 x i64>* %__a.addr.i443, align 16
  %1763 = bitcast <2 x i64> %1762 to <8 x i16>
  %1764 = load <2 x i64>, <2 x i64>* %__b.addr.i444, align 16
  %1765 = bitcast <2 x i64> %1764 to <8 x i16>
  %1766 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1763, <8 x i16> %1765) #10
  %1767 = bitcast <16 x i8> %1766 to <2 x i64>
  store <2 x i64> %1767, <2 x i64>* %p2, align 16
  %1768 = load <2 x i64>, <2 x i64>* %row6, align 16
  %1769 = load <2 x i64>, <2 x i64>* %row7, align 16
  store <2 x i64> %1768, <2 x i64>* %__a.addr.i441, align 16
  store <2 x i64> %1769, <2 x i64>* %__b.addr.i442, align 16
  %1770 = load <2 x i64>, <2 x i64>* %__a.addr.i441, align 16
  %1771 = bitcast <2 x i64> %1770 to <8 x i16>
  %1772 = load <2 x i64>, <2 x i64>* %__b.addr.i442, align 16
  %1773 = bitcast <2 x i64> %1772 to <8 x i16>
  %1774 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1771, <8 x i16> %1773) #10
  %1775 = bitcast <16 x i8> %1774 to <2 x i64>
  store <2 x i64> %1775, <2 x i64>* %p3, align 16
  %1776 = load <2 x i64>, <2 x i64>* %p0, align 16
  store <2 x i64> %1776, <2 x i64>* %tmp, align 16
  %1777 = load <2 x i64>, <2 x i64>* %p0, align 16
  %1778 = load <2 x i64>, <2 x i64>* %p2, align 16
  store <2 x i64> %1777, <2 x i64>* %__a.addr.i438, align 16
  store <2 x i64> %1778, <2 x i64>* %__b.addr.i439, align 16
  %1779 = load <2 x i64>, <2 x i64>* %__a.addr.i438, align 16
  %1780 = bitcast <2 x i64> %1779 to <16 x i8>
  %1781 = load <2 x i64>, <2 x i64>* %__b.addr.i439, align 16
  %1782 = bitcast <2 x i64> %1781 to <16 x i8>
  %shuffle.i440 = shufflevector <16 x i8> %1780, <16 x i8> %1782, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1783 = bitcast <16 x i8> %shuffle.i440 to <2 x i64>
  store <2 x i64> %1783, <2 x i64>* %p0, align 16
  %1784 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %1785 = load <2 x i64>, <2 x i64>* %p2, align 16
  store <2 x i64> %1784, <2 x i64>* %__a.addr.i435, align 16
  store <2 x i64> %1785, <2 x i64>* %__b.addr.i436, align 16
  %1786 = load <2 x i64>, <2 x i64>* %__a.addr.i435, align 16
  %1787 = bitcast <2 x i64> %1786 to <16 x i8>
  %1788 = load <2 x i64>, <2 x i64>* %__b.addr.i436, align 16
  %1789 = bitcast <2 x i64> %1788 to <16 x i8>
  %shuffle.i437 = shufflevector <16 x i8> %1787, <16 x i8> %1789, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1790 = bitcast <16 x i8> %shuffle.i437 to <2 x i64>
  store <2 x i64> %1790, <2 x i64>* %p2, align 16
  %1791 = load <2 x i64>, <2 x i64>* %p1, align 16
  store <2 x i64> %1791, <2 x i64>* %tmp, align 16
  %1792 = load <2 x i64>, <2 x i64>* %p1, align 16
  %1793 = load <2 x i64>, <2 x i64>* %p3, align 16
  store <2 x i64> %1792, <2 x i64>* %__a.addr.i432, align 16
  store <2 x i64> %1793, <2 x i64>* %__b.addr.i433, align 16
  %1794 = load <2 x i64>, <2 x i64>* %__a.addr.i432, align 16
  %1795 = bitcast <2 x i64> %1794 to <16 x i8>
  %1796 = load <2 x i64>, <2 x i64>* %__b.addr.i433, align 16
  %1797 = bitcast <2 x i64> %1796 to <16 x i8>
  %shuffle.i434 = shufflevector <16 x i8> %1795, <16 x i8> %1797, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1798 = bitcast <16 x i8> %shuffle.i434 to <2 x i64>
  store <2 x i64> %1798, <2 x i64>* %p1, align 16
  %1799 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %1800 = load <2 x i64>, <2 x i64>* %p3, align 16
  store <2 x i64> %1799, <2 x i64>* %__a.addr.i429, align 16
  store <2 x i64> %1800, <2 x i64>* %__b.addr.i430, align 16
  %1801 = load <2 x i64>, <2 x i64>* %__a.addr.i429, align 16
  %1802 = bitcast <2 x i64> %1801 to <16 x i8>
  %1803 = load <2 x i64>, <2 x i64>* %__b.addr.i430, align 16
  %1804 = bitcast <2 x i64> %1803 to <16 x i8>
  %shuffle.i431 = shufflevector <16 x i8> %1802, <16 x i8> %1804, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1805 = bitcast <16 x i8> %shuffle.i431 to <2 x i64>
  store <2 x i64> %1805, <2 x i64>* %p3, align 16
  %1806 = load <2 x i64>, <2 x i64>* %p0, align 16
  store <2 x i64> %1806, <2 x i64>* %tmp, align 16
  %1807 = load <2 x i64>, <2 x i64>* %p0, align 16
  %1808 = load <2 x i64>, <2 x i64>* %p1, align 16
  store <2 x i64> %1807, <2 x i64>* %__a.addr.i426, align 16
  store <2 x i64> %1808, <2 x i64>* %__b.addr.i427, align 16
  %1809 = load <2 x i64>, <2 x i64>* %__a.addr.i426, align 16
  %1810 = bitcast <2 x i64> %1809 to <16 x i8>
  %1811 = load <2 x i64>, <2 x i64>* %__b.addr.i427, align 16
  %1812 = bitcast <2 x i64> %1811 to <16 x i8>
  %shuffle.i428 = shufflevector <16 x i8> %1810, <16 x i8> %1812, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1813 = bitcast <16 x i8> %shuffle.i428 to <2 x i64>
  store <2 x i64> %1813, <2 x i64>* %p0, align 16
  %1814 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %1815 = load <2 x i64>, <2 x i64>* %p1, align 16
  store <2 x i64> %1814, <2 x i64>* %__a.addr.i423, align 16
  store <2 x i64> %1815, <2 x i64>* %__b.addr.i424, align 16
  %1816 = load <2 x i64>, <2 x i64>* %__a.addr.i423, align 16
  %1817 = bitcast <2 x i64> %1816 to <16 x i8>
  %1818 = load <2 x i64>, <2 x i64>* %__b.addr.i424, align 16
  %1819 = bitcast <2 x i64> %1818 to <16 x i8>
  %shuffle.i425 = shufflevector <16 x i8> %1817, <16 x i8> %1819, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1820 = bitcast <16 x i8> %shuffle.i425 to <2 x i64>
  store <2 x i64> %1820, <2 x i64>* %p1, align 16
  %1821 = load <2 x i64>, <2 x i64>* %p2, align 16
  store <2 x i64> %1821, <2 x i64>* %tmp, align 16
  %1822 = load <2 x i64>, <2 x i64>* %p2, align 16
  %1823 = load <2 x i64>, <2 x i64>* %p3, align 16
  store <2 x i64> %1822, <2 x i64>* %__a.addr.i420, align 16
  store <2 x i64> %1823, <2 x i64>* %__b.addr.i421, align 16
  %1824 = load <2 x i64>, <2 x i64>* %__a.addr.i420, align 16
  %1825 = bitcast <2 x i64> %1824 to <16 x i8>
  %1826 = load <2 x i64>, <2 x i64>* %__b.addr.i421, align 16
  %1827 = bitcast <2 x i64> %1826 to <16 x i8>
  %shuffle.i422 = shufflevector <16 x i8> %1825, <16 x i8> %1827, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1828 = bitcast <16 x i8> %shuffle.i422 to <2 x i64>
  store <2 x i64> %1828, <2 x i64>* %p2, align 16
  %1829 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %1830 = load <2 x i64>, <2 x i64>* %p3, align 16
  store <2 x i64> %1829, <2 x i64>* %__a.addr.i417, align 16
  store <2 x i64> %1830, <2 x i64>* %__b.addr.i418, align 16
  %1831 = load <2 x i64>, <2 x i64>* %__a.addr.i417, align 16
  %1832 = bitcast <2 x i64> %1831 to <16 x i8>
  %1833 = load <2 x i64>, <2 x i64>* %__b.addr.i418, align 16
  %1834 = bitcast <2 x i64> %1833 to <16 x i8>
  %shuffle.i419 = shufflevector <16 x i8> %1832, <16 x i8> %1834, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1835 = bitcast <16 x i8> %shuffle.i419 to <2 x i64>
  store <2 x i64> %1835, <2 x i64>* %p3, align 16
  %1836 = load <2 x i64>, <2 x i64>* %p0, align 16
  store <2 x i64> %1836, <2 x i64>* %tmp, align 16
  %1837 = load <2 x i64>, <2 x i64>* %p0, align 16
  %1838 = load <2 x i64>, <2 x i64>* %p2, align 16
  store <2 x i64> %1837, <2 x i64>* %__a.addr.i414, align 16
  store <2 x i64> %1838, <2 x i64>* %__b.addr.i415, align 16
  %1839 = load <2 x i64>, <2 x i64>* %__a.addr.i414, align 16
  %1840 = bitcast <2 x i64> %1839 to <16 x i8>
  %1841 = load <2 x i64>, <2 x i64>* %__b.addr.i415, align 16
  %1842 = bitcast <2 x i64> %1841 to <16 x i8>
  %shuffle.i416 = shufflevector <16 x i8> %1840, <16 x i8> %1842, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1843 = bitcast <16 x i8> %shuffle.i416 to <2 x i64>
  store <2 x i64> %1843, <2 x i64>* %p0, align 16
  %1844 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %1845 = load <2 x i64>, <2 x i64>* %p2, align 16
  store <2 x i64> %1844, <2 x i64>* %__a.addr.i411, align 16
  store <2 x i64> %1845, <2 x i64>* %__b.addr.i412, align 16
  %1846 = load <2 x i64>, <2 x i64>* %__a.addr.i411, align 16
  %1847 = bitcast <2 x i64> %1846 to <16 x i8>
  %1848 = load <2 x i64>, <2 x i64>* %__b.addr.i412, align 16
  %1849 = bitcast <2 x i64> %1848 to <16 x i8>
  %shuffle.i413 = shufflevector <16 x i8> %1847, <16 x i8> %1849, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1850 = bitcast <16 x i8> %shuffle.i413 to <2 x i64>
  store <2 x i64> %1850, <2 x i64>* %p2, align 16
  %1851 = load <2 x i64>, <2 x i64>* %p1, align 16
  store <2 x i64> %1851, <2 x i64>* %tmp, align 16
  %1852 = load <2 x i64>, <2 x i64>* %p1, align 16
  %1853 = load <2 x i64>, <2 x i64>* %p3, align 16
  store <2 x i64> %1852, <2 x i64>* %__a.addr.i408, align 16
  store <2 x i64> %1853, <2 x i64>* %__b.addr.i409, align 16
  %1854 = load <2 x i64>, <2 x i64>* %__a.addr.i408, align 16
  %1855 = bitcast <2 x i64> %1854 to <16 x i8>
  %1856 = load <2 x i64>, <2 x i64>* %__b.addr.i409, align 16
  %1857 = bitcast <2 x i64> %1856 to <16 x i8>
  %shuffle.i410 = shufflevector <16 x i8> %1855, <16 x i8> %1857, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1858 = bitcast <16 x i8> %shuffle.i410 to <2 x i64>
  store <2 x i64> %1858, <2 x i64>* %p1, align 16
  %1859 = load <2 x i64>, <2 x i64>* %tmp, align 16
  %1860 = load <2 x i64>, <2 x i64>* %p3, align 16
  store <2 x i64> %1859, <2 x i64>* %__a.addr.i407, align 16
  store <2 x i64> %1860, <2 x i64>* %__b.addr.i, align 16
  %1861 = load <2 x i64>, <2 x i64>* %__a.addr.i407, align 16
  %1862 = bitcast <2 x i64> %1861 to <16 x i8>
  %1863 = load <2 x i64>, <2 x i64>* %__b.addr.i, align 16
  %1864 = bitcast <2 x i64> %1863 to <16 x i8>
  %shuffle.i = shufflevector <16 x i8> %1862, <16 x i8> %1864, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1865 = bitcast <16 x i8> %shuffle.i to <2 x i64>
  store <2 x i64> %1865, <2 x i64>* %p3, align 16
  %1866 = load i8*, i8** %out.addr, align 8
  %1867 = bitcast i8* %1866 to <2 x i64>*
  %1868 = load <2 x i64>, <2 x i64>* %p0, align 16
  store <2 x i64>* %1867, <2 x i64>** %__p.addr.i403, align 8
  store <2 x i64> %1868, <2 x i64>* %__a.addr.i404, align 16
  %1869 = load <2 x i64>, <2 x i64>* %__a.addr.i404, align 16
  %vecext.i405 = extractelement <2 x i64> %1869, i32 0
  %1870 = load <2 x i64>*, <2 x i64>** %__p.addr.i403, align 8
  %1871 = bitcast <2 x i64>* %1870 to %struct.__mm_loadl_epi64_struct*
  %__u.i406 = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %1871, i32 0, i32 0
  store i64 %vecext.i405, i64* %__u.i406, align 1
  %1872 = load i32, i32* %out_stride.addr, align 4
  %1873 = load i8*, i8** %out.addr, align 8
  %idx.ext = sext i32 %1872 to i64
  %add.ptr363 = getelementptr inbounds i8, i8* %1873, i64 %idx.ext
  store i8* %add.ptr363, i8** %out.addr, align 8
  %1874 = load i8*, i8** %out.addr, align 8
  %1875 = bitcast i8* %1874 to <2 x i64>*
  %1876 = load <2 x i64>, <2 x i64>* %p0, align 16
  %1877 = bitcast <2 x i64> %1876 to <4 x i32>
  %permil = shufflevector <4 x i32> %1877, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1878 = bitcast <4 x i32> %permil to <2 x i64>
  store <2 x i64>* %1875, <2 x i64>** %__p.addr.i399, align 8
  store <2 x i64> %1878, <2 x i64>* %__a.addr.i400, align 16
  %1879 = load <2 x i64>, <2 x i64>* %__a.addr.i400, align 16
  %vecext.i401 = extractelement <2 x i64> %1879, i32 0
  %1880 = load <2 x i64>*, <2 x i64>** %__p.addr.i399, align 8
  %1881 = bitcast <2 x i64>* %1880 to %struct.__mm_loadl_epi64_struct*
  %__u.i402 = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %1881, i32 0, i32 0
  store i64 %vecext.i401, i64* %__u.i402, align 1
  %1882 = load i32, i32* %out_stride.addr, align 4
  %1883 = load i8*, i8** %out.addr, align 8
  %idx.ext364 = sext i32 %1882 to i64
  %add.ptr365 = getelementptr inbounds i8, i8* %1883, i64 %idx.ext364
  store i8* %add.ptr365, i8** %out.addr, align 8
  %1884 = load i8*, i8** %out.addr, align 8
  %1885 = bitcast i8* %1884 to <2 x i64>*
  %1886 = load <2 x i64>, <2 x i64>* %p2, align 16
  store <2 x i64>* %1885, <2 x i64>** %__p.addr.i395, align 8
  store <2 x i64> %1886, <2 x i64>* %__a.addr.i396, align 16
  %1887 = load <2 x i64>, <2 x i64>* %__a.addr.i396, align 16
  %vecext.i397 = extractelement <2 x i64> %1887, i32 0
  %1888 = load <2 x i64>*, <2 x i64>** %__p.addr.i395, align 8
  %1889 = bitcast <2 x i64>* %1888 to %struct.__mm_loadl_epi64_struct*
  %__u.i398 = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %1889, i32 0, i32 0
  store i64 %vecext.i397, i64* %__u.i398, align 1
  %1890 = load i32, i32* %out_stride.addr, align 4
  %1891 = load i8*, i8** %out.addr, align 8
  %idx.ext366 = sext i32 %1890 to i64
  %add.ptr367 = getelementptr inbounds i8, i8* %1891, i64 %idx.ext366
  store i8* %add.ptr367, i8** %out.addr, align 8
  %1892 = load i8*, i8** %out.addr, align 8
  %1893 = bitcast i8* %1892 to <2 x i64>*
  %1894 = load <2 x i64>, <2 x i64>* %p2, align 16
  %1895 = bitcast <2 x i64> %1894 to <4 x i32>
  %permil368 = shufflevector <4 x i32> %1895, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1896 = bitcast <4 x i32> %permil368 to <2 x i64>
  store <2 x i64>* %1893, <2 x i64>** %__p.addr.i391, align 8
  store <2 x i64> %1896, <2 x i64>* %__a.addr.i392, align 16
  %1897 = load <2 x i64>, <2 x i64>* %__a.addr.i392, align 16
  %vecext.i393 = extractelement <2 x i64> %1897, i32 0
  %1898 = load <2 x i64>*, <2 x i64>** %__p.addr.i391, align 8
  %1899 = bitcast <2 x i64>* %1898 to %struct.__mm_loadl_epi64_struct*
  %__u.i394 = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %1899, i32 0, i32 0
  store i64 %vecext.i393, i64* %__u.i394, align 1
  %1900 = load i32, i32* %out_stride.addr, align 4
  %1901 = load i8*, i8** %out.addr, align 8
  %idx.ext369 = sext i32 %1900 to i64
  %add.ptr370 = getelementptr inbounds i8, i8* %1901, i64 %idx.ext369
  store i8* %add.ptr370, i8** %out.addr, align 8
  %1902 = load i8*, i8** %out.addr, align 8
  %1903 = bitcast i8* %1902 to <2 x i64>*
  %1904 = load <2 x i64>, <2 x i64>* %p1, align 16
  store <2 x i64>* %1903, <2 x i64>** %__p.addr.i387, align 8
  store <2 x i64> %1904, <2 x i64>* %__a.addr.i388, align 16
  %1905 = load <2 x i64>, <2 x i64>* %__a.addr.i388, align 16
  %vecext.i389 = extractelement <2 x i64> %1905, i32 0
  %1906 = load <2 x i64>*, <2 x i64>** %__p.addr.i387, align 8
  %1907 = bitcast <2 x i64>* %1906 to %struct.__mm_loadl_epi64_struct*
  %__u.i390 = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %1907, i32 0, i32 0
  store i64 %vecext.i389, i64* %__u.i390, align 1
  %1908 = load i32, i32* %out_stride.addr, align 4
  %1909 = load i8*, i8** %out.addr, align 8
  %idx.ext371 = sext i32 %1908 to i64
  %add.ptr372 = getelementptr inbounds i8, i8* %1909, i64 %idx.ext371
  store i8* %add.ptr372, i8** %out.addr, align 8
  %1910 = load i8*, i8** %out.addr, align 8
  %1911 = bitcast i8* %1910 to <2 x i64>*
  %1912 = load <2 x i64>, <2 x i64>* %p1, align 16
  %1913 = bitcast <2 x i64> %1912 to <4 x i32>
  %permil373 = shufflevector <4 x i32> %1913, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1914 = bitcast <4 x i32> %permil373 to <2 x i64>
  store <2 x i64>* %1911, <2 x i64>** %__p.addr.i383, align 8
  store <2 x i64> %1914, <2 x i64>* %__a.addr.i384, align 16
  %1915 = load <2 x i64>, <2 x i64>* %__a.addr.i384, align 16
  %vecext.i385 = extractelement <2 x i64> %1915, i32 0
  %1916 = load <2 x i64>*, <2 x i64>** %__p.addr.i383, align 8
  %1917 = bitcast <2 x i64>* %1916 to %struct.__mm_loadl_epi64_struct*
  %__u.i386 = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %1917, i32 0, i32 0
  store i64 %vecext.i385, i64* %__u.i386, align 1
  %1918 = load i32, i32* %out_stride.addr, align 4
  %1919 = load i8*, i8** %out.addr, align 8
  %idx.ext374 = sext i32 %1918 to i64
  %add.ptr375 = getelementptr inbounds i8, i8* %1919, i64 %idx.ext374
  store i8* %add.ptr375, i8** %out.addr, align 8
  %1920 = load i8*, i8** %out.addr, align 8
  %1921 = bitcast i8* %1920 to <2 x i64>*
  %1922 = load <2 x i64>, <2 x i64>* %p3, align 16
  store <2 x i64>* %1921, <2 x i64>** %__p.addr.i379, align 8
  store <2 x i64> %1922, <2 x i64>* %__a.addr.i380, align 16
  %1923 = load <2 x i64>, <2 x i64>* %__a.addr.i380, align 16
  %vecext.i381 = extractelement <2 x i64> %1923, i32 0
  %1924 = load <2 x i64>*, <2 x i64>** %__p.addr.i379, align 8
  %1925 = bitcast <2 x i64>* %1924 to %struct.__mm_loadl_epi64_struct*
  %__u.i382 = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %1925, i32 0, i32 0
  store i64 %vecext.i381, i64* %__u.i382, align 1
  %1926 = load i32, i32* %out_stride.addr, align 4
  %1927 = load i8*, i8** %out.addr, align 8
  %idx.ext376 = sext i32 %1926 to i64
  %add.ptr377 = getelementptr inbounds i8, i8* %1927, i64 %idx.ext376
  store i8* %add.ptr377, i8** %out.addr, align 8
  %1928 = load i8*, i8** %out.addr, align 8
  %1929 = bitcast i8* %1928 to <2 x i64>*
  %1930 = load <2 x i64>, <2 x i64>* %p3, align 16
  %1931 = bitcast <2 x i64> %1930 to <4 x i32>
  %permil378 = shufflevector <4 x i32> %1931, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1932 = bitcast <4 x i32> %permil378 to <2 x i64>
  store <2 x i64>* %1929, <2 x i64>** %__p.addr.i, align 8
  store <2 x i64> %1932, <2 x i64>* %__a.addr.i, align 16
  %1933 = load <2 x i64>, <2 x i64>* %__a.addr.i, align 16
  %vecext.i = extractelement <2 x i64> %1933, i32 0
  %1934 = load <2 x i64>*, <2 x i64>** %__p.addr.i, align 8
  %1935 = bitcast <2 x i64>* %1934 to %struct.__mm_loadl_epi64_struct*
  %__u.i = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %1935, i32 0, i32 0
  store i64 %vecext.i, i64* %__u.i, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__YCbCr_to_RGB_simd(i8* %out, i8* %y, i8* %pcb, i8* %pcr, i32 %count, i32 %step) #8 {
entry:
  %__w7.addr.i.i269 = alloca i16, align 2
  %__w6.addr.i.i270 = alloca i16, align 2
  %__w5.addr.i.i271 = alloca i16, align 2
  %__w4.addr.i.i272 = alloca i16, align 2
  %__w3.addr.i.i273 = alloca i16, align 2
  %__w2.addr.i.i274 = alloca i16, align 2
  %__w1.addr.i.i275 = alloca i16, align 2
  %__w0.addr.i.i276 = alloca i16, align 2
  %.compoundliteral.i.i277 = alloca <8 x i16>, align 16
  %__w.addr.i278 = alloca i16, align 2
  %__w7.addr.i.i251 = alloca i16, align 2
  %__w6.addr.i.i252 = alloca i16, align 2
  %__w5.addr.i.i253 = alloca i16, align 2
  %__w4.addr.i.i254 = alloca i16, align 2
  %__w3.addr.i.i255 = alloca i16, align 2
  %__w2.addr.i.i256 = alloca i16, align 2
  %__w1.addr.i.i257 = alloca i16, align 2
  %__w0.addr.i.i258 = alloca i16, align 2
  %.compoundliteral.i.i259 = alloca <8 x i16>, align 16
  %__w.addr.i260 = alloca i16, align 2
  %__w7.addr.i.i233 = alloca i16, align 2
  %__w6.addr.i.i234 = alloca i16, align 2
  %__w5.addr.i.i235 = alloca i16, align 2
  %__w4.addr.i.i236 = alloca i16, align 2
  %__w3.addr.i.i237 = alloca i16, align 2
  %__w2.addr.i.i238 = alloca i16, align 2
  %__w1.addr.i.i239 = alloca i16, align 2
  %__w0.addr.i.i240 = alloca i16, align 2
  %.compoundliteral.i.i241 = alloca <8 x i16>, align 16
  %__w.addr.i242 = alloca i16, align 2
  %__w7.addr.i.i215 = alloca i16, align 2
  %__w6.addr.i.i216 = alloca i16, align 2
  %__w5.addr.i.i217 = alloca i16, align 2
  %__w4.addr.i.i218 = alloca i16, align 2
  %__w3.addr.i.i219 = alloca i16, align 2
  %__w2.addr.i.i220 = alloca i16, align 2
  %__w1.addr.i.i221 = alloca i16, align 2
  %__w0.addr.i.i222 = alloca i16, align 2
  %.compoundliteral.i.i223 = alloca <8 x i16>, align 16
  %__w.addr.i224 = alloca i16, align 2
  %__b15.addr.i.i181 = alloca i8, align 1
  %__b14.addr.i.i182 = alloca i8, align 1
  %__b13.addr.i.i183 = alloca i8, align 1
  %__b12.addr.i.i184 = alloca i8, align 1
  %__b11.addr.i.i185 = alloca i8, align 1
  %__b10.addr.i.i186 = alloca i8, align 1
  %__b9.addr.i.i187 = alloca i8, align 1
  %__b8.addr.i.i188 = alloca i8, align 1
  %__b7.addr.i.i189 = alloca i8, align 1
  %__b6.addr.i.i190 = alloca i8, align 1
  %__b5.addr.i.i191 = alloca i8, align 1
  %__b4.addr.i.i192 = alloca i8, align 1
  %__b3.addr.i.i193 = alloca i8, align 1
  %__b2.addr.i.i194 = alloca i8, align 1
  %__b1.addr.i.i195 = alloca i8, align 1
  %__b0.addr.i.i196 = alloca i8, align 1
  %.compoundliteral.i.i197 = alloca <16 x i8>, align 16
  %__b.addr.i198 = alloca i8, align 1
  %__w7.addr.i.i = alloca i16, align 2
  %__w6.addr.i.i = alloca i16, align 2
  %__w5.addr.i.i = alloca i16, align 2
  %__w4.addr.i.i = alloca i16, align 2
  %__w3.addr.i.i = alloca i16, align 2
  %__w2.addr.i.i = alloca i16, align 2
  %__w1.addr.i.i = alloca i16, align 2
  %__w0.addr.i.i = alloca i16, align 2
  %.compoundliteral.i.i172 = alloca <8 x i16>, align 16
  %__w.addr.i = alloca i16, align 2
  %__p.addr.i167 = alloca <2 x i64>*, align 8
  %.compoundliteral.i168 = alloca <2 x i64>, align 16
  %__p.addr.i162 = alloca <2 x i64>*, align 8
  %.compoundliteral.i163 = alloca <2 x i64>, align 16
  %__p.addr.i160 = alloca <2 x i64>*, align 8
  %.compoundliteral.i161 = alloca <2 x i64>, align 16
  %__a.addr.i157 = alloca <2 x i64>, align 16
  %__b.addr.i158 = alloca <2 x i64>, align 16
  %__a.addr.i155 = alloca <2 x i64>, align 16
  %__b.addr.i156 = alloca <2 x i64>, align 16
  %__a.addr.i152 = alloca <2 x i64>, align 16
  %__b.addr.i153 = alloca <2 x i64>, align 16
  %.compoundliteral.i151 = alloca <2 x i64>, align 16
  %__a.addr.i148 = alloca <2 x i64>, align 16
  %__b.addr.i149 = alloca <2 x i64>, align 16
  %.compoundliteral.i = alloca <2 x i64>, align 16
  %__a.addr.i145 = alloca <2 x i64>, align 16
  %__b.addr.i146 = alloca <2 x i64>, align 16
  %__a.addr.i143 = alloca <2 x i64>, align 16
  %__count.addr.i144 = alloca i32, align 4
  %__a.addr.i141 = alloca <2 x i64>, align 16
  %__b.addr.i142 = alloca <2 x i64>, align 16
  %__a.addr.i139 = alloca <2 x i64>, align 16
  %__b.addr.i140 = alloca <2 x i64>, align 16
  %__a.addr.i137 = alloca <2 x i64>, align 16
  %__b.addr.i138 = alloca <2 x i64>, align 16
  %__a.addr.i135 = alloca <2 x i64>, align 16
  %__b.addr.i136 = alloca <2 x i64>, align 16
  %__a.addr.i132 = alloca <2 x i64>, align 16
  %__b.addr.i133 = alloca <2 x i64>, align 16
  %__a.addr.i129 = alloca <2 x i64>, align 16
  %__b.addr.i130 = alloca <2 x i64>, align 16
  %__a.addr.i126 = alloca <2 x i64>, align 16
  %__b.addr.i127 = alloca <2 x i64>, align 16
  %__a.addr.i124 = alloca <2 x i64>, align 16
  %__b.addr.i125 = alloca <2 x i64>, align 16
  %__a.addr.i122 = alloca <2 x i64>, align 16
  %__count.addr.i123 = alloca i32, align 4
  %__a.addr.i120 = alloca <2 x i64>, align 16
  %__count.addr.i121 = alloca i32, align 4
  %__a.addr.i119 = alloca <2 x i64>, align 16
  %__count.addr.i = alloca i32, align 4
  %__a.addr.i117 = alloca <2 x i64>, align 16
  %__b.addr.i118 = alloca <2 x i64>, align 16
  %__a.addr.i115 = alloca <2 x i64>, align 16
  %__b.addr.i116 = alloca <2 x i64>, align 16
  %__a.addr.i112 = alloca <2 x i64>, align 16
  %__b.addr.i113 = alloca <2 x i64>, align 16
  %__a.addr.i109 = alloca <2 x i64>, align 16
  %__b.addr.i110 = alloca <2 x i64>, align 16
  %__a.addr.i106 = alloca <2 x i64>, align 16
  %__b.addr.i107 = alloca <2 x i64>, align 16
  %__a.addr.i = alloca <2 x i64>, align 16
  %__b.addr.i105 = alloca <2 x i64>, align 16
  %__p.addr.i102 = alloca <2 x i64>*, align 8
  %__b.addr.i103 = alloca <2 x i64>, align 16
  %__p.addr.i = alloca <2 x i64>*, align 8
  %__b.addr.i101 = alloca <2 x i64>, align 16
  %__b15.addr.i.i = alloca i8, align 1
  %__b14.addr.i.i = alloca i8, align 1
  %__b13.addr.i.i = alloca i8, align 1
  %__b12.addr.i.i = alloca i8, align 1
  %__b11.addr.i.i = alloca i8, align 1
  %__b10.addr.i.i = alloca i8, align 1
  %__b9.addr.i.i = alloca i8, align 1
  %__b8.addr.i.i = alloca i8, align 1
  %__b7.addr.i.i = alloca i8, align 1
  %__b6.addr.i.i = alloca i8, align 1
  %__b5.addr.i.i = alloca i8, align 1
  %__b4.addr.i.i = alloca i8, align 1
  %__b3.addr.i.i = alloca i8, align 1
  %__b2.addr.i.i = alloca i8, align 1
  %__b1.addr.i.i = alloca i8, align 1
  %__b0.addr.i.i = alloca i8, align 1
  %.compoundliteral.i.i = alloca <16 x i8>, align 16
  %__b.addr.i = alloca i8, align 1
  %out.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %pcb.addr = alloca i8*, align 8
  %pcr.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %signflip = alloca <2 x i64>, align 16
  %cr_const0 = alloca <2 x i64>, align 16
  %cr_const1 = alloca <2 x i64>, align 16
  %cb_const0 = alloca <2 x i64>, align 16
  %cb_const1 = alloca <2 x i64>, align 16
  %y_bias = alloca <2 x i64>, align 16
  %xw = alloca <2 x i64>, align 16
  %y_bytes = alloca <2 x i64>, align 16
  %cr_bytes = alloca <2 x i64>, align 16
  %cb_bytes = alloca <2 x i64>, align 16
  %cr_biased = alloca <2 x i64>, align 16
  %cb_biased = alloca <2 x i64>, align 16
  %yw = alloca <2 x i64>, align 16
  %crw = alloca <2 x i64>, align 16
  %cbw = alloca <2 x i64>, align 16
  %yws = alloca <2 x i64>, align 16
  %cr0 = alloca <2 x i64>, align 16
  %cb0 = alloca <2 x i64>, align 16
  %cb1 = alloca <2 x i64>, align 16
  %cr1 = alloca <2 x i64>, align 16
  %rws = alloca <2 x i64>, align 16
  %gwt = alloca <2 x i64>, align 16
  %bws = alloca <2 x i64>, align 16
  %gws = alloca <2 x i64>, align 16
  %rw = alloca <2 x i64>, align 16
  %bw = alloca <2 x i64>, align 16
  %gw = alloca <2 x i64>, align 16
  %brb = alloca <2 x i64>, align 16
  %gxb = alloca <2 x i64>, align 16
  %t0 = alloca <2 x i64>, align 16
  %t1 = alloca <2 x i64>, align 16
  %o0 = alloca <2 x i64>, align 16
  %o1 = alloca <2 x i64>, align 16
  %y_fixed = alloca i32, align 4
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  %cr = alloca i32, align 4
  %cb = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8
  store i8* %y, i8** %y.addr, align 8
  store i8* %pcb, i8** %pcb.addr, align 8
  store i8* %pcr, i8** %pcr.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load i32, i32* %step.addr, align 4
  %cmp = icmp eq i32 %0, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8 -128, i8* %__b.addr.i, align 1
  %1 = load i8, i8* %__b.addr.i, align 1
  %2 = load i8, i8* %__b.addr.i, align 1
  %3 = load i8, i8* %__b.addr.i, align 1
  %4 = load i8, i8* %__b.addr.i, align 1
  %5 = load i8, i8* %__b.addr.i, align 1
  %6 = load i8, i8* %__b.addr.i, align 1
  %7 = load i8, i8* %__b.addr.i, align 1
  %8 = load i8, i8* %__b.addr.i, align 1
  %9 = load i8, i8* %__b.addr.i, align 1
  %10 = load i8, i8* %__b.addr.i, align 1
  %11 = load i8, i8* %__b.addr.i, align 1
  %12 = load i8, i8* %__b.addr.i, align 1
  %13 = load i8, i8* %__b.addr.i, align 1
  %14 = load i8, i8* %__b.addr.i, align 1
  %15 = load i8, i8* %__b.addr.i, align 1
  %16 = load i8, i8* %__b.addr.i, align 1
  store i8 %1, i8* %__b15.addr.i.i, align 1
  store i8 %2, i8* %__b14.addr.i.i, align 1
  store i8 %3, i8* %__b13.addr.i.i, align 1
  store i8 %4, i8* %__b12.addr.i.i, align 1
  store i8 %5, i8* %__b11.addr.i.i, align 1
  store i8 %6, i8* %__b10.addr.i.i, align 1
  store i8 %7, i8* %__b9.addr.i.i, align 1
  store i8 %8, i8* %__b8.addr.i.i, align 1
  store i8 %9, i8* %__b7.addr.i.i, align 1
  store i8 %10, i8* %__b6.addr.i.i, align 1
  store i8 %11, i8* %__b5.addr.i.i, align 1
  store i8 %12, i8* %__b4.addr.i.i, align 1
  store i8 %13, i8* %__b3.addr.i.i, align 1
  store i8 %14, i8* %__b2.addr.i.i, align 1
  store i8 %15, i8* %__b1.addr.i.i, align 1
  store i8 %16, i8* %__b0.addr.i.i, align 1
  %17 = load i8, i8* %__b0.addr.i.i, align 1
  %vecinit.i.i = insertelement <16 x i8> undef, i8 %17, i32 0
  %18 = load i8, i8* %__b1.addr.i.i, align 1
  %vecinit1.i.i = insertelement <16 x i8> %vecinit.i.i, i8 %18, i32 1
  %19 = load i8, i8* %__b2.addr.i.i, align 1
  %vecinit2.i.i = insertelement <16 x i8> %vecinit1.i.i, i8 %19, i32 2
  %20 = load i8, i8* %__b3.addr.i.i, align 1
  %vecinit3.i.i = insertelement <16 x i8> %vecinit2.i.i, i8 %20, i32 3
  %21 = load i8, i8* %__b4.addr.i.i, align 1
  %vecinit4.i.i = insertelement <16 x i8> %vecinit3.i.i, i8 %21, i32 4
  %22 = load i8, i8* %__b5.addr.i.i, align 1
  %vecinit5.i.i = insertelement <16 x i8> %vecinit4.i.i, i8 %22, i32 5
  %23 = load i8, i8* %__b6.addr.i.i, align 1
  %vecinit6.i.i = insertelement <16 x i8> %vecinit5.i.i, i8 %23, i32 6
  %24 = load i8, i8* %__b7.addr.i.i, align 1
  %vecinit7.i.i = insertelement <16 x i8> %vecinit6.i.i, i8 %24, i32 7
  %25 = load i8, i8* %__b8.addr.i.i, align 1
  %vecinit8.i.i = insertelement <16 x i8> %vecinit7.i.i, i8 %25, i32 8
  %26 = load i8, i8* %__b9.addr.i.i, align 1
  %vecinit9.i.i = insertelement <16 x i8> %vecinit8.i.i, i8 %26, i32 9
  %27 = load i8, i8* %__b10.addr.i.i, align 1
  %vecinit10.i.i = insertelement <16 x i8> %vecinit9.i.i, i8 %27, i32 10
  %28 = load i8, i8* %__b11.addr.i.i, align 1
  %vecinit11.i.i = insertelement <16 x i8> %vecinit10.i.i, i8 %28, i32 11
  %29 = load i8, i8* %__b12.addr.i.i, align 1
  %vecinit12.i.i = insertelement <16 x i8> %vecinit11.i.i, i8 %29, i32 12
  %30 = load i8, i8* %__b13.addr.i.i, align 1
  %vecinit13.i.i = insertelement <16 x i8> %vecinit12.i.i, i8 %30, i32 13
  %31 = load i8, i8* %__b14.addr.i.i, align 1
  %vecinit14.i.i = insertelement <16 x i8> %vecinit13.i.i, i8 %31, i32 14
  %32 = load i8, i8* %__b15.addr.i.i, align 1
  %vecinit15.i.i = insertelement <16 x i8> %vecinit14.i.i, i8 %32, i32 15
  store <16 x i8> %vecinit15.i.i, <16 x i8>* %.compoundliteral.i.i, align 16
  %33 = load <16 x i8>, <16 x i8>* %.compoundliteral.i.i, align 16
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  store <2 x i64> %34, <2 x i64>* %signflip, align 16
  store i16 5743, i16* %__w.addr.i278, align 2
  %35 = load i16, i16* %__w.addr.i278, align 2
  %36 = load i16, i16* %__w.addr.i278, align 2
  %37 = load i16, i16* %__w.addr.i278, align 2
  %38 = load i16, i16* %__w.addr.i278, align 2
  %39 = load i16, i16* %__w.addr.i278, align 2
  %40 = load i16, i16* %__w.addr.i278, align 2
  %41 = load i16, i16* %__w.addr.i278, align 2
  %42 = load i16, i16* %__w.addr.i278, align 2
  store i16 %35, i16* %__w7.addr.i.i269, align 2
  store i16 %36, i16* %__w6.addr.i.i270, align 2
  store i16 %37, i16* %__w5.addr.i.i271, align 2
  store i16 %38, i16* %__w4.addr.i.i272, align 2
  store i16 %39, i16* %__w3.addr.i.i273, align 2
  store i16 %40, i16* %__w2.addr.i.i274, align 2
  store i16 %41, i16* %__w1.addr.i.i275, align 2
  store i16 %42, i16* %__w0.addr.i.i276, align 2
  %43 = load i16, i16* %__w0.addr.i.i276, align 2
  %vecinit.i.i279 = insertelement <8 x i16> undef, i16 %43, i32 0
  %44 = load i16, i16* %__w1.addr.i.i275, align 2
  %vecinit1.i.i280 = insertelement <8 x i16> %vecinit.i.i279, i16 %44, i32 1
  %45 = load i16, i16* %__w2.addr.i.i274, align 2
  %vecinit2.i.i281 = insertelement <8 x i16> %vecinit1.i.i280, i16 %45, i32 2
  %46 = load i16, i16* %__w3.addr.i.i273, align 2
  %vecinit3.i.i282 = insertelement <8 x i16> %vecinit2.i.i281, i16 %46, i32 3
  %47 = load i16, i16* %__w4.addr.i.i272, align 2
  %vecinit4.i.i283 = insertelement <8 x i16> %vecinit3.i.i282, i16 %47, i32 4
  %48 = load i16, i16* %__w5.addr.i.i271, align 2
  %vecinit5.i.i284 = insertelement <8 x i16> %vecinit4.i.i283, i16 %48, i32 5
  %49 = load i16, i16* %__w6.addr.i.i270, align 2
  %vecinit6.i.i285 = insertelement <8 x i16> %vecinit5.i.i284, i16 %49, i32 6
  %50 = load i16, i16* %__w7.addr.i.i269, align 2
  %vecinit7.i.i286 = insertelement <8 x i16> %vecinit6.i.i285, i16 %50, i32 7
  store <8 x i16> %vecinit7.i.i286, <8 x i16>* %.compoundliteral.i.i277, align 16
  %51 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i277, align 16
  %52 = bitcast <8 x i16> %51 to <2 x i64>
  store <2 x i64> %52, <2 x i64>* %cr_const0, align 16
  store i16 -2925, i16* %__w.addr.i260, align 2
  %53 = load i16, i16* %__w.addr.i260, align 2
  %54 = load i16, i16* %__w.addr.i260, align 2
  %55 = load i16, i16* %__w.addr.i260, align 2
  %56 = load i16, i16* %__w.addr.i260, align 2
  %57 = load i16, i16* %__w.addr.i260, align 2
  %58 = load i16, i16* %__w.addr.i260, align 2
  %59 = load i16, i16* %__w.addr.i260, align 2
  %60 = load i16, i16* %__w.addr.i260, align 2
  store i16 %53, i16* %__w7.addr.i.i251, align 2
  store i16 %54, i16* %__w6.addr.i.i252, align 2
  store i16 %55, i16* %__w5.addr.i.i253, align 2
  store i16 %56, i16* %__w4.addr.i.i254, align 2
  store i16 %57, i16* %__w3.addr.i.i255, align 2
  store i16 %58, i16* %__w2.addr.i.i256, align 2
  store i16 %59, i16* %__w1.addr.i.i257, align 2
  store i16 %60, i16* %__w0.addr.i.i258, align 2
  %61 = load i16, i16* %__w0.addr.i.i258, align 2
  %vecinit.i.i261 = insertelement <8 x i16> undef, i16 %61, i32 0
  %62 = load i16, i16* %__w1.addr.i.i257, align 2
  %vecinit1.i.i262 = insertelement <8 x i16> %vecinit.i.i261, i16 %62, i32 1
  %63 = load i16, i16* %__w2.addr.i.i256, align 2
  %vecinit2.i.i263 = insertelement <8 x i16> %vecinit1.i.i262, i16 %63, i32 2
  %64 = load i16, i16* %__w3.addr.i.i255, align 2
  %vecinit3.i.i264 = insertelement <8 x i16> %vecinit2.i.i263, i16 %64, i32 3
  %65 = load i16, i16* %__w4.addr.i.i254, align 2
  %vecinit4.i.i265 = insertelement <8 x i16> %vecinit3.i.i264, i16 %65, i32 4
  %66 = load i16, i16* %__w5.addr.i.i253, align 2
  %vecinit5.i.i266 = insertelement <8 x i16> %vecinit4.i.i265, i16 %66, i32 5
  %67 = load i16, i16* %__w6.addr.i.i252, align 2
  %vecinit6.i.i267 = insertelement <8 x i16> %vecinit5.i.i266, i16 %67, i32 6
  %68 = load i16, i16* %__w7.addr.i.i251, align 2
  %vecinit7.i.i268 = insertelement <8 x i16> %vecinit6.i.i267, i16 %68, i32 7
  store <8 x i16> %vecinit7.i.i268, <8 x i16>* %.compoundliteral.i.i259, align 16
  %69 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i259, align 16
  %70 = bitcast <8 x i16> %69 to <2 x i64>
  store <2 x i64> %70, <2 x i64>* %cr_const1, align 16
  store i16 -1410, i16* %__w.addr.i242, align 2
  %71 = load i16, i16* %__w.addr.i242, align 2
  %72 = load i16, i16* %__w.addr.i242, align 2
  %73 = load i16, i16* %__w.addr.i242, align 2
  %74 = load i16, i16* %__w.addr.i242, align 2
  %75 = load i16, i16* %__w.addr.i242, align 2
  %76 = load i16, i16* %__w.addr.i242, align 2
  %77 = load i16, i16* %__w.addr.i242, align 2
  %78 = load i16, i16* %__w.addr.i242, align 2
  store i16 %71, i16* %__w7.addr.i.i233, align 2
  store i16 %72, i16* %__w6.addr.i.i234, align 2
  store i16 %73, i16* %__w5.addr.i.i235, align 2
  store i16 %74, i16* %__w4.addr.i.i236, align 2
  store i16 %75, i16* %__w3.addr.i.i237, align 2
  store i16 %76, i16* %__w2.addr.i.i238, align 2
  store i16 %77, i16* %__w1.addr.i.i239, align 2
  store i16 %78, i16* %__w0.addr.i.i240, align 2
  %79 = load i16, i16* %__w0.addr.i.i240, align 2
  %vecinit.i.i243 = insertelement <8 x i16> undef, i16 %79, i32 0
  %80 = load i16, i16* %__w1.addr.i.i239, align 2
  %vecinit1.i.i244 = insertelement <8 x i16> %vecinit.i.i243, i16 %80, i32 1
  %81 = load i16, i16* %__w2.addr.i.i238, align 2
  %vecinit2.i.i245 = insertelement <8 x i16> %vecinit1.i.i244, i16 %81, i32 2
  %82 = load i16, i16* %__w3.addr.i.i237, align 2
  %vecinit3.i.i246 = insertelement <8 x i16> %vecinit2.i.i245, i16 %82, i32 3
  %83 = load i16, i16* %__w4.addr.i.i236, align 2
  %vecinit4.i.i247 = insertelement <8 x i16> %vecinit3.i.i246, i16 %83, i32 4
  %84 = load i16, i16* %__w5.addr.i.i235, align 2
  %vecinit5.i.i248 = insertelement <8 x i16> %vecinit4.i.i247, i16 %84, i32 5
  %85 = load i16, i16* %__w6.addr.i.i234, align 2
  %vecinit6.i.i249 = insertelement <8 x i16> %vecinit5.i.i248, i16 %85, i32 6
  %86 = load i16, i16* %__w7.addr.i.i233, align 2
  %vecinit7.i.i250 = insertelement <8 x i16> %vecinit6.i.i249, i16 %86, i32 7
  store <8 x i16> %vecinit7.i.i250, <8 x i16>* %.compoundliteral.i.i241, align 16
  %87 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i241, align 16
  %88 = bitcast <8 x i16> %87 to <2 x i64>
  store <2 x i64> %88, <2 x i64>* %cb_const0, align 16
  store i16 7258, i16* %__w.addr.i224, align 2
  %89 = load i16, i16* %__w.addr.i224, align 2
  %90 = load i16, i16* %__w.addr.i224, align 2
  %91 = load i16, i16* %__w.addr.i224, align 2
  %92 = load i16, i16* %__w.addr.i224, align 2
  %93 = load i16, i16* %__w.addr.i224, align 2
  %94 = load i16, i16* %__w.addr.i224, align 2
  %95 = load i16, i16* %__w.addr.i224, align 2
  %96 = load i16, i16* %__w.addr.i224, align 2
  store i16 %89, i16* %__w7.addr.i.i215, align 2
  store i16 %90, i16* %__w6.addr.i.i216, align 2
  store i16 %91, i16* %__w5.addr.i.i217, align 2
  store i16 %92, i16* %__w4.addr.i.i218, align 2
  store i16 %93, i16* %__w3.addr.i.i219, align 2
  store i16 %94, i16* %__w2.addr.i.i220, align 2
  store i16 %95, i16* %__w1.addr.i.i221, align 2
  store i16 %96, i16* %__w0.addr.i.i222, align 2
  %97 = load i16, i16* %__w0.addr.i.i222, align 2
  %vecinit.i.i225 = insertelement <8 x i16> undef, i16 %97, i32 0
  %98 = load i16, i16* %__w1.addr.i.i221, align 2
  %vecinit1.i.i226 = insertelement <8 x i16> %vecinit.i.i225, i16 %98, i32 1
  %99 = load i16, i16* %__w2.addr.i.i220, align 2
  %vecinit2.i.i227 = insertelement <8 x i16> %vecinit1.i.i226, i16 %99, i32 2
  %100 = load i16, i16* %__w3.addr.i.i219, align 2
  %vecinit3.i.i228 = insertelement <8 x i16> %vecinit2.i.i227, i16 %100, i32 3
  %101 = load i16, i16* %__w4.addr.i.i218, align 2
  %vecinit4.i.i229 = insertelement <8 x i16> %vecinit3.i.i228, i16 %101, i32 4
  %102 = load i16, i16* %__w5.addr.i.i217, align 2
  %vecinit5.i.i230 = insertelement <8 x i16> %vecinit4.i.i229, i16 %102, i32 5
  %103 = load i16, i16* %__w6.addr.i.i216, align 2
  %vecinit6.i.i231 = insertelement <8 x i16> %vecinit5.i.i230, i16 %103, i32 6
  %104 = load i16, i16* %__w7.addr.i.i215, align 2
  %vecinit7.i.i232 = insertelement <8 x i16> %vecinit6.i.i231, i16 %104, i32 7
  store <8 x i16> %vecinit7.i.i232, <8 x i16>* %.compoundliteral.i.i223, align 16
  %105 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i223, align 16
  %106 = bitcast <8 x i16> %105 to <2 x i64>
  store <2 x i64> %106, <2 x i64>* %cb_const1, align 16
  store i8 -128, i8* %__b.addr.i198, align 1
  %107 = load i8, i8* %__b.addr.i198, align 1
  %108 = load i8, i8* %__b.addr.i198, align 1
  %109 = load i8, i8* %__b.addr.i198, align 1
  %110 = load i8, i8* %__b.addr.i198, align 1
  %111 = load i8, i8* %__b.addr.i198, align 1
  %112 = load i8, i8* %__b.addr.i198, align 1
  %113 = load i8, i8* %__b.addr.i198, align 1
  %114 = load i8, i8* %__b.addr.i198, align 1
  %115 = load i8, i8* %__b.addr.i198, align 1
  %116 = load i8, i8* %__b.addr.i198, align 1
  %117 = load i8, i8* %__b.addr.i198, align 1
  %118 = load i8, i8* %__b.addr.i198, align 1
  %119 = load i8, i8* %__b.addr.i198, align 1
  %120 = load i8, i8* %__b.addr.i198, align 1
  %121 = load i8, i8* %__b.addr.i198, align 1
  %122 = load i8, i8* %__b.addr.i198, align 1
  store i8 %107, i8* %__b15.addr.i.i181, align 1
  store i8 %108, i8* %__b14.addr.i.i182, align 1
  store i8 %109, i8* %__b13.addr.i.i183, align 1
  store i8 %110, i8* %__b12.addr.i.i184, align 1
  store i8 %111, i8* %__b11.addr.i.i185, align 1
  store i8 %112, i8* %__b10.addr.i.i186, align 1
  store i8 %113, i8* %__b9.addr.i.i187, align 1
  store i8 %114, i8* %__b8.addr.i.i188, align 1
  store i8 %115, i8* %__b7.addr.i.i189, align 1
  store i8 %116, i8* %__b6.addr.i.i190, align 1
  store i8 %117, i8* %__b5.addr.i.i191, align 1
  store i8 %118, i8* %__b4.addr.i.i192, align 1
  store i8 %119, i8* %__b3.addr.i.i193, align 1
  store i8 %120, i8* %__b2.addr.i.i194, align 1
  store i8 %121, i8* %__b1.addr.i.i195, align 1
  store i8 %122, i8* %__b0.addr.i.i196, align 1
  %123 = load i8, i8* %__b0.addr.i.i196, align 1
  %vecinit.i.i199 = insertelement <16 x i8> undef, i8 %123, i32 0
  %124 = load i8, i8* %__b1.addr.i.i195, align 1
  %vecinit1.i.i200 = insertelement <16 x i8> %vecinit.i.i199, i8 %124, i32 1
  %125 = load i8, i8* %__b2.addr.i.i194, align 1
  %vecinit2.i.i201 = insertelement <16 x i8> %vecinit1.i.i200, i8 %125, i32 2
  %126 = load i8, i8* %__b3.addr.i.i193, align 1
  %vecinit3.i.i202 = insertelement <16 x i8> %vecinit2.i.i201, i8 %126, i32 3
  %127 = load i8, i8* %__b4.addr.i.i192, align 1
  %vecinit4.i.i203 = insertelement <16 x i8> %vecinit3.i.i202, i8 %127, i32 4
  %128 = load i8, i8* %__b5.addr.i.i191, align 1
  %vecinit5.i.i204 = insertelement <16 x i8> %vecinit4.i.i203, i8 %128, i32 5
  %129 = load i8, i8* %__b6.addr.i.i190, align 1
  %vecinit6.i.i205 = insertelement <16 x i8> %vecinit5.i.i204, i8 %129, i32 6
  %130 = load i8, i8* %__b7.addr.i.i189, align 1
  %vecinit7.i.i206 = insertelement <16 x i8> %vecinit6.i.i205, i8 %130, i32 7
  %131 = load i8, i8* %__b8.addr.i.i188, align 1
  %vecinit8.i.i207 = insertelement <16 x i8> %vecinit7.i.i206, i8 %131, i32 8
  %132 = load i8, i8* %__b9.addr.i.i187, align 1
  %vecinit9.i.i208 = insertelement <16 x i8> %vecinit8.i.i207, i8 %132, i32 9
  %133 = load i8, i8* %__b10.addr.i.i186, align 1
  %vecinit10.i.i209 = insertelement <16 x i8> %vecinit9.i.i208, i8 %133, i32 10
  %134 = load i8, i8* %__b11.addr.i.i185, align 1
  %vecinit11.i.i210 = insertelement <16 x i8> %vecinit10.i.i209, i8 %134, i32 11
  %135 = load i8, i8* %__b12.addr.i.i184, align 1
  %vecinit12.i.i211 = insertelement <16 x i8> %vecinit11.i.i210, i8 %135, i32 12
  %136 = load i8, i8* %__b13.addr.i.i183, align 1
  %vecinit13.i.i212 = insertelement <16 x i8> %vecinit12.i.i211, i8 %136, i32 13
  %137 = load i8, i8* %__b14.addr.i.i182, align 1
  %vecinit14.i.i213 = insertelement <16 x i8> %vecinit13.i.i212, i8 %137, i32 14
  %138 = load i8, i8* %__b15.addr.i.i181, align 1
  %vecinit15.i.i214 = insertelement <16 x i8> %vecinit14.i.i213, i8 %138, i32 15
  store <16 x i8> %vecinit15.i.i214, <16 x i8>* %.compoundliteral.i.i197, align 16
  %139 = load <16 x i8>, <16 x i8>* %.compoundliteral.i.i197, align 16
  %140 = bitcast <16 x i8> %139 to <2 x i64>
  store <2 x i64> %140, <2 x i64>* %y_bias, align 16
  store i16 255, i16* %__w.addr.i, align 2
  %141 = load i16, i16* %__w.addr.i, align 2
  %142 = load i16, i16* %__w.addr.i, align 2
  %143 = load i16, i16* %__w.addr.i, align 2
  %144 = load i16, i16* %__w.addr.i, align 2
  %145 = load i16, i16* %__w.addr.i, align 2
  %146 = load i16, i16* %__w.addr.i, align 2
  %147 = load i16, i16* %__w.addr.i, align 2
  %148 = load i16, i16* %__w.addr.i, align 2
  store i16 %141, i16* %__w7.addr.i.i, align 2
  store i16 %142, i16* %__w6.addr.i.i, align 2
  store i16 %143, i16* %__w5.addr.i.i, align 2
  store i16 %144, i16* %__w4.addr.i.i, align 2
  store i16 %145, i16* %__w3.addr.i.i, align 2
  store i16 %146, i16* %__w2.addr.i.i, align 2
  store i16 %147, i16* %__w1.addr.i.i, align 2
  store i16 %148, i16* %__w0.addr.i.i, align 2
  %149 = load i16, i16* %__w0.addr.i.i, align 2
  %vecinit.i.i173 = insertelement <8 x i16> undef, i16 %149, i32 0
  %150 = load i16, i16* %__w1.addr.i.i, align 2
  %vecinit1.i.i174 = insertelement <8 x i16> %vecinit.i.i173, i16 %150, i32 1
  %151 = load i16, i16* %__w2.addr.i.i, align 2
  %vecinit2.i.i175 = insertelement <8 x i16> %vecinit1.i.i174, i16 %151, i32 2
  %152 = load i16, i16* %__w3.addr.i.i, align 2
  %vecinit3.i.i176 = insertelement <8 x i16> %vecinit2.i.i175, i16 %152, i32 3
  %153 = load i16, i16* %__w4.addr.i.i, align 2
  %vecinit4.i.i177 = insertelement <8 x i16> %vecinit3.i.i176, i16 %153, i32 4
  %154 = load i16, i16* %__w5.addr.i.i, align 2
  %vecinit5.i.i178 = insertelement <8 x i16> %vecinit4.i.i177, i16 %154, i32 5
  %155 = load i16, i16* %__w6.addr.i.i, align 2
  %vecinit6.i.i179 = insertelement <8 x i16> %vecinit5.i.i178, i16 %155, i32 6
  %156 = load i16, i16* %__w7.addr.i.i, align 2
  %vecinit7.i.i180 = insertelement <8 x i16> %vecinit6.i.i179, i16 %156, i32 7
  store <8 x i16> %vecinit7.i.i180, <8 x i16>* %.compoundliteral.i.i172, align 16
  %157 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i172, align 16
  %158 = bitcast <8 x i16> %157 to <2 x i64>
  store <2 x i64> %158, <2 x i64>* %xw, align 16
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %159 = load i32, i32* %i, align 4
  %add = add nsw i32 %159, 7
  %160 = load i32, i32* %count.addr, align 4
  %cmp7 = icmp slt i32 %add, %160
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %161 = load i8*, i8** %y.addr, align 8
  %162 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %162 to i64
  %add.ptr = getelementptr inbounds i8, i8* %161, i64 %idx.ext
  %163 = bitcast i8* %add.ptr to <2 x i64>*
  store <2 x i64>* %163, <2 x i64>** %__p.addr.i167, align 8
  %164 = load <2 x i64>*, <2 x i64>** %__p.addr.i167, align 8
  %165 = bitcast <2 x i64>* %164 to %struct.__mm_loadl_epi64_struct*
  %__u.i169 = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %165, i32 0, i32 0
  %166 = load i64, i64* %__u.i169, align 1
  %vecinit.i170 = insertelement <2 x i64> undef, i64 %166, i32 0
  %vecinit1.i171 = insertelement <2 x i64> %vecinit.i170, i64 0, i32 1
  store <2 x i64> %vecinit1.i171, <2 x i64>* %.compoundliteral.i168, align 16
  %167 = load <2 x i64>, <2 x i64>* %.compoundliteral.i168, align 16
  store <2 x i64> %167, <2 x i64>* %y_bytes, align 16
  %168 = load i8*, i8** %pcr.addr, align 8
  %169 = load i32, i32* %i, align 4
  %idx.ext9 = sext i32 %169 to i64
  %add.ptr10 = getelementptr inbounds i8, i8* %168, i64 %idx.ext9
  %170 = bitcast i8* %add.ptr10 to <2 x i64>*
  store <2 x i64>* %170, <2 x i64>** %__p.addr.i162, align 8
  %171 = load <2 x i64>*, <2 x i64>** %__p.addr.i162, align 8
  %172 = bitcast <2 x i64>* %171 to %struct.__mm_loadl_epi64_struct*
  %__u.i164 = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %172, i32 0, i32 0
  %173 = load i64, i64* %__u.i164, align 1
  %vecinit.i165 = insertelement <2 x i64> undef, i64 %173, i32 0
  %vecinit1.i166 = insertelement <2 x i64> %vecinit.i165, i64 0, i32 1
  store <2 x i64> %vecinit1.i166, <2 x i64>* %.compoundliteral.i163, align 16
  %174 = load <2 x i64>, <2 x i64>* %.compoundliteral.i163, align 16
  store <2 x i64> %174, <2 x i64>* %cr_bytes, align 16
  %175 = load i8*, i8** %pcb.addr, align 8
  %176 = load i32, i32* %i, align 4
  %idx.ext12 = sext i32 %176 to i64
  %add.ptr13 = getelementptr inbounds i8, i8* %175, i64 %idx.ext12
  %177 = bitcast i8* %add.ptr13 to <2 x i64>*
  store <2 x i64>* %177, <2 x i64>** %__p.addr.i160, align 8
  %178 = load <2 x i64>*, <2 x i64>** %__p.addr.i160, align 8
  %179 = bitcast <2 x i64>* %178 to %struct.__mm_loadl_epi64_struct*
  %__u.i = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %179, i32 0, i32 0
  %180 = load i64, i64* %__u.i, align 1
  %vecinit.i = insertelement <2 x i64> undef, i64 %180, i32 0
  %vecinit1.i = insertelement <2 x i64> %vecinit.i, i64 0, i32 1
  store <2 x i64> %vecinit1.i, <2 x i64>* %.compoundliteral.i161, align 16
  %181 = load <2 x i64>, <2 x i64>* %.compoundliteral.i161, align 16
  store <2 x i64> %181, <2 x i64>* %cb_bytes, align 16
  %182 = load <2 x i64>, <2 x i64>* %cr_bytes, align 16
  %183 = load <2 x i64>, <2 x i64>* %signflip, align 16
  store <2 x i64> %182, <2 x i64>* %__a.addr.i157, align 16
  store <2 x i64> %183, <2 x i64>* %__b.addr.i158, align 16
  %184 = load <2 x i64>, <2 x i64>* %__a.addr.i157, align 16
  %185 = load <2 x i64>, <2 x i64>* %__b.addr.i158, align 16
  %xor.i159 = xor <2 x i64> %184, %185
  store <2 x i64> %xor.i159, <2 x i64>* %cr_biased, align 16
  %186 = load <2 x i64>, <2 x i64>* %cb_bytes, align 16
  %187 = load <2 x i64>, <2 x i64>* %signflip, align 16
  store <2 x i64> %186, <2 x i64>* %__a.addr.i155, align 16
  store <2 x i64> %187, <2 x i64>* %__b.addr.i156, align 16
  %188 = load <2 x i64>, <2 x i64>* %__a.addr.i155, align 16
  %189 = load <2 x i64>, <2 x i64>* %__b.addr.i156, align 16
  %xor.i = xor <2 x i64> %188, %189
  store <2 x i64> %xor.i, <2 x i64>* %cb_biased, align 16
  %190 = load <2 x i64>, <2 x i64>* %y_bias, align 16
  %191 = load <2 x i64>, <2 x i64>* %y_bytes, align 16
  store <2 x i64> %190, <2 x i64>* %__a.addr.i152, align 16
  store <2 x i64> %191, <2 x i64>* %__b.addr.i153, align 16
  %192 = load <2 x i64>, <2 x i64>* %__a.addr.i152, align 16
  %193 = bitcast <2 x i64> %192 to <16 x i8>
  %194 = load <2 x i64>, <2 x i64>* %__b.addr.i153, align 16
  %195 = bitcast <2 x i64> %194 to <16 x i8>
  %shuffle.i154 = shufflevector <16 x i8> %193, <16 x i8> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %196 = bitcast <16 x i8> %shuffle.i154 to <2 x i64>
  store <2 x i64> %196, <2 x i64>* %yw, align 16
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i151, align 16
  %197 = load <2 x i64>, <2 x i64>* %.compoundliteral.i151, align 16
  %198 = load <2 x i64>, <2 x i64>* %cr_biased, align 16
  store <2 x i64> %197, <2 x i64>* %__a.addr.i148, align 16
  store <2 x i64> %198, <2 x i64>* %__b.addr.i149, align 16
  %199 = load <2 x i64>, <2 x i64>* %__a.addr.i148, align 16
  %200 = bitcast <2 x i64> %199 to <16 x i8>
  %201 = load <2 x i64>, <2 x i64>* %__b.addr.i149, align 16
  %202 = bitcast <2 x i64> %201 to <16 x i8>
  %shuffle.i150 = shufflevector <16 x i8> %200, <16 x i8> %202, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %203 = bitcast <16 x i8> %shuffle.i150 to <2 x i64>
  store <2 x i64> %203, <2 x i64>* %crw, align 16
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i, align 16
  %204 = load <2 x i64>, <2 x i64>* %.compoundliteral.i, align 16
  %205 = load <2 x i64>, <2 x i64>* %cb_biased, align 16
  store <2 x i64> %204, <2 x i64>* %__a.addr.i145, align 16
  store <2 x i64> %205, <2 x i64>* %__b.addr.i146, align 16
  %206 = load <2 x i64>, <2 x i64>* %__a.addr.i145, align 16
  %207 = bitcast <2 x i64> %206 to <16 x i8>
  %208 = load <2 x i64>, <2 x i64>* %__b.addr.i146, align 16
  %209 = bitcast <2 x i64> %208 to <16 x i8>
  %shuffle.i147 = shufflevector <16 x i8> %207, <16 x i8> %209, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %210 = bitcast <16 x i8> %shuffle.i147 to <2 x i64>
  store <2 x i64> %210, <2 x i64>* %cbw, align 16
  %211 = load <2 x i64>, <2 x i64>* %yw, align 16
  store <2 x i64> %211, <2 x i64>* %__a.addr.i143, align 16
  store i32 4, i32* %__count.addr.i144, align 4
  %212 = load <2 x i64>, <2 x i64>* %__a.addr.i143, align 16
  %213 = bitcast <2 x i64> %212 to <8 x i16>
  %214 = load i32, i32* %__count.addr.i144, align 4
  %215 = call <8 x i16> @llvm.x86.sse2.psrli.w(<8 x i16> %213, i32 %214) #10
  %216 = bitcast <8 x i16> %215 to <2 x i64>
  store <2 x i64> %216, <2 x i64>* %yws, align 16
  %217 = load <2 x i64>, <2 x i64>* %cr_const0, align 16
  %218 = load <2 x i64>, <2 x i64>* %crw, align 16
  store <2 x i64> %217, <2 x i64>* %__a.addr.i141, align 16
  store <2 x i64> %218, <2 x i64>* %__b.addr.i142, align 16
  %219 = load <2 x i64>, <2 x i64>* %__a.addr.i141, align 16
  %220 = bitcast <2 x i64> %219 to <8 x i16>
  %221 = load <2 x i64>, <2 x i64>* %__b.addr.i142, align 16
  %222 = bitcast <2 x i64> %221 to <8 x i16>
  %223 = call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %220, <8 x i16> %222) #10
  %224 = bitcast <8 x i16> %223 to <2 x i64>
  store <2 x i64> %224, <2 x i64>* %cr0, align 16
  %225 = load <2 x i64>, <2 x i64>* %cb_const0, align 16
  %226 = load <2 x i64>, <2 x i64>* %cbw, align 16
  store <2 x i64> %225, <2 x i64>* %__a.addr.i139, align 16
  store <2 x i64> %226, <2 x i64>* %__b.addr.i140, align 16
  %227 = load <2 x i64>, <2 x i64>* %__a.addr.i139, align 16
  %228 = bitcast <2 x i64> %227 to <8 x i16>
  %229 = load <2 x i64>, <2 x i64>* %__b.addr.i140, align 16
  %230 = bitcast <2 x i64> %229 to <8 x i16>
  %231 = call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %228, <8 x i16> %230) #10
  %232 = bitcast <8 x i16> %231 to <2 x i64>
  store <2 x i64> %232, <2 x i64>* %cb0, align 16
  %233 = load <2 x i64>, <2 x i64>* %cbw, align 16
  %234 = load <2 x i64>, <2 x i64>* %cb_const1, align 16
  store <2 x i64> %233, <2 x i64>* %__a.addr.i137, align 16
  store <2 x i64> %234, <2 x i64>* %__b.addr.i138, align 16
  %235 = load <2 x i64>, <2 x i64>* %__a.addr.i137, align 16
  %236 = bitcast <2 x i64> %235 to <8 x i16>
  %237 = load <2 x i64>, <2 x i64>* %__b.addr.i138, align 16
  %238 = bitcast <2 x i64> %237 to <8 x i16>
  %239 = call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %236, <8 x i16> %238) #10
  %240 = bitcast <8 x i16> %239 to <2 x i64>
  store <2 x i64> %240, <2 x i64>* %cb1, align 16
  %241 = load <2 x i64>, <2 x i64>* %crw, align 16
  %242 = load <2 x i64>, <2 x i64>* %cr_const1, align 16
  store <2 x i64> %241, <2 x i64>* %__a.addr.i135, align 16
  store <2 x i64> %242, <2 x i64>* %__b.addr.i136, align 16
  %243 = load <2 x i64>, <2 x i64>* %__a.addr.i135, align 16
  %244 = bitcast <2 x i64> %243 to <8 x i16>
  %245 = load <2 x i64>, <2 x i64>* %__b.addr.i136, align 16
  %246 = bitcast <2 x i64> %245 to <8 x i16>
  %247 = call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %244, <8 x i16> %246) #10
  %248 = bitcast <8 x i16> %247 to <2 x i64>
  store <2 x i64> %248, <2 x i64>* %cr1, align 16
  %249 = load <2 x i64>, <2 x i64>* %cr0, align 16
  %250 = load <2 x i64>, <2 x i64>* %yws, align 16
  store <2 x i64> %249, <2 x i64>* %__a.addr.i132, align 16
  store <2 x i64> %250, <2 x i64>* %__b.addr.i133, align 16
  %251 = load <2 x i64>, <2 x i64>* %__a.addr.i132, align 16
  %252 = bitcast <2 x i64> %251 to <8 x i16>
  %253 = load <2 x i64>, <2 x i64>* %__b.addr.i133, align 16
  %254 = bitcast <2 x i64> %253 to <8 x i16>
  %add.i134 = add <8 x i16> %252, %254
  %255 = bitcast <8 x i16> %add.i134 to <2 x i64>
  store <2 x i64> %255, <2 x i64>* %rws, align 16
  %256 = load <2 x i64>, <2 x i64>* %cb0, align 16
  %257 = load <2 x i64>, <2 x i64>* %yws, align 16
  store <2 x i64> %256, <2 x i64>* %__a.addr.i129, align 16
  store <2 x i64> %257, <2 x i64>* %__b.addr.i130, align 16
  %258 = load <2 x i64>, <2 x i64>* %__a.addr.i129, align 16
  %259 = bitcast <2 x i64> %258 to <8 x i16>
  %260 = load <2 x i64>, <2 x i64>* %__b.addr.i130, align 16
  %261 = bitcast <2 x i64> %260 to <8 x i16>
  %add.i131 = add <8 x i16> %259, %261
  %262 = bitcast <8 x i16> %add.i131 to <2 x i64>
  store <2 x i64> %262, <2 x i64>* %gwt, align 16
  %263 = load <2 x i64>, <2 x i64>* %yws, align 16
  %264 = load <2 x i64>, <2 x i64>* %cb1, align 16
  store <2 x i64> %263, <2 x i64>* %__a.addr.i126, align 16
  store <2 x i64> %264, <2 x i64>* %__b.addr.i127, align 16
  %265 = load <2 x i64>, <2 x i64>* %__a.addr.i126, align 16
  %266 = bitcast <2 x i64> %265 to <8 x i16>
  %267 = load <2 x i64>, <2 x i64>* %__b.addr.i127, align 16
  %268 = bitcast <2 x i64> %267 to <8 x i16>
  %add.i128 = add <8 x i16> %266, %268
  %269 = bitcast <8 x i16> %add.i128 to <2 x i64>
  store <2 x i64> %269, <2 x i64>* %bws, align 16
  %270 = load <2 x i64>, <2 x i64>* %gwt, align 16
  %271 = load <2 x i64>, <2 x i64>* %cr1, align 16
  store <2 x i64> %270, <2 x i64>* %__a.addr.i124, align 16
  store <2 x i64> %271, <2 x i64>* %__b.addr.i125, align 16
  %272 = load <2 x i64>, <2 x i64>* %__a.addr.i124, align 16
  %273 = bitcast <2 x i64> %272 to <8 x i16>
  %274 = load <2 x i64>, <2 x i64>* %__b.addr.i125, align 16
  %275 = bitcast <2 x i64> %274 to <8 x i16>
  %add.i = add <8 x i16> %273, %275
  %276 = bitcast <8 x i16> %add.i to <2 x i64>
  store <2 x i64> %276, <2 x i64>* %gws, align 16
  %277 = load <2 x i64>, <2 x i64>* %rws, align 16
  store <2 x i64> %277, <2 x i64>* %__a.addr.i122, align 16
  store i32 4, i32* %__count.addr.i123, align 4
  %278 = load <2 x i64>, <2 x i64>* %__a.addr.i122, align 16
  %279 = bitcast <2 x i64> %278 to <8 x i16>
  %280 = load i32, i32* %__count.addr.i123, align 4
  %281 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %279, i32 %280) #10
  %282 = bitcast <8 x i16> %281 to <2 x i64>
  store <2 x i64> %282, <2 x i64>* %rw, align 16
  %283 = load <2 x i64>, <2 x i64>* %bws, align 16
  store <2 x i64> %283, <2 x i64>* %__a.addr.i120, align 16
  store i32 4, i32* %__count.addr.i121, align 4
  %284 = load <2 x i64>, <2 x i64>* %__a.addr.i120, align 16
  %285 = bitcast <2 x i64> %284 to <8 x i16>
  %286 = load i32, i32* %__count.addr.i121, align 4
  %287 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %285, i32 %286) #10
  %288 = bitcast <8 x i16> %287 to <2 x i64>
  store <2 x i64> %288, <2 x i64>* %bw, align 16
  %289 = load <2 x i64>, <2 x i64>* %gws, align 16
  store <2 x i64> %289, <2 x i64>* %__a.addr.i119, align 16
  store i32 4, i32* %__count.addr.i, align 4
  %290 = load <2 x i64>, <2 x i64>* %__a.addr.i119, align 16
  %291 = bitcast <2 x i64> %290 to <8 x i16>
  %292 = load i32, i32* %__count.addr.i, align 4
  %293 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %291, i32 %292) #10
  %294 = bitcast <8 x i16> %293 to <2 x i64>
  store <2 x i64> %294, <2 x i64>* %gw, align 16
  %295 = load <2 x i64>, <2 x i64>* %rw, align 16
  %296 = load <2 x i64>, <2 x i64>* %bw, align 16
  store <2 x i64> %295, <2 x i64>* %__a.addr.i117, align 16
  store <2 x i64> %296, <2 x i64>* %__b.addr.i118, align 16
  %297 = load <2 x i64>, <2 x i64>* %__a.addr.i117, align 16
  %298 = bitcast <2 x i64> %297 to <8 x i16>
  %299 = load <2 x i64>, <2 x i64>* %__b.addr.i118, align 16
  %300 = bitcast <2 x i64> %299 to <8 x i16>
  %301 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %298, <8 x i16> %300) #10
  %302 = bitcast <16 x i8> %301 to <2 x i64>
  store <2 x i64> %302, <2 x i64>* %brb, align 16
  %303 = load <2 x i64>, <2 x i64>* %gw, align 16
  %304 = load <2 x i64>, <2 x i64>* %xw, align 16
  store <2 x i64> %303, <2 x i64>* %__a.addr.i115, align 16
  store <2 x i64> %304, <2 x i64>* %__b.addr.i116, align 16
  %305 = load <2 x i64>, <2 x i64>* %__a.addr.i115, align 16
  %306 = bitcast <2 x i64> %305 to <8 x i16>
  %307 = load <2 x i64>, <2 x i64>* %__b.addr.i116, align 16
  %308 = bitcast <2 x i64> %307 to <8 x i16>
  %309 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %306, <8 x i16> %308) #10
  %310 = bitcast <16 x i8> %309 to <2 x i64>
  store <2 x i64> %310, <2 x i64>* %gxb, align 16
  %311 = load <2 x i64>, <2 x i64>* %brb, align 16
  %312 = load <2 x i64>, <2 x i64>* %gxb, align 16
  store <2 x i64> %311, <2 x i64>* %__a.addr.i112, align 16
  store <2 x i64> %312, <2 x i64>* %__b.addr.i113, align 16
  %313 = load <2 x i64>, <2 x i64>* %__a.addr.i112, align 16
  %314 = bitcast <2 x i64> %313 to <16 x i8>
  %315 = load <2 x i64>, <2 x i64>* %__b.addr.i113, align 16
  %316 = bitcast <2 x i64> %315 to <16 x i8>
  %shuffle.i114 = shufflevector <16 x i8> %314, <16 x i8> %316, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %317 = bitcast <16 x i8> %shuffle.i114 to <2 x i64>
  store <2 x i64> %317, <2 x i64>* %t0, align 16
  %318 = load <2 x i64>, <2 x i64>* %brb, align 16
  %319 = load <2 x i64>, <2 x i64>* %gxb, align 16
  store <2 x i64> %318, <2 x i64>* %__a.addr.i109, align 16
  store <2 x i64> %319, <2 x i64>* %__b.addr.i110, align 16
  %320 = load <2 x i64>, <2 x i64>* %__a.addr.i109, align 16
  %321 = bitcast <2 x i64> %320 to <16 x i8>
  %322 = load <2 x i64>, <2 x i64>* %__b.addr.i110, align 16
  %323 = bitcast <2 x i64> %322 to <16 x i8>
  %shuffle.i111 = shufflevector <16 x i8> %321, <16 x i8> %323, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %324 = bitcast <16 x i8> %shuffle.i111 to <2 x i64>
  store <2 x i64> %324, <2 x i64>* %t1, align 16
  %325 = load <2 x i64>, <2 x i64>* %t0, align 16
  %326 = load <2 x i64>, <2 x i64>* %t1, align 16
  store <2 x i64> %325, <2 x i64>* %__a.addr.i106, align 16
  store <2 x i64> %326, <2 x i64>* %__b.addr.i107, align 16
  %327 = load <2 x i64>, <2 x i64>* %__a.addr.i106, align 16
  %328 = bitcast <2 x i64> %327 to <8 x i16>
  %329 = load <2 x i64>, <2 x i64>* %__b.addr.i107, align 16
  %330 = bitcast <2 x i64> %329 to <8 x i16>
  %shuffle.i108 = shufflevector <8 x i16> %328, <8 x i16> %330, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %331 = bitcast <8 x i16> %shuffle.i108 to <2 x i64>
  store <2 x i64> %331, <2 x i64>* %o0, align 16
  %332 = load <2 x i64>, <2 x i64>* %t0, align 16
  %333 = load <2 x i64>, <2 x i64>* %t1, align 16
  store <2 x i64> %332, <2 x i64>* %__a.addr.i, align 16
  store <2 x i64> %333, <2 x i64>* %__b.addr.i105, align 16
  %334 = load <2 x i64>, <2 x i64>* %__a.addr.i, align 16
  %335 = bitcast <2 x i64> %334 to <8 x i16>
  %336 = load <2 x i64>, <2 x i64>* %__b.addr.i105, align 16
  %337 = bitcast <2 x i64> %336 to <8 x i16>
  %shuffle.i = shufflevector <8 x i16> %335, <8 x i16> %337, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %338 = bitcast <8 x i16> %shuffle.i to <2 x i64>
  store <2 x i64> %338, <2 x i64>* %o1, align 16
  %339 = load i8*, i8** %out.addr, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %339, i64 0
  %340 = bitcast i8* %add.ptr40 to <2 x i64>*
  %341 = load <2 x i64>, <2 x i64>* %o0, align 16
  store <2 x i64>* %340, <2 x i64>** %__p.addr.i102, align 8
  store <2 x i64> %341, <2 x i64>* %__b.addr.i103, align 16
  %342 = load <2 x i64>, <2 x i64>* %__b.addr.i103, align 16
  %343 = load <2 x i64>*, <2 x i64>** %__p.addr.i102, align 8
  %344 = bitcast <2 x i64>* %343 to %struct.__storeu_si128*
  %__v.i104 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %344, i32 0, i32 0
  store <2 x i64> %342, <2 x i64>* %__v.i104, align 1
  %345 = load i8*, i8** %out.addr, align 8
  %add.ptr41 = getelementptr inbounds i8, i8* %345, i64 16
  %346 = bitcast i8* %add.ptr41 to <2 x i64>*
  %347 = load <2 x i64>, <2 x i64>* %o1, align 16
  store <2 x i64>* %346, <2 x i64>** %__p.addr.i, align 8
  store <2 x i64> %347, <2 x i64>* %__b.addr.i101, align 16
  %348 = load <2 x i64>, <2 x i64>* %__b.addr.i101, align 16
  %349 = load <2 x i64>*, <2 x i64>** %__p.addr.i, align 8
  %350 = bitcast <2 x i64>* %349 to %struct.__storeu_si128*
  %__v.i = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %350, i32 0, i32 0
  store <2 x i64> %348, <2 x i64>* %__v.i, align 1
  %351 = load i8*, i8** %out.addr, align 8
  %add.ptr42 = getelementptr inbounds i8, i8* %351, i64 32
  store i8* %add.ptr42, i8** %out.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %352 = load i32, i32* %i, align 4
  %add43 = add nsw i32 %352, 8
  store i32 %add43, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  br label %for.cond44

for.cond44:                                       ; preds = %for.inc99, %if.end
  %353 = load i32, i32* %i, align 4
  %354 = load i32, i32* %count.addr, align 4
  %cmp45 = icmp slt i32 %353, %354
  br i1 %cmp45, label %for.body46, label %for.end100

for.body46:                                       ; preds = %for.cond44
  %355 = load i8*, i8** %y.addr, align 8
  %356 = load i32, i32* %i, align 4
  %idxprom = sext i32 %356 to i64
  %arrayidx = getelementptr inbounds i8, i8* %355, i64 %idxprom
  %357 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %357 to i32
  %shl = shl i32 %conv, 20
  %add47 = add nsw i32 %shl, 524288
  store i32 %add47, i32* %y_fixed, align 4
  %358 = load i8*, i8** %pcr.addr, align 8
  %359 = load i32, i32* %i, align 4
  %idxprom48 = sext i32 %359 to i64
  %arrayidx49 = getelementptr inbounds i8, i8* %358, i64 %idxprom48
  %360 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %360 to i32
  %sub = sub nsw i32 %conv50, 128
  store i32 %sub, i32* %cr, align 4
  %361 = load i8*, i8** %pcb.addr, align 8
  %362 = load i32, i32* %i, align 4
  %idxprom51 = sext i32 %362 to i64
  %arrayidx52 = getelementptr inbounds i8, i8* %361, i64 %idxprom51
  %363 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %363 to i32
  %sub54 = sub nsw i32 %conv53, 128
  store i32 %sub54, i32* %cb, align 4
  %364 = load i32, i32* %y_fixed, align 4
  %365 = load i32, i32* %cr, align 4
  %mul = mul nsw i32 %365, 1470208
  %add55 = add nsw i32 %364, %mul
  store i32 %add55, i32* %r, align 4
  %366 = load i32, i32* %y_fixed, align 4
  %367 = load i32, i32* %cr, align 4
  %mul56 = mul nsw i32 %367, -748800
  %add57 = add nsw i32 %366, %mul56
  %368 = load i32, i32* %cb, align 4
  %mul58 = mul nsw i32 %368, -360960
  %and = and i32 %mul58, -65536
  %add59 = add i32 %add57, %and
  store i32 %add59, i32* %g, align 4
  %369 = load i32, i32* %y_fixed, align 4
  %370 = load i32, i32* %cb, align 4
  %mul60 = mul nsw i32 %370, 1858048
  %add61 = add nsw i32 %369, %mul60
  store i32 %add61, i32* %b, align 4
  %371 = load i32, i32* %r, align 4
  %shr = ashr i32 %371, 20
  store i32 %shr, i32* %r, align 4
  %372 = load i32, i32* %g, align 4
  %shr62 = ashr i32 %372, 20
  store i32 %shr62, i32* %g, align 4
  %373 = load i32, i32* %b, align 4
  %shr63 = ashr i32 %373, 20
  store i32 %shr63, i32* %b, align 4
  %374 = load i32, i32* %r, align 4
  %cmp64 = icmp ugt i32 %374, 255
  br i1 %cmp64, label %if.then66, label %if.end71

if.then66:                                        ; preds = %for.body46
  %375 = load i32, i32* %r, align 4
  %cmp67 = icmp slt i32 %375, 0
  br i1 %cmp67, label %if.then69, label %if.else

if.then69:                                        ; preds = %if.then66
  store i32 0, i32* %r, align 4
  br label %if.end70

if.else:                                          ; preds = %if.then66
  store i32 255, i32* %r, align 4
  br label %if.end70

if.end70:                                         ; preds = %if.else, %if.then69
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %for.body46
  %376 = load i32, i32* %g, align 4
  %cmp72 = icmp ugt i32 %376, 255
  br i1 %cmp72, label %if.then74, label %if.end80

if.then74:                                        ; preds = %if.end71
  %377 = load i32, i32* %g, align 4
  %cmp75 = icmp slt i32 %377, 0
  br i1 %cmp75, label %if.then77, label %if.else78

if.then77:                                        ; preds = %if.then74
  store i32 0, i32* %g, align 4
  br label %if.end79

if.else78:                                        ; preds = %if.then74
  store i32 255, i32* %g, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.else78, %if.then77
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.end71
  %378 = load i32, i32* %b, align 4
  %cmp81 = icmp ugt i32 %378, 255
  br i1 %cmp81, label %if.then83, label %if.end89

if.then83:                                        ; preds = %if.end80
  %379 = load i32, i32* %b, align 4
  %cmp84 = icmp slt i32 %379, 0
  br i1 %cmp84, label %if.then86, label %if.else87

if.then86:                                        ; preds = %if.then83
  store i32 0, i32* %b, align 4
  br label %if.end88

if.else87:                                        ; preds = %if.then83
  store i32 255, i32* %b, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then86
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %if.end80
  %380 = load i32, i32* %r, align 4
  %conv90 = trunc i32 %380 to i8
  %381 = load i8*, i8** %out.addr, align 8
  %arrayidx91 = getelementptr inbounds i8, i8* %381, i64 0
  store i8 %conv90, i8* %arrayidx91, align 1
  %382 = load i32, i32* %g, align 4
  %conv92 = trunc i32 %382 to i8
  %383 = load i8*, i8** %out.addr, align 8
  %arrayidx93 = getelementptr inbounds i8, i8* %383, i64 1
  store i8 %conv92, i8* %arrayidx93, align 1
  %384 = load i32, i32* %b, align 4
  %conv94 = trunc i32 %384 to i8
  %385 = load i8*, i8** %out.addr, align 8
  %arrayidx95 = getelementptr inbounds i8, i8* %385, i64 2
  store i8 %conv94, i8* %arrayidx95, align 1
  %386 = load i8*, i8** %out.addr, align 8
  %arrayidx96 = getelementptr inbounds i8, i8* %386, i64 3
  store i8 -1, i8* %arrayidx96, align 1
  %387 = load i32, i32* %step.addr, align 4
  %388 = load i8*, i8** %out.addr, align 8
  %idx.ext97 = sext i32 %387 to i64
  %add.ptr98 = getelementptr inbounds i8, i8* %388, i64 %idx.ext97
  store i8* %add.ptr98, i8** %out.addr, align 8
  br label %for.inc99

for.inc99:                                        ; preds = %if.end89
  %389 = load i32, i32* %i, align 4
  %inc = add nsw i32 %389, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond44

for.end100:                                       ; preds = %for.cond44
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__resample_row_hv_2_simd(i8* %out, i8* %in_near, i8* %in_far, i32 %w, i32 %hs) #8 {
entry:
  %__p.addr.i159 = alloca <2 x i64>*, align 8
  %.compoundliteral.i160 = alloca <2 x i64>, align 16
  %__p.addr.i157 = alloca <2 x i64>*, align 8
  %.compoundliteral.i158 = alloca <2 x i64>, align 16
  %__a.addr.i154 = alloca <2 x i64>, align 16
  %__b.addr.i155 = alloca <2 x i64>, align 16
  %__a.addr.i151 = alloca <2 x i64>, align 16
  %__b.addr.i152 = alloca <2 x i64>, align 16
  %__a.addr.i148 = alloca <2 x i64>, align 16
  %__b.addr.i149 = alloca <2 x i64>, align 16
  %__a.addr.i146 = alloca <2 x i64>, align 16
  %__count.addr.i147 = alloca i32, align 4
  %__a.addr.i143 = alloca <2 x i64>, align 16
  %__b.addr.i144 = alloca <2 x i64>, align 16
  %__w7.addr.i.i = alloca i16, align 2
  %__w6.addr.i.i = alloca i16, align 2
  %__w5.addr.i.i = alloca i16, align 2
  %__w4.addr.i.i = alloca i16, align 2
  %__w3.addr.i.i = alloca i16, align 2
  %__w2.addr.i.i = alloca i16, align 2
  %__w1.addr.i.i = alloca i16, align 2
  %__w0.addr.i.i = alloca i16, align 2
  %.compoundliteral.i.i = alloca <8 x i16>, align 16
  %__w.addr.i = alloca i16, align 2
  %__a.addr.i141 = alloca <2 x i64>, align 16
  %__count.addr.i142 = alloca i32, align 4
  %__a.addr.i138 = alloca <2 x i64>, align 16
  %__b.addr.i139 = alloca <2 x i64>, align 16
  %__a.addr.i136 = alloca <2 x i64>, align 16
  %__b.addr.i137 = alloca <2 x i64>, align 16
  %__a.addr.i133 = alloca <2 x i64>, align 16
  %__b.addr.i134 = alloca <2 x i64>, align 16
  %__a.addr.i130 = alloca <2 x i64>, align 16
  %__b.addr.i131 = alloca <2 x i64>, align 16
  %__a.addr.i128 = alloca <2 x i64>, align 16
  %__b.addr.i129 = alloca <2 x i64>, align 16
  %__a.addr.i125 = alloca <2 x i64>, align 16
  %__b.addr.i126 = alloca <2 x i64>, align 16
  %__a.addr.i123 = alloca <2 x i64>, align 16
  %__b.addr.i124 = alloca <2 x i64>, align 16
  %__a.addr.i121 = alloca <2 x i64>, align 16
  %__count.addr.i122 = alloca i32, align 4
  %__a.addr.i120 = alloca <2 x i64>, align 16
  %__count.addr.i = alloca i32, align 4
  %__a.addr.i = alloca <2 x i64>, align 16
  %__b.addr.i119 = alloca <2 x i64>, align 16
  %__p.addr.i = alloca <2 x i64>*, align 8
  %__b.addr.i = alloca <2 x i64>, align 16
  %.compoundliteral.i = alloca <2 x i64>, align 16
  %retval = alloca i8*, align 8
  %out.addr = alloca i8*, align 8
  %in_near.addr = alloca i8*, align 8
  %in_far.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %hs.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t0 = alloca i32, align 4
  %t1 = alloca i32, align 4
  %zero = alloca <2 x i64>, align 16
  %farb = alloca <2 x i64>, align 16
  %nearb = alloca <2 x i64>, align 16
  %farw = alloca <2 x i64>, align 16
  %nearw = alloca <2 x i64>, align 16
  %diff = alloca <2 x i64>, align 16
  %nears = alloca <2 x i64>, align 16
  %curr = alloca <2 x i64>, align 16
  %prv0 = alloca <2 x i64>, align 16
  %nxt0 = alloca <2 x i64>, align 16
  %prev = alloca <2 x i64>, align 16
  %next = alloca <2 x i64>, align 16
  %bias = alloca <2 x i64>, align 16
  %curs = alloca <2 x i64>, align 16
  %prvd = alloca <2 x i64>, align 16
  %nxtd = alloca <2 x i64>, align 16
  %curb = alloca <2 x i64>, align 16
  %even = alloca <2 x i64>, align 16
  %odd = alloca <2 x i64>, align 16
  %int0 = alloca <2 x i64>, align 16
  %int1 = alloca <2 x i64>, align 16
  %de0 = alloca <2 x i64>, align 16
  %de1 = alloca <2 x i64>, align 16
  %outv = alloca <2 x i64>, align 16
  store i8* %out, i8** %out.addr, align 8
  store i8* %in_near, i8** %in_near.addr, align 8
  store i8* %in_far, i8** %in_far.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %hs, i32* %hs.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load i32, i32* %w.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %in_near.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %mul = mul nsw i32 3, %conv
  %3 = load i8*, i8** %in_far.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %4 to i32
  %add = add nsw i32 %mul, %conv2
  %add3 = add nsw i32 %add, 2
  %shr = ashr i32 %add3, 2
  %conv4 = trunc i32 %shr to i8
  %5 = load i8*, i8** %out.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %5, i64 1
  store i8 %conv4, i8* %arrayidx5, align 1
  %6 = load i8*, i8** %out.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %6, i64 0
  store i8 %conv4, i8* %arrayidx6, align 1
  %7 = load i8*, i8** %out.addr, align 8
  store i8* %7, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %in_near.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %mul9 = mul nsw i32 3, %conv8
  %10 = load i8*, i8** %in_far.addr, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %11 to i32
  %add12 = add nsw i32 %mul9, %conv11
  store i32 %add12, i32* %t1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %w.addr, align 4
  %sub = sub nsw i32 %13, 1
  %and = and i32 %sub, -8
  %cmp13 = icmp slt i32 %12, %and
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  store <2 x i64> zeroinitializer, <2 x i64>* %.compoundliteral.i, align 16
  %14 = load <2 x i64>, <2 x i64>* %.compoundliteral.i, align 16
  store <2 x i64> %14, <2 x i64>* %zero, align 16
  %15 = load i8*, i8** %in_far.addr, align 8
  %16 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %16 to i64
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %idx.ext
  %17 = bitcast i8* %add.ptr to <2 x i64>*
  store <2 x i64>* %17, <2 x i64>** %__p.addr.i159, align 8
  %18 = load <2 x i64>*, <2 x i64>** %__p.addr.i159, align 8
  %19 = bitcast <2 x i64>* %18 to %struct.__mm_loadl_epi64_struct*
  %__u.i161 = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %19, i32 0, i32 0
  %20 = load i64, i64* %__u.i161, align 1
  %vecinit.i162 = insertelement <2 x i64> undef, i64 %20, i32 0
  %vecinit1.i163 = insertelement <2 x i64> %vecinit.i162, i64 0, i32 1
  store <2 x i64> %vecinit1.i163, <2 x i64>* %.compoundliteral.i160, align 16
  %21 = load <2 x i64>, <2 x i64>* %.compoundliteral.i160, align 16
  store <2 x i64> %21, <2 x i64>* %farb, align 16
  %22 = load i8*, i8** %in_near.addr, align 8
  %23 = load i32, i32* %i, align 4
  %idx.ext16 = sext i32 %23 to i64
  %add.ptr17 = getelementptr inbounds i8, i8* %22, i64 %idx.ext16
  %24 = bitcast i8* %add.ptr17 to <2 x i64>*
  store <2 x i64>* %24, <2 x i64>** %__p.addr.i157, align 8
  %25 = load <2 x i64>*, <2 x i64>** %__p.addr.i157, align 8
  %26 = bitcast <2 x i64>* %25 to %struct.__mm_loadl_epi64_struct*
  %__u.i = getelementptr inbounds %struct.__mm_loadl_epi64_struct, %struct.__mm_loadl_epi64_struct* %26, i32 0, i32 0
  %27 = load i64, i64* %__u.i, align 1
  %vecinit.i = insertelement <2 x i64> undef, i64 %27, i32 0
  %vecinit1.i = insertelement <2 x i64> %vecinit.i, i64 0, i32 1
  store <2 x i64> %vecinit1.i, <2 x i64>* %.compoundliteral.i158, align 16
  %28 = load <2 x i64>, <2 x i64>* %.compoundliteral.i158, align 16
  store <2 x i64> %28, <2 x i64>* %nearb, align 16
  %29 = load <2 x i64>, <2 x i64>* %farb, align 16
  %30 = load <2 x i64>, <2 x i64>* %zero, align 16
  store <2 x i64> %29, <2 x i64>* %__a.addr.i154, align 16
  store <2 x i64> %30, <2 x i64>* %__b.addr.i155, align 16
  %31 = load <2 x i64>, <2 x i64>* %__a.addr.i154, align 16
  %32 = bitcast <2 x i64> %31 to <16 x i8>
  %33 = load <2 x i64>, <2 x i64>* %__b.addr.i155, align 16
  %34 = bitcast <2 x i64> %33 to <16 x i8>
  %shuffle.i156 = shufflevector <16 x i8> %32, <16 x i8> %34, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = bitcast <16 x i8> %shuffle.i156 to <2 x i64>
  store <2 x i64> %35, <2 x i64>* %farw, align 16
  %36 = load <2 x i64>, <2 x i64>* %nearb, align 16
  %37 = load <2 x i64>, <2 x i64>* %zero, align 16
  store <2 x i64> %36, <2 x i64>* %__a.addr.i151, align 16
  store <2 x i64> %37, <2 x i64>* %__b.addr.i152, align 16
  %38 = load <2 x i64>, <2 x i64>* %__a.addr.i151, align 16
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = load <2 x i64>, <2 x i64>* %__b.addr.i152, align 16
  %41 = bitcast <2 x i64> %40 to <16 x i8>
  %shuffle.i153 = shufflevector <16 x i8> %39, <16 x i8> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %42 = bitcast <16 x i8> %shuffle.i153 to <2 x i64>
  store <2 x i64> %42, <2 x i64>* %nearw, align 16
  %43 = load <2 x i64>, <2 x i64>* %farw, align 16
  %44 = load <2 x i64>, <2 x i64>* %nearw, align 16
  store <2 x i64> %43, <2 x i64>* %__a.addr.i148, align 16
  store <2 x i64> %44, <2 x i64>* %__b.addr.i149, align 16
  %45 = load <2 x i64>, <2 x i64>* %__a.addr.i148, align 16
  %46 = bitcast <2 x i64> %45 to <8 x i16>
  %47 = load <2 x i64>, <2 x i64>* %__b.addr.i149, align 16
  %48 = bitcast <2 x i64> %47 to <8 x i16>
  %sub.i150 = sub <8 x i16> %46, %48
  %49 = bitcast <8 x i16> %sub.i150 to <2 x i64>
  store <2 x i64> %49, <2 x i64>* %diff, align 16
  %50 = load <2 x i64>, <2 x i64>* %nearw, align 16
  store <2 x i64> %50, <2 x i64>* %__a.addr.i146, align 16
  store i32 2, i32* %__count.addr.i147, align 4
  %51 = load <2 x i64>, <2 x i64>* %__a.addr.i146, align 16
  %52 = bitcast <2 x i64> %51 to <8 x i16>
  %53 = load i32, i32* %__count.addr.i147, align 4
  %54 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %52, i32 %53) #10
  %55 = bitcast <8 x i16> %54 to <2 x i64>
  store <2 x i64> %55, <2 x i64>* %nears, align 16
  %56 = load <2 x i64>, <2 x i64>* %nears, align 16
  %57 = load <2 x i64>, <2 x i64>* %diff, align 16
  store <2 x i64> %56, <2 x i64>* %__a.addr.i143, align 16
  store <2 x i64> %57, <2 x i64>* %__b.addr.i144, align 16
  %58 = load <2 x i64>, <2 x i64>* %__a.addr.i143, align 16
  %59 = bitcast <2 x i64> %58 to <8 x i16>
  %60 = load <2 x i64>, <2 x i64>* %__b.addr.i144, align 16
  %61 = bitcast <2 x i64> %60 to <8 x i16>
  %add.i145 = add <8 x i16> %59, %61
  %62 = bitcast <8 x i16> %add.i145 to <2 x i64>
  store <2 x i64> %62, <2 x i64>* %curr, align 16
  %63 = load <2 x i64>, <2 x i64>* %curr, align 16
  %cast = bitcast <2 x i64> %63 to <16 x i8>
  %pslldq = shufflevector <16 x i8> zeroinitializer, <16 x i8> %cast, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %cast24 = bitcast <16 x i8> %pslldq to <2 x i64>
  store <2 x i64> %cast24, <2 x i64>* %prv0, align 16
  %64 = load <2 x i64>, <2 x i64>* %curr, align 16
  %cast25 = bitcast <2 x i64> %64 to <16 x i8>
  %psrldq = shufflevector <16 x i8> %cast25, <16 x i8> zeroinitializer, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %cast26 = bitcast <16 x i8> %psrldq to <2 x i64>
  store <2 x i64> %cast26, <2 x i64>* %nxt0, align 16
  %65 = load <2 x i64>, <2 x i64>* %prv0, align 16
  %66 = bitcast <2 x i64> %65 to <8 x i16>
  %67 = load i32, i32* %t1, align 4
  %conv27 = trunc i32 %67 to i16
  %68 = insertelement <8 x i16> %66, i16 %conv27, i64 0
  %69 = bitcast <8 x i16> %68 to <2 x i64>
  store <2 x i64> %69, <2 x i64>* %prev, align 16
  %70 = load <2 x i64>, <2 x i64>* %nxt0, align 16
  %71 = bitcast <2 x i64> %70 to <8 x i16>
  %72 = load i8*, i8** %in_near.addr, align 8
  %73 = load i32, i32* %i, align 4
  %add28 = add nsw i32 %73, 8
  %idxprom = sext i32 %add28 to i64
  %arrayidx29 = getelementptr inbounds i8, i8* %72, i64 %idxprom
  %74 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %74 to i32
  %mul31 = mul nsw i32 3, %conv30
  %75 = load i8*, i8** %in_far.addr, align 8
  %76 = load i32, i32* %i, align 4
  %add32 = add nsw i32 %76, 8
  %idxprom33 = sext i32 %add32 to i64
  %arrayidx34 = getelementptr inbounds i8, i8* %75, i64 %idxprom33
  %77 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %77 to i32
  %add36 = add nsw i32 %mul31, %conv35
  %conv37 = trunc i32 %add36 to i16
  %78 = insertelement <8 x i16> %71, i16 %conv37, i64 7
  %79 = bitcast <8 x i16> %78 to <2 x i64>
  store <2 x i64> %79, <2 x i64>* %next, align 16
  store i16 8, i16* %__w.addr.i, align 2
  %80 = load i16, i16* %__w.addr.i, align 2
  %81 = load i16, i16* %__w.addr.i, align 2
  %82 = load i16, i16* %__w.addr.i, align 2
  %83 = load i16, i16* %__w.addr.i, align 2
  %84 = load i16, i16* %__w.addr.i, align 2
  %85 = load i16, i16* %__w.addr.i, align 2
  %86 = load i16, i16* %__w.addr.i, align 2
  %87 = load i16, i16* %__w.addr.i, align 2
  store i16 %80, i16* %__w7.addr.i.i, align 2
  store i16 %81, i16* %__w6.addr.i.i, align 2
  store i16 %82, i16* %__w5.addr.i.i, align 2
  store i16 %83, i16* %__w4.addr.i.i, align 2
  store i16 %84, i16* %__w3.addr.i.i, align 2
  store i16 %85, i16* %__w2.addr.i.i, align 2
  store i16 %86, i16* %__w1.addr.i.i, align 2
  store i16 %87, i16* %__w0.addr.i.i, align 2
  %88 = load i16, i16* %__w0.addr.i.i, align 2
  %vecinit.i.i = insertelement <8 x i16> undef, i16 %88, i32 0
  %89 = load i16, i16* %__w1.addr.i.i, align 2
  %vecinit1.i.i = insertelement <8 x i16> %vecinit.i.i, i16 %89, i32 1
  %90 = load i16, i16* %__w2.addr.i.i, align 2
  %vecinit2.i.i = insertelement <8 x i16> %vecinit1.i.i, i16 %90, i32 2
  %91 = load i16, i16* %__w3.addr.i.i, align 2
  %vecinit3.i.i = insertelement <8 x i16> %vecinit2.i.i, i16 %91, i32 3
  %92 = load i16, i16* %__w4.addr.i.i, align 2
  %vecinit4.i.i = insertelement <8 x i16> %vecinit3.i.i, i16 %92, i32 4
  %93 = load i16, i16* %__w5.addr.i.i, align 2
  %vecinit5.i.i = insertelement <8 x i16> %vecinit4.i.i, i16 %93, i32 5
  %94 = load i16, i16* %__w6.addr.i.i, align 2
  %vecinit6.i.i = insertelement <8 x i16> %vecinit5.i.i, i16 %94, i32 6
  %95 = load i16, i16* %__w7.addr.i.i, align 2
  %vecinit7.i.i = insertelement <8 x i16> %vecinit6.i.i, i16 %95, i32 7
  store <8 x i16> %vecinit7.i.i, <8 x i16>* %.compoundliteral.i.i, align 16
  %96 = load <8 x i16>, <8 x i16>* %.compoundliteral.i.i, align 16
  %97 = bitcast <8 x i16> %96 to <2 x i64>
  store <2 x i64> %97, <2 x i64>* %bias, align 16
  %98 = load <2 x i64>, <2 x i64>* %curr, align 16
  store <2 x i64> %98, <2 x i64>* %__a.addr.i141, align 16
  store i32 2, i32* %__count.addr.i142, align 4
  %99 = load <2 x i64>, <2 x i64>* %__a.addr.i141, align 16
  %100 = bitcast <2 x i64> %99 to <8 x i16>
  %101 = load i32, i32* %__count.addr.i142, align 4
  %102 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %100, i32 %101) #10
  %103 = bitcast <8 x i16> %102 to <2 x i64>
  store <2 x i64> %103, <2 x i64>* %curs, align 16
  %104 = load <2 x i64>, <2 x i64>* %prev, align 16
  %105 = load <2 x i64>, <2 x i64>* %curr, align 16
  store <2 x i64> %104, <2 x i64>* %__a.addr.i138, align 16
  store <2 x i64> %105, <2 x i64>* %__b.addr.i139, align 16
  %106 = load <2 x i64>, <2 x i64>* %__a.addr.i138, align 16
  %107 = bitcast <2 x i64> %106 to <8 x i16>
  %108 = load <2 x i64>, <2 x i64>* %__b.addr.i139, align 16
  %109 = bitcast <2 x i64> %108 to <8 x i16>
  %sub.i140 = sub <8 x i16> %107, %109
  %110 = bitcast <8 x i16> %sub.i140 to <2 x i64>
  store <2 x i64> %110, <2 x i64>* %prvd, align 16
  %111 = load <2 x i64>, <2 x i64>* %next, align 16
  %112 = load <2 x i64>, <2 x i64>* %curr, align 16
  store <2 x i64> %111, <2 x i64>* %__a.addr.i136, align 16
  store <2 x i64> %112, <2 x i64>* %__b.addr.i137, align 16
  %113 = load <2 x i64>, <2 x i64>* %__a.addr.i136, align 16
  %114 = bitcast <2 x i64> %113 to <8 x i16>
  %115 = load <2 x i64>, <2 x i64>* %__b.addr.i137, align 16
  %116 = bitcast <2 x i64> %115 to <8 x i16>
  %sub.i = sub <8 x i16> %114, %116
  %117 = bitcast <8 x i16> %sub.i to <2 x i64>
  store <2 x i64> %117, <2 x i64>* %nxtd, align 16
  %118 = load <2 x i64>, <2 x i64>* %curs, align 16
  %119 = load <2 x i64>, <2 x i64>* %bias, align 16
  store <2 x i64> %118, <2 x i64>* %__a.addr.i133, align 16
  store <2 x i64> %119, <2 x i64>* %__b.addr.i134, align 16
  %120 = load <2 x i64>, <2 x i64>* %__a.addr.i133, align 16
  %121 = bitcast <2 x i64> %120 to <8 x i16>
  %122 = load <2 x i64>, <2 x i64>* %__b.addr.i134, align 16
  %123 = bitcast <2 x i64> %122 to <8 x i16>
  %add.i135 = add <8 x i16> %121, %123
  %124 = bitcast <8 x i16> %add.i135 to <2 x i64>
  store <2 x i64> %124, <2 x i64>* %curb, align 16
  %125 = load <2 x i64>, <2 x i64>* %prvd, align 16
  %126 = load <2 x i64>, <2 x i64>* %curb, align 16
  store <2 x i64> %125, <2 x i64>* %__a.addr.i130, align 16
  store <2 x i64> %126, <2 x i64>* %__b.addr.i131, align 16
  %127 = load <2 x i64>, <2 x i64>* %__a.addr.i130, align 16
  %128 = bitcast <2 x i64> %127 to <8 x i16>
  %129 = load <2 x i64>, <2 x i64>* %__b.addr.i131, align 16
  %130 = bitcast <2 x i64> %129 to <8 x i16>
  %add.i132 = add <8 x i16> %128, %130
  %131 = bitcast <8 x i16> %add.i132 to <2 x i64>
  store <2 x i64> %131, <2 x i64>* %even, align 16
  %132 = load <2 x i64>, <2 x i64>* %nxtd, align 16
  %133 = load <2 x i64>, <2 x i64>* %curb, align 16
  store <2 x i64> %132, <2 x i64>* %__a.addr.i128, align 16
  store <2 x i64> %133, <2 x i64>* %__b.addr.i129, align 16
  %134 = load <2 x i64>, <2 x i64>* %__a.addr.i128, align 16
  %135 = bitcast <2 x i64> %134 to <8 x i16>
  %136 = load <2 x i64>, <2 x i64>* %__b.addr.i129, align 16
  %137 = bitcast <2 x i64> %136 to <8 x i16>
  %add.i = add <8 x i16> %135, %137
  %138 = bitcast <8 x i16> %add.i to <2 x i64>
  store <2 x i64> %138, <2 x i64>* %odd, align 16
  %139 = load <2 x i64>, <2 x i64>* %even, align 16
  %140 = load <2 x i64>, <2 x i64>* %odd, align 16
  store <2 x i64> %139, <2 x i64>* %__a.addr.i125, align 16
  store <2 x i64> %140, <2 x i64>* %__b.addr.i126, align 16
  %141 = load <2 x i64>, <2 x i64>* %__a.addr.i125, align 16
  %142 = bitcast <2 x i64> %141 to <8 x i16>
  %143 = load <2 x i64>, <2 x i64>* %__b.addr.i126, align 16
  %144 = bitcast <2 x i64> %143 to <8 x i16>
  %shuffle.i127 = shufflevector <8 x i16> %142, <8 x i16> %144, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %145 = bitcast <8 x i16> %shuffle.i127 to <2 x i64>
  store <2 x i64> %145, <2 x i64>* %int0, align 16
  %146 = load <2 x i64>, <2 x i64>* %even, align 16
  %147 = load <2 x i64>, <2 x i64>* %odd, align 16
  store <2 x i64> %146, <2 x i64>* %__a.addr.i123, align 16
  store <2 x i64> %147, <2 x i64>* %__b.addr.i124, align 16
  %148 = load <2 x i64>, <2 x i64>* %__a.addr.i123, align 16
  %149 = bitcast <2 x i64> %148 to <8 x i16>
  %150 = load <2 x i64>, <2 x i64>* %__b.addr.i124, align 16
  %151 = bitcast <2 x i64> %150 to <8 x i16>
  %shuffle.i = shufflevector <8 x i16> %149, <8 x i16> %151, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %152 = bitcast <8 x i16> %shuffle.i to <2 x i64>
  store <2 x i64> %152, <2 x i64>* %int1, align 16
  %153 = load <2 x i64>, <2 x i64>* %int0, align 16
  store <2 x i64> %153, <2 x i64>* %__a.addr.i121, align 16
  store i32 4, i32* %__count.addr.i122, align 4
  %154 = load <2 x i64>, <2 x i64>* %__a.addr.i121, align 16
  %155 = bitcast <2 x i64> %154 to <8 x i16>
  %156 = load i32, i32* %__count.addr.i122, align 4
  %157 = call <8 x i16> @llvm.x86.sse2.psrli.w(<8 x i16> %155, i32 %156) #10
  %158 = bitcast <8 x i16> %157 to <2 x i64>
  store <2 x i64> %158, <2 x i64>* %de0, align 16
  %159 = load <2 x i64>, <2 x i64>* %int1, align 16
  store <2 x i64> %159, <2 x i64>* %__a.addr.i120, align 16
  store i32 4, i32* %__count.addr.i, align 4
  %160 = load <2 x i64>, <2 x i64>* %__a.addr.i120, align 16
  %161 = bitcast <2 x i64> %160 to <8 x i16>
  %162 = load i32, i32* %__count.addr.i, align 4
  %163 = call <8 x i16> @llvm.x86.sse2.psrli.w(<8 x i16> %161, i32 %162) #10
  %164 = bitcast <8 x i16> %163 to <2 x i64>
  store <2 x i64> %164, <2 x i64>* %de1, align 16
  %165 = load <2 x i64>, <2 x i64>* %de0, align 16
  %166 = load <2 x i64>, <2 x i64>* %de1, align 16
  store <2 x i64> %165, <2 x i64>* %__a.addr.i, align 16
  store <2 x i64> %166, <2 x i64>* %__b.addr.i119, align 16
  %167 = load <2 x i64>, <2 x i64>* %__a.addr.i, align 16
  %168 = bitcast <2 x i64> %167 to <8 x i16>
  %169 = load <2 x i64>, <2 x i64>* %__b.addr.i119, align 16
  %170 = bitcast <2 x i64> %169 to <8 x i16>
  %171 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %168, <8 x i16> %170) #10
  %172 = bitcast <16 x i8> %171 to <2 x i64>
  store <2 x i64> %172, <2 x i64>* %outv, align 16
  %173 = load i8*, i8** %out.addr, align 8
  %174 = load i32, i32* %i, align 4
  %mul50 = mul nsw i32 %174, 2
  %idx.ext51 = sext i32 %mul50 to i64
  %add.ptr52 = getelementptr inbounds i8, i8* %173, i64 %idx.ext51
  %175 = bitcast i8* %add.ptr52 to <2 x i64>*
  %176 = load <2 x i64>, <2 x i64>* %outv, align 16
  store <2 x i64>* %175, <2 x i64>** %__p.addr.i, align 8
  store <2 x i64> %176, <2 x i64>* %__b.addr.i, align 16
  %177 = load <2 x i64>, <2 x i64>* %__b.addr.i, align 16
  %178 = load <2 x i64>*, <2 x i64>** %__p.addr.i, align 8
  %179 = bitcast <2 x i64>* %178 to %struct.__storeu_si128*
  %__v.i = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %179, i32 0, i32 0
  store <2 x i64> %177, <2 x i64>* %__v.i, align 1
  %180 = load i8*, i8** %in_near.addr, align 8
  %181 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %181, 7
  %idxprom54 = sext i32 %add53 to i64
  %arrayidx55 = getelementptr inbounds i8, i8* %180, i64 %idxprom54
  %182 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %182 to i32
  %mul57 = mul nsw i32 3, %conv56
  %183 = load i8*, i8** %in_far.addr, align 8
  %184 = load i32, i32* %i, align 4
  %add58 = add nsw i32 %184, 7
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds i8, i8* %183, i64 %idxprom59
  %185 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %185 to i32
  %add62 = add nsw i32 %mul57, %conv61
  store i32 %add62, i32* %t1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %186 = load i32, i32* %i, align 4
  %add63 = add nsw i32 %186, 8
  store i32 %add63, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %187 = load i32, i32* %t1, align 4
  store i32 %187, i32* %t0, align 4
  %188 = load i8*, i8** %in_near.addr, align 8
  %189 = load i32, i32* %i, align 4
  %idxprom64 = sext i32 %189 to i64
  %arrayidx65 = getelementptr inbounds i8, i8* %188, i64 %idxprom64
  %190 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %190 to i32
  %mul67 = mul nsw i32 3, %conv66
  %191 = load i8*, i8** %in_far.addr, align 8
  %192 = load i32, i32* %i, align 4
  %idxprom68 = sext i32 %192 to i64
  %arrayidx69 = getelementptr inbounds i8, i8* %191, i64 %idxprom68
  %193 = load i8, i8* %arrayidx69, align 1
  %conv70 = zext i8 %193 to i32
  %add71 = add nsw i32 %mul67, %conv70
  store i32 %add71, i32* %t1, align 4
  %194 = load i32, i32* %t1, align 4
  %mul72 = mul nsw i32 3, %194
  %195 = load i32, i32* %t0, align 4
  %add73 = add nsw i32 %mul72, %195
  %add74 = add nsw i32 %add73, 8
  %shr75 = ashr i32 %add74, 4
  %conv76 = trunc i32 %shr75 to i8
  %196 = load i8*, i8** %out.addr, align 8
  %197 = load i32, i32* %i, align 4
  %mul77 = mul nsw i32 %197, 2
  %idxprom78 = sext i32 %mul77 to i64
  %arrayidx79 = getelementptr inbounds i8, i8* %196, i64 %idxprom78
  store i8 %conv76, i8* %arrayidx79, align 1
  %198 = load i32, i32* %i, align 4
  %inc = add nsw i32 %198, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc109, %for.end
  %199 = load i32, i32* %i, align 4
  %200 = load i32, i32* %w.addr, align 4
  %cmp81 = icmp slt i32 %199, %200
  br i1 %cmp81, label %for.body83, label %for.end111

for.body83:                                       ; preds = %for.cond80
  %201 = load i32, i32* %t1, align 4
  store i32 %201, i32* %t0, align 4
  %202 = load i8*, i8** %in_near.addr, align 8
  %203 = load i32, i32* %i, align 4
  %idxprom84 = sext i32 %203 to i64
  %arrayidx85 = getelementptr inbounds i8, i8* %202, i64 %idxprom84
  %204 = load i8, i8* %arrayidx85, align 1
  %conv86 = zext i8 %204 to i32
  %mul87 = mul nsw i32 3, %conv86
  %205 = load i8*, i8** %in_far.addr, align 8
  %206 = load i32, i32* %i, align 4
  %idxprom88 = sext i32 %206 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %205, i64 %idxprom88
  %207 = load i8, i8* %arrayidx89, align 1
  %conv90 = zext i8 %207 to i32
  %add91 = add nsw i32 %mul87, %conv90
  store i32 %add91, i32* %t1, align 4
  %208 = load i32, i32* %t0, align 4
  %mul92 = mul nsw i32 3, %208
  %209 = load i32, i32* %t1, align 4
  %add93 = add nsw i32 %mul92, %209
  %add94 = add nsw i32 %add93, 8
  %shr95 = ashr i32 %add94, 4
  %conv96 = trunc i32 %shr95 to i8
  %210 = load i8*, i8** %out.addr, align 8
  %211 = load i32, i32* %i, align 4
  %mul97 = mul nsw i32 %211, 2
  %sub98 = sub nsw i32 %mul97, 1
  %idxprom99 = sext i32 %sub98 to i64
  %arrayidx100 = getelementptr inbounds i8, i8* %210, i64 %idxprom99
  store i8 %conv96, i8* %arrayidx100, align 1
  %212 = load i32, i32* %t1, align 4
  %mul101 = mul nsw i32 3, %212
  %213 = load i32, i32* %t0, align 4
  %add102 = add nsw i32 %mul101, %213
  %add103 = add nsw i32 %add102, 8
  %shr104 = ashr i32 %add103, 4
  %conv105 = trunc i32 %shr104 to i8
  %214 = load i8*, i8** %out.addr, align 8
  %215 = load i32, i32* %i, align 4
  %mul106 = mul nsw i32 %215, 2
  %idxprom107 = sext i32 %mul106 to i64
  %arrayidx108 = getelementptr inbounds i8, i8* %214, i64 %idxprom107
  store i8 %conv105, i8* %arrayidx108, align 1
  br label %for.inc109

for.inc109:                                       ; preds = %for.body83
  %216 = load i32, i32* %i, align 4
  %inc110 = add nsw i32 %216, 1
  store i32 %inc110, i32* %i, align 4
  br label %for.cond80

for.end111:                                       ; preds = %for.cond80
  %217 = load i32, i32* %t1, align 4
  %add112 = add nsw i32 %217, 2
  %shr113 = ashr i32 %add112, 2
  %conv114 = trunc i32 %shr113 to i8
  %218 = load i8*, i8** %out.addr, align 8
  %219 = load i32, i32* %w.addr, align 4
  %mul115 = mul nsw i32 %219, 2
  %sub116 = sub nsw i32 %mul115, 1
  %idxprom117 = sext i32 %sub116 to i64
  %arrayidx118 = getelementptr inbounds i8, i8* %218, i64 %idxprom117
  store i8 %conv114, i8* %arrayidx118, align 1
  %220 = load i8*, i8** %out.addr, align 8
  store i8* %220, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end111, %if.then
  %221 = load i8*, i8** %retval, align 8
  ret i8* %221
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16>, i32) #9

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psrli.w(<8 x i16>, i32) #9

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #9

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #9

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16>, i32) #9

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #9

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32>, i32) #9

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #9

; Function Attrs: noinline nounwind optnone
define internal zeroext i8 @stbi__clamp(i32 %x) #0 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp ugt i32 %0, 255
  br i1 %cmp, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %x.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %if.then
  %2 = load i32, i32* %x.addr, align 4
  %cmp3 = icmp sgt i32 %2, 255
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i8 -1, i8* %retval, align 1
  br label %return

if.end5:                                          ; preds = %if.end
  br label %if.end6

if.end6:                                          ; preds = %if.end5, %entry
  %3 = load i32, i32* %x.addr, align 4
  %conv = trunc i32 %3 to i8
  store i8 %conv, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end6, %if.then4, %if.then2
  %4 = load i8, i8* %retval, align 1
  ret i8 %4
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__start_callbacks(%struct.stbi__context* %s, %struct.stbi_io_callbacks* %c, i8* %user) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %c.addr = alloca %struct.stbi_io_callbacks*, align 8
  %user.addr = alloca i8*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store %struct.stbi_io_callbacks* %c, %struct.stbi_io_callbacks** %c.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %0, i32 0, i32 4
  %1 = load %struct.stbi_io_callbacks*, %struct.stbi_io_callbacks** %c.addr, align 8
  %2 = bitcast %struct.stbi_io_callbacks* %io to i8*
  %3 = bitcast %struct.stbi_io_callbacks* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false)
  %4 = load i8*, i8** %user.addr, align 8
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io_user_data = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %5, i32 0, i32 5
  store i8* %4, i8** %io_user_data, align 8
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %buflen = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %6, i32 0, i32 7
  store i32 128, i32* %buflen, align 4
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %read_from_callbacks = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %7, i32 0, i32 6
  store i32 1, i32* %read_from_callbacks, align 8
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %callback_already_read = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %8, i32 0, i32 9
  store i32 0, i32* %callback_already_read, align 8
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %buffer_start = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %9, i32 0, i32 8
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer_start, i64 0, i64 0
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_original = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %10, i32 0, i32 12
  store i8* %arraydecay, i8** %img_buffer_original, align 8
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %11, i32 0, i32 10
  store i8* %arraydecay, i8** %img_buffer, align 8
  %12 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__refill_buffer(%struct.stbi__context* %12)
  %13 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %13, i32 0, i32 11
  %14 = load i8*, i8** %img_buffer_end, align 8
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_original_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %15, i32 0, i32 13
  store i8* %14, i8** %img_buffer_original_end, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__stdio_read(i8* %user, i8* %data, i32 %size) #0 {
entry:
  %user.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  store i8* %user, i8** %user.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i8*, i8** %data.addr, align 8
  %1 = load i32, i32* %size.addr, align 4
  %conv = sext i32 %1 to i64
  %2 = load i8*, i8** %user.addr, align 8
  %3 = bitcast i8* %2 to %struct._IO_FILE*
  %call = call i64 @fread(i8* %0, i64 1, i64 %conv, %struct._IO_FILE* %3)
  %conv1 = trunc i64 %call to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__stdio_skip(i8* %user, i32 %n) #0 {
entry:
  %user.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %ch = alloca i32, align 4
  store i8* %user, i8** %user.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %user.addr, align 8
  %1 = bitcast i8* %0 to %struct._IO_FILE*
  %2 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %2 to i64
  %call = call i32 @fseek(%struct._IO_FILE* %1, i64 %conv, i32 1)
  %3 = load i8*, i8** %user.addr, align 8
  %4 = bitcast i8* %3 to %struct._IO_FILE*
  %call1 = call i32 @fgetc(%struct._IO_FILE* %4)
  store i32 %call1, i32* %ch, align 4
  %5 = load i32, i32* %ch, align 4
  %cmp = icmp ne i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %ch, align 4
  %7 = load i8*, i8** %user.addr, align 8
  %8 = bitcast i8* %7 to %struct._IO_FILE*
  %call3 = call i32 @ungetc(i32 %6, %struct._IO_FILE* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__stdio_eof(i8* %user) #0 {
entry:
  %user.addr = alloca i8*, align 8
  store i8* %user, i8** %user.addr, align 8
  %0 = load i8*, i8** %user.addr, align 8
  %1 = bitcast i8* %0 to %struct._IO_FILE*
  %call = call i32 @feof(%struct._IO_FILE* %1) #10
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load i8*, i8** %user.addr, align 8
  %3 = bitcast i8* %2 to %struct._IO_FILE*
  %call1 = call i32 @ferror(%struct._IO_FILE* %3) #10
  %tobool2 = icmp ne i32 %call1, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %tobool2, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind
declare i32 @feof(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare i32 @ferror(%struct._IO_FILE*) #1

declare i32 @fgetc(%struct._IO_FILE*) #2

declare i32 @ungetc(i32, %struct._IO_FILE*) #2

declare i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #2

declare %struct._IO_FILE* @fopen(i8*, i8*) #2

; Function Attrs: noinline nounwind optnone
define i16* @stbi_load_from_file_16(%struct._IO_FILE* %f, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %result = alloca i16*, align 8
  %s = alloca %struct.stbi__context, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  call void @stbi__start_file(%struct.stbi__context* %s, %struct._IO_FILE* %0)
  %1 = load i32*, i32** %x.addr, align 8
  %2 = load i32*, i32** %y.addr, align 8
  %3 = load i32*, i32** %comp.addr, align 8
  %4 = load i32, i32* %req_comp.addr, align 4
  %call = call i16* @stbi__load_and_postprocess_16bit(%struct.stbi__context* %s, i32* %1, i32* %2, i32* %3, i32 %4)
  store i16* %call, i16** %result, align 8
  %5 = load i16*, i16** %result, align 8
  %tobool = icmp ne i16* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  %img_buffer_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %s, i32 0, i32 11
  %7 = load i8*, i8** %img_buffer_end, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %s, i32 0, i32 10
  %8 = load i8*, i8** %img_buffer, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = sext i32 %sub to i64
  %call2 = call i32 @fseek(%struct._IO_FILE* %6, i64 %conv1, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i16*, i16** %result, align 8
  ret i16* %9
}

; Function Attrs: noinline nounwind optnone
define internal i16* @stbi__load_and_postprocess_16bit(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %retval = alloca i16*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %ri = alloca %struct.stbi__result_info, align 4
  %result = alloca i8*, align 8
  %channels = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %1 = load i32*, i32** %x.addr, align 8
  %2 = load i32*, i32** %y.addr, align 8
  %3 = load i32*, i32** %comp.addr, align 8
  %4 = load i32, i32* %req_comp.addr, align 4
  %call = call i8* @stbi__load_main(%struct.stbi__context* %0, i32* %1, i32* %2, i32* %3, i32 %4, %struct.stbi__result_info* %ri, i32 16)
  store i8* %call, i8** %result, align 8
  %5 = load i8*, i8** %result, align 8
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i16* null, i16** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %bits_per_channel = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %ri, i32 0, i32 0
  %6 = load i32, i32* %bits_per_channel, align 4
  %cmp1 = icmp eq i32 %6, 8
  br i1 %cmp1, label %if.then4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %bits_per_channel2 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %ri, i32 0, i32 0
  %7 = load i32, i32* %bits_per_channel2, align 4
  %cmp3 = icmp eq i32 %7, 16
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  br label %if.end5

if.else:                                          ; preds = %lor.lhs.false
  call void @__assert_fail(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.30, i64 0, i64 0), i32 1235, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @__PRETTY_FUNCTION__.stbi__load_and_postprocess_16bit, i64 0, i64 0)) #11
  unreachable

if.end5:                                          ; preds = %if.then4
  %bits_per_channel6 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %ri, i32 0, i32 0
  %8 = load i32, i32* %bits_per_channel6, align 4
  %cmp7 = icmp ne i32 %8, 16
  br i1 %cmp7, label %if.then8, label %if.end12

if.then8:                                         ; preds = %if.end5
  %9 = load i8*, i8** %result, align 8
  %10 = load i32*, i32** %x.addr, align 8
  %11 = load i32, i32* %10, align 4
  %12 = load i32*, i32** %y.addr, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32, i32* %req_comp.addr, align 4
  %cmp9 = icmp eq i32 %14, 0
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then8
  %15 = load i32*, i32** %comp.addr, align 8
  %16 = load i32, i32* %15, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then8
  %17 = load i32, i32* %req_comp.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %16, %cond.true ], [ %17, %cond.false ]
  %call10 = call i16* @stbi__convert_8_to_16(i8* %9, i32 %11, i32 %13, i32 %cond)
  %18 = bitcast i16* %call10 to i8*
  store i8* %18, i8** %result, align 8
  %bits_per_channel11 = getelementptr inbounds %struct.stbi__result_info, %struct.stbi__result_info* %ri, i32 0, i32 0
  store i32 16, i32* %bits_per_channel11, align 4
  br label %if.end12

if.end12:                                         ; preds = %cond.end, %if.end5
  %19 = load i32, i32* @stbi__vertically_flip_on_load_set, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %cond.true13, label %cond.false15

cond.true13:                                      ; preds = %if.end12
  %20 = load i32, i32* @stbi__vertically_flip_on_load_local, align 4
  %tobool14 = icmp ne i32 %20, 0
  br i1 %tobool14, label %if.then17, label %if.end24

cond.false15:                                     ; preds = %if.end12
  %21 = load i32, i32* @stbi__vertically_flip_on_load_global, align 4
  %tobool16 = icmp ne i32 %21, 0
  br i1 %tobool16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %cond.false15, %cond.true13
  %22 = load i32, i32* %req_comp.addr, align 4
  %tobool18 = icmp ne i32 %22, 0
  br i1 %tobool18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %if.then17
  %23 = load i32, i32* %req_comp.addr, align 4
  br label %cond.end21

cond.false20:                                     ; preds = %if.then17
  %24 = load i32*, i32** %comp.addr, align 8
  %25 = load i32, i32* %24, align 4
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i32 [ %23, %cond.true19 ], [ %25, %cond.false20 ]
  store i32 %cond22, i32* %channels, align 4
  %26 = load i8*, i8** %result, align 8
  %27 = load i32*, i32** %x.addr, align 8
  %28 = load i32, i32* %27, align 4
  %29 = load i32*, i32** %y.addr, align 8
  %30 = load i32, i32* %29, align 4
  %31 = load i32, i32* %channels, align 4
  %conv = sext i32 %31 to i64
  %mul = mul i64 %conv, 2
  %conv23 = trunc i64 %mul to i32
  call void @stbi__vertical_flip(i8* %26, i32 %28, i32 %30, i32 %conv23)
  br label %if.end24

if.end24:                                         ; preds = %cond.end21, %cond.false15, %cond.true13
  %32 = load i8*, i8** %result, align 8
  %33 = bitcast i8* %32 to i16*
  store i16* %33, i16** %retval, align 8
  br label %return

return:                                           ; preds = %if.end24, %if.then
  %34 = load i16*, i16** %retval, align 8
  ret i16* %34
}

; Function Attrs: noinline nounwind optnone
define internal i16* @stbi__convert_8_to_16(i8* %orig, i32 %w, i32 %h, i32 %channels) #0 {
entry:
  %retval = alloca i16*, align 8
  %orig.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %channels.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %img_len = alloca i32, align 4
  %enlarged = alloca i16*, align 8
  store i8* %orig, i8** %orig.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %channels, i32* %channels.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %channels.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  store i32 %mul1, i32* %img_len, align 4
  %3 = load i32, i32* %img_len, align 4
  %mul2 = mul nsw i32 %3, 2
  %conv = sext i32 %mul2 to i64
  %call = call i8* @stbi__malloc(i64 %conv)
  %4 = bitcast i8* %call to i16*
  store i16* %4, i16** %enlarged, align 8
  %5 = load i16*, i16** %enlarged, align 8
  %cmp = icmp eq i16* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call4 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool = icmp ne i32 %call4, 0
  %6 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* null, i8* null
  %7 = ptrtoint i8* %cond to i64
  %8 = inttoptr i64 %7 to i8*
  %9 = bitcast i8* %8 to i16*
  store i16* %9, i16** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %img_len, align 4
  %cmp5 = icmp slt i32 %10, %11
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i8*, i8** %orig.addr, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom = sext i32 %13 to i64
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %idxprom
  %14 = load i8, i8* %arrayidx, align 1
  %conv7 = zext i8 %14 to i32
  %shl = shl i32 %conv7, 8
  %15 = load i8*, i8** %orig.addr, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %16 to i64
  %arrayidx9 = getelementptr inbounds i8, i8* %15, i64 %idxprom8
  %17 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %17 to i32
  %add = add nsw i32 %shl, %conv10
  %conv11 = trunc i32 %add to i16
  %18 = load i16*, i16** %enlarged, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %19 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %18, i64 %idxprom12
  store i16 %conv11, i16* %arrayidx13, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load i8*, i8** %orig.addr, align 8
  call void @free(i8* %21) #10
  %22 = load i16*, i16** %enlarged, align 8
  store i16* %22, i16** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %23 = load i16*, i16** %retval, align 8
  ret i16* %23
}

; Function Attrs: noinline nounwind optnone
define i16* @stbi_load_16(i8* %filename, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %retval = alloca i16*, align 8
  %filename.addr = alloca i8*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %f = alloca %struct._IO_FILE*, align 8
  %result = alloca i16*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load i8*, i8** %filename.addr, align 8
  %call = call %struct._IO_FILE* @stbi__fopen(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %f, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %tobool = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %tobool2 = icmp ne i32 %call1, 0
  %2 = zext i1 %tobool2 to i64
  %cond = select i1 %tobool2, i8* null, i8* null
  %3 = ptrtoint i8* %cond to i64
  %4 = inttoptr i64 %3 to i8*
  %5 = bitcast i8* %4 to i16*
  store i16* %5, i16** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %7 = load i32*, i32** %x.addr, align 8
  %8 = load i32*, i32** %y.addr, align 8
  %9 = load i32*, i32** %comp.addr, align 8
  %10 = load i32, i32* %req_comp.addr, align 4
  %call3 = call i16* @stbi_load_from_file_16(%struct._IO_FILE* %6, i32* %7, i32* %8, i32* %9, i32 %10)
  store i16* %call3, i16** %result, align 8
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call4 = call i32 @fclose(%struct._IO_FILE* %11)
  %12 = load i16*, i16** %result, align 8
  store i16* %12, i16** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i16*, i16** %retval, align 8
  ret i16* %13
}

; Function Attrs: noinline nounwind optnone
define i16* @stbi_load_16_from_memory(i8* %buffer, i32 %len, i32* %x, i32* %y, i32* %channels_in_file, i32 %desired_channels) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %channels_in_file.addr = alloca i32*, align 8
  %desired_channels.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %channels_in_file, i32** %channels_in_file.addr, align 8
  store i32 %desired_channels, i32* %desired_channels.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  call void @stbi__start_mem(%struct.stbi__context* %s, i8* %0, i32 %1)
  %2 = load i32*, i32** %x.addr, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32*, i32** %channels_in_file.addr, align 8
  %5 = load i32, i32* %desired_channels.addr, align 4
  %call = call i16* @stbi__load_and_postprocess_16bit(%struct.stbi__context* %s, i32* %2, i32* %3, i32* %4, i32 %5)
  ret i16* %call
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__start_mem(%struct.stbi__context* %s, i8* %buffer, i32 %len) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %io = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %0, i32 0, i32 4
  %read = getelementptr inbounds %struct.stbi_io_callbacks, %struct.stbi_io_callbacks* %io, i32 0, i32 0
  store i32 (i8*, i8*, i32)* null, i32 (i8*, i8*, i32)** %read, align 8
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %read_from_callbacks = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %1, i32 0, i32 6
  store i32 0, i32* %read_from_callbacks, align 8
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %callback_already_read = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %2, i32 0, i32 9
  store i32 0, i32* %callback_already_read, align 8
  %3 = load i8*, i8** %buffer.addr, align 8
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_original = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 12
  store i8* %3, i8** %img_buffer_original, align 8
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %5, i32 0, i32 10
  store i8* %3, i8** %img_buffer, align 8
  %6 = load i8*, i8** %buffer.addr, align 8
  %7 = load i32, i32* %len.addr, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %idx.ext
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_original_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %8, i32 0, i32 13
  store i8* %add.ptr, i8** %img_buffer_original_end, align 8
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_buffer_end = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %9, i32 0, i32 11
  store i8* %add.ptr, i8** %img_buffer_end, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define i16* @stbi_load_16_from_callbacks(%struct.stbi_io_callbacks* %clbk, i8* %user, i32* %x, i32* %y, i32* %channels_in_file, i32 %desired_channels) #0 {
entry:
  %clbk.addr = alloca %struct.stbi_io_callbacks*, align 8
  %user.addr = alloca i8*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %channels_in_file.addr = alloca i32*, align 8
  %desired_channels.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  store %struct.stbi_io_callbacks* %clbk, %struct.stbi_io_callbacks** %clbk.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %channels_in_file, i32** %channels_in_file.addr, align 8
  store i32 %desired_channels, i32* %desired_channels.addr, align 4
  %0 = load %struct.stbi_io_callbacks*, %struct.stbi_io_callbacks** %clbk.addr, align 8
  %1 = load i8*, i8** %user.addr, align 8
  call void @stbi__start_callbacks(%struct.stbi__context* %s, %struct.stbi_io_callbacks* %0, i8* %1)
  %2 = load i32*, i32** %x.addr, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32*, i32** %channels_in_file.addr, align 8
  %5 = load i32, i32* %desired_channels.addr, align 4
  %call = call i16* @stbi__load_and_postprocess_16bit(%struct.stbi__context* %s, i32* %2, i32* %3, i32* %4, i32 %5)
  ret i16* %call
}

; Function Attrs: noinline nounwind optnone
define i8* @stbi_load_from_memory(i8* %buffer, i32 %len, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  call void @stbi__start_mem(%struct.stbi__context* %s, i8* %0, i32 %1)
  %2 = load i32*, i32** %x.addr, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32*, i32** %comp.addr, align 8
  %5 = load i32, i32* %req_comp.addr, align 4
  %call = call i8* @stbi__load_and_postprocess_8bit(%struct.stbi__context* %s, i32* %2, i32* %3, i32* %4, i32 %5)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define i8* @stbi_load_from_callbacks(%struct.stbi_io_callbacks* %clbk, i8* %user, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %clbk.addr = alloca %struct.stbi_io_callbacks*, align 8
  %user.addr = alloca i8*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  store %struct.stbi_io_callbacks* %clbk, %struct.stbi_io_callbacks** %clbk.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load %struct.stbi_io_callbacks*, %struct.stbi_io_callbacks** %clbk.addr, align 8
  %1 = load i8*, i8** %user.addr, align 8
  call void @stbi__start_callbacks(%struct.stbi__context* %s, %struct.stbi_io_callbacks* %0, i8* %1)
  %2 = load i32*, i32** %x.addr, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32*, i32** %comp.addr, align 8
  %5 = load i32, i32* %req_comp.addr, align 4
  %call = call i8* @stbi__load_and_postprocess_8bit(%struct.stbi__context* %s, i32* %2, i32* %3, i32* %4, i32 %5)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define i8* @stbi_load_gif_from_memory(i8* %buffer, i32 %len, i32** %delays, i32* %x, i32* %y, i32* %z, i32* %comp, i32 %req_comp) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %delays.addr = alloca i32**, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %z.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %result = alloca i8*, align 8
  %s = alloca %struct.stbi__context, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32** %delays, i32*** %delays.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %z, i32** %z.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  call void @stbi__start_mem(%struct.stbi__context* %s, i8* %0, i32 %1)
  %2 = load i32**, i32*** %delays.addr, align 8
  %3 = load i32*, i32** %x.addr, align 8
  %4 = load i32*, i32** %y.addr, align 8
  %5 = load i32*, i32** %z.addr, align 8
  %6 = load i32*, i32** %comp.addr, align 8
  %7 = load i32, i32* %req_comp.addr, align 4
  %call = call i8* @stbi__load_gif_main(%struct.stbi__context* %s, i32** %2, i32* %3, i32* %4, i32* %5, i32* %6, i32 %7)
  store i8* %call, i8** %result, align 8
  %8 = load i32, i32* @stbi__vertically_flip_on_load_set, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load i32, i32* @stbi__vertically_flip_on_load_local, align 4
  %tobool1 = icmp ne i32 %9, 0
  br i1 %tobool1, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  %10 = load i32, i32* @stbi__vertically_flip_on_load_global, align 4
  %tobool2 = icmp ne i32 %10, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %11 = load i8*, i8** %result, align 8
  %12 = load i32*, i32** %x.addr, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %y.addr, align 8
  %15 = load i32, i32* %14, align 4
  %16 = load i32*, i32** %z.addr, align 8
  %17 = load i32, i32* %16, align 4
  %18 = load i32*, i32** %comp.addr, align 8
  %19 = load i32, i32* %18, align 4
  call void @stbi__vertical_flip_slices(i8* %11, i32 %13, i32 %15, i32 %17, i32 %19)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %20 = load i8*, i8** %result, align 8
  ret i8* %20
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbi__load_gif_main(%struct.stbi__context* %s, i32** %delays, i32* %x, i32* %y, i32* %z, i32* %comp, i32 %req_comp) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %delays.addr = alloca i32**, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %z.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %layers = alloca i32, align 4
  %u = alloca i8*, align 8
  %out = alloca i8*, align 8
  %two_back = alloca i8*, align 8
  %g = alloca %struct.stbi__gif, align 8
  %stride = alloca i32, align 4
  %out_size = alloca i32, align 4
  %delays_size = alloca i32, align 4
  %tmp = alloca i8*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32** %delays, i32*** %delays.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %z, i32** %z.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__gif_test(%struct.stbi__context* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else75

if.then:                                          ; preds = %entry
  store i32 0, i32* %layers, align 4
  store i8* null, i8** %u, align 8
  store i8* null, i8** %out, align 8
  store i8* null, i8** %two_back, align 8
  store i32 0, i32* %out_size, align 4
  store i32 0, i32* %delays_size, align 4
  %1 = bitcast %struct.stbi__gif* %g to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 34928, i1 false)
  %2 = load i32**, i32*** %delays.addr, align 8
  %tobool1 = icmp ne i32** %2, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %3 = load i32**, i32*** %delays.addr, align 8
  store i32* null, i32** %3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %5 = load i32*, i32** %comp.addr, align 8
  %6 = load i32, i32* %req_comp.addr, align 4
  %7 = load i8*, i8** %two_back, align 8
  %call3 = call i8* @stbi__gif_load_next(%struct.stbi__context* %4, %struct.stbi__gif* %g, i32* %5, i32 %6, i8* %7)
  store i8* %call3, i8** %u, align 8
  %8 = load i8*, i8** %u, align 8
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %10 = bitcast %struct.stbi__context* %9 to i8*
  %cmp = icmp eq i8* %8, %10
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %do.body
  store i8* null, i8** %u, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %do.body
  %11 = load i8*, i8** %u, align 8
  %tobool6 = icmp ne i8* %11, null
  br i1 %tobool6, label %if.then7, label %if.end60

if.then7:                                         ; preds = %if.end5
  %w = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 0
  %12 = load i32, i32* %w, align 8
  %13 = load i32*, i32** %x.addr, align 8
  store i32 %12, i32* %13, align 4
  %h = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 1
  %14 = load i32, i32* %h, align 4
  %15 = load i32*, i32** %y.addr, align 8
  store i32 %14, i32* %15, align 4
  %16 = load i32, i32* %layers, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %layers, align 4
  %w8 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 0
  %17 = load i32, i32* %w8, align 8
  %h9 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 1
  %18 = load i32, i32* %h9, align 4
  %mul = mul nsw i32 %17, %18
  %mul10 = mul nsw i32 %mul, 4
  store i32 %mul10, i32* %stride, align 4
  %19 = load i8*, i8** %out, align 8
  %tobool11 = icmp ne i8* %19, null
  br i1 %tobool11, label %if.then12, label %if.else32

if.then12:                                        ; preds = %if.then7
  %20 = load i8*, i8** %out, align 8
  %21 = load i32, i32* %layers, align 4
  %22 = load i32, i32* %stride, align 4
  %mul13 = mul nsw i32 %21, %22
  %conv = sext i32 %mul13 to i64
  %call14 = call i8* @realloc(i8* %20, i64 %conv) #10
  store i8* %call14, i8** %tmp, align 8
  %23 = load i8*, i8** %tmp, align 8
  %cmp15 = icmp eq i8* null, %23
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.then12
  %out18 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 2
  %24 = load i8*, i8** %out18, align 8
  call void @free(i8* %24) #10
  %history = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 4
  %25 = load i8*, i8** %history, align 8
  call void @free(i8* %25) #10
  %background = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 3
  %26 = load i8*, i8** %background, align 8
  call void @free(i8* %26) #10
  %call19 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool20 = icmp ne i32 %call19, 0
  %27 = zext i1 %tobool20 to i64
  %cond = select i1 %tobool20, i8* null, i8* null
  %28 = ptrtoint i8* %cond to i64
  %29 = inttoptr i64 %28 to i8*
  store i8* %29, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.then12
  %30 = load i8*, i8** %tmp, align 8
  store i8* %30, i8** %out, align 8
  %31 = load i32, i32* %layers, align 4
  %32 = load i32, i32* %stride, align 4
  %mul21 = mul nsw i32 %31, %32
  store i32 %mul21, i32* %out_size, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.else
  %33 = load i32**, i32*** %delays.addr, align 8
  %tobool23 = icmp ne i32** %33, null
  br i1 %tobool23, label %if.then24, label %if.end31

if.then24:                                        ; preds = %if.end22
  %34 = load i32**, i32*** %delays.addr, align 8
  %35 = load i32*, i32** %34, align 8
  %36 = bitcast i32* %35 to i8*
  %37 = load i32, i32* %layers, align 4
  %conv25 = sext i32 %37 to i64
  %mul26 = mul i64 4, %conv25
  %call27 = call i8* @realloc(i8* %36, i64 %mul26) #10
  %38 = bitcast i8* %call27 to i32*
  %39 = load i32**, i32*** %delays.addr, align 8
  store i32* %38, i32** %39, align 8
  %40 = load i32, i32* %layers, align 4
  %conv28 = sext i32 %40 to i64
  %mul29 = mul i64 %conv28, 4
  %conv30 = trunc i64 %mul29 to i32
  store i32 %conv30, i32* %delays_size, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then24, %if.end22
  br label %if.end46

if.else32:                                        ; preds = %if.then7
  %41 = load i32, i32* %layers, align 4
  %42 = load i32, i32* %stride, align 4
  %mul33 = mul nsw i32 %41, %42
  %conv34 = sext i32 %mul33 to i64
  %call35 = call i8* @stbi__malloc(i64 %conv34)
  store i8* %call35, i8** %out, align 8
  %43 = load i32, i32* %layers, align 4
  %44 = load i32, i32* %stride, align 4
  %mul36 = mul nsw i32 %43, %44
  store i32 %mul36, i32* %out_size, align 4
  %45 = load i32**, i32*** %delays.addr, align 8
  %tobool37 = icmp ne i32** %45, null
  br i1 %tobool37, label %if.then38, label %if.end45

if.then38:                                        ; preds = %if.else32
  %46 = load i32, i32* %layers, align 4
  %conv39 = sext i32 %46 to i64
  %mul40 = mul i64 %conv39, 4
  %call41 = call i8* @stbi__malloc(i64 %mul40)
  %47 = bitcast i8* %call41 to i32*
  %48 = load i32**, i32*** %delays.addr, align 8
  store i32* %47, i32** %48, align 8
  %49 = load i32, i32* %layers, align 4
  %conv42 = sext i32 %49 to i64
  %mul43 = mul i64 %conv42, 4
  %conv44 = trunc i64 %mul43 to i32
  store i32 %conv44, i32* %delays_size, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then38, %if.else32
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end31
  %50 = load i8*, i8** %out, align 8
  %51 = load i32, i32* %layers, align 4
  %sub = sub nsw i32 %51, 1
  %52 = load i32, i32* %stride, align 4
  %mul47 = mul nsw i32 %sub, %52
  %idx.ext = sext i32 %mul47 to i64
  %add.ptr = getelementptr inbounds i8, i8* %50, i64 %idx.ext
  %53 = load i8*, i8** %u, align 8
  %54 = load i32, i32* %stride, align 4
  %conv48 = sext i32 %54 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %53, i64 %conv48, i1 false)
  %55 = load i32, i32* %layers, align 4
  %cmp49 = icmp sge i32 %55, 2
  br i1 %cmp49, label %if.then51, label %if.end55

if.then51:                                        ; preds = %if.end46
  %56 = load i8*, i8** %out, align 8
  %57 = load i32, i32* %stride, align 4
  %mul52 = mul nsw i32 2, %57
  %idx.ext53 = sext i32 %mul52 to i64
  %idx.neg = sub i64 0, %idx.ext53
  %add.ptr54 = getelementptr inbounds i8, i8* %56, i64 %idx.neg
  store i8* %add.ptr54, i8** %two_back, align 8
  br label %if.end55

if.end55:                                         ; preds = %if.then51, %if.end46
  %58 = load i32**, i32*** %delays.addr, align 8
  %tobool56 = icmp ne i32** %58, null
  br i1 %tobool56, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end55
  %delay = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 24
  %59 = load i32, i32* %delay, align 8
  %60 = load i32**, i32*** %delays.addr, align 8
  %61 = load i32*, i32** %60, align 8
  %62 = load i32, i32* %layers, align 4
  %sub58 = sub i32 %62, 1
  %idxprom = zext i32 %sub58 to i64
  %arrayidx = getelementptr inbounds i32, i32* %61, i64 %idxprom
  store i32 %59, i32* %arrayidx, align 4
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end55
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.end5
  br label %do.cond

do.cond:                                          ; preds = %if.end60
  %63 = load i8*, i8** %u, align 8
  %cmp61 = icmp ne i8* %63, null
  br i1 %cmp61, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %out63 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 2
  %64 = load i8*, i8** %out63, align 8
  call void @free(i8* %64) #10
  %history64 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 4
  %65 = load i8*, i8** %history64, align 8
  call void @free(i8* %65) #10
  %background65 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 3
  %66 = load i8*, i8** %background65, align 8
  call void @free(i8* %66) #10
  %67 = load i32, i32* %req_comp.addr, align 4
  %tobool66 = icmp ne i32 %67, 0
  br i1 %tobool66, label %land.lhs.true, label %if.end74

land.lhs.true:                                    ; preds = %do.end
  %68 = load i32, i32* %req_comp.addr, align 4
  %cmp67 = icmp ne i32 %68, 4
  br i1 %cmp67, label %if.then69, label %if.end74

if.then69:                                        ; preds = %land.lhs.true
  %69 = load i8*, i8** %out, align 8
  %70 = load i32, i32* %req_comp.addr, align 4
  %71 = load i32, i32* %layers, align 4
  %w70 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 0
  %72 = load i32, i32* %w70, align 8
  %mul71 = mul nsw i32 %71, %72
  %h72 = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %g, i32 0, i32 1
  %73 = load i32, i32* %h72, align 4
  %call73 = call i8* @stbi__convert_format(i8* %69, i32 4, i32 %70, i32 %mul71, i32 %73)
  store i8* %call73, i8** %out, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.then69, %land.lhs.true, %do.end
  %74 = load i32, i32* %layers, align 4
  %75 = load i32*, i32** %z.addr, align 8
  store i32 %74, i32* %75, align 4
  %76 = load i8*, i8** %out, align 8
  store i8* %76, i8** %retval, align 8
  br label %return

if.else75:                                        ; preds = %entry
  %call76 = call i32 @stbi__err(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i64 0, i64 0))
  %tobool77 = icmp ne i32 %call76, 0
  %77 = zext i1 %tobool77 to i64
  %cond78 = select i1 %tobool77, i8* null, i8* null
  %78 = ptrtoint i8* %cond78 to i64
  %79 = inttoptr i64 %78 to i8*
  store i8* %79, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.else75, %if.end74, %if.then17
  %80 = load i8*, i8** %retval, align 8
  ret i8* %80
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__vertical_flip_slices(i8* %image, i32 %w, i32 %h, i32 %z, i32 %bytes_per_pixel) #0 {
entry:
  %image.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %bytes_per_pixel.addr = alloca i32, align 4
  %slice = alloca i32, align 4
  %slice_size = alloca i32, align 4
  %bytes = alloca i8*, align 8
  store i8* %image, i8** %image.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %bytes_per_pixel, i32* %bytes_per_pixel.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %bytes_per_pixel.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  store i32 %mul1, i32* %slice_size, align 4
  %3 = load i8*, i8** %image.addr, align 8
  store i8* %3, i8** %bytes, align 8
  store i32 0, i32* %slice, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %slice, align 4
  %5 = load i32, i32* %z.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i8*, i8** %bytes, align 8
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %9 = load i32, i32* %bytes_per_pixel.addr, align 4
  call void @stbi__vertical_flip(i8* %6, i32 %7, i32 %8, i32 %9)
  %10 = load i32, i32* %slice_size, align 4
  %11 = load i8*, i8** %bytes, align 8
  %idx.ext = sext i32 %10 to i64
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext
  store i8* %add.ptr, i8** %bytes, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %slice, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %slice, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define float* @stbi_loadf_from_memory(i8* %buffer, i32 %len, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  call void @stbi__start_mem(%struct.stbi__context* %s, i8* %0, i32 %1)
  %2 = load i32*, i32** %x.addr, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32*, i32** %comp.addr, align 8
  %5 = load i32, i32* %req_comp.addr, align 4
  %call = call float* @stbi__loadf_main(%struct.stbi__context* %s, i32* %2, i32* %3, i32* %4, i32 %5)
  ret float* %call
}

; Function Attrs: noinline nounwind optnone
define internal float* @stbi__loadf_main(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %retval = alloca float*, align 8
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %data = alloca i8*, align 8
  %ri = alloca %struct.stbi__result_info, align 4
  %hdr_data = alloca float*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__hdr_test(%struct.stbi__context* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %2 = load i32*, i32** %x.addr, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32*, i32** %comp.addr, align 8
  %5 = load i32, i32* %req_comp.addr, align 4
  %call1 = call float* @stbi__hdr_load(%struct.stbi__context* %1, i32* %2, i32* %3, i32* %4, i32 %5, %struct.stbi__result_info* %ri)
  store float* %call1, float** %hdr_data, align 8
  %6 = load float*, float** %hdr_data, align 8
  %tobool2 = icmp ne float* %6, null
  br i1 %tobool2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %7 = load float*, float** %hdr_data, align 8
  %8 = load i32*, i32** %x.addr, align 8
  %9 = load i32*, i32** %y.addr, align 8
  %10 = load i32*, i32** %comp.addr, align 8
  %11 = load i32, i32* %req_comp.addr, align 4
  call void @stbi__float_postprocess(float* %7, i32* %8, i32* %9, i32* %10, i32 %11)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  %12 = load float*, float** %hdr_data, align 8
  store float* %12, float** %retval, align 8
  br label %return

if.end4:                                          ; preds = %entry
  %13 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %14 = load i32*, i32** %x.addr, align 8
  %15 = load i32*, i32** %y.addr, align 8
  %16 = load i32*, i32** %comp.addr, align 8
  %17 = load i32, i32* %req_comp.addr, align 4
  %call5 = call i8* @stbi__load_and_postprocess_8bit(%struct.stbi__context* %13, i32* %14, i32* %15, i32* %16, i32 %17)
  store i8* %call5, i8** %data, align 8
  %18 = load i8*, i8** %data, align 8
  %tobool6 = icmp ne i8* %18, null
  br i1 %tobool6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.end4
  %19 = load i8*, i8** %data, align 8
  %20 = load i32*, i32** %x.addr, align 8
  %21 = load i32, i32* %20, align 4
  %22 = load i32*, i32** %y.addr, align 8
  %23 = load i32, i32* %22, align 4
  %24 = load i32, i32* %req_comp.addr, align 4
  %tobool8 = icmp ne i32 %24, 0
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then7
  %25 = load i32, i32* %req_comp.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then7
  %26 = load i32*, i32** %comp.addr, align 8
  %27 = load i32, i32* %26, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %25, %cond.true ], [ %27, %cond.false ]
  %call9 = call float* @stbi__ldr_to_hdr(i8* %19, i32 %21, i32 %23, i32 %cond)
  store float* %call9, float** %retval, align 8
  br label %return

if.end10:                                         ; preds = %if.end4
  %call11 = call i32 @stbi__err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.31, i64 0, i64 0))
  %tobool12 = icmp ne i32 %call11, 0
  %28 = zext i1 %tobool12 to i64
  %cond13 = select i1 %tobool12, i8* null, i8* null
  %29 = ptrtoint i8* %cond13 to i64
  %30 = inttoptr i64 %29 to float*
  store float* %30, float** %retval, align 8
  br label %return

return:                                           ; preds = %if.end10, %cond.end, %if.end
  %31 = load float*, float** %retval, align 8
  ret float* %31
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__float_postprocess(float* %result, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %result.addr = alloca float*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %channels = alloca i32, align 4
  store float* %result, float** %result.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load i32, i32* @stbi__vertically_flip_on_load_set, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* @stbi__vertically_flip_on_load_local, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* @stbi__vertically_flip_on_load_global, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %3 = load float*, float** %result.addr, align 8
  %cmp = icmp ne float* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, i32* %req_comp.addr, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %if.then
  %5 = load i32, i32* %req_comp.addr, align 4
  br label %cond.end

cond.false5:                                      ; preds = %if.then
  %6 = load i32*, i32** %comp.addr, align 8
  %7 = load i32, i32* %6, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true4
  %cond = phi i32 [ %5, %cond.true4 ], [ %7, %cond.false5 ]
  store i32 %cond, i32* %channels, align 4
  %8 = load float*, float** %result.addr, align 8
  %9 = bitcast float* %8 to i8*
  %10 = load i32*, i32** %x.addr, align 8
  %11 = load i32, i32* %10, align 4
  %12 = load i32*, i32** %y.addr, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32, i32* %channels, align 4
  %conv = sext i32 %14 to i64
  %mul = mul i64 %conv, 4
  %conv6 = trunc i64 %mul to i32
  call void @stbi__vertical_flip(i8* %9, i32 %11, i32 %13, i32 %conv6)
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true, %cond.false, %cond.true
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal float* @stbi__ldr_to_hdr(i8* %data, i32 %x, i32 %y, i32 %comp) #0 {
entry:
  %retval = alloca float*, align 8
  %data.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %output = alloca float*, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  %0 = load i8*, i8** %data.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store float* null, float** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %y.addr, align 4
  %3 = load i32, i32* %comp.addr, align 4
  %call = call i8* @stbi__malloc_mad4(i32 %1, i32 %2, i32 %3, i32 4, i32 0)
  %4 = bitcast i8* %call to float*
  store float* %4, float** %output, align 8
  %5 = load float*, float** %output, align 8
  %cmp = icmp eq float* %5, null
  br i1 %cmp, label %if.then1, label %if.end4

if.then1:                                         ; preds = %if.end
  %6 = load i8*, i8** %data.addr, align 8
  call void @free(i8* %6) #10
  %call2 = call i32 @stbi__err(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  %tobool3 = icmp ne i32 %call2, 0
  %7 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i8* null, i8* null
  %8 = ptrtoint i8* %cond to i64
  %9 = inttoptr i64 %8 to float*
  store float* %9, float** %retval, align 8
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load i32, i32* %comp.addr, align 4
  %and = and i32 %10, 1
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end4
  %11 = load i32, i32* %comp.addr, align 4
  store i32 %11, i32* %n, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end4
  %12 = load i32, i32* %comp.addr, align 4
  %sub = sub nsw i32 %12, 1
  store i32 %sub, i32* %n, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end7
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %x.addr, align 4
  %15 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %14, %15
  %cmp8 = icmp slt i32 %13, %mul
  br i1 %cmp8, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body
  %16 = load i32, i32* %k, align 4
  %17 = load i32, i32* %n, align 4
  %cmp10 = icmp slt i32 %16, %17
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond9
  %18 = load i8*, i8** %data.addr, align 8
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %comp.addr, align 4
  %mul12 = mul nsw i32 %19, %20
  %21 = load i32, i32* %k, align 4
  %add = add nsw i32 %mul12, %21
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds i8, i8* %18, i64 %idxprom
  %22 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %22 to i32
  %conv13 = sitofp i32 %conv to float
  %div = fdiv float %conv13, 2.550000e+02
  %conv14 = fpext float %div to double
  %23 = load float, float* @stbi__l2h_gamma, align 4
  %conv15 = fpext float %23 to double
  %24 = call double @llvm.pow.f64(double %conv14, double %conv15)
  %25 = load float, float* @stbi__l2h_scale, align 4
  %conv16 = fpext float %25 to double
  %mul17 = fmul double %24, %conv16
  %conv18 = fptrunc double %mul17 to float
  %26 = load float*, float** %output, align 8
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %comp.addr, align 4
  %mul19 = mul nsw i32 %27, %28
  %29 = load i32, i32* %k, align 4
  %add20 = add nsw i32 %mul19, %29
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds float, float* %26, i64 %idxprom21
  store float %conv18, float* %arrayidx22, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %30 = load i32, i32* %k, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %31 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %31, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %32 = load i32, i32* %n, align 4
  %33 = load i32, i32* %comp.addr, align 4
  %cmp26 = icmp slt i32 %32, %33
  br i1 %cmp26, label %if.then28, label %if.end48

if.then28:                                        ; preds = %for.end25
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc45, %if.then28
  %34 = load i32, i32* %i, align 4
  %35 = load i32, i32* %x.addr, align 4
  %36 = load i32, i32* %y.addr, align 4
  %mul30 = mul nsw i32 %35, %36
  %cmp31 = icmp slt i32 %34, %mul30
  br i1 %cmp31, label %for.body33, label %for.end47

for.body33:                                       ; preds = %for.cond29
  %37 = load i8*, i8** %data.addr, align 8
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %comp.addr, align 4
  %mul34 = mul nsw i32 %38, %39
  %40 = load i32, i32* %n, align 4
  %add35 = add nsw i32 %mul34, %40
  %idxprom36 = sext i32 %add35 to i64
  %arrayidx37 = getelementptr inbounds i8, i8* %37, i64 %idxprom36
  %41 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %41 to i32
  %conv39 = sitofp i32 %conv38 to float
  %div40 = fdiv float %conv39, 2.550000e+02
  %42 = load float*, float** %output, align 8
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %comp.addr, align 4
  %mul41 = mul nsw i32 %43, %44
  %45 = load i32, i32* %n, align 4
  %add42 = add nsw i32 %mul41, %45
  %idxprom43 = sext i32 %add42 to i64
  %arrayidx44 = getelementptr inbounds float, float* %42, i64 %idxprom43
  store float %div40, float* %arrayidx44, align 4
  br label %for.inc45

for.inc45:                                        ; preds = %for.body33
  %46 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %46, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond29

for.end47:                                        ; preds = %for.cond29
  br label %if.end48

if.end48:                                         ; preds = %for.end47, %for.end25
  %47 = load i8*, i8** %data.addr, align 8
  call void @free(i8* %47) #10
  %48 = load float*, float** %output, align 8
  store float* %48, float** %retval, align 8
  br label %return

return:                                           ; preds = %if.end48, %if.then1, %if.then
  %49 = load float*, float** %retval, align 8
  ret float* %49
}

; Function Attrs: noinline nounwind optnone
define float* @stbi_loadf_from_callbacks(%struct.stbi_io_callbacks* %clbk, i8* %user, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %clbk.addr = alloca %struct.stbi_io_callbacks*, align 8
  %user.addr = alloca i8*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  store %struct.stbi_io_callbacks* %clbk, %struct.stbi_io_callbacks** %clbk.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load %struct.stbi_io_callbacks*, %struct.stbi_io_callbacks** %clbk.addr, align 8
  %1 = load i8*, i8** %user.addr, align 8
  call void @stbi__start_callbacks(%struct.stbi__context* %s, %struct.stbi_io_callbacks* %0, i8* %1)
  %2 = load i32*, i32** %x.addr, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32*, i32** %comp.addr, align 8
  %5 = load i32, i32* %req_comp.addr, align 4
  %call = call float* @stbi__loadf_main(%struct.stbi__context* %s, i32* %2, i32* %3, i32* %4, i32 %5)
  ret float* %call
}

; Function Attrs: noinline nounwind optnone
define float* @stbi_loadf(i8* %filename, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %retval = alloca float*, align 8
  %filename.addr = alloca i8*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %result = alloca float*, align 8
  %f = alloca %struct._IO_FILE*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load i8*, i8** %filename.addr, align 8
  %call = call %struct._IO_FILE* @stbi__fopen(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %f, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %tobool = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %tobool2 = icmp ne i32 %call1, 0
  %2 = zext i1 %tobool2 to i64
  %cond = select i1 %tobool2, i8* null, i8* null
  %3 = ptrtoint i8* %cond to i64
  %4 = inttoptr i64 %3 to float*
  store float* %4, float** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %6 = load i32*, i32** %x.addr, align 8
  %7 = load i32*, i32** %y.addr, align 8
  %8 = load i32*, i32** %comp.addr, align 8
  %9 = load i32, i32* %req_comp.addr, align 4
  %call3 = call float* @stbi_loadf_from_file(%struct._IO_FILE* %5, i32* %6, i32* %7, i32* %8, i32 %9)
  store float* %call3, float** %result, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call4 = call i32 @fclose(%struct._IO_FILE* %10)
  %11 = load float*, float** %result, align 8
  store float* %11, float** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load float*, float** %retval, align 8
  ret float* %12
}

; Function Attrs: noinline nounwind optnone
define float* @stbi_loadf_from_file(%struct._IO_FILE* %f, i32* %x, i32* %y, i32* %comp, i32 %req_comp) #0 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %req_comp.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 %req_comp, i32* %req_comp.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  call void @stbi__start_file(%struct.stbi__context* %s, %struct._IO_FILE* %0)
  %1 = load i32*, i32** %x.addr, align 8
  %2 = load i32*, i32** %y.addr, align 8
  %3 = load i32*, i32** %comp.addr, align 8
  %4 = load i32, i32* %req_comp.addr, align 4
  %call = call float* @stbi__loadf_main(%struct.stbi__context* %s, i32* %1, i32* %2, i32* %3, i32 %4)
  ret float* %call
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_is_hdr_from_memory(i8* %buffer, i32 %len) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  call void @stbi__start_mem(%struct.stbi__context* %s, i8* %0, i32 %1)
  %call = call i32 @stbi__hdr_test(%struct.stbi__context* %s)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_is_hdr(i8* %filename) #0 {
entry:
  %filename.addr = alloca i8*, align 8
  %f = alloca %struct._IO_FILE*, align 8
  %result = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8
  %0 = load i8*, i8** %filename.addr, align 8
  %call = call %struct._IO_FILE* @stbi__fopen(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %f, align 8
  store i32 0, i32* %result, align 4
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %tobool = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call1 = call i32 @stbi_is_hdr_from_file(%struct._IO_FILE* %2)
  store i32 %call1, i32* %result, align 4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call2 = call i32 @fclose(%struct._IO_FILE* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %result, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_is_hdr_from_file(%struct._IO_FILE* %f) #0 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %pos = alloca i64, align 8
  %res = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  %call = call i64 @ftell(%struct._IO_FILE* %0)
  store i64 %call, i64* %pos, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  call void @stbi__start_file(%struct.stbi__context* %s, %struct._IO_FILE* %1)
  %call1 = call i32 @stbi__hdr_test(%struct.stbi__context* %s)
  store i32 %call1, i32* %res, align 4
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  %3 = load i64, i64* %pos, align 8
  %call2 = call i32 @fseek(%struct._IO_FILE* %2, i64 %3, i32 0)
  %4 = load i32, i32* %res, align 4
  ret i32 %4
}

declare i64 @ftell(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone
define i32 @stbi_is_hdr_from_callbacks(%struct.stbi_io_callbacks* %clbk, i8* %user) #0 {
entry:
  %clbk.addr = alloca %struct.stbi_io_callbacks*, align 8
  %user.addr = alloca i8*, align 8
  %s = alloca %struct.stbi__context, align 8
  store %struct.stbi_io_callbacks* %clbk, %struct.stbi_io_callbacks** %clbk.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  %0 = load %struct.stbi_io_callbacks*, %struct.stbi_io_callbacks** %clbk.addr, align 8
  %1 = load i8*, i8** %user.addr, align 8
  call void @stbi__start_callbacks(%struct.stbi__context* %s, %struct.stbi_io_callbacks* %0, i8* %1)
  %call = call i32 @stbi__hdr_test(%struct.stbi__context* %s)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define void @stbi_ldr_to_hdr_gamma(float %gamma) #0 {
entry:
  %gamma.addr = alloca float, align 4
  store float %gamma, float* %gamma.addr, align 4
  %0 = load float, float* %gamma.addr, align 4
  store float %0, float* @stbi__l2h_gamma, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define void @stbi_ldr_to_hdr_scale(float %scale) #0 {
entry:
  %scale.addr = alloca float, align 4
  store float %scale, float* %scale.addr, align 4
  %0 = load float, float* %scale.addr, align 4
  store float %0, float* @stbi__l2h_scale, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define void @stbi_hdr_to_ldr_gamma(float %gamma) #0 {
entry:
  %gamma.addr = alloca float, align 4
  store float %gamma, float* %gamma.addr, align 4
  %0 = load float, float* %gamma.addr, align 4
  %div = fdiv float 1.000000e+00, %0
  store float %div, float* @stbi__h2l_gamma_i, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define void @stbi_hdr_to_ldr_scale(float %scale) #0 {
entry:
  %scale.addr = alloca float, align 4
  store float %scale, float* %scale.addr, align 4
  %0 = load float, float* %scale.addr, align 4
  %div = fdiv float 1.000000e+00, %0
  store float %div, float* @stbi__h2l_scale_i, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define i8* @stbi_zlib_decode_malloc_guesssize(i8* %buffer, i32 %len, i32 %initial_size, i32* %outlen) #0 {
entry:
  %retval = alloca i8*, align 8
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %initial_size.addr = alloca i32, align 4
  %outlen.addr = alloca i32*, align 8
  %a = alloca %struct.stbi__zbuf, align 8
  %p = alloca i8*, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 %initial_size, i32* %initial_size.addr, align 4
  store i32* %outlen, i32** %outlen.addr, align 8
  %0 = load i32, i32* %initial_size.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call i8* @stbi__malloc(i64 %conv)
  store i8* %call, i8** %p, align 8
  %1 = load i8*, i8** %p, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %buffer.addr, align 8
  %zbuffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 0
  store i8* %2, i8** %zbuffer, align 8
  %3 = load i8*, i8** %buffer.addr, align 8
  %4 = load i32, i32* %len.addr, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext
  %zbuffer_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 1
  store i8* %add.ptr, i8** %zbuffer_end, align 8
  %5 = load i8*, i8** %p, align 8
  %6 = load i32, i32* %initial_size.addr, align 4
  %call2 = call i32 @stbi__do_zlib(%struct.stbi__zbuf* %a, i8* %5, i32 %6, i32 1, i32 1)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load i32*, i32** %outlen.addr, align 8
  %tobool4 = icmp ne i32* %7, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then3
  %zout = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 4
  %8 = load i8*, i8** %zout, align 8
  %zout_start = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %9 = load i8*, i8** %zout_start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv6 = trunc i64 %sub.ptr.sub to i32
  %10 = load i32*, i32** %outlen.addr, align 8
  store i32 %conv6, i32* %10, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then3
  %zout_start8 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %11 = load i8*, i8** %zout_start8, align 8
  store i8* %11, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end
  %zout_start9 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %12 = load i8*, i8** %zout_start9, align 8
  call void @free(i8* %12) #10
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.end7, %if.then
  %13 = load i8*, i8** %retval, align 8
  ret i8* %13
}

; Function Attrs: noinline nounwind optnone
define i8* @stbi_zlib_decode_malloc(i8* %buffer, i32 %len, i32* %outlen) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %outlen.addr = alloca i32*, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32* %outlen, i32** %outlen.addr, align 8
  %0 = load i8*, i8** %buffer.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  %2 = load i32*, i32** %outlen.addr, align 8
  %call = call i8* @stbi_zlib_decode_malloc_guesssize(i8* %0, i32 %1, i32 16384, i32* %2)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_zlib_decode_buffer(i8* %obuffer, i32 %olen, i8* %ibuffer, i32 %ilen) #0 {
entry:
  %retval = alloca i32, align 4
  %obuffer.addr = alloca i8*, align 8
  %olen.addr = alloca i32, align 4
  %ibuffer.addr = alloca i8*, align 8
  %ilen.addr = alloca i32, align 4
  %a = alloca %struct.stbi__zbuf, align 8
  store i8* %obuffer, i8** %obuffer.addr, align 8
  store i32 %olen, i32* %olen.addr, align 4
  store i8* %ibuffer, i8** %ibuffer.addr, align 8
  store i32 %ilen, i32* %ilen.addr, align 4
  %0 = load i8*, i8** %ibuffer.addr, align 8
  %zbuffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 0
  store i8* %0, i8** %zbuffer, align 8
  %1 = load i8*, i8** %ibuffer.addr, align 8
  %2 = load i32, i32* %ilen.addr, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext
  %zbuffer_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 1
  store i8* %add.ptr, i8** %zbuffer_end, align 8
  %3 = load i8*, i8** %obuffer.addr, align 8
  %4 = load i32, i32* %olen.addr, align 4
  %call = call i32 @stbi__do_zlib(%struct.stbi__zbuf* %a, i8* %3, i32 %4, i32 0, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %zout = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 4
  %5 = load i8*, i8** %zout, align 8
  %zout_start = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %6 = load i8*, i8** %zout_start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define i8* @stbi_zlib_decode_noheader_malloc(i8* %buffer, i32 %len, i32* %outlen) #0 {
entry:
  %retval = alloca i8*, align 8
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %outlen.addr = alloca i32*, align 8
  %a = alloca %struct.stbi__zbuf, align 8
  %p = alloca i8*, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32* %outlen, i32** %outlen.addr, align 8
  %call = call i8* @stbi__malloc(i64 16384)
  store i8* %call, i8** %p, align 8
  %0 = load i8*, i8** %p, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %buffer.addr, align 8
  %zbuffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 0
  store i8* %1, i8** %zbuffer, align 8
  %2 = load i8*, i8** %buffer.addr, align 8
  %3 = load i32, i32* %len.addr, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext
  %zbuffer_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 1
  store i8* %add.ptr, i8** %zbuffer_end, align 8
  %4 = load i8*, i8** %p, align 8
  %call1 = call i32 @stbi__do_zlib(%struct.stbi__zbuf* %a, i8* %4, i32 16384, i32 1, i32 0)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32*, i32** %outlen.addr, align 8
  %tobool3 = icmp ne i32* %5, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.then2
  %zout = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 4
  %6 = load i8*, i8** %zout, align 8
  %zout_start = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %7 = load i8*, i8** %zout_start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  %8 = load i32*, i32** %outlen.addr, align 8
  store i32 %conv, i32* %8, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.then2
  %zout_start6 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %9 = load i8*, i8** %zout_start6, align 8
  store i8* %9, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end
  %zout_start7 = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %10 = load i8*, i8** %zout_start7, align 8
  call void @free(i8* %10) #10
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.end5, %if.then
  %11 = load i8*, i8** %retval, align 8
  ret i8* %11
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_zlib_decode_noheader_buffer(i8* %obuffer, i32 %olen, i8* %ibuffer, i32 %ilen) #0 {
entry:
  %retval = alloca i32, align 4
  %obuffer.addr = alloca i8*, align 8
  %olen.addr = alloca i32, align 4
  %ibuffer.addr = alloca i8*, align 8
  %ilen.addr = alloca i32, align 4
  %a = alloca %struct.stbi__zbuf, align 8
  store i8* %obuffer, i8** %obuffer.addr, align 8
  store i32 %olen, i32* %olen.addr, align 4
  store i8* %ibuffer, i8** %ibuffer.addr, align 8
  store i32 %ilen, i32* %ilen.addr, align 4
  %0 = load i8*, i8** %ibuffer.addr, align 8
  %zbuffer = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 0
  store i8* %0, i8** %zbuffer, align 8
  %1 = load i8*, i8** %ibuffer.addr, align 8
  %2 = load i32, i32* %ilen.addr, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext
  %zbuffer_end = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 1
  store i8* %add.ptr, i8** %zbuffer_end, align 8
  %3 = load i8*, i8** %obuffer.addr, align 8
  %4 = load i32, i32* %olen.addr, align 4
  %call = call i32 @stbi__do_zlib(%struct.stbi__zbuf* %a, i8* %3, i32 %4, i32 0, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %zout = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 4
  %5 = load i8*, i8** %zout, align 8
  %zout_start = getelementptr inbounds %struct.stbi__zbuf, %struct.stbi__zbuf* %a, i32 0, i32 5
  %6 = load i8*, i8** %zout_start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define void @stbi_set_unpremultiply_on_load(i32 %flag_true_if_should_unpremultiply) #0 {
entry:
  %flag_true_if_should_unpremultiply.addr = alloca i32, align 4
  store i32 %flag_true_if_should_unpremultiply, i32* %flag_true_if_should_unpremultiply.addr, align 4
  %0 = load i32, i32* %flag_true_if_should_unpremultiply.addr, align 4
  store i32 %0, i32* @stbi__unpremultiply_on_load, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define void @stbi_convert_iphone_png_to_rgb(i32 %flag_true_if_should_convert) #0 {
entry:
  %flag_true_if_should_convert.addr = alloca i32, align 4
  store i32 %flag_true_if_should_convert, i32* %flag_true_if_should_convert.addr, align 4
  %0 = load i32, i32* %flag_true_if_should_convert.addr, align 4
  store i32 %0, i32* @stbi__de_iphone_flag, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_info(i8* %filename, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %f = alloca %struct._IO_FILE*, align 8
  %result = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load i8*, i8** %filename.addr, align 8
  %call = call %struct._IO_FILE* @stbi__fopen(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %f, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %tobool = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  store i32 %call1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %3 = load i32*, i32** %x.addr, align 8
  %4 = load i32*, i32** %y.addr, align 8
  %5 = load i32*, i32** %comp.addr, align 8
  %call2 = call i32 @stbi_info_from_file(%struct._IO_FILE* %2, i32* %3, i32* %4, i32* %5)
  store i32 %call2, i32* %result, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call3 = call i32 @fclose(%struct._IO_FILE* %6)
  %7 = load i32, i32* %result, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_info_from_file(%struct._IO_FILE* %f, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %r = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  %pos = alloca i64, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  %call = call i64 @ftell(%struct._IO_FILE* %0)
  store i64 %call, i64* %pos, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  call void @stbi__start_file(%struct.stbi__context* %s, %struct._IO_FILE* %1)
  %2 = load i32*, i32** %x.addr, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32*, i32** %comp.addr, align 8
  %call1 = call i32 @stbi__info_main(%struct.stbi__context* %s, i32* %2, i32* %3, i32* %4)
  store i32 %call1, i32* %r, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  %6 = load i64, i64* %pos, align 8
  %call2 = call i32 @fseek(%struct._IO_FILE* %5, i64 %6, i32 0)
  %7 = load i32, i32* %r, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__info_main(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %1 = load i32*, i32** %x.addr, align 8
  %2 = load i32*, i32** %y.addr, align 8
  %3 = load i32*, i32** %comp.addr, align 8
  %call = call i32 @stbi__jpeg_info(%struct.stbi__context* %0, i32* %1, i32* %2, i32* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %5 = load i32*, i32** %x.addr, align 8
  %6 = load i32*, i32** %y.addr, align 8
  %7 = load i32*, i32** %comp.addr, align 8
  %call1 = call i32 @stbi__png_info(%struct.stbi__context* %4, i32* %5, i32* %6, i32* %7)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %9 = load i32*, i32** %x.addr, align 8
  %10 = load i32*, i32** %y.addr, align 8
  %11 = load i32*, i32** %comp.addr, align 8
  %call5 = call i32 @stbi__gif_info(%struct.stbi__context* %8, i32* %9, i32* %10, i32* %11)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end4
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %if.end4
  %12 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %13 = load i32*, i32** %x.addr, align 8
  %14 = load i32*, i32** %y.addr, align 8
  %15 = load i32*, i32** %comp.addr, align 8
  %call9 = call i32 @stbi__bmp_info(%struct.stbi__context* %12, i32* %13, i32* %14, i32* %15)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end8
  store i32 1, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end8
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %17 = load i32*, i32** %x.addr, align 8
  %18 = load i32*, i32** %y.addr, align 8
  %19 = load i32*, i32** %comp.addr, align 8
  %call13 = call i32 @stbi__psd_info(%struct.stbi__context* %16, i32* %17, i32* %18, i32* %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end12
  store i32 1, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end12
  %20 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %21 = load i32*, i32** %x.addr, align 8
  %22 = load i32*, i32** %y.addr, align 8
  %23 = load i32*, i32** %comp.addr, align 8
  %call17 = call i32 @stbi__pic_info(%struct.stbi__context* %20, i32* %21, i32* %22, i32* %23)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end16
  store i32 1, i32* %retval, align 4
  br label %return

if.end20:                                         ; preds = %if.end16
  %24 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %25 = load i32*, i32** %x.addr, align 8
  %26 = load i32*, i32** %y.addr, align 8
  %27 = load i32*, i32** %comp.addr, align 8
  %call21 = call i32 @stbi__pnm_info(%struct.stbi__context* %24, i32* %25, i32* %26, i32* %27)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end20
  store i32 1, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end20
  %28 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %29 = load i32*, i32** %x.addr, align 8
  %30 = load i32*, i32** %y.addr, align 8
  %31 = load i32*, i32** %comp.addr, align 8
  %call25 = call i32 @stbi__hdr_info(%struct.stbi__context* %28, i32* %29, i32* %30, i32* %31)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end24
  store i32 1, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %if.end24
  %32 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %33 = load i32*, i32** %x.addr, align 8
  %34 = load i32*, i32** %y.addr, align 8
  %35 = load i32*, i32** %comp.addr, align 8
  %call29 = call i32 @stbi__tga_info(%struct.stbi__context* %32, i32* %33, i32* %34, i32* %35)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end28
  store i32 1, i32* %retval, align 4
  br label %return

if.end32:                                         ; preds = %if.end28
  %call33 = call i32 @stbi__err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.31, i64 0, i64 0))
  store i32 %call33, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end32, %if.then31, %if.then27, %if.then23, %if.then19, %if.then15, %if.then11, %if.then7, %if.then3, %if.then
  %36 = load i32, i32* %retval, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__jpeg_info(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %result = alloca i32, align 4
  %j = alloca %struct.stbi__jpeg*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %call = call i8* @stbi__malloc(i64 18568)
  %0 = bitcast i8* %call to %struct.stbi__jpeg*
  store %struct.stbi__jpeg* %0, %struct.stbi__jpeg** %j, align 8
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %2 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  %s1 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %2, i32 0, i32 0
  store %struct.stbi__context* %1, %struct.stbi__context** %s1, align 8
  %3 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  %4 = load i32*, i32** %x.addr, align 8
  %5 = load i32*, i32** %y.addr, align 8
  %6 = load i32*, i32** %comp.addr, align 8
  %call2 = call i32 @stbi__jpeg_info_raw(%struct.stbi__jpeg* %3, i32* %4, i32* %5, i32* %6)
  store i32 %call2, i32* %result, align 4
  %7 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j, align 8
  %8 = bitcast %struct.stbi__jpeg* %7 to i8*
  call void @free(i8* %8) #10
  %9 = load i32, i32* %result, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__png_info(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %p = alloca %struct.stbi__png, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %p, i32 0, i32 0
  store %struct.stbi__context* %0, %struct.stbi__context** %s1, align 8
  %1 = load i32*, i32** %x.addr, align 8
  %2 = load i32*, i32** %y.addr, align 8
  %3 = load i32*, i32** %comp.addr, align 8
  %call = call i32 @stbi__png_info_raw(%struct.stbi__png* %p, i32* %1, i32* %2, i32* %3)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__gif_info(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %1 = load i32*, i32** %x.addr, align 8
  %2 = load i32*, i32** %y.addr, align 8
  %3 = load i32*, i32** %comp.addr, align 8
  %call = call i32 @stbi__gif_info_raw(%struct.stbi__context* %0, i32* %1, i32* %2, i32* %3)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__bmp_info(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %p = alloca i8*, align 8
  %info = alloca %struct.stbi__bmp_data, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %all_a = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 7
  store i32 255, i32* %all_a, align 4
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i8* @stbi__bmp_parse_header(%struct.stbi__context* %0, %struct.stbi__bmp_data* %info)
  store i8* %call, i8** %p, align 8
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %1)
  %2 = load i8*, i8** %p, align 8
  %cmp = icmp eq i8* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32*, i32** %x.addr, align 8
  %tobool = icmp ne i32* %3, null
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %4, i32 0, i32 0
  %5 = load i32, i32* %img_x, align 8
  %6 = load i32*, i32** %x.addr, align 8
  store i32 %5, i32* %6, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %7 = load i32*, i32** %y.addr, align 8
  %tobool3 = icmp ne i32* %7, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end2
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %8, i32 0, i32 1
  %9 = load i32, i32* %img_y, align 4
  %10 = load i32*, i32** %y.addr, align 8
  store i32 %9, i32* %10, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end2
  %11 = load i32*, i32** %comp.addr, align 8
  %tobool6 = icmp ne i32* %11, null
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end5
  %bpp = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 0
  %12 = load i32, i32* %bpp, align 4
  %cmp8 = icmp eq i32 %12, 24
  br i1 %cmp8, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then7
  %ma = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 6
  %13 = load i32, i32* %ma, align 4
  %cmp9 = icmp eq i32 %13, -16777216
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %land.lhs.true
  %14 = load i32*, i32** %comp.addr, align 8
  store i32 3, i32* %14, align 4
  br label %if.end13

if.else:                                          ; preds = %land.lhs.true, %if.then7
  %ma11 = getelementptr inbounds %struct.stbi__bmp_data, %struct.stbi__bmp_data* %info, i32 0, i32 6
  %15 = load i32, i32* %ma11, align 4
  %tobool12 = icmp ne i32 %15, 0
  %16 = zext i1 %tobool12 to i64
  %cond = select i1 %tobool12, i32 4, i32 3
  %17 = load i32*, i32** %comp.addr, align 8
  store i32 %cond, i32* %17, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then10
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end5
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end14, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__psd_info(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %channelCount = alloca i32, align 4
  %dummy = alloca i32, align 4
  %depth = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load i32*, i32** %x.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32* %dummy, i32** %x.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32*, i32** %y.addr, align 8
  %tobool1 = icmp ne i32* %1, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32* %dummy, i32** %y.addr, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %2 = load i32*, i32** %comp.addr, align 8
  %tobool4 = icmp ne i32* %2, null
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end3
  store i32* %dummy, i32** %comp.addr, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end3
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__get32be(%struct.stbi__context* %3)
  %cmp = icmp ne i32 %call, 943870035
  br i1 %cmp, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end6
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %4)
  store i32 0, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %if.end6
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call9 = call i32 @stbi__get16be(%struct.stbi__context* %5)
  %cmp10 = icmp ne i32 %call9, 1
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end8
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %6)
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end8
  %7 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %7, i32 6)
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call13 = call i32 @stbi__get16be(%struct.stbi__context* %8)
  store i32 %call13, i32* %channelCount, align 4
  %9 = load i32, i32* %channelCount, align 4
  %cmp14 = icmp slt i32 %9, 0
  br i1 %cmp14, label %if.then16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end12
  %10 = load i32, i32* %channelCount, align 4
  %cmp15 = icmp sgt i32 %10, 16
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %lor.lhs.false, %if.end12
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %11)
  store i32 0, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %lor.lhs.false
  %12 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call18 = call i32 @stbi__get32be(%struct.stbi__context* %12)
  %13 = load i32*, i32** %y.addr, align 8
  store i32 %call18, i32* %13, align 4
  %14 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call19 = call i32 @stbi__get32be(%struct.stbi__context* %14)
  %15 = load i32*, i32** %x.addr, align 8
  store i32 %call19, i32* %15, align 4
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call20 = call i32 @stbi__get16be(%struct.stbi__context* %16)
  store i32 %call20, i32* %depth, align 4
  %17 = load i32, i32* %depth, align 4
  %cmp21 = icmp ne i32 %17, 8
  br i1 %cmp21, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %if.end17
  %18 = load i32, i32* %depth, align 4
  %cmp22 = icmp ne i32 %18, 16
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %land.lhs.true
  %19 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %19)
  store i32 0, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %land.lhs.true, %if.end17
  %20 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call25 = call i32 @stbi__get16be(%struct.stbi__context* %20)
  %cmp26 = icmp ne i32 %call25, 3
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end24
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %21)
  store i32 0, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %if.end24
  %22 = load i32*, i32** %comp.addr, align 8
  store i32 4, i32* %22, align 4
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end28, %if.then27, %if.then23, %if.then16, %if.then11, %if.then7
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__pic_info(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %act_comp = alloca i32, align 4
  %num_packets = alloca i32, align 4
  %chained = alloca i32, align 4
  %dummy = alloca i32, align 4
  %packets = alloca [10 x %struct.stbi__pic_packet], align 16
  %packet = alloca %struct.stbi__pic_packet*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 0, i32* %act_comp, align 4
  store i32 0, i32* %num_packets, align 4
  %0 = load i32*, i32** %x.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32* %dummy, i32** %x.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32*, i32** %y.addr, align 8
  %tobool1 = icmp ne i32* %1, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32* %dummy, i32** %y.addr, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %2 = load i32*, i32** %comp.addr, align 8
  %tobool4 = icmp ne i32* %2, null
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end3
  store i32* %dummy, i32** %comp.addr, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end3
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__pic_is4(%struct.stbi__context* %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.120, i64 0, i64 0))
  %tobool7 = icmp ne i32 %call, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end6
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %4)
  store i32 0, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.end6
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %5, i32 88)
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call10 = call i32 @stbi__get16be(%struct.stbi__context* %6)
  %7 = load i32*, i32** %x.addr, align 8
  store i32 %call10, i32* %7, align 4
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call11 = call i32 @stbi__get16be(%struct.stbi__context* %8)
  %9 = load i32*, i32** %y.addr, align 8
  store i32 %call11, i32* %9, align 4
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call12 = call i32 @stbi__at_eof(%struct.stbi__context* %10)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end9
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %11)
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.end9
  %12 = load i32*, i32** %x.addr, align 8
  %13 = load i32, i32* %12, align 4
  %cmp = icmp ne i32 %13, 0
  br i1 %cmp, label %land.lhs.true, label %if.end18

land.lhs.true:                                    ; preds = %if.end15
  %14 = load i32*, i32** %x.addr, align 8
  %15 = load i32, i32* %14, align 4
  %div = sdiv i32 268435456, %15
  %16 = load i32*, i32** %y.addr, align 8
  %17 = load i32, i32* %16, align 4
  %cmp16 = icmp slt i32 %div, %17
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %land.lhs.true
  %18 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %18)
  store i32 0, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %land.lhs.true, %if.end15
  %19 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %19, i32 8)
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end18
  %20 = load i32, i32* %num_packets, align 4
  %conv = sext i32 %20 to i64
  %cmp19 = icmp eq i64 %conv, 10
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %do.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %do.body
  %21 = load i32, i32* %num_packets, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %num_packets, align 4
  %idxprom = sext i32 %21 to i64
  %arrayidx = getelementptr inbounds [10 x %struct.stbi__pic_packet], [10 x %struct.stbi__pic_packet]* %packets, i64 0, i64 %idxprom
  store %struct.stbi__pic_packet* %arrayidx, %struct.stbi__pic_packet** %packet, align 8
  %22 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call23 = call zeroext i8 @stbi__get8(%struct.stbi__context* %22)
  %conv24 = zext i8 %call23 to i32
  store i32 %conv24, i32* %chained, align 4
  %23 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call25 = call zeroext i8 @stbi__get8(%struct.stbi__context* %23)
  %24 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet, align 8
  %size = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %24, i32 0, i32 0
  store i8 %call25, i8* %size, align 1
  %25 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call26 = call zeroext i8 @stbi__get8(%struct.stbi__context* %25)
  %26 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet, align 8
  %type = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %26, i32 0, i32 1
  store i8 %call26, i8* %type, align 1
  %27 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call27 = call zeroext i8 @stbi__get8(%struct.stbi__context* %27)
  %28 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet, align 8
  %channel = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %28, i32 0, i32 2
  store i8 %call27, i8* %channel, align 1
  %29 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet, align 8
  %channel28 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %29, i32 0, i32 2
  %30 = load i8, i8* %channel28, align 1
  %conv29 = zext i8 %30 to i32
  %31 = load i32, i32* %act_comp, align 4
  %or = or i32 %31, %conv29
  store i32 %or, i32* %act_comp, align 4
  %32 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call30 = call i32 @stbi__at_eof(%struct.stbi__context* %32)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.end22
  %33 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %33)
  store i32 0, i32* %retval, align 4
  br label %return

if.end33:                                         ; preds = %if.end22
  %34 = load %struct.stbi__pic_packet*, %struct.stbi__pic_packet** %packet, align 8
  %size34 = getelementptr inbounds %struct.stbi__pic_packet, %struct.stbi__pic_packet* %34, i32 0, i32 0
  %35 = load i8, i8* %size34, align 1
  %conv35 = zext i8 %35 to i32
  %cmp36 = icmp ne i32 %conv35, 8
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end33
  %36 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %36)
  store i32 0, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end33
  br label %do.cond

do.cond:                                          ; preds = %if.end39
  %37 = load i32, i32* %chained, align 4
  %tobool40 = icmp ne i32 %37, 0
  br i1 %tobool40, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %38 = load i32, i32* %act_comp, align 4
  %and = and i32 %38, 16
  %tobool41 = icmp ne i32 %and, 0
  %39 = zext i1 %tobool41 to i64
  %cond = select i1 %tobool41, i32 4, i32 3
  %40 = load i32*, i32** %comp.addr, align 8
  store i32 %cond, i32* %40, align 4
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then38, %if.then32, %if.then21, %if.then17, %if.then14, %if.then8
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__hdr_info(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %buffer = alloca [1024 x i8], align 16
  %token = alloca i8*, align 8
  %valid = alloca i32, align 4
  %dummy = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  store i32 0, i32* %valid, align 4
  %0 = load i32*, i32** %x.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32* %dummy, i32** %x.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32*, i32** %y.addr, align 8
  %tobool1 = icmp ne i32* %1, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32* %dummy, i32** %y.addr, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %2 = load i32*, i32** %comp.addr, align 8
  %tobool4 = icmp ne i32* %2, null
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end3
  store i32* %dummy, i32** %comp.addr, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end3
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__hdr_test(%struct.stbi__context* %3)
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end6
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %4)
  store i32 0, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %if.end6
  br label %for.cond

for.cond:                                         ; preds = %if.end18, %if.end8
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buffer, i64 0, i64 0
  %call9 = call i8* @stbi__hdr_gettoken(%struct.stbi__context* %5, i8* %arraydecay)
  store i8* %call9, i8** %token, align 8
  %6 = load i8*, i8** %token, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp10 = icmp eq i32 %conv, 0
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %for.cond
  br label %for.end

if.end13:                                         ; preds = %for.cond
  %8 = load i8*, i8** %token, align 8
  %call14 = call i32 @strcmp(i8* %8, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.128, i64 0, i64 0)) #12
  %cmp15 = icmp eq i32 %call14, 0
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end13
  store i32 1, i32* %valid, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end13
  br label %for.cond

for.end:                                          ; preds = %if.then12
  %9 = load i32, i32* %valid, align 4
  %tobool19 = icmp ne i32 %9, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %for.end
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %10)
  store i32 0, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %for.end
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %arraydecay22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buffer, i64 0, i64 0
  %call23 = call i8* @stbi__hdr_gettoken(%struct.stbi__context* %11, i8* %arraydecay22)
  store i8* %call23, i8** %token, align 8
  %12 = load i8*, i8** %token, align 8
  %call24 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i64 0, i64 0), i64 3) #12
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end21
  %13 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %13)
  store i32 0, i32* %retval, align 4
  br label %return

if.end27:                                         ; preds = %if.end21
  %14 = load i8*, i8** %token, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 3
  store i8* %add.ptr, i8** %token, align 8
  %15 = load i8*, i8** %token, align 8
  %call28 = call i64 @strtol(i8* %15, i8** %token, i32 10) #10
  %conv29 = trunc i64 %call28 to i32
  %16 = load i32*, i32** %y.addr, align 8
  store i32 %conv29, i32* %16, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end27
  %17 = load i8*, i8** %token, align 8
  %18 = load i8, i8* %17, align 1
  %conv30 = sext i8 %18 to i32
  %cmp31 = icmp eq i32 %conv30, 32
  br i1 %cmp31, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load i8*, i8** %token, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr, i8** %token, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %20 = load i8*, i8** %token, align 8
  %call33 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.132, i64 0, i64 0), i64 3) #12
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %while.end
  %21 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %21)
  store i32 0, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %while.end
  %22 = load i8*, i8** %token, align 8
  %add.ptr37 = getelementptr inbounds i8, i8* %22, i64 3
  store i8* %add.ptr37, i8** %token, align 8
  %23 = load i8*, i8** %token, align 8
  %call38 = call i64 @strtol(i8* %23, i8** null, i32 10) #10
  %conv39 = trunc i64 %call38 to i32
  %24 = load i32*, i32** %x.addr, align 8
  store i32 %conv39, i32* %24, align 4
  %25 = load i32*, i32** %comp.addr, align 8
  store i32 3, i32* %25, align 4
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end36, %if.then35, %if.then26, %if.then20, %if.then7
  %26 = load i32, i32* %retval, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__tga_info(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %tga_w = alloca i32, align 4
  %tga_h = alloca i32, align 4
  %tga_comp = alloca i32, align 4
  %tga_image_type = alloca i32, align 4
  %tga_bits_per_pixel = alloca i32, align 4
  %tga_colormap_bpp = alloca i32, align 4
  %sz = alloca i32, align 4
  %tga_colormap_type = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call zeroext i8 @stbi__get8(%struct.stbi__context* %0)
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call zeroext i8 @stbi__get8(%struct.stbi__context* %1)
  %conv = zext i8 %call1 to i32
  store i32 %conv, i32* %tga_colormap_type, align 4
  %2 = load i32, i32* %tga_colormap_type, align 4
  %cmp = icmp sgt i32 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %3)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call3 = call zeroext i8 @stbi__get8(%struct.stbi__context* %4)
  %conv4 = zext i8 %call3 to i32
  store i32 %conv4, i32* %tga_image_type, align 4
  %5 = load i32, i32* %tga_colormap_type, align 4
  %cmp5 = icmp eq i32 %5, 1
  br i1 %cmp5, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end
  %6 = load i32, i32* %tga_image_type, align 4
  %cmp8 = icmp ne i32 %6, 1
  br i1 %cmp8, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.then7
  %7 = load i32, i32* %tga_image_type, align 4
  %cmp10 = icmp ne i32 %7, 9
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %8)
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %land.lhs.true, %if.then7
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %9, i32 4)
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call14 = call zeroext i8 @stbi__get8(%struct.stbi__context* %10)
  %conv15 = zext i8 %call14 to i32
  store i32 %conv15, i32* %sz, align 4
  %11 = load i32, i32* %sz, align 4
  %cmp16 = icmp ne i32 %11, 8
  br i1 %cmp16, label %land.lhs.true18, label %if.end31

land.lhs.true18:                                  ; preds = %if.end13
  %12 = load i32, i32* %sz, align 4
  %cmp19 = icmp ne i32 %12, 15
  br i1 %cmp19, label %land.lhs.true21, label %if.end31

land.lhs.true21:                                  ; preds = %land.lhs.true18
  %13 = load i32, i32* %sz, align 4
  %cmp22 = icmp ne i32 %13, 16
  br i1 %cmp22, label %land.lhs.true24, label %if.end31

land.lhs.true24:                                  ; preds = %land.lhs.true21
  %14 = load i32, i32* %sz, align 4
  %cmp25 = icmp ne i32 %14, 24
  br i1 %cmp25, label %land.lhs.true27, label %if.end31

land.lhs.true27:                                  ; preds = %land.lhs.true24
  %15 = load i32, i32* %sz, align 4
  %cmp28 = icmp ne i32 %15, 32
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %land.lhs.true27
  %16 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %16)
  store i32 0, i32* %retval, align 4
  br label %return

if.end31:                                         ; preds = %land.lhs.true27, %land.lhs.true24, %land.lhs.true21, %land.lhs.true18, %if.end13
  %17 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %17, i32 4)
  %18 = load i32, i32* %sz, align 4
  store i32 %18, i32* %tga_colormap_bpp, align 4
  br label %if.end45

if.else:                                          ; preds = %if.end
  %19 = load i32, i32* %tga_image_type, align 4
  %cmp32 = icmp ne i32 %19, 2
  br i1 %cmp32, label %land.lhs.true34, label %if.end44

land.lhs.true34:                                  ; preds = %if.else
  %20 = load i32, i32* %tga_image_type, align 4
  %cmp35 = icmp ne i32 %20, 3
  br i1 %cmp35, label %land.lhs.true37, label %if.end44

land.lhs.true37:                                  ; preds = %land.lhs.true34
  %21 = load i32, i32* %tga_image_type, align 4
  %cmp38 = icmp ne i32 %21, 10
  br i1 %cmp38, label %land.lhs.true40, label %if.end44

land.lhs.true40:                                  ; preds = %land.lhs.true37
  %22 = load i32, i32* %tga_image_type, align 4
  %cmp41 = icmp ne i32 %22, 11
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %land.lhs.true40
  %23 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %23)
  store i32 0, i32* %retval, align 4
  br label %return

if.end44:                                         ; preds = %land.lhs.true40, %land.lhs.true37, %land.lhs.true34, %if.else
  %24 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %24, i32 9)
  store i32 0, i32* %tga_colormap_bpp, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end31
  %25 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call46 = call i32 @stbi__get16le(%struct.stbi__context* %25)
  store i32 %call46, i32* %tga_w, align 4
  %26 = load i32, i32* %tga_w, align 4
  %cmp47 = icmp slt i32 %26, 1
  br i1 %cmp47, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.end45
  %27 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %27)
  store i32 0, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %if.end45
  %28 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call51 = call i32 @stbi__get16le(%struct.stbi__context* %28)
  store i32 %call51, i32* %tga_h, align 4
  %29 = load i32, i32* %tga_h, align 4
  %cmp52 = icmp slt i32 %29, 1
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  %30 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %30)
  store i32 0, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %31 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call56 = call zeroext i8 @stbi__get8(%struct.stbi__context* %31)
  %conv57 = zext i8 %call56 to i32
  store i32 %conv57, i32* %tga_bits_per_pixel, align 4
  %32 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call58 = call zeroext i8 @stbi__get8(%struct.stbi__context* %32)
  %33 = load i32, i32* %tga_colormap_bpp, align 4
  %cmp59 = icmp ne i32 %33, 0
  br i1 %cmp59, label %if.then61, label %if.else70

if.then61:                                        ; preds = %if.end55
  %34 = load i32, i32* %tga_bits_per_pixel, align 4
  %cmp62 = icmp ne i32 %34, 8
  br i1 %cmp62, label %land.lhs.true64, label %if.end68

land.lhs.true64:                                  ; preds = %if.then61
  %35 = load i32, i32* %tga_bits_per_pixel, align 4
  %cmp65 = icmp ne i32 %35, 16
  br i1 %cmp65, label %if.then67, label %if.end68

if.then67:                                        ; preds = %land.lhs.true64
  %36 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %36)
  store i32 0, i32* %retval, align 4
  br label %return

if.end68:                                         ; preds = %land.lhs.true64, %if.then61
  %37 = load i32, i32* %tga_colormap_bpp, align 4
  %call69 = call i32 @stbi__tga_get_comp(i32 %37, i32 0, i32* null)
  store i32 %call69, i32* %tga_comp, align 4
  br label %if.end76

if.else70:                                        ; preds = %if.end55
  %38 = load i32, i32* %tga_bits_per_pixel, align 4
  %39 = load i32, i32* %tga_image_type, align 4
  %cmp71 = icmp eq i32 %39, 3
  br i1 %cmp71, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.else70
  %40 = load i32, i32* %tga_image_type, align 4
  %cmp73 = icmp eq i32 %40, 11
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.else70
  %41 = phi i1 [ true, %if.else70 ], [ %cmp73, %lor.rhs ]
  %lor.ext = zext i1 %41 to i32
  %call75 = call i32 @stbi__tga_get_comp(i32 %38, i32 %lor.ext, i32* null)
  store i32 %call75, i32* %tga_comp, align 4
  br label %if.end76

if.end76:                                         ; preds = %lor.end, %if.end68
  %42 = load i32, i32* %tga_comp, align 4
  %tobool = icmp ne i32 %42, 0
  br i1 %tobool, label %if.end78, label %if.then77

if.then77:                                        ; preds = %if.end76
  %43 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %43)
  store i32 0, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end76
  %44 = load i32*, i32** %x.addr, align 8
  %tobool79 = icmp ne i32* %44, null
  br i1 %tobool79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  %45 = load i32, i32* %tga_w, align 4
  %46 = load i32*, i32** %x.addr, align 8
  store i32 %45, i32* %46, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.then80, %if.end78
  %47 = load i32*, i32** %y.addr, align 8
  %tobool82 = icmp ne i32* %47, null
  br i1 %tobool82, label %if.then83, label %if.end84

if.then83:                                        ; preds = %if.end81
  %48 = load i32, i32* %tga_h, align 4
  %49 = load i32*, i32** %y.addr, align 8
  store i32 %48, i32* %49, align 4
  br label %if.end84

if.end84:                                         ; preds = %if.then83, %if.end81
  %50 = load i32*, i32** %comp.addr, align 8
  %tobool85 = icmp ne i32* %50, null
  br i1 %tobool85, label %if.then86, label %if.end87

if.then86:                                        ; preds = %if.end84
  %51 = load i32, i32* %tga_comp, align 4
  %52 = load i32*, i32** %comp.addr, align 8
  store i32 %51, i32* %52, align 4
  br label %if.end87

if.end87:                                         ; preds = %if.then86, %if.end84
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end87, %if.then77, %if.then67, %if.then54, %if.then49, %if.then43, %if.then30, %if.then12, %if.then
  %53 = load i32, i32* %retval, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__gif_info_raw(%struct.stbi__context* %s, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %g = alloca %struct.stbi__gif*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %call = call i8* @stbi__malloc(i64 34928)
  %0 = bitcast i8* %call to %struct.stbi__gif*
  store %struct.stbi__gif* %0, %struct.stbi__gif** %g, align 8
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %2 = load %struct.stbi__gif*, %struct.stbi__gif** %g, align 8
  %3 = load i32*, i32** %comp.addr, align 8
  %call1 = call i32 @stbi__gif_header(%struct.stbi__context* %1, %struct.stbi__gif* %2, i32* %3, i32 1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load %struct.stbi__gif*, %struct.stbi__gif** %g, align 8
  %5 = bitcast %struct.stbi__gif* %4 to i8*
  call void @free(i8* %5) #10
  %6 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %6)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i32*, i32** %x.addr, align 8
  %tobool2 = icmp ne i32* %7, null
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %8 = load %struct.stbi__gif*, %struct.stbi__gif** %g, align 8
  %w = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %8, i32 0, i32 0
  %9 = load i32, i32* %w, align 8
  %10 = load i32*, i32** %x.addr, align 8
  store i32 %9, i32* %10, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %11 = load i32*, i32** %y.addr, align 8
  %tobool5 = icmp ne i32* %11, null
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  %12 = load %struct.stbi__gif*, %struct.stbi__gif** %g, align 8
  %h = getelementptr inbounds %struct.stbi__gif, %struct.stbi__gif* %12, i32 0, i32 1
  %13 = load i32, i32* %h, align 4
  %14 = load i32*, i32** %y.addr, align 8
  store i32 %13, i32* %14, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end4
  %15 = load %struct.stbi__gif*, %struct.stbi__gif** %g, align 8
  %16 = bitcast %struct.stbi__gif* %15 to i8*
  call void @free(i8* %16) #10
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end7, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__png_info_raw(%struct.stbi__png* %p, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.stbi__png*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  store %struct.stbi__png* %p, %struct.stbi__png** %p.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %call = call i32 @stbi__parse_png_file(%struct.stbi__png* %0, i32 2, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %1, i32 0, i32 0
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  call void @stbi__rewind(%struct.stbi__context* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32*, i32** %x.addr, align 8
  %tobool1 = icmp ne i32* %3, null
  br i1 %tobool1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %4 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s3 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %4, i32 0, i32 0
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s3, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %5, i32 0, i32 0
  %6 = load i32, i32* %img_x, align 8
  %7 = load i32*, i32** %x.addr, align 8
  store i32 %6, i32* %7, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %8 = load i32*, i32** %y.addr, align 8
  %tobool5 = icmp ne i32* %8, null
  br i1 %tobool5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end4
  %9 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s7 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %9, i32 0, i32 0
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s7, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %10, i32 0, i32 1
  %11 = load i32, i32* %img_y, align 4
  %12 = load i32*, i32** %y.addr, align 8
  store i32 %11, i32* %12, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end4
  %13 = load i32*, i32** %comp.addr, align 8
  %tobool9 = icmp ne i32* %13, null
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %14 = load %struct.stbi__png*, %struct.stbi__png** %p.addr, align 8
  %s11 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %14, i32 0, i32 0
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s11, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %15, i32 0, i32 2
  %16 = load i32, i32* %img_n, align 8
  %17 = load i32*, i32** %comp.addr, align 8
  store i32 %16, i32* %17, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__jpeg_info_raw(%struct.stbi__jpeg* %j, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %retval = alloca i32, align 4
  %j.addr = alloca %struct.stbi__jpeg*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  store %struct.stbi__jpeg* %j, %struct.stbi__jpeg** %j.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %call = call i32 @stbi__decode_jpeg_header(%struct.stbi__jpeg* %0, i32 2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %1, i32 0, i32 0
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s, align 8
  call void @stbi__rewind(%struct.stbi__context* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32*, i32** %x.addr, align 8
  %tobool1 = icmp ne i32* %3, null
  br i1 %tobool1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %4 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s3 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %4, i32 0, i32 0
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s3, align 8
  %img_x = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %5, i32 0, i32 0
  %6 = load i32, i32* %img_x, align 8
  %7 = load i32*, i32** %x.addr, align 8
  store i32 %6, i32* %7, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %8 = load i32*, i32** %y.addr, align 8
  %tobool5 = icmp ne i32* %8, null
  br i1 %tobool5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end4
  %9 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s7 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %9, i32 0, i32 0
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s7, align 8
  %img_y = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %10, i32 0, i32 1
  %11 = load i32, i32* %img_y, align 4
  %12 = load i32*, i32** %y.addr, align 8
  store i32 %11, i32* %12, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end4
  %13 = load i32*, i32** %comp.addr, align 8
  %tobool9 = icmp ne i32* %13, null
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %14 = load %struct.stbi__jpeg*, %struct.stbi__jpeg** %j.addr, align 8
  %s11 = getelementptr inbounds %struct.stbi__jpeg, %struct.stbi__jpeg* %14, i32 0, i32 0
  %15 = load %struct.stbi__context*, %struct.stbi__context** %s11, align 8
  %img_n = getelementptr inbounds %struct.stbi__context, %struct.stbi__context* %15, i32 0, i32 2
  %16 = load i32, i32* %img_n, align 8
  %cmp = icmp sge i32 %16, 3
  %17 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 3, i32 1
  %18 = load i32*, i32** %comp.addr, align 8
  store i32 %cond, i32* %18, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_is_16_bit(i8* %filename) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %f = alloca %struct._IO_FILE*, align 8
  %result = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8
  %0 = load i8*, i8** %filename.addr, align 8
  %call = call %struct._IO_FILE* @stbi__fopen(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %f, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %tobool = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 @stbi__err(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  store i32 %call1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call2 = call i32 @stbi_is_16_bit_from_file(%struct._IO_FILE* %2)
  store i32 %call2, i32* %result, align 4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call3 = call i32 @fclose(%struct._IO_FILE* %3)
  %4 = load i32, i32* %result, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_is_16_bit_from_file(%struct._IO_FILE* %f) #0 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %r = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  %pos = alloca i64, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  %call = call i64 @ftell(%struct._IO_FILE* %0)
  store i64 %call, i64* %pos, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  call void @stbi__start_file(%struct.stbi__context* %s, %struct._IO_FILE* %1)
  %call1 = call i32 @stbi__is_16_main(%struct.stbi__context* %s)
  store i32 %call1, i32* %r, align 4
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8
  %3 = load i64, i64* %pos, align 8
  %call2 = call i32 @fseek(%struct._IO_FILE* %2, i64 %3, i32 0)
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__is_16_main(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__png_is16(%struct.stbi__context* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call i32 @stbi__psd_is16(%struct.stbi__context* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %2 = load i32, i32* %retval, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__png_is16(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %p = alloca %struct.stbi__png, align 8
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %s1 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %p, i32 0, i32 0
  store %struct.stbi__context* %0, %struct.stbi__context** %s1, align 8
  %call = call i32 @stbi__png_info_raw(%struct.stbi__png* %p, i32* null, i32* null, i32* null)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %depth = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %p, i32 0, i32 4
  %1 = load i32, i32* %depth, align 8
  %cmp = icmp ne i32 %1, 16
  br i1 %cmp, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %s3 = getelementptr inbounds %struct.stbi__png, %struct.stbi__png* %p, i32 0, i32 0
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s3, align 8
  call void @stbi__rewind(%struct.stbi__context* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__psd_is16(%struct.stbi__context* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__context*, align 8
  %channelCount = alloca i32, align 4
  %depth = alloca i32, align 4
  store %struct.stbi__context* %s, %struct.stbi__context** %s.addr, align 8
  %0 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call = call i32 @stbi__get32be(%struct.stbi__context* %0)
  %cmp = icmp ne i32 %call, 943870035
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %1)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call1 = call i32 @stbi__get16be(%struct.stbi__context* %2)
  %cmp2 = icmp ne i32 %call1, 1
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %3 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %3)
  store i32 0, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %4 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__skip(%struct.stbi__context* %4, i32 6)
  %5 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call5 = call i32 @stbi__get16be(%struct.stbi__context* %5)
  store i32 %call5, i32* %channelCount, align 4
  %6 = load i32, i32* %channelCount, align 4
  %cmp6 = icmp slt i32 %6, 0
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end4
  %7 = load i32, i32* %channelCount, align 4
  %cmp7 = icmp sgt i32 %7, 16
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %lor.lhs.false, %if.end4
  %8 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %8)
  store i32 0, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %lor.lhs.false
  %9 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call10 = call i32 @stbi__get32be(%struct.stbi__context* %9)
  %10 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call11 = call i32 @stbi__get32be(%struct.stbi__context* %10)
  %11 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  %call12 = call i32 @stbi__get16be(%struct.stbi__context* %11)
  store i32 %call12, i32* %depth, align 4
  %12 = load i32, i32* %depth, align 4
  %cmp13 = icmp ne i32 %12, 16
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end9
  %13 = load %struct.stbi__context*, %struct.stbi__context** %s.addr, align 8
  call void @stbi__rewind(%struct.stbi__context* %13)
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.end9
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end15, %if.then14, %if.then8, %if.then3, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_info_from_memory(i8* %buffer, i32 %len, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %s = alloca %struct.stbi__context, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load i8*, i8** %buffer.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  call void @stbi__start_mem(%struct.stbi__context* %s, i8* %0, i32 %1)
  %2 = load i32*, i32** %x.addr, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32*, i32** %comp.addr, align 8
  %call = call i32 @stbi__info_main(%struct.stbi__context* %s, i32* %2, i32* %3, i32* %4)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_info_from_callbacks(%struct.stbi_io_callbacks* %c, i8* %user, i32* %x, i32* %y, i32* %comp) #0 {
entry:
  %c.addr = alloca %struct.stbi_io_callbacks*, align 8
  %user.addr = alloca i8*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %comp.addr = alloca i32*, align 8
  %s = alloca %struct.stbi__context, align 8
  store %struct.stbi_io_callbacks* %c, %struct.stbi_io_callbacks** %c.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32* %comp, i32** %comp.addr, align 8
  %0 = load %struct.stbi_io_callbacks*, %struct.stbi_io_callbacks** %c.addr, align 8
  %1 = load i8*, i8** %user.addr, align 8
  call void @stbi__start_callbacks(%struct.stbi__context* %s, %struct.stbi_io_callbacks* %0, i8* %1)
  %2 = load i32*, i32** %x.addr, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32*, i32** %comp.addr, align 8
  %call = call i32 @stbi__info_main(%struct.stbi__context* %s, i32* %2, i32* %3, i32* %4)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_is_16_bit_from_memory(i8* %buffer, i32 %len) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %s = alloca %struct.stbi__context, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  call void @stbi__start_mem(%struct.stbi__context* %s, i8* %0, i32 %1)
  %call = call i32 @stbi__is_16_main(%struct.stbi__context* %s)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_is_16_bit_from_callbacks(%struct.stbi_io_callbacks* %c, i8* %user) #0 {
entry:
  %c.addr = alloca %struct.stbi_io_callbacks*, align 8
  %user.addr = alloca i8*, align 8
  %s = alloca %struct.stbi__context, align 8
  store %struct.stbi_io_callbacks* %c, %struct.stbi_io_callbacks** %c.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  %0 = load %struct.stbi_io_callbacks*, %struct.stbi_io_callbacks** %c.addr, align 8
  %1 = load i8*, i8** %user.addr, align 8
  call void @stbi__start_callbacks(%struct.stbi__context* %s, %struct.stbi_io_callbacks* %0, i8* %1)
  %call = call i32 @stbi__is_16_main(%struct.stbi__context* %s)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define void @stbi_flip_vertically_on_write(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  %0 = load i32, i32* %flag.addr, align 4
  store i32 %0, i32* @stbi__flip_vertically_on_write, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_write_bmp_to_func(void (i8*, i8*, i32)* %func, i8* %context, i32 %x, i32 %y, i32 %comp, i8* %data) #0 {
entry:
  %func.addr = alloca void (i8*, i8*, i32)*, align 8
  %context.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %s = alloca %struct.stbi__write_context, align 8
  store void (i8*, i8*, i32)* %func, void (i8*, i8*, i32)** %func.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  %0 = bitcast %struct.stbi__write_context* %s to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 88, i1 false)
  %1 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func.addr, align 8
  %2 = load i8*, i8** %context.addr, align 8
  call void @stbi__start_write_callbacks(%struct.stbi__write_context* %s, void (i8*, i8*, i32)* %1, i8* %2)
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %y.addr, align 4
  %5 = load i32, i32* %comp.addr, align 4
  %6 = load i8*, i8** %data.addr, align 8
  %call = call i32 @stbi_write_bmp_core(%struct.stbi__write_context* %s, i32 %3, i32 %4, i32 %5, i8* %6)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__start_write_callbacks(%struct.stbi__write_context* %s, void (i8*, i8*, i32)* %c, i8* %context) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %c.addr = alloca void (i8*, i8*, i32)*, align 8
  %context.addr = alloca i8*, align 8
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store void (i8*, i8*, i32)* %c, void (i8*, i8*, i32)** %c.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %c.addr, align 8
  %1 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %1, i32 0, i32 0
  store void (i8*, i8*, i32)* %0, void (i8*, i8*, i32)** %func, align 8
  %2 = load i8*, i8** %context.addr, align 8
  %3 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context1 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %3, i32 0, i32 1
  store i8* %2, i8** %context1, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi_write_bmp_core(%struct.stbi__write_context* %s, i32 %x, i32 %y, i32 %comp, i8* %data) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %pad = alloca i32, align 4
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  %0 = load i32, i32* %x.addr, align 4
  %sub = sub nsw i32 0, %0
  %mul = mul nsw i32 %sub, 3
  %and = and i32 %mul, 3
  store i32 %and, i32* %pad, align 4
  %1 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %4 = load i32, i32* %comp.addr, align 4
  %5 = load i8*, i8** %data.addr, align 8
  %6 = load i32, i32* %pad, align 4
  %7 = load i32, i32* %x.addr, align 4
  %mul1 = mul nsw i32 %7, 3
  %8 = load i32, i32* %pad, align 4
  %add = add nsw i32 %mul1, %8
  %9 = load i32, i32* %y.addr, align 4
  %mul2 = mul nsw i32 %add, %9
  %add3 = add nsw i32 54, %mul2
  %10 = load i32, i32* %x.addr, align 4
  %11 = load i32, i32* %y.addr, align 4
  %call = call i32 (%struct.stbi__write_context*, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i8*, ...) @stbiw__outfile(%struct.stbi__write_context* %1, i32 -1, i32 -1, i32 %2, i32 %3, i32 %4, i32 1, i8* %5, i32 0, i32 %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.147, i64 0, i64 0), i32 66, i32 77, i32 %add3, i32 0, i32 0, i32 54, i32 40, i32 %10, i32 %11, i32 1, i32 24, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbiw__outfile(%struct.stbi__write_context* %s, i32 %rgb_dir, i32 %vdir, i32 %x, i32 %y, i32 %comp, i32 %expand_mono, i8* %data, i32 %alpha, i32 %pad, i8* %fmt, ...) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %rgb_dir.addr = alloca i32, align 4
  %vdir.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %expand_mono.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %alpha.addr = alloca i32, align 4
  %pad.addr = alloca i32, align 4
  %fmt.addr = alloca i8*, align 8
  %v = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32 %rgb_dir, i32* %rgb_dir.addr, align 4
  store i32 %vdir, i32* %vdir.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i32 %expand_mono, i32* %expand_mono.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  store i32 %alpha, i32* %alpha.addr, align 4
  store i32 %pad, i32* %pad.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 8
  %0 = load i32, i32* %y.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %x.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %v, i64 0, i64 0
  %arraydecay2 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay2)
  %2 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %3 = load i8*, i8** %fmt.addr, align 8
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %v, i64 0, i64 0
  call void @stbiw__writefv(%struct.stbi__write_context* %2, i8* %3, %struct.__va_list_tag* %arraydecay3)
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %v, i64 0, i64 0
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*
  call void @llvm.va_end(i8* %arraydecay45)
  %4 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %5 = load i32, i32* %rgb_dir.addr, align 4
  %6 = load i32, i32* %vdir.addr, align 4
  %7 = load i32, i32* %x.addr, align 4
  %8 = load i32, i32* %y.addr, align 4
  %9 = load i32, i32* %comp.addr, align 4
  %10 = load i8*, i8** %data.addr, align 8
  %11 = load i32, i32* %alpha.addr, align 4
  %12 = load i32, i32* %pad.addr, align 4
  %13 = load i32, i32* %expand_mono.addr, align 4
  call void @stbiw__write_pixels(%struct.stbi__write_context* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i8* %10, i32 %11, i32 %12, i32 %13)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__writefv(%struct.stbi__write_context* %s, i8* %fmt, %struct.__va_list_tag* %v) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %fmt.addr = alloca i8*, align 8
  %v.addr = alloca %struct.__va_list_tag*, align 8
  %x = alloca i8, align 1
  %x4 = alloca i32, align 4
  %b = alloca [2 x i8], align 1
  %x24 = alloca i32, align 4
  %b36 = alloca [4 x i8], align 1
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  store %struct.__va_list_tag* %v, %struct.__va_list_tag** %v.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %fmt.addr, align 8
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %fmt.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  switch i32 %conv, label %sw.default [
    i32 32, label %sw.bb
    i32 49, label %sw.bb1
    i32 50, label %sw.bb3
    i32 52, label %sw.bb23
  ]

sw.bb:                                            ; preds = %while.body
  br label %sw.epilog

sw.bb1:                                           ; preds = %while.body
  %4 = load %struct.__va_list_tag*, %struct.__va_list_tag** %v.addr, align 8
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %4, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 8
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %sw.bb1
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %4, i32 0, i32 3
  %reg_save_area = load i8*, i8** %5, align 8
  %6 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %7 = bitcast i8* %6 to i32*
  %8 = add i32 %gp_offset, 8
  store i32 %8, i32* %gp_offset_p, align 8
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %sw.bb1
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %4, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %9 = bitcast i8* %overflow_arg_area to i32*
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %7, %vaarg.in_reg ], [ %9, %vaarg.in_mem ]
  %10 = load i32, i32* %vaarg.addr, align 4
  %and = and i32 %10, 255
  %conv2 = trunc i32 %and to i8
  store i8 %conv2, i8* %x, align 1
  %11 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %11, i32 0, i32 0
  %12 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func, align 8
  %13 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %13, i32 0, i32 1
  %14 = load i8*, i8** %context, align 8
  call void %12(i8* %14, i8* %x, i32 1)
  br label %sw.epilog

sw.bb3:                                           ; preds = %while.body
  %15 = load %struct.__va_list_tag*, %struct.__va_list_tag** %v.addr, align 8
  %gp_offset_p5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %15, i32 0, i32 0
  %gp_offset6 = load i32, i32* %gp_offset_p5, align 8
  %fits_in_gp7 = icmp ule i32 %gp_offset6, 40
  br i1 %fits_in_gp7, label %vaarg.in_reg8, label %vaarg.in_mem10

vaarg.in_reg8:                                    ; preds = %sw.bb3
  %16 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %15, i32 0, i32 3
  %reg_save_area9 = load i8*, i8** %16, align 8
  %17 = getelementptr i8, i8* %reg_save_area9, i32 %gp_offset6
  %18 = bitcast i8* %17 to i32*
  %19 = add i32 %gp_offset6, 8
  store i32 %19, i32* %gp_offset_p5, align 8
  br label %vaarg.end14

vaarg.in_mem10:                                   ; preds = %sw.bb3
  %overflow_arg_area_p11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %15, i32 0, i32 2
  %overflow_arg_area12 = load i8*, i8** %overflow_arg_area_p11, align 8
  %20 = bitcast i8* %overflow_arg_area12 to i32*
  %overflow_arg_area.next13 = getelementptr i8, i8* %overflow_arg_area12, i32 8
  store i8* %overflow_arg_area.next13, i8** %overflow_arg_area_p11, align 8
  br label %vaarg.end14

vaarg.end14:                                      ; preds = %vaarg.in_mem10, %vaarg.in_reg8
  %vaarg.addr15 = phi i32* [ %18, %vaarg.in_reg8 ], [ %20, %vaarg.in_mem10 ]
  %21 = load i32, i32* %vaarg.addr15, align 4
  store i32 %21, i32* %x4, align 4
  %22 = load i32, i32* %x4, align 4
  %and16 = and i32 %22, 255
  %conv17 = trunc i32 %and16 to i8
  %arrayidx = getelementptr inbounds [2 x i8], [2 x i8]* %b, i64 0, i64 0
  store i8 %conv17, i8* %arrayidx, align 1
  %23 = load i32, i32* %x4, align 4
  %shr = ashr i32 %23, 8
  %and18 = and i32 %shr, 255
  %conv19 = trunc i32 %and18 to i8
  %arrayidx20 = getelementptr inbounds [2 x i8], [2 x i8]* %b, i64 0, i64 1
  store i8 %conv19, i8* %arrayidx20, align 1
  %24 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func21 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %24, i32 0, i32 0
  %25 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func21, align 8
  %26 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context22 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %26, i32 0, i32 1
  %27 = load i8*, i8** %context22, align 8
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %b, i64 0, i64 0
  call void %25(i8* %27, i8* %arraydecay, i32 2)
  br label %sw.epilog

sw.bb23:                                          ; preds = %while.body
  %28 = load %struct.__va_list_tag*, %struct.__va_list_tag** %v.addr, align 8
  %gp_offset_p25 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %28, i32 0, i32 0
  %gp_offset26 = load i32, i32* %gp_offset_p25, align 8
  %fits_in_gp27 = icmp ule i32 %gp_offset26, 40
  br i1 %fits_in_gp27, label %vaarg.in_reg28, label %vaarg.in_mem30

vaarg.in_reg28:                                   ; preds = %sw.bb23
  %29 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %28, i32 0, i32 3
  %reg_save_area29 = load i8*, i8** %29, align 8
  %30 = getelementptr i8, i8* %reg_save_area29, i32 %gp_offset26
  %31 = bitcast i8* %30 to i32*
  %32 = add i32 %gp_offset26, 8
  store i32 %32, i32* %gp_offset_p25, align 8
  br label %vaarg.end34

vaarg.in_mem30:                                   ; preds = %sw.bb23
  %overflow_arg_area_p31 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %28, i32 0, i32 2
  %overflow_arg_area32 = load i8*, i8** %overflow_arg_area_p31, align 8
  %33 = bitcast i8* %overflow_arg_area32 to i32*
  %overflow_arg_area.next33 = getelementptr i8, i8* %overflow_arg_area32, i32 8
  store i8* %overflow_arg_area.next33, i8** %overflow_arg_area_p31, align 8
  br label %vaarg.end34

vaarg.end34:                                      ; preds = %vaarg.in_mem30, %vaarg.in_reg28
  %vaarg.addr35 = phi i32* [ %31, %vaarg.in_reg28 ], [ %33, %vaarg.in_mem30 ]
  %34 = load i32, i32* %vaarg.addr35, align 4
  store i32 %34, i32* %x24, align 4
  %35 = load i32, i32* %x24, align 4
  %and37 = and i32 %35, 255
  %conv38 = trunc i32 %and37 to i8
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %b36, i64 0, i64 0
  store i8 %conv38, i8* %arrayidx39, align 1
  %36 = load i32, i32* %x24, align 4
  %shr40 = lshr i32 %36, 8
  %and41 = and i32 %shr40, 255
  %conv42 = trunc i32 %and41 to i8
  %arrayidx43 = getelementptr inbounds [4 x i8], [4 x i8]* %b36, i64 0, i64 1
  store i8 %conv42, i8* %arrayidx43, align 1
  %37 = load i32, i32* %x24, align 4
  %shr44 = lshr i32 %37, 16
  %and45 = and i32 %shr44, 255
  %conv46 = trunc i32 %and45 to i8
  %arrayidx47 = getelementptr inbounds [4 x i8], [4 x i8]* %b36, i64 0, i64 2
  store i8 %conv46, i8* %arrayidx47, align 1
  %38 = load i32, i32* %x24, align 4
  %shr48 = lshr i32 %38, 24
  %and49 = and i32 %shr48, 255
  %conv50 = trunc i32 %and49 to i8
  %arrayidx51 = getelementptr inbounds [4 x i8], [4 x i8]* %b36, i64 0, i64 3
  store i8 %conv50, i8* %arrayidx51, align 1
  %39 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func52 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %39, i32 0, i32 0
  %40 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func52, align 8
  %41 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context53 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %41, i32 0, i32 1
  %42 = load i8*, i8** %context53, align 8
  %arraydecay54 = getelementptr inbounds [4 x i8], [4 x i8]* %b36, i64 0, i64 0
  call void %40(i8* %42, i8* %arraydecay54, i32 4)
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.93, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 371, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @__PRETTY_FUNCTION__.stbiw__writefv, i64 0, i64 0)) #11
  unreachable

sw.epilog:                                        ; preds = %vaarg.end34, %vaarg.end14, %vaarg.end, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__write_pixels(%struct.stbi__write_context* %s, i32 %rgb_dir, i32 %vdir, i32 %x, i32 %y, i32 %comp, i8* %data, i32 %write_alpha, i32 %scanline_pad, i32 %expand_mono) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %rgb_dir.addr = alloca i32, align 4
  %vdir.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %write_alpha.addr = alloca i32, align 4
  %scanline_pad.addr = alloca i32, align 4
  %expand_mono.addr = alloca i32, align 4
  %zero = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %j_end = alloca i32, align 4
  %d = alloca i8*, align 8
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32 %rgb_dir, i32* %rgb_dir.addr, align 4
  store i32 %vdir, i32* %vdir.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  store i32 %write_alpha, i32* %write_alpha.addr, align 4
  store i32 %scanline_pad, i32* %scanline_pad.addr, align 4
  store i32 %expand_mono, i32* %expand_mono.addr, align 4
  store i32 0, i32* %zero, align 4
  %0 = load i32, i32* %y.addr, align 4
  %cmp = icmp sle i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.end14

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @stbi__flip_vertically_on_write, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  %2 = load i32, i32* %vdir.addr, align 4
  %mul = mul nsw i32 %2, -1
  store i32 %mul, i32* %vdir.addr, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %3 = load i32, i32* %vdir.addr, align 4
  %cmp3 = icmp slt i32 %3, 0
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end2
  store i32 -1, i32* %j_end, align 4
  %4 = load i32, i32* %y.addr, align 4
  %sub = sub nsw i32 %4, 1
  store i32 %sub, i32* %j, align 4
  br label %if.end5

if.else:                                          ; preds = %if.end2
  %5 = load i32, i32* %y.addr, align 4
  store i32 %5, i32* %j_end, align 4
  store i32 0, i32* %j, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %if.end5
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %j_end, align 4
  %cmp6 = icmp ne i32 %6, %7
  br i1 %cmp6, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %x.addr, align 4
  %cmp8 = icmp slt i32 %8, %9
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %10 = load i8*, i8** %data.addr, align 8
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %x.addr, align 4
  %mul10 = mul nsw i32 %11, %12
  %13 = load i32, i32* %i, align 4
  %add = add nsw i32 %mul10, %13
  %14 = load i32, i32* %comp.addr, align 4
  %mul11 = mul nsw i32 %add, %14
  %idx.ext = sext i32 %mul11 to i64
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext
  store i8* %add.ptr, i8** %d, align 8
  %15 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %16 = load i32, i32* %rgb_dir.addr, align 4
  %17 = load i32, i32* %comp.addr, align 4
  %18 = load i32, i32* %write_alpha.addr, align 4
  %19 = load i32, i32* %expand_mono.addr, align 4
  %20 = load i8*, i8** %d, align 8
  call void @stbiw__write_pixel(%struct.stbi__write_context* %15, i32 %16, i32 %17, i32 %18, i32 %19, i8* %20)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  %22 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__write_flush(%struct.stbi__write_context* %22)
  %23 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %23, i32 0, i32 0
  %24 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func, align 8
  %25 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %25, i32 0, i32 1
  %26 = load i8*, i8** %context, align 8
  %27 = bitcast i32* %zero to i8*
  %28 = load i32, i32* %scanline_pad.addr, align 4
  call void %24(i8* %26, i8* %27, i32 %28)
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %29 = load i32, i32* %vdir.addr, align 4
  %30 = load i32, i32* %j, align 4
  %add13 = add nsw i32 %30, %29
  store i32 %add13, i32* %j, align 4
  br label %for.cond

for.end14:                                        ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__write_pixel(%struct.stbi__write_context* %s, i32 %rgb_dir, i32 %comp, i32 %write_alpha, i32 %expand_mono, i8* %d) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %rgb_dir.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %write_alpha.addr = alloca i32, align 4
  %expand_mono.addr = alloca i32, align 4
  %d.addr = alloca i8*, align 8
  %bg = alloca [3 x i8], align 1
  %px = alloca [3 x i8], align 1
  %k = alloca i32, align 4
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32 %rgb_dir, i32* %rgb_dir.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i32 %write_alpha, i32* %write_alpha.addr, align 4
  store i32 %expand_mono, i32* %expand_mono.addr, align 4
  store i8* %d, i8** %d.addr, align 8
  %0 = bitcast [3 x i8]* %bg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @__const.stbiw__write_pixel.bg, i32 0, i32 0), i64 3, i1 false)
  %1 = load i32, i32* %write_alpha.addr, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %3 = load i8*, i8** %d.addr, align 8
  %4 = load i32, i32* %comp.addr, align 4
  %sub = sub nsw i32 %4, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  call void @stbiw__write1(%struct.stbi__write_context* %2, i8 zeroext %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %comp.addr, align 4
  switch i32 %6, label %sw.epilog [
    i32 2, label %sw.bb
    i32 1, label %sw.bb
    i32 4, label %sw.bb7
    i32 3, label %sw.bb33
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  %7 = load i32, i32* %expand_mono.addr, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %sw.bb
  %8 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %9 = load i8*, i8** %d.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx2, align 1
  %11 = load i8*, i8** %d.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx3, align 1
  %13 = load i8*, i8** %d.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx4, align 1
  call void @stbiw__write3(%struct.stbi__write_context* %8, i8 zeroext %10, i8 zeroext %12, i8 zeroext %14)
  br label %if.end6

if.else:                                          ; preds = %sw.bb
  %15 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %16 = load i8*, i8** %d.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx5, align 1
  call void @stbiw__write1(%struct.stbi__write_context* %15, i8 zeroext %17)
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then1
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end
  %18 = load i32, i32* %write_alpha.addr, align 4
  %tobool8 = icmp ne i32 %18, 0
  br i1 %tobool8, label %if.end32, label %if.then9

if.then9:                                         ; preds = %sw.bb7
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then9
  %19 = load i32, i32* %k, align 4
  %cmp10 = icmp slt i32 %19, 3
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i32, i32* %k, align 4
  %idxprom11 = sext i32 %20 to i64
  %arrayidx12 = getelementptr inbounds [3 x i8], [3 x i8]* %bg, i64 0, i64 %idxprom11
  %21 = load i8, i8* %arrayidx12, align 1
  %conv = zext i8 %21 to i32
  %22 = load i8*, i8** %d.addr, align 8
  %23 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %23 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %22, i64 %idxprom13
  %24 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %24 to i32
  %25 = load i32, i32* %k, align 4
  %idxprom16 = sext i32 %25 to i64
  %arrayidx17 = getelementptr inbounds [3 x i8], [3 x i8]* %bg, i64 0, i64 %idxprom16
  %26 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %26 to i32
  %sub19 = sub nsw i32 %conv15, %conv18
  %27 = load i8*, i8** %d.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %27, i64 3
  %28 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %28 to i32
  %mul = mul nsw i32 %sub19, %conv21
  %div = sdiv i32 %mul, 255
  %add = add nsw i32 %conv, %div
  %conv22 = trunc i32 %add to i8
  %29 = load i32, i32* %k, align 4
  %idxprom23 = sext i32 %29 to i64
  %arrayidx24 = getelementptr inbounds [3 x i8], [3 x i8]* %px, i64 0, i64 %idxprom23
  store i8 %conv22, i8* %arrayidx24, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %k, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %31 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %32 = load i32, i32* %rgb_dir.addr, align 4
  %sub25 = sub nsw i32 1, %32
  %idxprom26 = sext i32 %sub25 to i64
  %arrayidx27 = getelementptr inbounds [3 x i8], [3 x i8]* %px, i64 0, i64 %idxprom26
  %33 = load i8, i8* %arrayidx27, align 1
  %arrayidx28 = getelementptr inbounds [3 x i8], [3 x i8]* %px, i64 0, i64 1
  %34 = load i8, i8* %arrayidx28, align 1
  %35 = load i32, i32* %rgb_dir.addr, align 4
  %add29 = add nsw i32 1, %35
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds [3 x i8], [3 x i8]* %px, i64 0, i64 %idxprom30
  %36 = load i8, i8* %arrayidx31, align 1
  call void @stbiw__write3(%struct.stbi__write_context* %31, i8 zeroext %33, i8 zeroext %34, i8 zeroext %36)
  br label %sw.epilog

if.end32:                                         ; preds = %sw.bb7
  br label %sw.bb33

sw.bb33:                                          ; preds = %if.end, %if.end32
  %37 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %38 = load i8*, i8** %d.addr, align 8
  %39 = load i32, i32* %rgb_dir.addr, align 4
  %sub34 = sub nsw i32 1, %39
  %idxprom35 = sext i32 %sub34 to i64
  %arrayidx36 = getelementptr inbounds i8, i8* %38, i64 %idxprom35
  %40 = load i8, i8* %arrayidx36, align 1
  %41 = load i8*, i8** %d.addr, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %41, i64 1
  %42 = load i8, i8* %arrayidx37, align 1
  %43 = load i8*, i8** %d.addr, align 8
  %44 = load i32, i32* %rgb_dir.addr, align 4
  %add38 = add nsw i32 1, %44
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds i8, i8* %43, i64 %idxprom39
  %45 = load i8, i8* %arrayidx40, align 1
  call void @stbiw__write3(%struct.stbi__write_context* %37, i8 zeroext %40, i8 zeroext %42, i8 zeroext %45)
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end, %sw.bb33, %for.end, %if.end6
  %46 = load i32, i32* %write_alpha.addr, align 4
  %cmp41 = icmp sgt i32 %46, 0
  br i1 %cmp41, label %if.then43, label %if.end47

if.then43:                                        ; preds = %sw.epilog
  %47 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %48 = load i8*, i8** %d.addr, align 8
  %49 = load i32, i32* %comp.addr, align 4
  %sub44 = sub nsw i32 %49, 1
  %idxprom45 = sext i32 %sub44 to i64
  %arrayidx46 = getelementptr inbounds i8, i8* %48, i64 %idxprom45
  %50 = load i8, i8* %arrayidx46, align 1
  call void @stbiw__write1(%struct.stbi__write_context* %47, i8 zeroext %50)
  br label %if.end47

if.end47:                                         ; preds = %if.then43, %sw.epilog
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__write_flush(%struct.stbi__write_context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  %0 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buf_used = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %0, i32 0, i32 3
  %1 = load i32, i32* %buf_used, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %2, i32 0, i32 0
  %3 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func, align 8
  %4 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %4, i32 0, i32 1
  %5 = load i8*, i8** %context, align 8
  %6 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buffer = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %6, i32 0, i32 2
  %7 = bitcast [64 x i8]* %buffer to i8*
  %8 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buf_used1 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %8, i32 0, i32 3
  %9 = load i32, i32* %buf_used1, align 8
  call void %3(i8* %5, i8* %7, i32 %9)
  %10 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buf_used2 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %10, i32 0, i32 3
  store i32 0, i32* %buf_used2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__write1(%struct.stbi__write_context* %s, i8 zeroext %a) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %a.addr = alloca i8, align 1
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i8 %a, i8* %a.addr, align 1
  %0 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buf_used = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %0, i32 0, i32 3
  %1 = load i32, i32* %buf_used, align 8
  %add = add nsw i32 %1, 1
  %conv = sext i32 %add to i64
  %cmp = icmp ugt i64 %conv, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__write_flush(%struct.stbi__write_context* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8, i8* %a.addr, align 1
  %4 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buffer = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %4, i32 0, i32 2
  %5 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buf_used2 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %5, i32 0, i32 3
  %6 = load i32, i32* %buf_used2, align 8
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %buf_used2, align 8
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %buffer, i64 0, i64 %idxprom
  store i8 %3, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__write3(%struct.stbi__write_context* %s, i8 zeroext %a, i8 zeroext %b, i8 zeroext %c) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %a.addr = alloca i8, align 1
  %b.addr = alloca i8, align 1
  %c.addr = alloca i8, align 1
  %n = alloca i32, align 4
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i8 %a, i8* %a.addr, align 1
  store i8 %b, i8* %b.addr, align 1
  store i8 %c, i8* %c.addr, align 1
  %0 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buf_used = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %0, i32 0, i32 3
  %1 = load i32, i32* %buf_used, align 8
  %add = add nsw i32 %1, 3
  %conv = sext i32 %add to i64
  %cmp = icmp ugt i64 %conv, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__write_flush(%struct.stbi__write_context* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buf_used2 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %3, i32 0, i32 3
  %4 = load i32, i32* %buf_used2, align 8
  store i32 %4, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %add3 = add nsw i32 %5, 3
  %6 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buf_used4 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %6, i32 0, i32 3
  store i32 %add3, i32* %buf_used4, align 8
  %7 = load i8, i8* %a.addr, align 1
  %8 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buffer = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %8, i32 0, i32 2
  %9 = load i32, i32* %n, align 4
  %add5 = add nsw i32 %9, 0
  %idxprom = sext i32 %add5 to i64
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %buffer, i64 0, i64 %idxprom
  store i8 %7, i8* %arrayidx, align 1
  %10 = load i8, i8* %b.addr, align 1
  %11 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buffer6 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %11, i32 0, i32 2
  %12 = load i32, i32* %n, align 4
  %add7 = add nsw i32 %12, 1
  %idxprom8 = sext i32 %add7 to i64
  %arrayidx9 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer6, i64 0, i64 %idxprom8
  store i8 %10, i8* %arrayidx9, align 1
  %13 = load i8, i8* %c.addr, align 1
  %14 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %buffer10 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %14, i32 0, i32 2
  %15 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %15, 2
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer10, i64 0, i64 %idxprom12
  store i8 %13, i8* %arrayidx13, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_write_bmp(i8* %filename, i32 %x, i32 %y, i32 %comp, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %s = alloca %struct.stbi__write_context, align 8
  %r = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  %0 = bitcast %struct.stbi__write_context* %s to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 88, i1 false)
  %1 = load i8*, i8** %filename.addr, align 8
  %call = call i32 @stbi__start_write_file(%struct.stbi__write_context* %s, i8* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %4 = load i32, i32* %comp.addr, align 4
  %5 = load i8*, i8** %data.addr, align 8
  %call1 = call i32 @stbi_write_bmp_core(%struct.stbi__write_context* %s, i32 %2, i32 %3, i32 %4, i8* %5)
  store i32 %call1, i32* %r, align 4
  call void @stbi__end_write_file(%struct.stbi__write_context* %s)
  %6 = load i32, i32* %r, align 4
  store i32 %6, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi__start_write_file(%struct.stbi__write_context* %s, i8* %filename) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %filename.addr = alloca i8*, align 8
  %f = alloca %struct._IO_FILE*, align 8
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i8* %filename, i8** %filename.addr, align 8
  %0 = load i8*, i8** %filename.addr, align 8
  %call = call %struct._IO_FILE* @stbiw__fopen(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %f, align 8
  %1 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %3 = bitcast %struct._IO_FILE* %2 to i8*
  call void @stbi__start_write_callbacks(%struct.stbi__write_context* %1, void (i8*, i8*, i32)* @stbi__stdio_write, i8* %3)
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %cmp = icmp ne %struct._IO_FILE* %4, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__end_write_file(%struct.stbi__write_context* %s) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  %0 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %0, i32 0, i32 1
  %1 = load i8*, i8** %context, align 8
  %2 = bitcast i8* %1 to %struct._IO_FILE*
  %call = call i32 @fclose(%struct._IO_FILE* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal %struct._IO_FILE* @stbiw__fopen(i8* %filename, i8* %mode) #0 {
entry:
  %filename.addr = alloca i8*, align 8
  %mode.addr = alloca i8*, align 8
  %f = alloca %struct._IO_FILE*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i8* %mode, i8** %mode.addr, align 8
  %0 = load i8*, i8** %filename.addr, align 8
  %1 = load i8*, i8** %mode.addr, align 8
  %call = call %struct._IO_FILE* @fopen(i8* %0, i8* %1)
  store %struct._IO_FILE* %call, %struct._IO_FILE** %f, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  ret %struct._IO_FILE* %2
}

; Function Attrs: noinline nounwind optnone
define internal void @stbi__stdio_write(i8* %context, i8* %data, i32 %size) #0 {
entry:
  %context.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  store i8* %context, i8** %context.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i8*, i8** %data.addr, align 8
  %1 = load i32, i32* %size.addr, align 4
  %conv = sext i32 %1 to i64
  %2 = load i8*, i8** %context.addr, align 8
  %3 = bitcast i8* %2 to %struct._IO_FILE*
  %call = call i64 @fwrite(i8* %0, i64 1, i64 %conv, %struct._IO_FILE* %3)
  ret void
}

declare i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone
define i32 @stbi_write_tga_to_func(void (i8*, i8*, i32)* %func, i8* %context, i32 %x, i32 %y, i32 %comp, i8* %data) #0 {
entry:
  %func.addr = alloca void (i8*, i8*, i32)*, align 8
  %context.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %s = alloca %struct.stbi__write_context, align 8
  store void (i8*, i8*, i32)* %func, void (i8*, i8*, i32)** %func.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  %0 = bitcast %struct.stbi__write_context* %s to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 88, i1 false)
  %1 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func.addr, align 8
  %2 = load i8*, i8** %context.addr, align 8
  call void @stbi__start_write_callbacks(%struct.stbi__write_context* %s, void (i8*, i8*, i32)* %1, i8* %2)
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %y.addr, align 4
  %5 = load i32, i32* %comp.addr, align 4
  %6 = load i8*, i8** %data.addr, align 8
  %call = call i32 @stbi_write_tga_core(%struct.stbi__write_context* %s, i32 %3, i32 %4, i32 %5, i8* %6)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi_write_tga_core(%struct.stbi__write_context* %s, i32 %x, i32 %y, i32 %comp, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %has_alpha = alloca i32, align 4
  %colorbytes = alloca i32, align 4
  %format = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %jend = alloca i32, align 4
  %jdir = alloca i32, align 4
  %row = alloca i8*, align 8
  %len = alloca i32, align 4
  %begin = alloca i8*, align 8
  %diff = alloca i32, align 4
  %prev = alloca i8*, align 8
  %header = alloca i8, align 1
  %header97 = alloca i8, align 1
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  %0 = load i32, i32* %comp.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %comp.addr, align 4
  %cmp1 = icmp eq i32 %1, 4
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  store i32 %lor.ext, i32* %has_alpha, align 4
  %3 = load i32, i32* %has_alpha, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.end
  %4 = load i32, i32* %comp.addr, align 4
  %sub = sub nsw i32 %4, 1
  br label %cond.end

cond.false:                                       ; preds = %lor.end
  %5 = load i32, i32* %comp.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %5, %cond.false ]
  store i32 %cond, i32* %colorbytes, align 4
  %6 = load i32, i32* %colorbytes, align 4
  %cmp2 = icmp slt i32 %6, 2
  %7 = zext i1 %cmp2 to i64
  %cond3 = select i1 %cmp2, i32 3, i32 2
  store i32 %cond3, i32* %format, align 4
  %8 = load i32, i32* %y.addr, align 4
  %cmp4 = icmp slt i32 %8, 0
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %9 = load i32, i32* %x.addr, align 4
  %cmp5 = icmp slt i32 %9, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %10 = load i32, i32* @stbi_write_tga_with_rle, align 4
  %tobool6 = icmp ne i32 %10, 0
  br i1 %tobool6, label %if.else, label %if.then7

if.then7:                                         ; preds = %if.end
  %11 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %12 = load i32, i32* %x.addr, align 4
  %13 = load i32, i32* %y.addr, align 4
  %14 = load i32, i32* %comp.addr, align 4
  %15 = load i8*, i8** %data.addr, align 8
  %16 = load i32, i32* %has_alpha, align 4
  %17 = load i32, i32* %format, align 4
  %18 = load i32, i32* %x.addr, align 4
  %19 = load i32, i32* %y.addr, align 4
  %20 = load i32, i32* %colorbytes, align 4
  %21 = load i32, i32* %has_alpha, align 4
  %add = add nsw i32 %20, %21
  %mul = mul nsw i32 %add, 8
  %22 = load i32, i32* %has_alpha, align 4
  %mul8 = mul nsw i32 %22, 8
  %call = call i32 (%struct.stbi__write_context*, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i8*, ...) @stbiw__outfile(%struct.stbi__write_context* %11, i32 -1, i32 -1, i32 %12, i32 %13, i32 %14, i32 0, i8* %15, i32 %16, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.148, i64 0, i64 0), i32 0, i32 0, i32 %17, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %18, i32 %19, i32 %mul, i32 %mul8)
  store i32 %call, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.end
  %23 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %24 = load i32, i32* %format, align 4
  %add9 = add nsw i32 %24, 8
  %25 = load i32, i32* %x.addr, align 4
  %26 = load i32, i32* %y.addr, align 4
  %27 = load i32, i32* %colorbytes, align 4
  %28 = load i32, i32* %has_alpha, align 4
  %add10 = add nsw i32 %27, %28
  %mul11 = mul nsw i32 %add10, 8
  %29 = load i32, i32* %has_alpha, align 4
  %mul12 = mul nsw i32 %29, 8
  call void (%struct.stbi__write_context*, i8*, ...) @stbiw__writef(%struct.stbi__write_context* %23, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.148, i64 0, i64 0), i32 0, i32 0, i32 %add9, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %25, i32 %26, i32 %mul11, i32 %mul12)
  %30 = load i32, i32* @stbi__flip_vertically_on_write, align 4
  %tobool13 = icmp ne i32 %30, 0
  br i1 %tobool13, label %if.then14, label %if.else15

if.then14:                                        ; preds = %if.else
  store i32 0, i32* %j, align 4
  %31 = load i32, i32* %y.addr, align 4
  store i32 %31, i32* %jend, align 4
  store i32 1, i32* %jdir, align 4
  br label %if.end17

if.else15:                                        ; preds = %if.else
  %32 = load i32, i32* %y.addr, align 4
  %sub16 = sub nsw i32 %32, 1
  store i32 %sub16, i32* %j, align 4
  store i32 -1, i32* %jend, align 4
  store i32 -1, i32* %jdir, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.then14
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end17
  %33 = load i32, i32* %j, align 4
  %34 = load i32, i32* %jend, align 4
  %cmp18 = icmp ne i32 %33, %34
  br i1 %cmp18, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %35 = load i8*, i8** %data.addr, align 8
  %36 = load i32, i32* %j, align 4
  %37 = load i32, i32* %x.addr, align 4
  %mul19 = mul nsw i32 %36, %37
  %38 = load i32, i32* %comp.addr, align 4
  %mul20 = mul nsw i32 %mul19, %38
  %idx.ext = sext i32 %mul20 to i64
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %idx.ext
  store i8* %add.ptr, i8** %row, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc102, %for.body
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %x.addr, align 4
  %cmp22 = icmp slt i32 %39, %40
  br i1 %cmp22, label %for.body23, label %for.end104

for.body23:                                       ; preds = %for.cond21
  %41 = load i8*, i8** %row, align 8
  %42 = load i32, i32* %i, align 4
  %43 = load i32, i32* %comp.addr, align 4
  %mul24 = mul nsw i32 %42, %43
  %idx.ext25 = sext i32 %mul24 to i64
  %add.ptr26 = getelementptr inbounds i8, i8* %41, i64 %idx.ext25
  store i8* %add.ptr26, i8** %begin, align 8
  store i32 1, i32* %diff, align 4
  store i32 1, i32* %len, align 4
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %x.addr, align 4
  %sub27 = sub nsw i32 %45, 1
  %cmp28 = icmp slt i32 %44, %sub27
  br i1 %cmp28, label %if.then29, label %if.end81

if.then29:                                        ; preds = %for.body23
  %46 = load i32, i32* %len, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %len, align 4
  %47 = load i8*, i8** %begin, align 8
  %48 = load i8*, i8** %row, align 8
  %49 = load i32, i32* %i, align 4
  %add30 = add nsw i32 %49, 1
  %50 = load i32, i32* %comp.addr, align 4
  %mul31 = mul nsw i32 %add30, %50
  %idx.ext32 = sext i32 %mul31 to i64
  %add.ptr33 = getelementptr inbounds i8, i8* %48, i64 %idx.ext32
  %51 = load i32, i32* %comp.addr, align 4
  %conv = sext i32 %51 to i64
  %call34 = call i32 @memcmp(i8* %47, i8* %add.ptr33, i64 %conv) #12
  store i32 %call34, i32* %diff, align 4
  %52 = load i32, i32* %diff, align 4
  %tobool35 = icmp ne i32 %52, 0
  br i1 %tobool35, label %if.then36, label %if.else57

if.then36:                                        ; preds = %if.then29
  %53 = load i8*, i8** %begin, align 8
  store i8* %53, i8** %prev, align 8
  %54 = load i32, i32* %i, align 4
  %add37 = add nsw i32 %54, 2
  store i32 %add37, i32* %k, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc, %if.then36
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %x.addr, align 4
  %cmp39 = icmp slt i32 %55, %56
  br i1 %cmp39, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond38
  %57 = load i32, i32* %len, align 4
  %cmp41 = icmp slt i32 %57, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond38
  %58 = phi i1 [ false, %for.cond38 ], [ %cmp41, %land.rhs ]
  br i1 %58, label %for.body43, label %for.end

for.body43:                                       ; preds = %land.end
  %59 = load i8*, i8** %prev, align 8
  %60 = load i8*, i8** %row, align 8
  %61 = load i32, i32* %k, align 4
  %62 = load i32, i32* %comp.addr, align 4
  %mul44 = mul nsw i32 %61, %62
  %idx.ext45 = sext i32 %mul44 to i64
  %add.ptr46 = getelementptr inbounds i8, i8* %60, i64 %idx.ext45
  %63 = load i32, i32* %comp.addr, align 4
  %conv47 = sext i32 %63 to i64
  %call48 = call i32 @memcmp(i8* %59, i8* %add.ptr46, i64 %conv47) #12
  %tobool49 = icmp ne i32 %call48, 0
  br i1 %tobool49, label %if.then50, label %if.else54

if.then50:                                        ; preds = %for.body43
  %64 = load i32, i32* %comp.addr, align 4
  %65 = load i8*, i8** %prev, align 8
  %idx.ext51 = sext i32 %64 to i64
  %add.ptr52 = getelementptr inbounds i8, i8* %65, i64 %idx.ext51
  store i8* %add.ptr52, i8** %prev, align 8
  %66 = load i32, i32* %len, align 4
  %inc53 = add nsw i32 %66, 1
  store i32 %inc53, i32* %len, align 4
  br label %if.end55

if.else54:                                        ; preds = %for.body43
  %67 = load i32, i32* %len, align 4
  %dec = add nsw i32 %67, -1
  store i32 %dec, i32* %len, align 4
  br label %for.end

if.end55:                                         ; preds = %if.then50
  br label %for.inc

for.inc:                                          ; preds = %if.end55
  %68 = load i32, i32* %k, align 4
  %inc56 = add nsw i32 %68, 1
  store i32 %inc56, i32* %k, align 4
  br label %for.cond38

for.end:                                          ; preds = %if.else54, %land.end
  br label %if.end80

if.else57:                                        ; preds = %if.then29
  %69 = load i32, i32* %i, align 4
  %add58 = add nsw i32 %69, 2
  store i32 %add58, i32* %k, align 4
  br label %for.cond59

for.cond59:                                       ; preds = %for.inc77, %if.else57
  %70 = load i32, i32* %k, align 4
  %71 = load i32, i32* %x.addr, align 4
  %cmp60 = icmp slt i32 %70, %71
  br i1 %cmp60, label %land.rhs62, label %land.end65

land.rhs62:                                       ; preds = %for.cond59
  %72 = load i32, i32* %len, align 4
  %cmp63 = icmp slt i32 %72, 128
  br label %land.end65

land.end65:                                       ; preds = %land.rhs62, %for.cond59
  %73 = phi i1 [ false, %for.cond59 ], [ %cmp63, %land.rhs62 ]
  br i1 %73, label %for.body66, label %for.end79

for.body66:                                       ; preds = %land.end65
  %74 = load i8*, i8** %begin, align 8
  %75 = load i8*, i8** %row, align 8
  %76 = load i32, i32* %k, align 4
  %77 = load i32, i32* %comp.addr, align 4
  %mul67 = mul nsw i32 %76, %77
  %idx.ext68 = sext i32 %mul67 to i64
  %add.ptr69 = getelementptr inbounds i8, i8* %75, i64 %idx.ext68
  %78 = load i32, i32* %comp.addr, align 4
  %conv70 = sext i32 %78 to i64
  %call71 = call i32 @memcmp(i8* %74, i8* %add.ptr69, i64 %conv70) #12
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.else75, label %if.then73

if.then73:                                        ; preds = %for.body66
  %79 = load i32, i32* %len, align 4
  %inc74 = add nsw i32 %79, 1
  store i32 %inc74, i32* %len, align 4
  br label %if.end76

if.else75:                                        ; preds = %for.body66
  br label %for.end79

if.end76:                                         ; preds = %if.then73
  br label %for.inc77

for.inc77:                                        ; preds = %if.end76
  %80 = load i32, i32* %k, align 4
  %inc78 = add nsw i32 %80, 1
  store i32 %inc78, i32* %k, align 4
  br label %for.cond59

for.end79:                                        ; preds = %if.else75, %land.end65
  br label %if.end80

if.end80:                                         ; preds = %for.end79, %for.end
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %for.body23
  %81 = load i32, i32* %diff, align 4
  %tobool82 = icmp ne i32 %81, 0
  br i1 %tobool82, label %if.then83, label %if.else96

if.then83:                                        ; preds = %if.end81
  %82 = load i32, i32* %len, align 4
  %sub84 = sub nsw i32 %82, 1
  %and = and i32 %sub84, 255
  %conv85 = trunc i32 %and to i8
  store i8 %conv85, i8* %header, align 1
  %83 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %84 = load i8, i8* %header, align 1
  call void @stbiw__write1(%struct.stbi__write_context* %83, i8 zeroext %84)
  store i32 0, i32* %k, align 4
  br label %for.cond86

for.cond86:                                       ; preds = %for.inc93, %if.then83
  %85 = load i32, i32* %k, align 4
  %86 = load i32, i32* %len, align 4
  %cmp87 = icmp slt i32 %85, %86
  br i1 %cmp87, label %for.body89, label %for.end95

for.body89:                                       ; preds = %for.cond86
  %87 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %88 = load i32, i32* %comp.addr, align 4
  %89 = load i32, i32* %has_alpha, align 4
  %90 = load i8*, i8** %begin, align 8
  %91 = load i32, i32* %k, align 4
  %92 = load i32, i32* %comp.addr, align 4
  %mul90 = mul nsw i32 %91, %92
  %idx.ext91 = sext i32 %mul90 to i64
  %add.ptr92 = getelementptr inbounds i8, i8* %90, i64 %idx.ext91
  call void @stbiw__write_pixel(%struct.stbi__write_context* %87, i32 -1, i32 %88, i32 %89, i32 0, i8* %add.ptr92)
  br label %for.inc93

for.inc93:                                        ; preds = %for.body89
  %93 = load i32, i32* %k, align 4
  %inc94 = add nsw i32 %93, 1
  store i32 %inc94, i32* %k, align 4
  br label %for.cond86

for.end95:                                        ; preds = %for.cond86
  br label %if.end101

if.else96:                                        ; preds = %if.end81
  %94 = load i32, i32* %len, align 4
  %sub98 = sub nsw i32 %94, 129
  %and99 = and i32 %sub98, 255
  %conv100 = trunc i32 %and99 to i8
  store i8 %conv100, i8* %header97, align 1
  %95 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %96 = load i8, i8* %header97, align 1
  call void @stbiw__write1(%struct.stbi__write_context* %95, i8 zeroext %96)
  %97 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %98 = load i32, i32* %comp.addr, align 4
  %99 = load i32, i32* %has_alpha, align 4
  %100 = load i8*, i8** %begin, align 8
  call void @stbiw__write_pixel(%struct.stbi__write_context* %97, i32 -1, i32 %98, i32 %99, i32 0, i8* %100)
  br label %if.end101

if.end101:                                        ; preds = %if.else96, %for.end95
  br label %for.inc102

for.inc102:                                       ; preds = %if.end101
  %101 = load i32, i32* %len, align 4
  %102 = load i32, i32* %i, align 4
  %add103 = add nsw i32 %102, %101
  store i32 %add103, i32* %i, align 4
  br label %for.cond21

for.end104:                                       ; preds = %for.cond21
  br label %for.inc105

for.inc105:                                       ; preds = %for.end104
  %103 = load i32, i32* %jdir, align 4
  %104 = load i32, i32* %j, align 4
  %add106 = add nsw i32 %104, %103
  store i32 %add106, i32* %j, align 4
  br label %for.cond

for.end107:                                       ; preds = %for.cond
  %105 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__write_flush(%struct.stbi__write_context* %105)
  br label %if.end108

if.end108:                                        ; preds = %for.end107
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end108, %if.then7, %if.then
  %106 = load i32, i32* %retval, align 4
  ret i32 %106
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__writef(%struct.stbi__write_context* %s, i8* %fmt, ...) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %fmt.addr = alloca i8*, align 8
  %v = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %v, i64 0, i64 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %1 = load i8*, i8** %fmt.addr, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %v, i64 0, i64 0
  call void @stbiw__writefv(%struct.stbi__write_context* %0, i8* %1, %struct.__va_list_tag* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %v, i64 0, i64 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #6

; Function Attrs: noinline nounwind optnone
define i32 @stbi_write_tga(i8* %filename, i32 %x, i32 %y, i32 %comp, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %s = alloca %struct.stbi__write_context, align 8
  %r = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  %0 = bitcast %struct.stbi__write_context* %s to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 88, i1 false)
  %1 = load i8*, i8** %filename.addr, align 8
  %call = call i32 @stbi__start_write_file(%struct.stbi__write_context* %s, i8* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %4 = load i32, i32* %comp.addr, align 4
  %5 = load i8*, i8** %data.addr, align 8
  %call1 = call i32 @stbi_write_tga_core(%struct.stbi__write_context* %s, i32 %2, i32 %3, i32 %4, i8* %5)
  store i32 %call1, i32* %r, align 4
  call void @stbi__end_write_file(%struct.stbi__write_context* %s)
  %6 = load i32, i32* %r, align 4
  store i32 %6, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_write_hdr_to_func(void (i8*, i8*, i32)* %func, i8* %context, i32 %x, i32 %y, i32 %comp, float* %data) #0 {
entry:
  %func.addr = alloca void (i8*, i8*, i32)*, align 8
  %context.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca float*, align 8
  %s = alloca %struct.stbi__write_context, align 8
  store void (i8*, i8*, i32)* %func, void (i8*, i8*, i32)** %func.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store float* %data, float** %data.addr, align 8
  %0 = bitcast %struct.stbi__write_context* %s to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 88, i1 false)
  %1 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func.addr, align 8
  %2 = load i8*, i8** %context.addr, align 8
  call void @stbi__start_write_callbacks(%struct.stbi__write_context* %s, void (i8*, i8*, i32)* %1, i8* %2)
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %y.addr, align 4
  %5 = load i32, i32* %comp.addr, align 4
  %6 = load float*, float** %data.addr, align 8
  %call = call i32 @stbi_write_hdr_core(%struct.stbi__write_context* %s, i32 %3, i32 %4, i32 %5, float* %6)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi_write_hdr_core(%struct.stbi__write_context* %s, i32 %x, i32 %y, i32 %comp, float* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca float*, align 8
  %scratch = alloca i8*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %buffer = alloca [128 x i8], align 16
  %header = alloca [66 x i8], align 16
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store float* %data, float** %data.addr, align 8
  %0 = load i32, i32* %y.addr, align 4
  %cmp = icmp sle i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %x.addr, align 4
  %cmp1 = icmp sle i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load float*, float** %data.addr, align 8
  %cmp3 = icmp eq float* %2, null
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %lor.lhs.false2
  %3 = load i32, i32* %x.addr, align 4
  %mul = mul nsw i32 %3, 4
  %conv = sext i32 %mul to i64
  %call = call noalias i8* @malloc(i64 %conv) #10
  store i8* %call, i8** %scratch, align 8
  %4 = bitcast [66 x i8]* %header to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 16 getelementptr inbounds ([66 x i8], [66 x i8]* @__const.stbi_write_hdr_core.header, i32 0, i32 0), i64 66, i1 false)
  %5 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %5, i32 0, i32 0
  %6 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func, align 8
  %7 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %7, i32 0, i32 1
  %8 = load i8*, i8** %context, align 8
  %arraydecay = getelementptr inbounds [66 x i8], [66 x i8]* %header, i64 0, i64 0
  call void %6(i8* %8, i8* %arraydecay, i32 65)
  %arraydecay4 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i64 0, i64 0
  %9 = load i32, i32* %y.addr, align 4
  %10 = load i32, i32* %x.addr, align 4
  %call5 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.149, i64 0, i64 0), i32 %9, i32 %10) #10
  store i32 %call5, i32* %len, align 4
  %11 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func6 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %11, i32 0, i32 0
  %12 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func6, align 8
  %13 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context7 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %13, i32 0, i32 1
  %14 = load i8*, i8** %context7, align 8
  %arraydecay8 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i64 0, i64 0
  %15 = load i32, i32* %len, align 4
  call void %12(i8* %14, i8* %arraydecay8, i32 %15)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %y.addr, align 4
  %cmp9 = icmp slt i32 %16, %17
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %19 = load i32, i32* %x.addr, align 4
  %20 = load i32, i32* %comp.addr, align 4
  %21 = load i8*, i8** %scratch, align 8
  %22 = load float*, float** %data.addr, align 8
  %23 = load i32, i32* %comp.addr, align 4
  %24 = load i32, i32* %x.addr, align 4
  %mul11 = mul nsw i32 %23, %24
  %25 = load i32, i32* @stbi__flip_vertically_on_write, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %26 = load i32, i32* %y.addr, align 4
  %sub = sub nsw i32 %26, 1
  %27 = load i32, i32* %i, align 4
  %sub12 = sub nsw i32 %sub, %27
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %28 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub12, %cond.true ], [ %28, %cond.false ]
  %mul13 = mul nsw i32 %mul11, %cond
  %idx.ext = sext i32 %mul13 to i64
  %add.ptr = getelementptr inbounds float, float* %22, i64 %idx.ext
  call void @stbiw__write_hdr_scanline(%struct.stbi__write_context* %18, i32 %19, i32 %20, i8* %21, float* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %29 = load i32, i32* %i, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load i8*, i8** %scratch, align 8
  call void @free(i8* %30) #10
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %31 = load i32, i32* %retval, align 4
  ret i32 %31
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__write_hdr_scanline(%struct.stbi__write_context* %s, i32 %width, i32 %ncomp, i8* %scratch, float* %scanline) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %width.addr = alloca i32, align 4
  %ncomp.addr = alloca i32, align 4
  %scratch.addr = alloca i8*, align 8
  %scanline.addr = alloca float*, align 8
  %scanlineheader = alloca [4 x i8], align 1
  %rgbe = alloca [4 x i8], align 1
  %linear = alloca [3 x float], align 4
  %x = alloca i32, align 4
  %c = alloca i32, align 4
  %r = alloca i32, align 4
  %comp = alloca i8*, align 8
  %len = alloca i32, align 4
  %len160 = alloca i32, align 4
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %ncomp, i32* %ncomp.addr, align 4
  store i8* %scratch, i8** %scratch.addr, align 8
  store float* %scanline, float** %scanline.addr, align 8
  %0 = bitcast [4 x i8]* %scanlineheader to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @__const.stbiw__write_hdr_scanline.scanlineheader, i32 0, i32 0), i64 4, i1 false)
  %1 = load i32, i32* %width.addr, align 4
  %and = and i32 %1, 65280
  %shr = ashr i32 %and, 8
  %conv = trunc i32 %shr to i8
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* %scanlineheader, i64 0, i64 2
  store i8 %conv, i8* %arrayidx, align 1
  %2 = load i32, i32* %width.addr, align 4
  %and1 = and i32 %2, 255
  %conv2 = trunc i32 %and1 to i8
  %arrayidx3 = getelementptr inbounds [4 x i8], [4 x i8]* %scanlineheader, i64 0, i64 3
  store i8 %conv2, i8* %arrayidx3, align 1
  %3 = load i32, i32* %width.addr, align 4
  %cmp = icmp slt i32 %3, 8
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* %width.addr, align 4
  %cmp5 = icmp sge i32 %4, 32768
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i32, i32* %x, align 4
  %6 = load i32, i32* %width.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %ncomp.addr, align 4
  switch i32 %7, label %sw.default [
    i32 4, label %sw.bb
    i32 3, label %sw.bb
  ]

sw.bb:                                            ; preds = %for.body, %for.body
  %8 = load float*, float** %scanline.addr, align 8
  %9 = load i32, i32* %x, align 4
  %10 = load i32, i32* %ncomp.addr, align 4
  %mul = mul nsw i32 %9, %10
  %add = add nsw i32 %mul, 2
  %idxprom = sext i32 %add to i64
  %arrayidx9 = getelementptr inbounds float, float* %8, i64 %idxprom
  %11 = load float, float* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 2
  store float %11, float* %arrayidx10, align 4
  %12 = load float*, float** %scanline.addr, align 8
  %13 = load i32, i32* %x, align 4
  %14 = load i32, i32* %ncomp.addr, align 4
  %mul11 = mul nsw i32 %13, %14
  %add12 = add nsw i32 %mul11, 1
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds float, float* %12, i64 %idxprom13
  %15 = load float, float* %arrayidx14, align 4
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 1
  store float %15, float* %arrayidx15, align 4
  %16 = load float*, float** %scanline.addr, align 8
  %17 = load i32, i32* %x, align 4
  %18 = load i32, i32* %ncomp.addr, align 4
  %mul16 = mul nsw i32 %17, %18
  %add17 = add nsw i32 %mul16, 0
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds float, float* %16, i64 %idxprom18
  %19 = load float, float* %arrayidx19, align 4
  %arrayidx20 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 0
  store float %19, float* %arrayidx20, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  %20 = load float*, float** %scanline.addr, align 8
  %21 = load i32, i32* %x, align 4
  %22 = load i32, i32* %ncomp.addr, align 4
  %mul21 = mul nsw i32 %21, %22
  %add22 = add nsw i32 %mul21, 0
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds float, float* %20, i64 %idxprom23
  %23 = load float, float* %arrayidx24, align 4
  %arrayidx25 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 2
  store float %23, float* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 1
  store float %23, float* %arrayidx26, align 4
  %arrayidx27 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 0
  store float %23, float* %arrayidx27, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe, i64 0, i64 0
  %arraydecay28 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 0
  call void @stbiw__linear_to_rgbe(i8* %arraydecay, float* %arraydecay28)
  %24 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %24, i32 0, i32 0
  %25 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func, align 8
  %26 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %26, i32 0, i32 1
  %27 = load i8*, i8** %context, align 8
  %arraydecay29 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe, i64 0, i64 0
  call void %25(i8* %27, i8* %arraydecay29, i32 4)
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %28 = load i32, i32* %x, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %x, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end175

if.else:                                          ; preds = %lor.lhs.false
  store i32 0, i32* %x, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc81, %if.else
  %29 = load i32, i32* %x, align 4
  %30 = load i32, i32* %width.addr, align 4
  %cmp31 = icmp slt i32 %29, %30
  br i1 %cmp31, label %for.body33, label %for.end83

for.body33:                                       ; preds = %for.cond30
  %31 = load i32, i32* %ncomp.addr, align 4
  switch i32 %31, label %sw.default50 [
    i32 4, label %sw.bb34
    i32 3, label %sw.bb34
  ]

sw.bb34:                                          ; preds = %for.body33, %for.body33
  %32 = load float*, float** %scanline.addr, align 8
  %33 = load i32, i32* %x, align 4
  %34 = load i32, i32* %ncomp.addr, align 4
  %mul35 = mul nsw i32 %33, %34
  %add36 = add nsw i32 %mul35, 2
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds float, float* %32, i64 %idxprom37
  %35 = load float, float* %arrayidx38, align 4
  %arrayidx39 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 2
  store float %35, float* %arrayidx39, align 4
  %36 = load float*, float** %scanline.addr, align 8
  %37 = load i32, i32* %x, align 4
  %38 = load i32, i32* %ncomp.addr, align 4
  %mul40 = mul nsw i32 %37, %38
  %add41 = add nsw i32 %mul40, 1
  %idxprom42 = sext i32 %add41 to i64
  %arrayidx43 = getelementptr inbounds float, float* %36, i64 %idxprom42
  %39 = load float, float* %arrayidx43, align 4
  %arrayidx44 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 1
  store float %39, float* %arrayidx44, align 4
  %40 = load float*, float** %scanline.addr, align 8
  %41 = load i32, i32* %x, align 4
  %42 = load i32, i32* %ncomp.addr, align 4
  %mul45 = mul nsw i32 %41, %42
  %add46 = add nsw i32 %mul45, 0
  %idxprom47 = sext i32 %add46 to i64
  %arrayidx48 = getelementptr inbounds float, float* %40, i64 %idxprom47
  %43 = load float, float* %arrayidx48, align 4
  %arrayidx49 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 0
  store float %43, float* %arrayidx49, align 4
  br label %sw.epilog58

sw.default50:                                     ; preds = %for.body33
  %44 = load float*, float** %scanline.addr, align 8
  %45 = load i32, i32* %x, align 4
  %46 = load i32, i32* %ncomp.addr, align 4
  %mul51 = mul nsw i32 %45, %46
  %add52 = add nsw i32 %mul51, 0
  %idxprom53 = sext i32 %add52 to i64
  %arrayidx54 = getelementptr inbounds float, float* %44, i64 %idxprom53
  %47 = load float, float* %arrayidx54, align 4
  %arrayidx55 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 2
  store float %47, float* %arrayidx55, align 4
  %arrayidx56 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 1
  store float %47, float* %arrayidx56, align 4
  %arrayidx57 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 0
  store float %47, float* %arrayidx57, align 4
  br label %sw.epilog58

sw.epilog58:                                      ; preds = %sw.default50, %sw.bb34
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe, i64 0, i64 0
  %arraydecay60 = getelementptr inbounds [3 x float], [3 x float]* %linear, i64 0, i64 0
  call void @stbiw__linear_to_rgbe(i8* %arraydecay59, float* %arraydecay60)
  %arrayidx61 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe, i64 0, i64 0
  %48 = load i8, i8* %arrayidx61, align 1
  %49 = load i8*, i8** %scratch.addr, align 8
  %50 = load i32, i32* %x, align 4
  %51 = load i32, i32* %width.addr, align 4
  %mul62 = mul nsw i32 %51, 0
  %add63 = add nsw i32 %50, %mul62
  %idxprom64 = sext i32 %add63 to i64
  %arrayidx65 = getelementptr inbounds i8, i8* %49, i64 %idxprom64
  store i8 %48, i8* %arrayidx65, align 1
  %arrayidx66 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe, i64 0, i64 1
  %52 = load i8, i8* %arrayidx66, align 1
  %53 = load i8*, i8** %scratch.addr, align 8
  %54 = load i32, i32* %x, align 4
  %55 = load i32, i32* %width.addr, align 4
  %mul67 = mul nsw i32 %55, 1
  %add68 = add nsw i32 %54, %mul67
  %idxprom69 = sext i32 %add68 to i64
  %arrayidx70 = getelementptr inbounds i8, i8* %53, i64 %idxprom69
  store i8 %52, i8* %arrayidx70, align 1
  %arrayidx71 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe, i64 0, i64 2
  %56 = load i8, i8* %arrayidx71, align 1
  %57 = load i8*, i8** %scratch.addr, align 8
  %58 = load i32, i32* %x, align 4
  %59 = load i32, i32* %width.addr, align 4
  %mul72 = mul nsw i32 %59, 2
  %add73 = add nsw i32 %58, %mul72
  %idxprom74 = sext i32 %add73 to i64
  %arrayidx75 = getelementptr inbounds i8, i8* %57, i64 %idxprom74
  store i8 %56, i8* %arrayidx75, align 1
  %arrayidx76 = getelementptr inbounds [4 x i8], [4 x i8]* %rgbe, i64 0, i64 3
  %60 = load i8, i8* %arrayidx76, align 1
  %61 = load i8*, i8** %scratch.addr, align 8
  %62 = load i32, i32* %x, align 4
  %63 = load i32, i32* %width.addr, align 4
  %mul77 = mul nsw i32 %63, 3
  %add78 = add nsw i32 %62, %mul77
  %idxprom79 = sext i32 %add78 to i64
  %arrayidx80 = getelementptr inbounds i8, i8* %61, i64 %idxprom79
  store i8 %60, i8* %arrayidx80, align 1
  br label %for.inc81

for.inc81:                                        ; preds = %sw.epilog58
  %64 = load i32, i32* %x, align 4
  %inc82 = add nsw i32 %64, 1
  store i32 %inc82, i32* %x, align 4
  br label %for.cond30

for.end83:                                        ; preds = %for.cond30
  %65 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func84 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %65, i32 0, i32 0
  %66 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func84, align 8
  %67 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context85 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %67, i32 0, i32 1
  %68 = load i8*, i8** %context85, align 8
  %arraydecay86 = getelementptr inbounds [4 x i8], [4 x i8]* %scanlineheader, i64 0, i64 0
  call void %66(i8* %68, i8* %arraydecay86, i32 4)
  store i32 0, i32* %c, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc172, %for.end83
  %69 = load i32, i32* %c, align 4
  %cmp88 = icmp slt i32 %69, 4
  br i1 %cmp88, label %for.body90, label %for.end174

for.body90:                                       ; preds = %for.cond87
  %70 = load i8*, i8** %scratch.addr, align 8
  %71 = load i32, i32* %width.addr, align 4
  %72 = load i32, i32* %c, align 4
  %mul91 = mul nsw i32 %71, %72
  %idxprom92 = sext i32 %mul91 to i64
  %arrayidx93 = getelementptr inbounds i8, i8* %70, i64 %idxprom92
  store i8* %arrayidx93, i8** %comp, align 8
  store i32 0, i32* %x, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end170, %for.body90
  %73 = load i32, i32* %x, align 4
  %74 = load i32, i32* %width.addr, align 4
  %cmp94 = icmp slt i32 %73, %74
  br i1 %cmp94, label %while.body, label %while.end171

while.body:                                       ; preds = %while.cond
  %75 = load i32, i32* %x, align 4
  store i32 %75, i32* %r, align 4
  br label %while.cond96

while.cond96:                                     ; preds = %if.end, %while.body
  %76 = load i32, i32* %r, align 4
  %add97 = add nsw i32 %76, 2
  %77 = load i32, i32* %width.addr, align 4
  %cmp98 = icmp slt i32 %add97, %77
  br i1 %cmp98, label %while.body100, label %while.end

while.body100:                                    ; preds = %while.cond96
  %78 = load i8*, i8** %comp, align 8
  %79 = load i32, i32* %r, align 4
  %idxprom101 = sext i32 %79 to i64
  %arrayidx102 = getelementptr inbounds i8, i8* %78, i64 %idxprom101
  %80 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %80 to i32
  %81 = load i8*, i8** %comp, align 8
  %82 = load i32, i32* %r, align 4
  %add104 = add nsw i32 %82, 1
  %idxprom105 = sext i32 %add104 to i64
  %arrayidx106 = getelementptr inbounds i8, i8* %81, i64 %idxprom105
  %83 = load i8, i8* %arrayidx106, align 1
  %conv107 = zext i8 %83 to i32
  %cmp108 = icmp eq i32 %conv103, %conv107
  br i1 %cmp108, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body100
  %84 = load i8*, i8** %comp, align 8
  %85 = load i32, i32* %r, align 4
  %idxprom110 = sext i32 %85 to i64
  %arrayidx111 = getelementptr inbounds i8, i8* %84, i64 %idxprom110
  %86 = load i8, i8* %arrayidx111, align 1
  %conv112 = zext i8 %86 to i32
  %87 = load i8*, i8** %comp, align 8
  %88 = load i32, i32* %r, align 4
  %add113 = add nsw i32 %88, 2
  %idxprom114 = sext i32 %add113 to i64
  %arrayidx115 = getelementptr inbounds i8, i8* %87, i64 %idxprom114
  %89 = load i8, i8* %arrayidx115, align 1
  %conv116 = zext i8 %89 to i32
  %cmp117 = icmp eq i32 %conv112, %conv116
  br i1 %cmp117, label %if.then119, label %if.end

if.then119:                                       ; preds = %land.lhs.true
  br label %while.end

if.end:                                           ; preds = %land.lhs.true, %while.body100
  %90 = load i32, i32* %r, align 4
  %inc120 = add nsw i32 %90, 1
  store i32 %inc120, i32* %r, align 4
  br label %while.cond96

while.end:                                        ; preds = %if.then119, %while.cond96
  %91 = load i32, i32* %r, align 4
  %add121 = add nsw i32 %91, 2
  %92 = load i32, i32* %width.addr, align 4
  %cmp122 = icmp sge i32 %add121, %92
  br i1 %cmp122, label %if.then124, label %if.end125

if.then124:                                       ; preds = %while.end
  %93 = load i32, i32* %width.addr, align 4
  store i32 %93, i32* %r, align 4
  br label %if.end125

if.end125:                                        ; preds = %if.then124, %while.end
  br label %while.cond126

while.cond126:                                    ; preds = %if.end133, %if.end125
  %94 = load i32, i32* %x, align 4
  %95 = load i32, i32* %r, align 4
  %cmp127 = icmp slt i32 %94, %95
  br i1 %cmp127, label %while.body129, label %while.end137

while.body129:                                    ; preds = %while.cond126
  %96 = load i32, i32* %r, align 4
  %97 = load i32, i32* %x, align 4
  %sub = sub nsw i32 %96, %97
  store i32 %sub, i32* %len, align 4
  %98 = load i32, i32* %len, align 4
  %cmp130 = icmp sgt i32 %98, 128
  br i1 %cmp130, label %if.then132, label %if.end133

if.then132:                                       ; preds = %while.body129
  store i32 128, i32* %len, align 4
  br label %if.end133

if.end133:                                        ; preds = %if.then132, %while.body129
  %99 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %100 = load i32, i32* %len, align 4
  %101 = load i8*, i8** %comp, align 8
  %102 = load i32, i32* %x, align 4
  %idxprom134 = sext i32 %102 to i64
  %arrayidx135 = getelementptr inbounds i8, i8* %101, i64 %idxprom134
  call void @stbiw__write_dump_data(%struct.stbi__write_context* %99, i32 %100, i8* %arrayidx135)
  %103 = load i32, i32* %len, align 4
  %104 = load i32, i32* %x, align 4
  %add136 = add nsw i32 %104, %103
  store i32 %add136, i32* %x, align 4
  br label %while.cond126

while.end137:                                     ; preds = %while.cond126
  %105 = load i32, i32* %r, align 4
  %add138 = add nsw i32 %105, 2
  %106 = load i32, i32* %width.addr, align 4
  %cmp139 = icmp slt i32 %add138, %106
  br i1 %cmp139, label %if.then141, label %if.end170

if.then141:                                       ; preds = %while.end137
  br label %while.cond142

while.cond142:                                    ; preds = %while.body153, %if.then141
  %107 = load i32, i32* %r, align 4
  %108 = load i32, i32* %width.addr, align 4
  %cmp143 = icmp slt i32 %107, %108
  br i1 %cmp143, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond142
  %109 = load i8*, i8** %comp, align 8
  %110 = load i32, i32* %r, align 4
  %idxprom145 = sext i32 %110 to i64
  %arrayidx146 = getelementptr inbounds i8, i8* %109, i64 %idxprom145
  %111 = load i8, i8* %arrayidx146, align 1
  %conv147 = zext i8 %111 to i32
  %112 = load i8*, i8** %comp, align 8
  %113 = load i32, i32* %x, align 4
  %idxprom148 = sext i32 %113 to i64
  %arrayidx149 = getelementptr inbounds i8, i8* %112, i64 %idxprom148
  %114 = load i8, i8* %arrayidx149, align 1
  %conv150 = zext i8 %114 to i32
  %cmp151 = icmp eq i32 %conv147, %conv150
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond142
  %115 = phi i1 [ false, %while.cond142 ], [ %cmp151, %land.rhs ]
  br i1 %115, label %while.body153, label %while.end155

while.body153:                                    ; preds = %land.end
  %116 = load i32, i32* %r, align 4
  %inc154 = add nsw i32 %116, 1
  store i32 %inc154, i32* %r, align 4
  br label %while.cond142

while.end155:                                     ; preds = %land.end
  br label %while.cond156

while.cond156:                                    ; preds = %if.end165, %while.end155
  %117 = load i32, i32* %x, align 4
  %118 = load i32, i32* %r, align 4
  %cmp157 = icmp slt i32 %117, %118
  br i1 %cmp157, label %while.body159, label %while.end169

while.body159:                                    ; preds = %while.cond156
  %119 = load i32, i32* %r, align 4
  %120 = load i32, i32* %x, align 4
  %sub161 = sub nsw i32 %119, %120
  store i32 %sub161, i32* %len160, align 4
  %121 = load i32, i32* %len160, align 4
  %cmp162 = icmp sgt i32 %121, 127
  br i1 %cmp162, label %if.then164, label %if.end165

if.then164:                                       ; preds = %while.body159
  store i32 127, i32* %len160, align 4
  br label %if.end165

if.end165:                                        ; preds = %if.then164, %while.body159
  %122 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %123 = load i32, i32* %len160, align 4
  %124 = load i8*, i8** %comp, align 8
  %125 = load i32, i32* %x, align 4
  %idxprom166 = sext i32 %125 to i64
  %arrayidx167 = getelementptr inbounds i8, i8* %124, i64 %idxprom166
  %126 = load i8, i8* %arrayidx167, align 1
  call void @stbiw__write_run_data(%struct.stbi__write_context* %122, i32 %123, i8 zeroext %126)
  %127 = load i32, i32* %len160, align 4
  %128 = load i32, i32* %x, align 4
  %add168 = add nsw i32 %128, %127
  store i32 %add168, i32* %x, align 4
  br label %while.cond156

while.end169:                                     ; preds = %while.cond156
  br label %if.end170

if.end170:                                        ; preds = %while.end169, %while.end137
  br label %while.cond

while.end171:                                     ; preds = %while.cond
  br label %for.inc172

for.inc172:                                       ; preds = %while.end171
  %129 = load i32, i32* %c, align 4
  %inc173 = add nsw i32 %129, 1
  store i32 %inc173, i32* %c, align 4
  br label %for.cond87

for.end174:                                       ; preds = %for.cond87
  br label %if.end175

if.end175:                                        ; preds = %for.end174, %for.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__linear_to_rgbe(i8* %rgbe, float* %linear) #0 {
entry:
  %rgbe.addr = alloca i8*, align 8
  %linear.addr = alloca float*, align 8
  %exponent = alloca i32, align 4
  %maxcomp = alloca float, align 4
  %normalize = alloca float, align 4
  store i8* %rgbe, i8** %rgbe.addr, align 8
  store float* %linear, float** %linear.addr, align 8
  %0 = load float*, float** %linear.addr, align 8
  %arrayidx = getelementptr inbounds float, float* %0, i64 0
  %1 = load float, float* %arrayidx, align 4
  %2 = load float*, float** %linear.addr, align 8
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1
  %3 = load float, float* %arrayidx1, align 4
  %4 = load float*, float** %linear.addr, align 8
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 2
  %5 = load float, float* %arrayidx2, align 4
  %cmp = fcmp ogt float %3, %5
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load float*, float** %linear.addr, align 8
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1
  %7 = load float, float* %arrayidx3, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load float*, float** %linear.addr, align 8
  %arrayidx4 = getelementptr inbounds float, float* %8, i64 2
  %9 = load float, float* %arrayidx4, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %7, %cond.true ], [ %9, %cond.false ]
  %cmp5 = fcmp ogt float %1, %cond
  br i1 %cmp5, label %cond.true6, label %cond.false8

cond.true6:                                       ; preds = %cond.end
  %10 = load float*, float** %linear.addr, align 8
  %arrayidx7 = getelementptr inbounds float, float* %10, i64 0
  %11 = load float, float* %arrayidx7, align 4
  br label %cond.end18

cond.false8:                                      ; preds = %cond.end
  %12 = load float*, float** %linear.addr, align 8
  %arrayidx9 = getelementptr inbounds float, float* %12, i64 1
  %13 = load float, float* %arrayidx9, align 4
  %14 = load float*, float** %linear.addr, align 8
  %arrayidx10 = getelementptr inbounds float, float* %14, i64 2
  %15 = load float, float* %arrayidx10, align 4
  %cmp11 = fcmp ogt float %13, %15
  br i1 %cmp11, label %cond.true12, label %cond.false14

cond.true12:                                      ; preds = %cond.false8
  %16 = load float*, float** %linear.addr, align 8
  %arrayidx13 = getelementptr inbounds float, float* %16, i64 1
  %17 = load float, float* %arrayidx13, align 4
  br label %cond.end16

cond.false14:                                     ; preds = %cond.false8
  %18 = load float*, float** %linear.addr, align 8
  %arrayidx15 = getelementptr inbounds float, float* %18, i64 2
  %19 = load float, float* %arrayidx15, align 4
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false14, %cond.true12
  %cond17 = phi float [ %17, %cond.true12 ], [ %19, %cond.false14 ]
  br label %cond.end18

cond.end18:                                       ; preds = %cond.end16, %cond.true6
  %cond19 = phi float [ %11, %cond.true6 ], [ %cond17, %cond.end16 ]
  store float %cond19, float* %maxcomp, align 4
  %20 = load float, float* %maxcomp, align 4
  %cmp20 = fcmp olt float %20, 0x3949F623E0000000
  br i1 %cmp20, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end18
  %21 = load i8*, i8** %rgbe.addr, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %21, i64 3
  store i8 0, i8* %arrayidx21, align 1
  %22 = load i8*, i8** %rgbe.addr, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %22, i64 2
  store i8 0, i8* %arrayidx22, align 1
  %23 = load i8*, i8** %rgbe.addr, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 0, i8* %arrayidx23, align 1
  %24 = load i8*, i8** %rgbe.addr, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %24, i64 0
  store i8 0, i8* %arrayidx24, align 1
  br label %if.end

if.else:                                          ; preds = %cond.end18
  %25 = load float, float* %maxcomp, align 4
  %conv = fpext float %25 to double
  %call = call double @frexp(double %conv, i32* %exponent) #10
  %conv25 = fptrunc double %call to float
  %mul = fmul float %conv25, 2.560000e+02
  %26 = load float, float* %maxcomp, align 4
  %div = fdiv float %mul, %26
  store float %div, float* %normalize, align 4
  %27 = load float*, float** %linear.addr, align 8
  %arrayidx26 = getelementptr inbounds float, float* %27, i64 0
  %28 = load float, float* %arrayidx26, align 4
  %29 = load float, float* %normalize, align 4
  %mul27 = fmul float %28, %29
  %conv28 = fptoui float %mul27 to i8
  %30 = load i8*, i8** %rgbe.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %30, i64 0
  store i8 %conv28, i8* %arrayidx29, align 1
  %31 = load float*, float** %linear.addr, align 8
  %arrayidx30 = getelementptr inbounds float, float* %31, i64 1
  %32 = load float, float* %arrayidx30, align 4
  %33 = load float, float* %normalize, align 4
  %mul31 = fmul float %32, %33
  %conv32 = fptoui float %mul31 to i8
  %34 = load i8*, i8** %rgbe.addr, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %34, i64 1
  store i8 %conv32, i8* %arrayidx33, align 1
  %35 = load float*, float** %linear.addr, align 8
  %arrayidx34 = getelementptr inbounds float, float* %35, i64 2
  %36 = load float, float* %arrayidx34, align 4
  %37 = load float, float* %normalize, align 4
  %mul35 = fmul float %36, %37
  %conv36 = fptoui float %mul35 to i8
  %38 = load i8*, i8** %rgbe.addr, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %38, i64 2
  store i8 %conv36, i8* %arrayidx37, align 1
  %39 = load i32, i32* %exponent, align 4
  %add = add nsw i32 %39, 128
  %conv38 = trunc i32 %add to i8
  %40 = load i8*, i8** %rgbe.addr, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %40, i64 3
  store i8 %conv38, i8* %arrayidx39, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__write_dump_data(%struct.stbi__write_context* %s, i32 %length, i8* %data) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %length.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %lengthbyte = alloca i8, align 1
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  %0 = load i32, i32* %length.addr, align 4
  %and = and i32 %0, 255
  %conv = trunc i32 %and to i8
  store i8 %conv, i8* %lengthbyte, align 1
  %1 = load i32, i32* %length.addr, align 4
  %cmp = icmp sle i32 %1, 128
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.150, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 653, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__.stbiw__write_dump_data, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %2 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %2, i32 0, i32 0
  %3 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func, align 8
  %4 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %4, i32 0, i32 1
  %5 = load i8*, i8** %context, align 8
  call void %3(i8* %5, i8* %lengthbyte, i32 1)
  %6 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func2 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %6, i32 0, i32 0
  %7 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func2, align 8
  %8 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context3 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %8, i32 0, i32 1
  %9 = load i8*, i8** %context3, align 8
  %10 = load i8*, i8** %data.addr, align 8
  %11 = load i32, i32* %length.addr, align 4
  call void %7(i8* %9, i8* %10, i32 %11)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__write_run_data(%struct.stbi__write_context* %s, i32 %length, i8 zeroext %databyte) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %length.addr = alloca i32, align 4
  %databyte.addr = alloca i8, align 1
  %lengthbyte = alloca i8, align 1
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i8 %databyte, i8* %databyte.addr, align 1
  %0 = load i32, i32* %length.addr, align 4
  %add = add nsw i32 %0, 128
  %and = and i32 %add, 255
  %conv = trunc i32 %and to i8
  store i8 %conv, i8* %lengthbyte, align 1
  %1 = load i32, i32* %length.addr, align 4
  %add1 = add nsw i32 %1, 128
  %cmp = icmp sle i32 %add1, 255
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.151, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__.stbiw__write_run_data, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %2 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %2, i32 0, i32 0
  %3 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func, align 8
  %4 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %4, i32 0, i32 1
  %5 = load i8*, i8** %context, align 8
  call void %3(i8* %5, i8* %lengthbyte, i32 1)
  %6 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func3 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %6, i32 0, i32 0
  %7 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func3, align 8
  %8 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context4 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %8, i32 0, i32 1
  %9 = load i8*, i8** %context4, align 8
  call void %7(i8* %9, i8* %databyte.addr, i32 1)
  ret void
}

; Function Attrs: nounwind
declare double @frexp(double, i32*) #1

; Function Attrs: noinline nounwind optnone
define i32 @stbi_write_hdr(i8* %filename, i32 %x, i32 %y, i32 %comp, float* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca float*, align 8
  %s = alloca %struct.stbi__write_context, align 8
  %r = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store float* %data, float** %data.addr, align 8
  %0 = bitcast %struct.stbi__write_context* %s to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 88, i1 false)
  %1 = load i8*, i8** %filename.addr, align 8
  %call = call i32 @stbi__start_write_file(%struct.stbi__write_context* %s, i8* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %4 = load i32, i32* %comp.addr, align 4
  %5 = load float*, float** %data.addr, align 8
  %call1 = call i32 @stbi_write_hdr_core(%struct.stbi__write_context* %s, i32 %2, i32 %3, i32 %4, float* %5)
  store i32 %call1, i32* %r, align 4
  call void @stbi__end_write_file(%struct.stbi__write_context* %s)
  %6 = load i32, i32* %r, align 4
  store i32 %6, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define i8* @stbi_zlib_compress(i8* %data, i32 %data_len, i32* %out_len, i32 %quality) #0 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %data_len.addr = alloca i32, align 4
  %out_len.addr = alloca i32*, align 8
  %quality.addr = alloca i32, align 4
  %bitbuf = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bitcount = alloca i32, align 4
  %out = alloca i8*, align 8
  %hash_table = alloca i8***, align 8
  %h = alloca i32, align 4
  %best = alloca i32, align 4
  %bestloc = alloca i8*, align 8
  %hlist = alloca i8**, align 8
  %n = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %d182 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %blocklen = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  store i32 %data_len, i32* %data_len.addr, align 4
  store i32* %out_len, i32** %out_len.addr, align 8
  store i32 %quality, i32* %quality.addr, align 4
  store i32 0, i32* %bitbuf, align 4
  store i32 0, i32* %bitcount, align 4
  store i8* null, i8** %out, align 8
  %call = call noalias i8* @malloc(i64 131072) #10
  %0 = bitcast i8* %call to i8***
  store i8*** %0, i8**** %hash_table, align 8
  %1 = load i8***, i8**** %hash_table, align 8
  %cmp = icmp eq i8*** %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %quality.addr, align 4
  %cmp1 = icmp slt i32 %2, 5
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 5, i32* %quality.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load i8*, i8** %out, align 8
  %cmp4 = icmp eq i8* %3, null
  br i1 %cmp4, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %4 = load i8*, i8** %out, align 8
  %5 = bitcast i8* %4 to i32*
  %add.ptr = getelementptr inbounds i32, i32* %5, i64 -2
  %arrayidx = getelementptr inbounds i32, i32* %add.ptr, i64 1
  %6 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %6, 1
  %7 = load i8*, i8** %out, align 8
  %8 = bitcast i8* %7 to i32*
  %add.ptr5 = getelementptr inbounds i32, i32* %8, i64 -2
  %arrayidx6 = getelementptr inbounds i32, i32* %add.ptr5, i64 0
  %9 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp sge i32 %add, %9
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end3
  %call8 = call i8* @stbiw__sbgrowf(i8** %out, i32 1, i32 1)
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call8, %cond.true ], [ null, %cond.false ]
  %10 = load i8*, i8** %out, align 8
  %11 = load i8*, i8** %out, align 8
  %12 = bitcast i8* %11 to i32*
  %add.ptr9 = getelementptr inbounds i32, i32* %12, i64 -2
  %arrayidx10 = getelementptr inbounds i32, i32* %add.ptr9, i64 1
  %13 = load i32, i32* %arrayidx10, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %arrayidx10, align 4
  %idxprom = sext i32 %13 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %10, i64 %idxprom
  store i8 120, i8* %arrayidx11, align 1
  %14 = load i8*, i8** %out, align 8
  %cmp12 = icmp eq i8* %14, null
  br i1 %cmp12, label %cond.true20, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %cond.end
  %15 = load i8*, i8** %out, align 8
  %16 = bitcast i8* %15 to i32*
  %add.ptr14 = getelementptr inbounds i32, i32* %16, i64 -2
  %arrayidx15 = getelementptr inbounds i32, i32* %add.ptr14, i64 1
  %17 = load i32, i32* %arrayidx15, align 4
  %add16 = add nsw i32 %17, 1
  %18 = load i8*, i8** %out, align 8
  %19 = bitcast i8* %18 to i32*
  %add.ptr17 = getelementptr inbounds i32, i32* %19, i64 -2
  %arrayidx18 = getelementptr inbounds i32, i32* %add.ptr17, i64 0
  %20 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp sge i32 %add16, %20
  br i1 %cmp19, label %cond.true20, label %cond.false22

cond.true20:                                      ; preds = %lor.lhs.false13, %cond.end
  %call21 = call i8* @stbiw__sbgrowf(i8** %out, i32 1, i32 1)
  br label %cond.end23

cond.false22:                                     ; preds = %lor.lhs.false13
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi i8* [ %call21, %cond.true20 ], [ null, %cond.false22 ]
  %21 = load i8*, i8** %out, align 8
  %22 = load i8*, i8** %out, align 8
  %23 = bitcast i8* %22 to i32*
  %add.ptr25 = getelementptr inbounds i32, i32* %23, i64 -2
  %arrayidx26 = getelementptr inbounds i32, i32* %add.ptr25, i64 1
  %24 = load i32, i32* %arrayidx26, align 4
  %inc27 = add nsw i32 %24, 1
  store i32 %inc27, i32* %arrayidx26, align 4
  %idxprom28 = sext i32 %24 to i64
  %arrayidx29 = getelementptr inbounds i8, i8* %21, i64 %idxprom28
  store i8 94, i8* %arrayidx29, align 1
  %25 = load i32, i32* %bitcount, align 4
  %shl = shl i32 1, %25
  %26 = load i32, i32* %bitbuf, align 4
  %or = or i32 %26, %shl
  store i32 %or, i32* %bitbuf, align 4
  %27 = load i32, i32* %bitcount, align 4
  %add30 = add nsw i32 %27, 1
  store i32 %add30, i32* %bitcount, align 4
  %28 = load i8*, i8** %out, align 8
  %call31 = call i8* @stbiw__zlib_flushf(i8* %28, i32* %bitbuf, i32* %bitcount)
  store i8* %call31, i8** %out, align 8
  %29 = load i32, i32* %bitcount, align 4
  %shl32 = shl i32 1, %29
  %30 = load i32, i32* %bitbuf, align 4
  %or33 = or i32 %30, %shl32
  store i32 %or33, i32* %bitbuf, align 4
  %31 = load i32, i32* %bitcount, align 4
  %add34 = add nsw i32 %31, 2
  store i32 %add34, i32* %bitcount, align 4
  %32 = load i8*, i8** %out, align 8
  %call35 = call i8* @stbiw__zlib_flushf(i8* %32, i32* %bitbuf, i32* %bitcount)
  store i8* %call35, i8** %out, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end23
  %33 = load i32, i32* %i, align 4
  %cmp36 = icmp slt i32 %33, 16384
  br i1 %cmp36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load i8***, i8**** %hash_table, align 8
  %35 = load i32, i32* %i, align 4
  %idxprom37 = sext i32 %35 to i64
  %arrayidx38 = getelementptr inbounds i8**, i8*** %34, i64 %idxprom37
  store i8** null, i8*** %arrayidx38, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %36 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %36, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end340, %for.end
  %37 = load i32, i32* %i, align 4
  %38 = load i32, i32* %data_len.addr, align 4
  %sub = sub nsw i32 %38, 3
  %cmp40 = icmp slt i32 %37, %sub
  br i1 %cmp40, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %39 = load i8*, i8** %data.addr, align 8
  %40 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %40 to i64
  %add.ptr41 = getelementptr inbounds i8, i8* %39, i64 %idx.ext
  %call42 = call i32 @stbiw__zhash(i8* %add.ptr41)
  %and = and i32 %call42, 16383
  store i32 %and, i32* %h, align 4
  store i32 3, i32* %best, align 4
  store i8* null, i8** %bestloc, align 8
  %41 = load i8***, i8**** %hash_table, align 8
  %42 = load i32, i32* %h, align 4
  %idxprom43 = sext i32 %42 to i64
  %arrayidx44 = getelementptr inbounds i8**, i8*** %41, i64 %idxprom43
  %43 = load i8**, i8*** %arrayidx44, align 8
  store i8** %43, i8*** %hlist, align 8
  %44 = load i8**, i8*** %hlist, align 8
  %tobool = icmp ne i8** %44, null
  br i1 %tobool, label %cond.true45, label %cond.false48

cond.true45:                                      ; preds = %while.body
  %45 = load i8**, i8*** %hlist, align 8
  %46 = bitcast i8** %45 to i8*
  %47 = bitcast i8* %46 to i32*
  %add.ptr46 = getelementptr inbounds i32, i32* %47, i64 -2
  %arrayidx47 = getelementptr inbounds i32, i32* %add.ptr46, i64 1
  %48 = load i32, i32* %arrayidx47, align 4
  br label %cond.end49

cond.false48:                                     ; preds = %while.body
  br label %cond.end49

cond.end49:                                       ; preds = %cond.false48, %cond.true45
  %cond50 = phi i32 [ %48, %cond.true45 ], [ 0, %cond.false48 ]
  store i32 %cond50, i32* %n, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc73, %cond.end49
  %49 = load i32, i32* %j, align 4
  %50 = load i32, i32* %n, align 4
  %cmp52 = icmp slt i32 %49, %50
  br i1 %cmp52, label %for.body53, label %for.end75

for.body53:                                       ; preds = %for.cond51
  %51 = load i8**, i8*** %hlist, align 8
  %52 = load i32, i32* %j, align 4
  %idxprom54 = sext i32 %52 to i64
  %arrayidx55 = getelementptr inbounds i8*, i8** %51, i64 %idxprom54
  %53 = load i8*, i8** %arrayidx55, align 8
  %54 = load i8*, i8** %data.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %53 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %54 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %55 = load i32, i32* %i, align 4
  %sub56 = sub nsw i32 %55, 32768
  %conv = sext i32 %sub56 to i64
  %cmp57 = icmp sgt i64 %sub.ptr.sub, %conv
  br i1 %cmp57, label %if.then59, label %if.end72

if.then59:                                        ; preds = %for.body53
  %56 = load i8**, i8*** %hlist, align 8
  %57 = load i32, i32* %j, align 4
  %idxprom60 = sext i32 %57 to i64
  %arrayidx61 = getelementptr inbounds i8*, i8** %56, i64 %idxprom60
  %58 = load i8*, i8** %arrayidx61, align 8
  %59 = load i8*, i8** %data.addr, align 8
  %60 = load i32, i32* %i, align 4
  %idx.ext62 = sext i32 %60 to i64
  %add.ptr63 = getelementptr inbounds i8, i8* %59, i64 %idx.ext62
  %61 = load i32, i32* %data_len.addr, align 4
  %62 = load i32, i32* %i, align 4
  %sub64 = sub nsw i32 %61, %62
  %call65 = call i32 @stbiw__zlib_countm(i8* %58, i8* %add.ptr63, i32 %sub64)
  store i32 %call65, i32* %d, align 4
  %63 = load i32, i32* %d, align 4
  %64 = load i32, i32* %best, align 4
  %cmp66 = icmp sge i32 %63, %64
  br i1 %cmp66, label %if.then68, label %if.end71

if.then68:                                        ; preds = %if.then59
  %65 = load i32, i32* %d, align 4
  store i32 %65, i32* %best, align 4
  %66 = load i8**, i8*** %hlist, align 8
  %67 = load i32, i32* %j, align 4
  %idxprom69 = sext i32 %67 to i64
  %arrayidx70 = getelementptr inbounds i8*, i8** %66, i64 %idxprom69
  %68 = load i8*, i8** %arrayidx70, align 8
  store i8* %68, i8** %bestloc, align 8
  br label %if.end71

if.end71:                                         ; preds = %if.then68, %if.then59
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %for.body53
  br label %for.inc73

for.inc73:                                        ; preds = %if.end72
  %69 = load i32, i32* %j, align 4
  %inc74 = add nsw i32 %69, 1
  store i32 %inc74, i32* %j, align 4
  br label %for.cond51

for.end75:                                        ; preds = %for.cond51
  %70 = load i8***, i8**** %hash_table, align 8
  %71 = load i32, i32* %h, align 4
  %idxprom76 = sext i32 %71 to i64
  %arrayidx77 = getelementptr inbounds i8**, i8*** %70, i64 %idxprom76
  %72 = load i8**, i8*** %arrayidx77, align 8
  %tobool78 = icmp ne i8** %72, null
  br i1 %tobool78, label %land.lhs.true, label %if.end98

land.lhs.true:                                    ; preds = %for.end75
  %73 = load i8***, i8**** %hash_table, align 8
  %74 = load i32, i32* %h, align 4
  %idxprom79 = sext i32 %74 to i64
  %arrayidx80 = getelementptr inbounds i8**, i8*** %73, i64 %idxprom79
  %75 = load i8**, i8*** %arrayidx80, align 8
  %76 = bitcast i8** %75 to i8*
  %77 = bitcast i8* %76 to i32*
  %add.ptr81 = getelementptr inbounds i32, i32* %77, i64 -2
  %arrayidx82 = getelementptr inbounds i32, i32* %add.ptr81, i64 1
  %78 = load i32, i32* %arrayidx82, align 4
  %79 = load i32, i32* %quality.addr, align 4
  %mul = mul nsw i32 2, %79
  %cmp83 = icmp eq i32 %78, %mul
  br i1 %cmp83, label %if.then85, label %if.end98

if.then85:                                        ; preds = %land.lhs.true
  %80 = load i8***, i8**** %hash_table, align 8
  %81 = load i32, i32* %h, align 4
  %idxprom86 = sext i32 %81 to i64
  %arrayidx87 = getelementptr inbounds i8**, i8*** %80, i64 %idxprom86
  %82 = load i8**, i8*** %arrayidx87, align 8
  %83 = bitcast i8** %82 to i8*
  %84 = load i8***, i8**** %hash_table, align 8
  %85 = load i32, i32* %h, align 4
  %idxprom88 = sext i32 %85 to i64
  %arrayidx89 = getelementptr inbounds i8**, i8*** %84, i64 %idxprom88
  %86 = load i8**, i8*** %arrayidx89, align 8
  %87 = load i32, i32* %quality.addr, align 4
  %idx.ext90 = sext i32 %87 to i64
  %add.ptr91 = getelementptr inbounds i8*, i8** %86, i64 %idx.ext90
  %88 = bitcast i8** %add.ptr91 to i8*
  %89 = load i32, i32* %quality.addr, align 4
  %conv92 = sext i32 %89 to i64
  %mul93 = mul i64 8, %conv92
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %88, i64 %mul93, i1 false)
  %90 = load i32, i32* %quality.addr, align 4
  %91 = load i8***, i8**** %hash_table, align 8
  %92 = load i32, i32* %h, align 4
  %idxprom94 = sext i32 %92 to i64
  %arrayidx95 = getelementptr inbounds i8**, i8*** %91, i64 %idxprom94
  %93 = load i8**, i8*** %arrayidx95, align 8
  %94 = bitcast i8** %93 to i8*
  %95 = bitcast i8* %94 to i32*
  %add.ptr96 = getelementptr inbounds i32, i32* %95, i64 -2
  %arrayidx97 = getelementptr inbounds i32, i32* %add.ptr96, i64 1
  store i32 %90, i32* %arrayidx97, align 4
  br label %if.end98

if.end98:                                         ; preds = %if.then85, %land.lhs.true, %for.end75
  %96 = load i8***, i8**** %hash_table, align 8
  %97 = load i32, i32* %h, align 4
  %idxprom99 = sext i32 %97 to i64
  %arrayidx100 = getelementptr inbounds i8**, i8*** %96, i64 %idxprom99
  %98 = load i8**, i8*** %arrayidx100, align 8
  %cmp101 = icmp eq i8** %98, null
  br i1 %cmp101, label %cond.true115, label %lor.lhs.false103

lor.lhs.false103:                                 ; preds = %if.end98
  %99 = load i8***, i8**** %hash_table, align 8
  %100 = load i32, i32* %h, align 4
  %idxprom104 = sext i32 %100 to i64
  %arrayidx105 = getelementptr inbounds i8**, i8*** %99, i64 %idxprom104
  %101 = load i8**, i8*** %arrayidx105, align 8
  %102 = bitcast i8** %101 to i8*
  %103 = bitcast i8* %102 to i32*
  %add.ptr106 = getelementptr inbounds i32, i32* %103, i64 -2
  %arrayidx107 = getelementptr inbounds i32, i32* %add.ptr106, i64 1
  %104 = load i32, i32* %arrayidx107, align 4
  %add108 = add nsw i32 %104, 1
  %105 = load i8***, i8**** %hash_table, align 8
  %106 = load i32, i32* %h, align 4
  %idxprom109 = sext i32 %106 to i64
  %arrayidx110 = getelementptr inbounds i8**, i8*** %105, i64 %idxprom109
  %107 = load i8**, i8*** %arrayidx110, align 8
  %108 = bitcast i8** %107 to i8*
  %109 = bitcast i8* %108 to i32*
  %add.ptr111 = getelementptr inbounds i32, i32* %109, i64 -2
  %arrayidx112 = getelementptr inbounds i32, i32* %add.ptr111, i64 0
  %110 = load i32, i32* %arrayidx112, align 4
  %cmp113 = icmp sge i32 %add108, %110
  br i1 %cmp113, label %cond.true115, label %cond.false119

cond.true115:                                     ; preds = %lor.lhs.false103, %if.end98
  %111 = load i8***, i8**** %hash_table, align 8
  %112 = load i32, i32* %h, align 4
  %idxprom116 = sext i32 %112 to i64
  %arrayidx117 = getelementptr inbounds i8**, i8*** %111, i64 %idxprom116
  %113 = bitcast i8*** %arrayidx117 to i8**
  %call118 = call i8* @stbiw__sbgrowf(i8** %113, i32 1, i32 8)
  br label %cond.end120

cond.false119:                                    ; preds = %lor.lhs.false103
  br label %cond.end120

cond.end120:                                      ; preds = %cond.false119, %cond.true115
  %cond121 = phi i8* [ %call118, %cond.true115 ], [ null, %cond.false119 ]
  %114 = load i8*, i8** %data.addr, align 8
  %115 = load i32, i32* %i, align 4
  %idx.ext122 = sext i32 %115 to i64
  %add.ptr123 = getelementptr inbounds i8, i8* %114, i64 %idx.ext122
  %116 = load i8***, i8**** %hash_table, align 8
  %117 = load i32, i32* %h, align 4
  %idxprom124 = sext i32 %117 to i64
  %arrayidx125 = getelementptr inbounds i8**, i8*** %116, i64 %idxprom124
  %118 = load i8**, i8*** %arrayidx125, align 8
  %119 = load i8***, i8**** %hash_table, align 8
  %120 = load i32, i32* %h, align 4
  %idxprom126 = sext i32 %120 to i64
  %arrayidx127 = getelementptr inbounds i8**, i8*** %119, i64 %idxprom126
  %121 = load i8**, i8*** %arrayidx127, align 8
  %122 = bitcast i8** %121 to i8*
  %123 = bitcast i8* %122 to i32*
  %add.ptr128 = getelementptr inbounds i32, i32* %123, i64 -2
  %arrayidx129 = getelementptr inbounds i32, i32* %add.ptr128, i64 1
  %124 = load i32, i32* %arrayidx129, align 4
  %inc130 = add nsw i32 %124, 1
  store i32 %inc130, i32* %arrayidx129, align 4
  %idxprom131 = sext i32 %124 to i64
  %arrayidx132 = getelementptr inbounds i8*, i8** %118, i64 %idxprom131
  store i8* %add.ptr123, i8** %arrayidx132, align 8
  %125 = load i8*, i8** %bestloc, align 8
  %tobool133 = icmp ne i8* %125, null
  br i1 %tobool133, label %if.then134, label %if.end179

if.then134:                                       ; preds = %cond.end120
  %126 = load i8*, i8** %data.addr, align 8
  %127 = load i32, i32* %i, align 4
  %idx.ext135 = sext i32 %127 to i64
  %add.ptr136 = getelementptr inbounds i8, i8* %126, i64 %idx.ext135
  %add.ptr137 = getelementptr inbounds i8, i8* %add.ptr136, i64 1
  %call138 = call i32 @stbiw__zhash(i8* %add.ptr137)
  %and139 = and i32 %call138, 16383
  store i32 %and139, i32* %h, align 4
  %128 = load i8***, i8**** %hash_table, align 8
  %129 = load i32, i32* %h, align 4
  %idxprom140 = sext i32 %129 to i64
  %arrayidx141 = getelementptr inbounds i8**, i8*** %128, i64 %idxprom140
  %130 = load i8**, i8*** %arrayidx141, align 8
  store i8** %130, i8*** %hlist, align 8
  %131 = load i8**, i8*** %hlist, align 8
  %tobool142 = icmp ne i8** %131, null
  br i1 %tobool142, label %cond.true143, label %cond.false146

cond.true143:                                     ; preds = %if.then134
  %132 = load i8**, i8*** %hlist, align 8
  %133 = bitcast i8** %132 to i8*
  %134 = bitcast i8* %133 to i32*
  %add.ptr144 = getelementptr inbounds i32, i32* %134, i64 -2
  %arrayidx145 = getelementptr inbounds i32, i32* %add.ptr144, i64 1
  %135 = load i32, i32* %arrayidx145, align 4
  br label %cond.end147

cond.false146:                                    ; preds = %if.then134
  br label %cond.end147

cond.end147:                                      ; preds = %cond.false146, %cond.true143
  %cond148 = phi i32 [ %135, %cond.true143 ], [ 0, %cond.false146 ]
  store i32 %cond148, i32* %n, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond149

for.cond149:                                      ; preds = %for.inc176, %cond.end147
  %136 = load i32, i32* %j, align 4
  %137 = load i32, i32* %n, align 4
  %cmp150 = icmp slt i32 %136, %137
  br i1 %cmp150, label %for.body152, label %for.end178

for.body152:                                      ; preds = %for.cond149
  %138 = load i8**, i8*** %hlist, align 8
  %139 = load i32, i32* %j, align 4
  %idxprom153 = sext i32 %139 to i64
  %arrayidx154 = getelementptr inbounds i8*, i8** %138, i64 %idxprom153
  %140 = load i8*, i8** %arrayidx154, align 8
  %141 = load i8*, i8** %data.addr, align 8
  %sub.ptr.lhs.cast155 = ptrtoint i8* %140 to i64
  %sub.ptr.rhs.cast156 = ptrtoint i8* %141 to i64
  %sub.ptr.sub157 = sub i64 %sub.ptr.lhs.cast155, %sub.ptr.rhs.cast156
  %142 = load i32, i32* %i, align 4
  %sub158 = sub nsw i32 %142, 32767
  %conv159 = sext i32 %sub158 to i64
  %cmp160 = icmp sgt i64 %sub.ptr.sub157, %conv159
  br i1 %cmp160, label %if.then162, label %if.end175

if.then162:                                       ; preds = %for.body152
  %143 = load i8**, i8*** %hlist, align 8
  %144 = load i32, i32* %j, align 4
  %idxprom163 = sext i32 %144 to i64
  %arrayidx164 = getelementptr inbounds i8*, i8** %143, i64 %idxprom163
  %145 = load i8*, i8** %arrayidx164, align 8
  %146 = load i8*, i8** %data.addr, align 8
  %147 = load i32, i32* %i, align 4
  %idx.ext165 = sext i32 %147 to i64
  %add.ptr166 = getelementptr inbounds i8, i8* %146, i64 %idx.ext165
  %add.ptr167 = getelementptr inbounds i8, i8* %add.ptr166, i64 1
  %148 = load i32, i32* %data_len.addr, align 4
  %149 = load i32, i32* %i, align 4
  %sub168 = sub nsw i32 %148, %149
  %sub169 = sub nsw i32 %sub168, 1
  %call170 = call i32 @stbiw__zlib_countm(i8* %145, i8* %add.ptr167, i32 %sub169)
  store i32 %call170, i32* %e, align 4
  %150 = load i32, i32* %e, align 4
  %151 = load i32, i32* %best, align 4
  %cmp171 = icmp sgt i32 %150, %151
  br i1 %cmp171, label %if.then173, label %if.end174

if.then173:                                       ; preds = %if.then162
  store i8* null, i8** %bestloc, align 8
  br label %for.end178

if.end174:                                        ; preds = %if.then162
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %for.body152
  br label %for.inc176

for.inc176:                                       ; preds = %if.end175
  %152 = load i32, i32* %j, align 4
  %inc177 = add nsw i32 %152, 1
  store i32 %inc177, i32* %j, align 4
  br label %for.cond149

for.end178:                                       ; preds = %if.then173, %for.cond149
  br label %if.end179

if.end179:                                        ; preds = %for.end178, %cond.end120
  %153 = load i8*, i8** %bestloc, align 8
  %tobool180 = icmp ne i8* %153, null
  br i1 %tobool180, label %if.then181, label %if.else310

if.then181:                                       ; preds = %if.end179
  %154 = load i8*, i8** %data.addr, align 8
  %155 = load i32, i32* %i, align 4
  %idx.ext183 = sext i32 %155 to i64
  %add.ptr184 = getelementptr inbounds i8, i8* %154, i64 %idx.ext183
  %156 = load i8*, i8** %bestloc, align 8
  %sub.ptr.lhs.cast185 = ptrtoint i8* %add.ptr184 to i64
  %sub.ptr.rhs.cast186 = ptrtoint i8* %156 to i64
  %sub.ptr.sub187 = sub i64 %sub.ptr.lhs.cast185, %sub.ptr.rhs.cast186
  %conv188 = trunc i64 %sub.ptr.sub187 to i32
  store i32 %conv188, i32* %d182, align 4
  %157 = load i32, i32* %d182, align 4
  %cmp189 = icmp sle i32 %157, 32767
  br i1 %cmp189, label %land.lhs.true191, label %if.else

land.lhs.true191:                                 ; preds = %if.then181
  %158 = load i32, i32* %best, align 4
  %cmp192 = icmp sle i32 %158, 258
  br i1 %cmp192, label %if.then194, label %if.else

if.then194:                                       ; preds = %land.lhs.true191
  br label %if.end195

if.else:                                          ; preds = %land.lhs.true191, %if.then181
  call void @__assert_fail(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 946, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__.stbi_zlib_compress, i64 0, i64 0)) #11
  unreachable

if.end195:                                        ; preds = %if.then194
  store i32 0, i32* %j, align 4
  br label %for.cond196

for.cond196:                                      ; preds = %for.inc205, %if.end195
  %159 = load i32, i32* %best, align 4
  %160 = load i32, i32* %j, align 4
  %add197 = add nsw i32 %160, 1
  %idxprom198 = sext i32 %add197 to i64
  %arrayidx199 = getelementptr inbounds [30 x i16], [30 x i16]* @stbi_zlib_compress.lengthc, i64 0, i64 %idxprom198
  %161 = load i16, i16* %arrayidx199, align 2
  %conv200 = zext i16 %161 to i32
  %sub201 = sub nsw i32 %conv200, 1
  %cmp202 = icmp sgt i32 %159, %sub201
  br i1 %cmp202, label %for.body204, label %for.end207

for.body204:                                      ; preds = %for.cond196
  br label %for.inc205

for.inc205:                                       ; preds = %for.body204
  %162 = load i32, i32* %j, align 4
  %inc206 = add nsw i32 %162, 1
  store i32 %inc206, i32* %j, align 4
  br label %for.cond196

for.end207:                                       ; preds = %for.cond196
  %163 = load i32, i32* %j, align 4
  %add208 = add nsw i32 %163, 257
  %cmp209 = icmp sle i32 %add208, 143
  br i1 %cmp209, label %cond.true211, label %cond.false219

cond.true211:                                     ; preds = %for.end207
  %164 = load i32, i32* %j, align 4
  %add212 = add nsw i32 %164, 257
  %add213 = add nsw i32 48, %add212
  %call214 = call i32 @stbiw__zlib_bitrev(i32 %add213, i32 8)
  %165 = load i32, i32* %bitcount, align 4
  %shl215 = shl i32 %call214, %165
  %166 = load i32, i32* %bitbuf, align 4
  %or216 = or i32 %166, %shl215
  store i32 %or216, i32* %bitbuf, align 4
  %167 = load i32, i32* %bitcount, align 4
  %add217 = add nsw i32 %167, 8
  store i32 %add217, i32* %bitcount, align 4
  %168 = load i8*, i8** %out, align 8
  %call218 = call i8* @stbiw__zlib_flushf(i8* %168, i32* %bitbuf, i32* %bitcount)
  store i8* %call218, i8** %out, align 8
  br label %cond.end258

cond.false219:                                    ; preds = %for.end207
  %169 = load i32, i32* %j, align 4
  %add220 = add nsw i32 %169, 257
  %cmp221 = icmp sle i32 %add220, 255
  br i1 %cmp221, label %cond.true223, label %cond.false232

cond.true223:                                     ; preds = %cond.false219
  %170 = load i32, i32* %j, align 4
  %add224 = add nsw i32 %170, 257
  %add225 = add nsw i32 400, %add224
  %sub226 = sub nsw i32 %add225, 144
  %call227 = call i32 @stbiw__zlib_bitrev(i32 %sub226, i32 9)
  %171 = load i32, i32* %bitcount, align 4
  %shl228 = shl i32 %call227, %171
  %172 = load i32, i32* %bitbuf, align 4
  %or229 = or i32 %172, %shl228
  store i32 %or229, i32* %bitbuf, align 4
  %173 = load i32, i32* %bitcount, align 4
  %add230 = add nsw i32 %173, 9
  store i32 %add230, i32* %bitcount, align 4
  %174 = load i8*, i8** %out, align 8
  %call231 = call i8* @stbiw__zlib_flushf(i8* %174, i32* %bitbuf, i32* %bitcount)
  store i8* %call231, i8** %out, align 8
  br label %cond.end256

cond.false232:                                    ; preds = %cond.false219
  %175 = load i32, i32* %j, align 4
  %add233 = add nsw i32 %175, 257
  %cmp234 = icmp sle i32 %add233, 279
  br i1 %cmp234, label %cond.true236, label %cond.false245

cond.true236:                                     ; preds = %cond.false232
  %176 = load i32, i32* %j, align 4
  %add237 = add nsw i32 %176, 257
  %add238 = add nsw i32 0, %add237
  %sub239 = sub nsw i32 %add238, 256
  %call240 = call i32 @stbiw__zlib_bitrev(i32 %sub239, i32 7)
  %177 = load i32, i32* %bitcount, align 4
  %shl241 = shl i32 %call240, %177
  %178 = load i32, i32* %bitbuf, align 4
  %or242 = or i32 %178, %shl241
  store i32 %or242, i32* %bitbuf, align 4
  %179 = load i32, i32* %bitcount, align 4
  %add243 = add nsw i32 %179, 7
  store i32 %add243, i32* %bitcount, align 4
  %180 = load i8*, i8** %out, align 8
  %call244 = call i8* @stbiw__zlib_flushf(i8* %180, i32* %bitbuf, i32* %bitcount)
  store i8* %call244, i8** %out, align 8
  br label %cond.end254

cond.false245:                                    ; preds = %cond.false232
  %181 = load i32, i32* %j, align 4
  %add246 = add nsw i32 %181, 257
  %add247 = add nsw i32 192, %add246
  %sub248 = sub nsw i32 %add247, 280
  %call249 = call i32 @stbiw__zlib_bitrev(i32 %sub248, i32 8)
  %182 = load i32, i32* %bitcount, align 4
  %shl250 = shl i32 %call249, %182
  %183 = load i32, i32* %bitbuf, align 4
  %or251 = or i32 %183, %shl250
  store i32 %or251, i32* %bitbuf, align 4
  %184 = load i32, i32* %bitcount, align 4
  %add252 = add nsw i32 %184, 8
  store i32 %add252, i32* %bitcount, align 4
  %185 = load i8*, i8** %out, align 8
  %call253 = call i8* @stbiw__zlib_flushf(i8* %185, i32* %bitbuf, i32* %bitcount)
  store i8* %call253, i8** %out, align 8
  br label %cond.end254

cond.end254:                                      ; preds = %cond.false245, %cond.true236
  %cond255 = phi i8* [ %call244, %cond.true236 ], [ %call253, %cond.false245 ]
  br label %cond.end256

cond.end256:                                      ; preds = %cond.end254, %cond.true223
  %cond257 = phi i8* [ %call231, %cond.true223 ], [ %cond255, %cond.end254 ]
  br label %cond.end258

cond.end258:                                      ; preds = %cond.end256, %cond.true211
  %cond259 = phi i8* [ %call218, %cond.true211 ], [ %cond257, %cond.end256 ]
  %186 = load i32, i32* %j, align 4
  %idxprom260 = sext i32 %186 to i64
  %arrayidx261 = getelementptr inbounds [29 x i8], [29 x i8]* @stbi_zlib_compress.lengtheb, i64 0, i64 %idxprom260
  %187 = load i8, i8* %arrayidx261, align 1
  %tobool262 = icmp ne i8 %187, 0
  br i1 %tobool262, label %if.then263, label %if.end275

if.then263:                                       ; preds = %cond.end258
  %188 = load i32, i32* %best, align 4
  %189 = load i32, i32* %j, align 4
  %idxprom264 = sext i32 %189 to i64
  %arrayidx265 = getelementptr inbounds [30 x i16], [30 x i16]* @stbi_zlib_compress.lengthc, i64 0, i64 %idxprom264
  %190 = load i16, i16* %arrayidx265, align 2
  %conv266 = zext i16 %190 to i32
  %sub267 = sub nsw i32 %188, %conv266
  %191 = load i32, i32* %bitcount, align 4
  %shl268 = shl i32 %sub267, %191
  %192 = load i32, i32* %bitbuf, align 4
  %or269 = or i32 %192, %shl268
  store i32 %or269, i32* %bitbuf, align 4
  %193 = load i32, i32* %j, align 4
  %idxprom270 = sext i32 %193 to i64
  %arrayidx271 = getelementptr inbounds [29 x i8], [29 x i8]* @stbi_zlib_compress.lengtheb, i64 0, i64 %idxprom270
  %194 = load i8, i8* %arrayidx271, align 1
  %conv272 = zext i8 %194 to i32
  %195 = load i32, i32* %bitcount, align 4
  %add273 = add nsw i32 %195, %conv272
  store i32 %add273, i32* %bitcount, align 4
  %196 = load i8*, i8** %out, align 8
  %call274 = call i8* @stbiw__zlib_flushf(i8* %196, i32* %bitbuf, i32* %bitcount)
  store i8* %call274, i8** %out, align 8
  br label %if.end275

if.end275:                                        ; preds = %if.then263, %cond.end258
  store i32 0, i32* %j, align 4
  br label %for.cond276

for.cond276:                                      ; preds = %for.inc285, %if.end275
  %197 = load i32, i32* %d182, align 4
  %198 = load i32, i32* %j, align 4
  %add277 = add nsw i32 %198, 1
  %idxprom278 = sext i32 %add277 to i64
  %arrayidx279 = getelementptr inbounds [31 x i16], [31 x i16]* @stbi_zlib_compress.distc, i64 0, i64 %idxprom278
  %199 = load i16, i16* %arrayidx279, align 2
  %conv280 = zext i16 %199 to i32
  %sub281 = sub nsw i32 %conv280, 1
  %cmp282 = icmp sgt i32 %197, %sub281
  br i1 %cmp282, label %for.body284, label %for.end287

for.body284:                                      ; preds = %for.cond276
  br label %for.inc285

for.inc285:                                       ; preds = %for.body284
  %200 = load i32, i32* %j, align 4
  %inc286 = add nsw i32 %200, 1
  store i32 %inc286, i32* %j, align 4
  br label %for.cond276

for.end287:                                       ; preds = %for.cond276
  %201 = load i32, i32* %j, align 4
  %call288 = call i32 @stbiw__zlib_bitrev(i32 %201, i32 5)
  %202 = load i32, i32* %bitcount, align 4
  %shl289 = shl i32 %call288, %202
  %203 = load i32, i32* %bitbuf, align 4
  %or290 = or i32 %203, %shl289
  store i32 %or290, i32* %bitbuf, align 4
  %204 = load i32, i32* %bitcount, align 4
  %add291 = add nsw i32 %204, 5
  store i32 %add291, i32* %bitcount, align 4
  %205 = load i8*, i8** %out, align 8
  %call292 = call i8* @stbiw__zlib_flushf(i8* %205, i32* %bitbuf, i32* %bitcount)
  store i8* %call292, i8** %out, align 8
  %206 = load i32, i32* %j, align 4
  %idxprom293 = sext i32 %206 to i64
  %arrayidx294 = getelementptr inbounds [30 x i8], [30 x i8]* @stbi_zlib_compress.disteb, i64 0, i64 %idxprom293
  %207 = load i8, i8* %arrayidx294, align 1
  %tobool295 = icmp ne i8 %207, 0
  br i1 %tobool295, label %if.then296, label %if.end308

if.then296:                                       ; preds = %for.end287
  %208 = load i32, i32* %d182, align 4
  %209 = load i32, i32* %j, align 4
  %idxprom297 = sext i32 %209 to i64
  %arrayidx298 = getelementptr inbounds [31 x i16], [31 x i16]* @stbi_zlib_compress.distc, i64 0, i64 %idxprom297
  %210 = load i16, i16* %arrayidx298, align 2
  %conv299 = zext i16 %210 to i32
  %sub300 = sub nsw i32 %208, %conv299
  %211 = load i32, i32* %bitcount, align 4
  %shl301 = shl i32 %sub300, %211
  %212 = load i32, i32* %bitbuf, align 4
  %or302 = or i32 %212, %shl301
  store i32 %or302, i32* %bitbuf, align 4
  %213 = load i32, i32* %j, align 4
  %idxprom303 = sext i32 %213 to i64
  %arrayidx304 = getelementptr inbounds [30 x i8], [30 x i8]* @stbi_zlib_compress.disteb, i64 0, i64 %idxprom303
  %214 = load i8, i8* %arrayidx304, align 1
  %conv305 = zext i8 %214 to i32
  %215 = load i32, i32* %bitcount, align 4
  %add306 = add nsw i32 %215, %conv305
  store i32 %add306, i32* %bitcount, align 4
  %216 = load i8*, i8** %out, align 8
  %call307 = call i8* @stbiw__zlib_flushf(i8* %216, i32* %bitbuf, i32* %bitcount)
  store i8* %call307, i8** %out, align 8
  br label %if.end308

if.end308:                                        ; preds = %if.then296, %for.end287
  %217 = load i32, i32* %best, align 4
  %218 = load i32, i32* %i, align 4
  %add309 = add nsw i32 %218, %217
  store i32 %add309, i32* %i, align 4
  br label %if.end340

if.else310:                                       ; preds = %if.end179
  %219 = load i8*, i8** %data.addr, align 8
  %220 = load i32, i32* %i, align 4
  %idxprom311 = sext i32 %220 to i64
  %arrayidx312 = getelementptr inbounds i8, i8* %219, i64 %idxprom311
  %221 = load i8, i8* %arrayidx312, align 1
  %conv313 = zext i8 %221 to i32
  %cmp314 = icmp sle i32 %conv313, 143
  br i1 %cmp314, label %cond.true316, label %cond.false326

cond.true316:                                     ; preds = %if.else310
  %222 = load i8*, i8** %data.addr, align 8
  %223 = load i32, i32* %i, align 4
  %idxprom317 = sext i32 %223 to i64
  %arrayidx318 = getelementptr inbounds i8, i8* %222, i64 %idxprom317
  %224 = load i8, i8* %arrayidx318, align 1
  %conv319 = zext i8 %224 to i32
  %add320 = add nsw i32 48, %conv319
  %call321 = call i32 @stbiw__zlib_bitrev(i32 %add320, i32 8)
  %225 = load i32, i32* %bitcount, align 4
  %shl322 = shl i32 %call321, %225
  %226 = load i32, i32* %bitbuf, align 4
  %or323 = or i32 %226, %shl322
  store i32 %or323, i32* %bitbuf, align 4
  %227 = load i32, i32* %bitcount, align 4
  %add324 = add nsw i32 %227, 8
  store i32 %add324, i32* %bitcount, align 4
  %228 = load i8*, i8** %out, align 8
  %call325 = call i8* @stbiw__zlib_flushf(i8* %228, i32* %bitbuf, i32* %bitcount)
  store i8* %call325, i8** %out, align 8
  br label %cond.end337

cond.false326:                                    ; preds = %if.else310
  %229 = load i8*, i8** %data.addr, align 8
  %230 = load i32, i32* %i, align 4
  %idxprom327 = sext i32 %230 to i64
  %arrayidx328 = getelementptr inbounds i8, i8* %229, i64 %idxprom327
  %231 = load i8, i8* %arrayidx328, align 1
  %conv329 = zext i8 %231 to i32
  %add330 = add nsw i32 400, %conv329
  %sub331 = sub nsw i32 %add330, 144
  %call332 = call i32 @stbiw__zlib_bitrev(i32 %sub331, i32 9)
  %232 = load i32, i32* %bitcount, align 4
  %shl333 = shl i32 %call332, %232
  %233 = load i32, i32* %bitbuf, align 4
  %or334 = or i32 %233, %shl333
  store i32 %or334, i32* %bitbuf, align 4
  %234 = load i32, i32* %bitcount, align 4
  %add335 = add nsw i32 %234, 9
  store i32 %add335, i32* %bitcount, align 4
  %235 = load i8*, i8** %out, align 8
  %call336 = call i8* @stbiw__zlib_flushf(i8* %235, i32* %bitbuf, i32* %bitcount)
  store i8* %call336, i8** %out, align 8
  br label %cond.end337

cond.end337:                                      ; preds = %cond.false326, %cond.true316
  %cond338 = phi i8* [ %call325, %cond.true316 ], [ %call336, %cond.false326 ]
  %236 = load i32, i32* %i, align 4
  %inc339 = add nsw i32 %236, 1
  store i32 %inc339, i32* %i, align 4
  br label %if.end340

if.end340:                                        ; preds = %cond.end337, %if.end308
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.cond341

for.cond341:                                      ; preds = %for.inc373, %while.end
  %237 = load i32, i32* %i, align 4
  %238 = load i32, i32* %data_len.addr, align 4
  %cmp342 = icmp slt i32 %237, %238
  br i1 %cmp342, label %for.body344, label %for.end375

for.body344:                                      ; preds = %for.cond341
  %239 = load i8*, i8** %data.addr, align 8
  %240 = load i32, i32* %i, align 4
  %idxprom345 = sext i32 %240 to i64
  %arrayidx346 = getelementptr inbounds i8, i8* %239, i64 %idxprom345
  %241 = load i8, i8* %arrayidx346, align 1
  %conv347 = zext i8 %241 to i32
  %cmp348 = icmp sle i32 %conv347, 143
  br i1 %cmp348, label %cond.true350, label %cond.false360

cond.true350:                                     ; preds = %for.body344
  %242 = load i8*, i8** %data.addr, align 8
  %243 = load i32, i32* %i, align 4
  %idxprom351 = sext i32 %243 to i64
  %arrayidx352 = getelementptr inbounds i8, i8* %242, i64 %idxprom351
  %244 = load i8, i8* %arrayidx352, align 1
  %conv353 = zext i8 %244 to i32
  %add354 = add nsw i32 48, %conv353
  %call355 = call i32 @stbiw__zlib_bitrev(i32 %add354, i32 8)
  %245 = load i32, i32* %bitcount, align 4
  %shl356 = shl i32 %call355, %245
  %246 = load i32, i32* %bitbuf, align 4
  %or357 = or i32 %246, %shl356
  store i32 %or357, i32* %bitbuf, align 4
  %247 = load i32, i32* %bitcount, align 4
  %add358 = add nsw i32 %247, 8
  store i32 %add358, i32* %bitcount, align 4
  %248 = load i8*, i8** %out, align 8
  %call359 = call i8* @stbiw__zlib_flushf(i8* %248, i32* %bitbuf, i32* %bitcount)
  store i8* %call359, i8** %out, align 8
  br label %cond.end371

cond.false360:                                    ; preds = %for.body344
  %249 = load i8*, i8** %data.addr, align 8
  %250 = load i32, i32* %i, align 4
  %idxprom361 = sext i32 %250 to i64
  %arrayidx362 = getelementptr inbounds i8, i8* %249, i64 %idxprom361
  %251 = load i8, i8* %arrayidx362, align 1
  %conv363 = zext i8 %251 to i32
  %add364 = add nsw i32 400, %conv363
  %sub365 = sub nsw i32 %add364, 144
  %call366 = call i32 @stbiw__zlib_bitrev(i32 %sub365, i32 9)
  %252 = load i32, i32* %bitcount, align 4
  %shl367 = shl i32 %call366, %252
  %253 = load i32, i32* %bitbuf, align 4
  %or368 = or i32 %253, %shl367
  store i32 %or368, i32* %bitbuf, align 4
  %254 = load i32, i32* %bitcount, align 4
  %add369 = add nsw i32 %254, 9
  store i32 %add369, i32* %bitcount, align 4
  %255 = load i8*, i8** %out, align 8
  %call370 = call i8* @stbiw__zlib_flushf(i8* %255, i32* %bitbuf, i32* %bitcount)
  store i8* %call370, i8** %out, align 8
  br label %cond.end371

cond.end371:                                      ; preds = %cond.false360, %cond.true350
  %cond372 = phi i8* [ %call359, %cond.true350 ], [ %call370, %cond.false360 ]
  br label %for.inc373

for.inc373:                                       ; preds = %cond.end371
  %256 = load i32, i32* %i, align 4
  %inc374 = add nsw i32 %256, 1
  store i32 %inc374, i32* %i, align 4
  br label %for.cond341

for.end375:                                       ; preds = %for.cond341
  %call376 = call i32 @stbiw__zlib_bitrev(i32 0, i32 7)
  %257 = load i32, i32* %bitcount, align 4
  %shl377 = shl i32 %call376, %257
  %258 = load i32, i32* %bitbuf, align 4
  %or378 = or i32 %258, %shl377
  store i32 %or378, i32* %bitbuf, align 4
  %259 = load i32, i32* %bitcount, align 4
  %add379 = add nsw i32 %259, 7
  store i32 %add379, i32* %bitcount, align 4
  %260 = load i8*, i8** %out, align 8
  %call380 = call i8* @stbiw__zlib_flushf(i8* %260, i32* %bitbuf, i32* %bitcount)
  store i8* %call380, i8** %out, align 8
  br label %while.cond381

while.cond381:                                    ; preds = %while.body383, %for.end375
  %261 = load i32, i32* %bitcount, align 4
  %tobool382 = icmp ne i32 %261, 0
  br i1 %tobool382, label %while.body383, label %while.end388

while.body383:                                    ; preds = %while.cond381
  %262 = load i32, i32* %bitcount, align 4
  %shl384 = shl i32 0, %262
  %263 = load i32, i32* %bitbuf, align 4
  %or385 = or i32 %263, %shl384
  store i32 %or385, i32* %bitbuf, align 4
  %264 = load i32, i32* %bitcount, align 4
  %add386 = add nsw i32 %264, 1
  store i32 %add386, i32* %bitcount, align 4
  %265 = load i8*, i8** %out, align 8
  %call387 = call i8* @stbiw__zlib_flushf(i8* %265, i32* %bitbuf, i32* %bitcount)
  store i8* %call387, i8** %out, align 8
  br label %while.cond381

while.end388:                                     ; preds = %while.cond381
  store i32 0, i32* %i, align 4
  br label %for.cond389

for.cond389:                                      ; preds = %for.inc403, %while.end388
  %266 = load i32, i32* %i, align 4
  %cmp390 = icmp slt i32 %266, 16384
  br i1 %cmp390, label %for.body392, label %for.end405

for.body392:                                      ; preds = %for.cond389
  %267 = load i8***, i8**** %hash_table, align 8
  %268 = load i32, i32* %i, align 4
  %idxprom393 = sext i32 %268 to i64
  %arrayidx394 = getelementptr inbounds i8**, i8*** %267, i64 %idxprom393
  %269 = load i8**, i8*** %arrayidx394, align 8
  %tobool395 = icmp ne i8** %269, null
  br i1 %tobool395, label %cond.true396, label %cond.false400

cond.true396:                                     ; preds = %for.body392
  %270 = load i8***, i8**** %hash_table, align 8
  %271 = load i32, i32* %i, align 4
  %idxprom397 = sext i32 %271 to i64
  %arrayidx398 = getelementptr inbounds i8**, i8*** %270, i64 %idxprom397
  %272 = load i8**, i8*** %arrayidx398, align 8
  %273 = bitcast i8** %272 to i8*
  %274 = bitcast i8* %273 to i32*
  %add.ptr399 = getelementptr inbounds i32, i32* %274, i64 -2
  %275 = bitcast i32* %add.ptr399 to i8*
  call void @free(i8* %275) #10
  br label %cond.end401

cond.false400:                                    ; preds = %for.body392
  br label %cond.end401

cond.end401:                                      ; preds = %cond.false400, %cond.true396
  %cond402 = phi i32 [ 0, %cond.true396 ], [ 0, %cond.false400 ]
  br label %for.inc403

for.inc403:                                       ; preds = %cond.end401
  %276 = load i32, i32* %i, align 4
  %inc404 = add nsw i32 %276, 1
  store i32 %inc404, i32* %i, align 4
  br label %for.cond389

for.end405:                                       ; preds = %for.cond389
  %277 = load i8***, i8**** %hash_table, align 8
  %278 = bitcast i8*** %277 to i8*
  call void @free(i8* %278) #10
  store i32 1, i32* %s1, align 4
  store i32 0, i32* %s2, align 4
  %279 = load i32, i32* %data_len.addr, align 4
  %rem = srem i32 %279, 5552
  store i32 %rem, i32* %blocklen, align 4
  store i32 0, i32* %j, align 4
  br label %while.cond406

while.cond406:                                    ; preds = %for.end422, %for.end405
  %280 = load i32, i32* %j, align 4
  %281 = load i32, i32* %data_len.addr, align 4
  %cmp407 = icmp slt i32 %280, %281
  br i1 %cmp407, label %while.body409, label %while.end426

while.body409:                                    ; preds = %while.cond406
  store i32 0, i32* %i, align 4
  br label %for.cond410

for.cond410:                                      ; preds = %for.inc420, %while.body409
  %282 = load i32, i32* %i, align 4
  %283 = load i32, i32* %blocklen, align 4
  %cmp411 = icmp slt i32 %282, %283
  br i1 %cmp411, label %for.body413, label %for.end422

for.body413:                                      ; preds = %for.cond410
  %284 = load i8*, i8** %data.addr, align 8
  %285 = load i32, i32* %j, align 4
  %286 = load i32, i32* %i, align 4
  %add414 = add nsw i32 %285, %286
  %idxprom415 = sext i32 %add414 to i64
  %arrayidx416 = getelementptr inbounds i8, i8* %284, i64 %idxprom415
  %287 = load i8, i8* %arrayidx416, align 1
  %conv417 = zext i8 %287 to i32
  %288 = load i32, i32* %s1, align 4
  %add418 = add i32 %288, %conv417
  store i32 %add418, i32* %s1, align 4
  %289 = load i32, i32* %s1, align 4
  %290 = load i32, i32* %s2, align 4
  %add419 = add i32 %290, %289
  store i32 %add419, i32* %s2, align 4
  br label %for.inc420

for.inc420:                                       ; preds = %for.body413
  %291 = load i32, i32* %i, align 4
  %inc421 = add nsw i32 %291, 1
  store i32 %inc421, i32* %i, align 4
  br label %for.cond410

for.end422:                                       ; preds = %for.cond410
  %292 = load i32, i32* %s1, align 4
  %rem423 = urem i32 %292, 65521
  store i32 %rem423, i32* %s1, align 4
  %293 = load i32, i32* %s2, align 4
  %rem424 = urem i32 %293, 65521
  store i32 %rem424, i32* %s2, align 4
  %294 = load i32, i32* %blocklen, align 4
  %295 = load i32, i32* %j, align 4
  %add425 = add nsw i32 %295, %294
  store i32 %add425, i32* %j, align 4
  store i32 5552, i32* %blocklen, align 4
  br label %while.cond406

while.end426:                                     ; preds = %while.cond406
  %296 = load i8*, i8** %out, align 8
  %cmp427 = icmp eq i8* %296, null
  br i1 %cmp427, label %cond.true437, label %lor.lhs.false429

lor.lhs.false429:                                 ; preds = %while.end426
  %297 = load i8*, i8** %out, align 8
  %298 = bitcast i8* %297 to i32*
  %add.ptr430 = getelementptr inbounds i32, i32* %298, i64 -2
  %arrayidx431 = getelementptr inbounds i32, i32* %add.ptr430, i64 1
  %299 = load i32, i32* %arrayidx431, align 4
  %add432 = add nsw i32 %299, 1
  %300 = load i8*, i8** %out, align 8
  %301 = bitcast i8* %300 to i32*
  %add.ptr433 = getelementptr inbounds i32, i32* %301, i64 -2
  %arrayidx434 = getelementptr inbounds i32, i32* %add.ptr433, i64 0
  %302 = load i32, i32* %arrayidx434, align 4
  %cmp435 = icmp sge i32 %add432, %302
  br i1 %cmp435, label %cond.true437, label %cond.false439

cond.true437:                                     ; preds = %lor.lhs.false429, %while.end426
  %call438 = call i8* @stbiw__sbgrowf(i8** %out, i32 1, i32 1)
  br label %cond.end440

cond.false439:                                    ; preds = %lor.lhs.false429
  br label %cond.end440

cond.end440:                                      ; preds = %cond.false439, %cond.true437
  %cond441 = phi i8* [ %call438, %cond.true437 ], [ null, %cond.false439 ]
  %303 = load i32, i32* %s2, align 4
  %shr = lshr i32 %303, 8
  %and442 = and i32 %shr, 255
  %conv443 = trunc i32 %and442 to i8
  %304 = load i8*, i8** %out, align 8
  %305 = load i8*, i8** %out, align 8
  %306 = bitcast i8* %305 to i32*
  %add.ptr444 = getelementptr inbounds i32, i32* %306, i64 -2
  %arrayidx445 = getelementptr inbounds i32, i32* %add.ptr444, i64 1
  %307 = load i32, i32* %arrayidx445, align 4
  %inc446 = add nsw i32 %307, 1
  store i32 %inc446, i32* %arrayidx445, align 4
  %idxprom447 = sext i32 %307 to i64
  %arrayidx448 = getelementptr inbounds i8, i8* %304, i64 %idxprom447
  store i8 %conv443, i8* %arrayidx448, align 1
  %308 = load i8*, i8** %out, align 8
  %cmp449 = icmp eq i8* %308, null
  br i1 %cmp449, label %cond.true459, label %lor.lhs.false451

lor.lhs.false451:                                 ; preds = %cond.end440
  %309 = load i8*, i8** %out, align 8
  %310 = bitcast i8* %309 to i32*
  %add.ptr452 = getelementptr inbounds i32, i32* %310, i64 -2
  %arrayidx453 = getelementptr inbounds i32, i32* %add.ptr452, i64 1
  %311 = load i32, i32* %arrayidx453, align 4
  %add454 = add nsw i32 %311, 1
  %312 = load i8*, i8** %out, align 8
  %313 = bitcast i8* %312 to i32*
  %add.ptr455 = getelementptr inbounds i32, i32* %313, i64 -2
  %arrayidx456 = getelementptr inbounds i32, i32* %add.ptr455, i64 0
  %314 = load i32, i32* %arrayidx456, align 4
  %cmp457 = icmp sge i32 %add454, %314
  br i1 %cmp457, label %cond.true459, label %cond.false461

cond.true459:                                     ; preds = %lor.lhs.false451, %cond.end440
  %call460 = call i8* @stbiw__sbgrowf(i8** %out, i32 1, i32 1)
  br label %cond.end462

cond.false461:                                    ; preds = %lor.lhs.false451
  br label %cond.end462

cond.end462:                                      ; preds = %cond.false461, %cond.true459
  %cond463 = phi i8* [ %call460, %cond.true459 ], [ null, %cond.false461 ]
  %315 = load i32, i32* %s2, align 4
  %and464 = and i32 %315, 255
  %conv465 = trunc i32 %and464 to i8
  %316 = load i8*, i8** %out, align 8
  %317 = load i8*, i8** %out, align 8
  %318 = bitcast i8* %317 to i32*
  %add.ptr466 = getelementptr inbounds i32, i32* %318, i64 -2
  %arrayidx467 = getelementptr inbounds i32, i32* %add.ptr466, i64 1
  %319 = load i32, i32* %arrayidx467, align 4
  %inc468 = add nsw i32 %319, 1
  store i32 %inc468, i32* %arrayidx467, align 4
  %idxprom469 = sext i32 %319 to i64
  %arrayidx470 = getelementptr inbounds i8, i8* %316, i64 %idxprom469
  store i8 %conv465, i8* %arrayidx470, align 1
  %320 = load i8*, i8** %out, align 8
  %cmp471 = icmp eq i8* %320, null
  br i1 %cmp471, label %cond.true481, label %lor.lhs.false473

lor.lhs.false473:                                 ; preds = %cond.end462
  %321 = load i8*, i8** %out, align 8
  %322 = bitcast i8* %321 to i32*
  %add.ptr474 = getelementptr inbounds i32, i32* %322, i64 -2
  %arrayidx475 = getelementptr inbounds i32, i32* %add.ptr474, i64 1
  %323 = load i32, i32* %arrayidx475, align 4
  %add476 = add nsw i32 %323, 1
  %324 = load i8*, i8** %out, align 8
  %325 = bitcast i8* %324 to i32*
  %add.ptr477 = getelementptr inbounds i32, i32* %325, i64 -2
  %arrayidx478 = getelementptr inbounds i32, i32* %add.ptr477, i64 0
  %326 = load i32, i32* %arrayidx478, align 4
  %cmp479 = icmp sge i32 %add476, %326
  br i1 %cmp479, label %cond.true481, label %cond.false483

cond.true481:                                     ; preds = %lor.lhs.false473, %cond.end462
  %call482 = call i8* @stbiw__sbgrowf(i8** %out, i32 1, i32 1)
  br label %cond.end484

cond.false483:                                    ; preds = %lor.lhs.false473
  br label %cond.end484

cond.end484:                                      ; preds = %cond.false483, %cond.true481
  %cond485 = phi i8* [ %call482, %cond.true481 ], [ null, %cond.false483 ]
  %327 = load i32, i32* %s1, align 4
  %shr486 = lshr i32 %327, 8
  %and487 = and i32 %shr486, 255
  %conv488 = trunc i32 %and487 to i8
  %328 = load i8*, i8** %out, align 8
  %329 = load i8*, i8** %out, align 8
  %330 = bitcast i8* %329 to i32*
  %add.ptr489 = getelementptr inbounds i32, i32* %330, i64 -2
  %arrayidx490 = getelementptr inbounds i32, i32* %add.ptr489, i64 1
  %331 = load i32, i32* %arrayidx490, align 4
  %inc491 = add nsw i32 %331, 1
  store i32 %inc491, i32* %arrayidx490, align 4
  %idxprom492 = sext i32 %331 to i64
  %arrayidx493 = getelementptr inbounds i8, i8* %328, i64 %idxprom492
  store i8 %conv488, i8* %arrayidx493, align 1
  %332 = load i8*, i8** %out, align 8
  %cmp494 = icmp eq i8* %332, null
  br i1 %cmp494, label %cond.true504, label %lor.lhs.false496

lor.lhs.false496:                                 ; preds = %cond.end484
  %333 = load i8*, i8** %out, align 8
  %334 = bitcast i8* %333 to i32*
  %add.ptr497 = getelementptr inbounds i32, i32* %334, i64 -2
  %arrayidx498 = getelementptr inbounds i32, i32* %add.ptr497, i64 1
  %335 = load i32, i32* %arrayidx498, align 4
  %add499 = add nsw i32 %335, 1
  %336 = load i8*, i8** %out, align 8
  %337 = bitcast i8* %336 to i32*
  %add.ptr500 = getelementptr inbounds i32, i32* %337, i64 -2
  %arrayidx501 = getelementptr inbounds i32, i32* %add.ptr500, i64 0
  %338 = load i32, i32* %arrayidx501, align 4
  %cmp502 = icmp sge i32 %add499, %338
  br i1 %cmp502, label %cond.true504, label %cond.false506

cond.true504:                                     ; preds = %lor.lhs.false496, %cond.end484
  %call505 = call i8* @stbiw__sbgrowf(i8** %out, i32 1, i32 1)
  br label %cond.end507

cond.false506:                                    ; preds = %lor.lhs.false496
  br label %cond.end507

cond.end507:                                      ; preds = %cond.false506, %cond.true504
  %cond508 = phi i8* [ %call505, %cond.true504 ], [ null, %cond.false506 ]
  %339 = load i32, i32* %s1, align 4
  %and509 = and i32 %339, 255
  %conv510 = trunc i32 %and509 to i8
  %340 = load i8*, i8** %out, align 8
  %341 = load i8*, i8** %out, align 8
  %342 = bitcast i8* %341 to i32*
  %add.ptr511 = getelementptr inbounds i32, i32* %342, i64 -2
  %arrayidx512 = getelementptr inbounds i32, i32* %add.ptr511, i64 1
  %343 = load i32, i32* %arrayidx512, align 4
  %inc513 = add nsw i32 %343, 1
  store i32 %inc513, i32* %arrayidx512, align 4
  %idxprom514 = sext i32 %343 to i64
  %arrayidx515 = getelementptr inbounds i8, i8* %340, i64 %idxprom514
  store i8 %conv510, i8* %arrayidx515, align 1
  %344 = load i8*, i8** %out, align 8
  %345 = bitcast i8* %344 to i32*
  %add.ptr516 = getelementptr inbounds i32, i32* %345, i64 -2
  %arrayidx517 = getelementptr inbounds i32, i32* %add.ptr516, i64 1
  %346 = load i32, i32* %arrayidx517, align 4
  %347 = load i32*, i32** %out_len.addr, align 8
  store i32 %346, i32* %347, align 4
  %348 = load i8*, i8** %out, align 8
  %349 = bitcast i8* %348 to i32*
  %add.ptr518 = getelementptr inbounds i32, i32* %349, i64 -2
  %350 = bitcast i32* %add.ptr518 to i8*
  %351 = load i8*, i8** %out, align 8
  %352 = load i32*, i32** %out_len.addr, align 8
  %353 = load i32, i32* %352, align 4
  %conv519 = sext i32 %353 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %350, i8* align 1 %351, i64 %conv519, i1 false)
  %354 = load i8*, i8** %out, align 8
  %355 = bitcast i8* %354 to i32*
  %add.ptr520 = getelementptr inbounds i32, i32* %355, i64 -2
  %356 = bitcast i32* %add.ptr520 to i8*
  store i8* %356, i8** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end507, %if.then
  %357 = load i8*, i8** %retval, align 8
  ret i8* %357
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbiw__sbgrowf(i8** %arr, i32 %increment, i32 %itemsize) #0 {
entry:
  %arr.addr = alloca i8**, align 8
  %increment.addr = alloca i32, align 4
  %itemsize.addr = alloca i32, align 4
  %m = alloca i32, align 4
  %p = alloca i8*, align 8
  store i8** %arr, i8*** %arr.addr, align 8
  store i32 %increment, i32* %increment.addr, align 4
  store i32 %itemsize, i32* %itemsize.addr, align 4
  %0 = load i8**, i8*** %arr.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8**, i8*** %arr.addr, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to i32*
  %add.ptr = getelementptr inbounds i32, i32* %4, i64 -2
  %arrayidx = getelementptr inbounds i32, i32* %add.ptr, i64 0
  %5 = load i32, i32* %arrayidx, align 4
  %mul = mul nsw i32 2, %5
  %6 = load i32, i32* %increment.addr, align 4
  %add = add nsw i32 %mul, %6
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %increment.addr, align 4
  %add1 = add nsw i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %add1, %cond.false ]
  store i32 %cond, i32* %m, align 4
  %8 = load i8**, i8*** %arr.addr, align 8
  %9 = load i8*, i8** %8, align 8
  %tobool2 = icmp ne i8* %9, null
  br i1 %tobool2, label %cond.true3, label %cond.false5

cond.true3:                                       ; preds = %cond.end
  %10 = load i8**, i8*** %arr.addr, align 8
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast i8* %11 to i32*
  %add.ptr4 = getelementptr inbounds i32, i32* %12, i64 -2
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi i32* [ %add.ptr4, %cond.true3 ], [ null, %cond.false5 ]
  %13 = bitcast i32* %cond7 to i8*
  %14 = load i32, i32* %itemsize.addr, align 4
  %15 = load i32, i32* %m, align 4
  %mul8 = mul nsw i32 %14, %15
  %conv = sext i32 %mul8 to i64
  %add9 = add i64 %conv, 8
  %call = call i8* @realloc(i8* %13, i64 %add9) #10
  store i8* %call, i8** %p, align 8
  %16 = load i8*, i8** %p, align 8
  %tobool10 = icmp ne i8* %16, null
  br i1 %tobool10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end6
  br label %if.end

if.else:                                          ; preds = %cond.end6
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.152, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 817, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.stbiw__sbgrowf, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %17 = load i8*, i8** %p, align 8
  %tobool11 = icmp ne i8* %17, null
  br i1 %tobool11, label %if.then12, label %if.end20

if.then12:                                        ; preds = %if.end
  %18 = load i8**, i8*** %arr.addr, align 8
  %19 = load i8*, i8** %18, align 8
  %tobool13 = icmp ne i8* %19, null
  br i1 %tobool13, label %if.end16, label %if.then14

if.then14:                                        ; preds = %if.then12
  %20 = load i8*, i8** %p, align 8
  %21 = bitcast i8* %20 to i32*
  %arrayidx15 = getelementptr inbounds i32, i32* %21, i64 1
  store i32 0, i32* %arrayidx15, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.then12
  %22 = load i8*, i8** %p, align 8
  %23 = bitcast i8* %22 to i32*
  %add.ptr17 = getelementptr inbounds i32, i32* %23, i64 2
  %24 = bitcast i32* %add.ptr17 to i8*
  %25 = load i8**, i8*** %arr.addr, align 8
  store i8* %24, i8** %25, align 8
  %26 = load i32, i32* %m, align 4
  %27 = load i8**, i8*** %arr.addr, align 8
  %28 = load i8*, i8** %27, align 8
  %29 = bitcast i8* %28 to i32*
  %add.ptr18 = getelementptr inbounds i32, i32* %29, i64 -2
  %arrayidx19 = getelementptr inbounds i32, i32* %add.ptr18, i64 0
  store i32 %26, i32* %arrayidx19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end16, %if.end
  %30 = load i8**, i8*** %arr.addr, align 8
  %31 = load i8*, i8** %30, align 8
  ret i8* %31
}

; Function Attrs: noinline nounwind optnone
define internal i8* @stbiw__zlib_flushf(i8* %data, i32* %bitbuffer, i32* %bitcount) #0 {
entry:
  %data.addr = alloca i8*, align 8
  %bitbuffer.addr = alloca i32*, align 8
  %bitcount.addr = alloca i32*, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32* %bitbuffer, i32** %bitbuffer.addr, align 8
  store i32* %bitcount, i32** %bitcount.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load i32*, i32** %bitcount.addr, align 8
  %1 = load i32, i32* %0, align 4
  %cmp = icmp sge i32 %1, 8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %data.addr, align 8
  %cmp1 = icmp eq i8* %2, null
  br i1 %cmp1, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %3 = load i8*, i8** %data.addr, align 8
  %4 = bitcast i8* %3 to i32*
  %add.ptr = getelementptr inbounds i32, i32* %4, i64 -2
  %arrayidx = getelementptr inbounds i32, i32* %add.ptr, i64 1
  %5 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %5, 1
  %6 = load i8*, i8** %data.addr, align 8
  %7 = bitcast i8* %6 to i32*
  %add.ptr2 = getelementptr inbounds i32, i32* %7, i64 -2
  %arrayidx3 = getelementptr inbounds i32, i32* %add.ptr2, i64 0
  %8 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sge i32 %add, %8
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %while.body
  %call = call i8* @stbiw__sbgrowf(i8** %data.addr, i32 1, i32 1)
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ null, %cond.false ]
  %9 = load i32*, i32** %bitbuffer.addr, align 8
  %10 = load i32, i32* %9, align 4
  %and = and i32 %10, 255
  %conv = trunc i32 %and to i8
  %11 = load i8*, i8** %data.addr, align 8
  %12 = load i8*, i8** %data.addr, align 8
  %13 = bitcast i8* %12 to i32*
  %add.ptr5 = getelementptr inbounds i32, i32* %13, i64 -2
  %arrayidx6 = getelementptr inbounds i32, i32* %add.ptr5, i64 1
  %14 = load i32, i32* %arrayidx6, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %arrayidx6, align 4
  %idxprom = sext i32 %14 to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %11, i64 %idxprom
  store i8 %conv, i8* %arrayidx7, align 1
  %15 = load i32*, i32** %bitbuffer.addr, align 8
  %16 = load i32, i32* %15, align 4
  %shr = lshr i32 %16, 8
  store i32 %shr, i32* %15, align 4
  %17 = load i32*, i32** %bitcount.addr, align 8
  %18 = load i32, i32* %17, align 4
  %sub = sub nsw i32 %18, 8
  store i32 %sub, i32* %17, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %19 = load i8*, i8** %data.addr, align 8
  ret i8* %19
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbiw__zhash(i8* %data) #0 {
entry:
  %data.addr = alloca i8*, align 8
  %hash = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %2 = load i8*, i8** %data.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %3 to i32
  %shl = shl i32 %conv2, 8
  %add = add nsw i32 %conv, %shl
  %4 = load i8*, i8** %data.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i64 2
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %5 to i32
  %shl5 = shl i32 %conv4, 16
  %add6 = add nsw i32 %add, %shl5
  store i32 %add6, i32* %hash, align 4
  %6 = load i32, i32* %hash, align 4
  %shl7 = shl i32 %6, 3
  %7 = load i32, i32* %hash, align 4
  %xor = xor i32 %7, %shl7
  store i32 %xor, i32* %hash, align 4
  %8 = load i32, i32* %hash, align 4
  %shr = lshr i32 %8, 5
  %9 = load i32, i32* %hash, align 4
  %add8 = add i32 %9, %shr
  store i32 %add8, i32* %hash, align 4
  %10 = load i32, i32* %hash, align 4
  %shl9 = shl i32 %10, 4
  %11 = load i32, i32* %hash, align 4
  %xor10 = xor i32 %11, %shl9
  store i32 %xor10, i32* %hash, align 4
  %12 = load i32, i32* %hash, align 4
  %shr11 = lshr i32 %12, 17
  %13 = load i32, i32* %hash, align 4
  %add12 = add i32 %13, %shr11
  store i32 %add12, i32* %hash, align 4
  %14 = load i32, i32* %hash, align 4
  %shl13 = shl i32 %14, 25
  %15 = load i32, i32* %hash, align 4
  %xor14 = xor i32 %15, %shl13
  store i32 %xor14, i32* %hash, align 4
  %16 = load i32, i32* %hash, align 4
  %shr15 = lshr i32 %16, 6
  %17 = load i32, i32* %hash, align 4
  %add16 = add i32 %17, %shr15
  store i32 %add16, i32* %hash, align 4
  %18 = load i32, i32* %hash, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbiw__zlib_countm(i8* %a, i8* %b, i32 %limit) #0 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %limit.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8
  store i8* %b, i8** %b.addr, align 8
  store i32 %limit, i32* %limit.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %limit.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %2, 258
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %3 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ]
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %4 = load i8*, i8** %a.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %7 = load i8*, i8** %b.addr, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %8 to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %7, i64 %idxprom2
  %9 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %9 to i32
  %cmp5 = icmp ne i32 %conv, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %land.end
  %11 = load i32, i32* %i, align 4
  ret i32 %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noinline nounwind optnone
define internal i32 @stbiw__zlib_bitrev(i32 %code, i32 %codebits) #0 {
entry:
  %code.addr = alloca i32, align 4
  %codebits.addr = alloca i32, align 4
  %res = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 %codebits, i32* %codebits.addr, align 4
  store i32 0, i32* %res, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %codebits.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %codebits.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %res, align 4
  %shl = shl i32 %1, 1
  %2 = load i32, i32* %code.addr, align 4
  %and = and i32 %2, 1
  %or = or i32 %shl, %and
  store i32 %or, i32* %res, align 4
  %3 = load i32, i32* %code.addr, align 4
  %shr = ashr i32 %3, 1
  store i32 %shr, i32* %code.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %res, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define i8* @stbi_write_png_to_mem(i8* %pixels, i32 %stride_bytes, i32 %x, i32 %y, i32 %n, i32* %out_len) #0 {
entry:
  %retval = alloca i8*, align 8
  %pixels.addr = alloca i8*, align 8
  %stride_bytes.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %out_len.addr = alloca i32*, align 8
  %force_filter = alloca i32, align 4
  %ctype = alloca [5 x i32], align 16
  %sig = alloca [8 x i8], align 1
  %out = alloca i8*, align 8
  %o = alloca i8*, align 8
  %filt = alloca i8*, align 8
  %zlib = alloca i8*, align 8
  %line_buffer = alloca i8*, align 8
  %j = alloca i32, align 4
  %zlen = alloca i32, align 4
  %filter_type = alloca i32, align 4
  %best_filter = alloca i32, align 4
  %best_filter_val = alloca i32, align 4
  %est = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %pixels, i8** %pixels.addr, align 8
  store i32 %stride_bytes, i32* %stride_bytes.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %out_len, i32** %out_len.addr, align 8
  %0 = load i32, i32* @stbi_write_force_png_filter, align 4
  store i32 %0, i32* %force_filter, align 4
  %1 = bitcast [5 x i32]* %ctype to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1, i8* align 16 bitcast ([5 x i32]* @__const.stbi_write_png_to_mem.ctype to i8*), i64 20, i1 false)
  %2 = bitcast [8 x i8]* %sig to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.stbi_write_png_to_mem.sig, i32 0, i32 0), i64 8, i1 false)
  %3 = load i32, i32* %stride_bytes.addr, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %x.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %4, %5
  store i32 %mul, i32* %stride_bytes.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %force_filter, align 4
  %cmp1 = icmp sge i32 %6, 5
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 -1, i32* %force_filter, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %7 = load i32, i32* %x.addr, align 4
  %8 = load i32, i32* %n.addr, align 4
  %mul4 = mul nsw i32 %7, %8
  %add = add nsw i32 %mul4, 1
  %9 = load i32, i32* %y.addr, align 4
  %mul5 = mul nsw i32 %add, %9
  %conv = sext i32 %mul5 to i64
  %call = call noalias i8* @malloc(i64 %conv) #10
  store i8* %call, i8** %filt, align 8
  %10 = load i8*, i8** %filt, align 8
  %tobool = icmp ne i8* %10, null
  br i1 %tobool, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end3
  store i8* null, i8** %retval, align 8
  br label %return

if.end7:                                          ; preds = %if.end3
  %11 = load i32, i32* %x.addr, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul8 = mul nsw i32 %11, %12
  %conv9 = sext i32 %mul8 to i64
  %call10 = call noalias i8* @malloc(i64 %conv9) #10
  store i8* %call10, i8** %line_buffer, align 8
  %13 = load i8*, i8** %line_buffer, align 8
  %tobool11 = icmp ne i8* %13, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.end7
  %14 = load i8*, i8** %filt, align 8
  call void @free(i8* %14) #10
  store i8* null, i8** %retval, align 8
  br label %return

if.end13:                                         ; preds = %if.end7
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc55, %if.end13
  %15 = load i32, i32* %j, align 4
  %16 = load i32, i32* %y.addr, align 4
  %cmp14 = icmp slt i32 %15, %16
  br i1 %cmp14, label %for.body, label %for.end57

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %force_filter, align 4
  %cmp16 = icmp sgt i32 %17, -1
  br i1 %cmp16, label %if.then18, label %if.else

if.then18:                                        ; preds = %for.body
  %18 = load i32, i32* %force_filter, align 4
  store i32 %18, i32* %filter_type, align 4
  %19 = load i8*, i8** %pixels.addr, align 8
  %20 = load i32, i32* %stride_bytes.addr, align 4
  %21 = load i32, i32* %x.addr, align 4
  %22 = load i32, i32* %y.addr, align 4
  %23 = load i32, i32* %j, align 4
  %24 = load i32, i32* %n.addr, align 4
  %25 = load i32, i32* %force_filter, align 4
  %26 = load i8*, i8** %line_buffer, align 8
  call void @stbiw__encode_png_line(i8* %19, i32 %20, i32 %21, i32 %22, i32 %23, i32 %24, i32 %25, i8* %26)
  br label %if.end42

if.else:                                          ; preds = %for.body
  store i32 0, i32* %best_filter, align 4
  store i32 2147483647, i32* %best_filter_val, align 4
  store i32 0, i32* %filter_type, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc35, %if.else
  %27 = load i32, i32* %filter_type, align 4
  %cmp20 = icmp slt i32 %27, 5
  br i1 %cmp20, label %for.body22, label %for.end37

for.body22:                                       ; preds = %for.cond19
  %28 = load i8*, i8** %pixels.addr, align 8
  %29 = load i32, i32* %stride_bytes.addr, align 4
  %30 = load i32, i32* %x.addr, align 4
  %31 = load i32, i32* %y.addr, align 4
  %32 = load i32, i32* %j, align 4
  %33 = load i32, i32* %n.addr, align 4
  %34 = load i32, i32* %filter_type, align 4
  %35 = load i8*, i8** %line_buffer, align 8
  call void @stbiw__encode_png_line(i8* %28, i32 %29, i32 %30, i32 %31, i32 %32, i32 %33, i32 %34, i8* %35)
  store i32 0, i32* %est, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc, %for.body22
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %x.addr, align 4
  %38 = load i32, i32* %n.addr, align 4
  %mul24 = mul nsw i32 %37, %38
  %cmp25 = icmp slt i32 %36, %mul24
  br i1 %cmp25, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond23
  %39 = load i8*, i8** %line_buffer, align 8
  %40 = load i32, i32* %i, align 4
  %idxprom = sext i32 %40 to i64
  %arrayidx = getelementptr inbounds i8, i8* %39, i64 %idxprom
  %41 = load i8, i8* %arrayidx, align 1
  %conv28 = sext i8 %41 to i32
  %call29 = call i32 @abs(i32 %conv28) #9
  %42 = load i32, i32* %est, align 4
  %add30 = add nsw i32 %42, %call29
  store i32 %add30, i32* %est, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %43 = load i32, i32* %i, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond23

for.end:                                          ; preds = %for.cond23
  %44 = load i32, i32* %est, align 4
  %45 = load i32, i32* %best_filter_val, align 4
  %cmp31 = icmp slt i32 %44, %45
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %for.end
  %46 = load i32, i32* %est, align 4
  store i32 %46, i32* %best_filter_val, align 4
  %47 = load i32, i32* %filter_type, align 4
  store i32 %47, i32* %best_filter, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %for.end
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %48 = load i32, i32* %filter_type, align 4
  %inc36 = add nsw i32 %48, 1
  store i32 %inc36, i32* %filter_type, align 4
  br label %for.cond19

for.end37:                                        ; preds = %for.cond19
  %49 = load i32, i32* %filter_type, align 4
  %50 = load i32, i32* %best_filter, align 4
  %cmp38 = icmp ne i32 %49, %50
  br i1 %cmp38, label %if.then40, label %if.end41

if.then40:                                        ; preds = %for.end37
  %51 = load i8*, i8** %pixels.addr, align 8
  %52 = load i32, i32* %stride_bytes.addr, align 4
  %53 = load i32, i32* %x.addr, align 4
  %54 = load i32, i32* %y.addr, align 4
  %55 = load i32, i32* %j, align 4
  %56 = load i32, i32* %n.addr, align 4
  %57 = load i32, i32* %best_filter, align 4
  %58 = load i8*, i8** %line_buffer, align 8
  call void @stbiw__encode_png_line(i8* %51, i32 %52, i32 %53, i32 %54, i32 %55, i32 %56, i32 %57, i8* %58)
  %59 = load i32, i32* %best_filter, align 4
  store i32 %59, i32* %filter_type, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.then40, %for.end37
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then18
  %60 = load i32, i32* %filter_type, align 4
  %conv43 = trunc i32 %60 to i8
  %61 = load i8*, i8** %filt, align 8
  %62 = load i32, i32* %j, align 4
  %63 = load i32, i32* %x.addr, align 4
  %64 = load i32, i32* %n.addr, align 4
  %mul44 = mul nsw i32 %63, %64
  %add45 = add nsw i32 %mul44, 1
  %mul46 = mul nsw i32 %62, %add45
  %idxprom47 = sext i32 %mul46 to i64
  %arrayidx48 = getelementptr inbounds i8, i8* %61, i64 %idxprom47
  store i8 %conv43, i8* %arrayidx48, align 1
  %65 = load i8*, i8** %filt, align 8
  %66 = load i32, i32* %j, align 4
  %67 = load i32, i32* %x.addr, align 4
  %68 = load i32, i32* %n.addr, align 4
  %mul49 = mul nsw i32 %67, %68
  %add50 = add nsw i32 %mul49, 1
  %mul51 = mul nsw i32 %66, %add50
  %idx.ext = sext i32 %mul51 to i64
  %add.ptr = getelementptr inbounds i8, i8* %65, i64 %idx.ext
  %add.ptr52 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  %69 = load i8*, i8** %line_buffer, align 8
  %70 = load i32, i32* %x.addr, align 4
  %71 = load i32, i32* %n.addr, align 4
  %mul53 = mul nsw i32 %70, %71
  %conv54 = sext i32 %mul53 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr52, i8* align 1 %69, i64 %conv54, i1 false)
  br label %for.inc55

for.inc55:                                        ; preds = %if.end42
  %72 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %72, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond

for.end57:                                        ; preds = %for.cond
  %73 = load i8*, i8** %line_buffer, align 8
  call void @free(i8* %73) #10
  %74 = load i8*, i8** %filt, align 8
  %75 = load i32, i32* %y.addr, align 4
  %76 = load i32, i32* %x.addr, align 4
  %77 = load i32, i32* %n.addr, align 4
  %mul58 = mul nsw i32 %76, %77
  %add59 = add nsw i32 %mul58, 1
  %mul60 = mul nsw i32 %75, %add59
  %78 = load i32, i32* @stbi_write_png_compression_level, align 4
  %call61 = call i8* @stbi_zlib_compress(i8* %74, i32 %mul60, i32* %zlen, i32 %78)
  store i8* %call61, i8** %zlib, align 8
  %79 = load i8*, i8** %filt, align 8
  call void @free(i8* %79) #10
  %80 = load i8*, i8** %zlib, align 8
  %tobool62 = icmp ne i8* %80, null
  br i1 %tobool62, label %if.end64, label %if.then63

if.then63:                                        ; preds = %for.end57
  store i8* null, i8** %retval, align 8
  br label %return

if.end64:                                         ; preds = %for.end57
  %81 = load i32, i32* %zlen, align 4
  %add65 = add nsw i32 45, %81
  %add66 = add nsw i32 %add65, 12
  %conv67 = sext i32 %add66 to i64
  %call68 = call noalias i8* @malloc(i64 %conv67) #10
  store i8* %call68, i8** %out, align 8
  %82 = load i8*, i8** %out, align 8
  %tobool69 = icmp ne i8* %82, null
  br i1 %tobool69, label %if.end71, label %if.then70

if.then70:                                        ; preds = %if.end64
  store i8* null, i8** %retval, align 8
  br label %return

if.end71:                                         ; preds = %if.end64
  %83 = load i32, i32* %zlen, align 4
  %add72 = add nsw i32 45, %83
  %add73 = add nsw i32 %add72, 12
  %84 = load i32*, i32** %out_len.addr, align 8
  store i32 %add73, i32* %84, align 4
  %85 = load i8*, i8** %out, align 8
  store i8* %85, i8** %o, align 8
  %86 = load i8*, i8** %o, align 8
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %sig, i64 0, i64 0
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %86, i8* align 1 %arraydecay, i64 8, i1 false)
  %87 = load i8*, i8** %o, align 8
  %add.ptr74 = getelementptr inbounds i8, i8* %87, i64 8
  store i8* %add.ptr74, i8** %o, align 8
  %88 = load i8*, i8** %o, align 8
  %arrayidx75 = getelementptr inbounds i8, i8* %88, i64 0
  store i8 0, i8* %arrayidx75, align 1
  %89 = load i8*, i8** %o, align 8
  %arrayidx76 = getelementptr inbounds i8, i8* %89, i64 1
  store i8 0, i8* %arrayidx76, align 1
  %90 = load i8*, i8** %o, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %90, i64 2
  store i8 0, i8* %arrayidx77, align 1
  %91 = load i8*, i8** %o, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %91, i64 3
  store i8 13, i8* %arrayidx78, align 1
  %92 = load i8*, i8** %o, align 8
  %add.ptr79 = getelementptr inbounds i8, i8* %92, i64 4
  store i8* %add.ptr79, i8** %o, align 8
  %93 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), align 1
  %conv80 = sext i8 %93 to i32
  %and = and i32 %conv80, 255
  %conv81 = trunc i32 %and to i8
  %94 = load i8*, i8** %o, align 8
  %arrayidx82 = getelementptr inbounds i8, i8* %94, i64 0
  store i8 %conv81, i8* %arrayidx82, align 1
  %95 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 1), align 1
  %conv83 = sext i8 %95 to i32
  %and84 = and i32 %conv83, 255
  %conv85 = trunc i32 %and84 to i8
  %96 = load i8*, i8** %o, align 8
  %arrayidx86 = getelementptr inbounds i8, i8* %96, i64 1
  store i8 %conv85, i8* %arrayidx86, align 1
  %97 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 2), align 1
  %conv87 = sext i8 %97 to i32
  %and88 = and i32 %conv87, 255
  %conv89 = trunc i32 %and88 to i8
  %98 = load i8*, i8** %o, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %98, i64 2
  store i8 %conv89, i8* %arrayidx90, align 1
  %99 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 3), align 1
  %conv91 = sext i8 %99 to i32
  %and92 = and i32 %conv91, 255
  %conv93 = trunc i32 %and92 to i8
  %100 = load i8*, i8** %o, align 8
  %arrayidx94 = getelementptr inbounds i8, i8* %100, i64 3
  store i8 %conv93, i8* %arrayidx94, align 1
  %101 = load i8*, i8** %o, align 8
  %add.ptr95 = getelementptr inbounds i8, i8* %101, i64 4
  store i8* %add.ptr95, i8** %o, align 8
  %102 = load i32, i32* %x.addr, align 4
  %shr = ashr i32 %102, 24
  %and96 = and i32 %shr, 255
  %conv97 = trunc i32 %and96 to i8
  %103 = load i8*, i8** %o, align 8
  %arrayidx98 = getelementptr inbounds i8, i8* %103, i64 0
  store i8 %conv97, i8* %arrayidx98, align 1
  %104 = load i32, i32* %x.addr, align 4
  %shr99 = ashr i32 %104, 16
  %and100 = and i32 %shr99, 255
  %conv101 = trunc i32 %and100 to i8
  %105 = load i8*, i8** %o, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %105, i64 1
  store i8 %conv101, i8* %arrayidx102, align 1
  %106 = load i32, i32* %x.addr, align 4
  %shr103 = ashr i32 %106, 8
  %and104 = and i32 %shr103, 255
  %conv105 = trunc i32 %and104 to i8
  %107 = load i8*, i8** %o, align 8
  %arrayidx106 = getelementptr inbounds i8, i8* %107, i64 2
  store i8 %conv105, i8* %arrayidx106, align 1
  %108 = load i32, i32* %x.addr, align 4
  %and107 = and i32 %108, 255
  %conv108 = trunc i32 %and107 to i8
  %109 = load i8*, i8** %o, align 8
  %arrayidx109 = getelementptr inbounds i8, i8* %109, i64 3
  store i8 %conv108, i8* %arrayidx109, align 1
  %110 = load i8*, i8** %o, align 8
  %add.ptr110 = getelementptr inbounds i8, i8* %110, i64 4
  store i8* %add.ptr110, i8** %o, align 8
  %111 = load i32, i32* %y.addr, align 4
  %shr111 = ashr i32 %111, 24
  %and112 = and i32 %shr111, 255
  %conv113 = trunc i32 %and112 to i8
  %112 = load i8*, i8** %o, align 8
  %arrayidx114 = getelementptr inbounds i8, i8* %112, i64 0
  store i8 %conv113, i8* %arrayidx114, align 1
  %113 = load i32, i32* %y.addr, align 4
  %shr115 = ashr i32 %113, 16
  %and116 = and i32 %shr115, 255
  %conv117 = trunc i32 %and116 to i8
  %114 = load i8*, i8** %o, align 8
  %arrayidx118 = getelementptr inbounds i8, i8* %114, i64 1
  store i8 %conv117, i8* %arrayidx118, align 1
  %115 = load i32, i32* %y.addr, align 4
  %shr119 = ashr i32 %115, 8
  %and120 = and i32 %shr119, 255
  %conv121 = trunc i32 %and120 to i8
  %116 = load i8*, i8** %o, align 8
  %arrayidx122 = getelementptr inbounds i8, i8* %116, i64 2
  store i8 %conv121, i8* %arrayidx122, align 1
  %117 = load i32, i32* %y.addr, align 4
  %and123 = and i32 %117, 255
  %conv124 = trunc i32 %and123 to i8
  %118 = load i8*, i8** %o, align 8
  %arrayidx125 = getelementptr inbounds i8, i8* %118, i64 3
  store i8 %conv124, i8* %arrayidx125, align 1
  %119 = load i8*, i8** %o, align 8
  %add.ptr126 = getelementptr inbounds i8, i8* %119, i64 4
  store i8* %add.ptr126, i8** %o, align 8
  %120 = load i8*, i8** %o, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %120, i32 1
  store i8* %incdec.ptr, i8** %o, align 8
  store i8 8, i8* %120, align 1
  %121 = load i32, i32* %n.addr, align 4
  %idxprom127 = sext i32 %121 to i64
  %arrayidx128 = getelementptr inbounds [5 x i32], [5 x i32]* %ctype, i64 0, i64 %idxprom127
  %122 = load i32, i32* %arrayidx128, align 4
  %and129 = and i32 %122, 255
  %conv130 = trunc i32 %and129 to i8
  %123 = load i8*, i8** %o, align 8
  %incdec.ptr131 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %incdec.ptr131, i8** %o, align 8
  store i8 %conv130, i8* %123, align 1
  %124 = load i8*, i8** %o, align 8
  %incdec.ptr132 = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %incdec.ptr132, i8** %o, align 8
  store i8 0, i8* %124, align 1
  %125 = load i8*, i8** %o, align 8
  %incdec.ptr133 = getelementptr inbounds i8, i8* %125, i32 1
  store i8* %incdec.ptr133, i8** %o, align 8
  store i8 0, i8* %125, align 1
  %126 = load i8*, i8** %o, align 8
  %incdec.ptr134 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %incdec.ptr134, i8** %o, align 8
  store i8 0, i8* %126, align 1
  call void @stbiw__wpcrc(i8** %o, i32 13)
  %127 = load i32, i32* %zlen, align 4
  %shr135 = ashr i32 %127, 24
  %and136 = and i32 %shr135, 255
  %conv137 = trunc i32 %and136 to i8
  %128 = load i8*, i8** %o, align 8
  %arrayidx138 = getelementptr inbounds i8, i8* %128, i64 0
  store i8 %conv137, i8* %arrayidx138, align 1
  %129 = load i32, i32* %zlen, align 4
  %shr139 = ashr i32 %129, 16
  %and140 = and i32 %shr139, 255
  %conv141 = trunc i32 %and140 to i8
  %130 = load i8*, i8** %o, align 8
  %arrayidx142 = getelementptr inbounds i8, i8* %130, i64 1
  store i8 %conv141, i8* %arrayidx142, align 1
  %131 = load i32, i32* %zlen, align 4
  %shr143 = ashr i32 %131, 8
  %and144 = and i32 %shr143, 255
  %conv145 = trunc i32 %and144 to i8
  %132 = load i8*, i8** %o, align 8
  %arrayidx146 = getelementptr inbounds i8, i8* %132, i64 2
  store i8 %conv145, i8* %arrayidx146, align 1
  %133 = load i32, i32* %zlen, align 4
  %and147 = and i32 %133, 255
  %conv148 = trunc i32 %and147 to i8
  %134 = load i8*, i8** %o, align 8
  %arrayidx149 = getelementptr inbounds i8, i8* %134, i64 3
  store i8 %conv148, i8* %arrayidx149, align 1
  %135 = load i8*, i8** %o, align 8
  %add.ptr150 = getelementptr inbounds i8, i8* %135, i64 4
  store i8* %add.ptr150, i8** %o, align 8
  %136 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), align 1
  %conv151 = sext i8 %136 to i32
  %and152 = and i32 %conv151, 255
  %conv153 = trunc i32 %and152 to i8
  %137 = load i8*, i8** %o, align 8
  %arrayidx154 = getelementptr inbounds i8, i8* %137, i64 0
  store i8 %conv153, i8* %arrayidx154, align 1
  %138 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 1), align 1
  %conv155 = sext i8 %138 to i32
  %and156 = and i32 %conv155, 255
  %conv157 = trunc i32 %and156 to i8
  %139 = load i8*, i8** %o, align 8
  %arrayidx158 = getelementptr inbounds i8, i8* %139, i64 1
  store i8 %conv157, i8* %arrayidx158, align 1
  %140 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 2), align 1
  %conv159 = sext i8 %140 to i32
  %and160 = and i32 %conv159, 255
  %conv161 = trunc i32 %and160 to i8
  %141 = load i8*, i8** %o, align 8
  %arrayidx162 = getelementptr inbounds i8, i8* %141, i64 2
  store i8 %conv161, i8* %arrayidx162, align 1
  %142 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 3), align 1
  %conv163 = sext i8 %142 to i32
  %and164 = and i32 %conv163, 255
  %conv165 = trunc i32 %and164 to i8
  %143 = load i8*, i8** %o, align 8
  %arrayidx166 = getelementptr inbounds i8, i8* %143, i64 3
  store i8 %conv165, i8* %arrayidx166, align 1
  %144 = load i8*, i8** %o, align 8
  %add.ptr167 = getelementptr inbounds i8, i8* %144, i64 4
  store i8* %add.ptr167, i8** %o, align 8
  %145 = load i8*, i8** %o, align 8
  %146 = load i8*, i8** %zlib, align 8
  %147 = load i32, i32* %zlen, align 4
  %conv168 = sext i32 %147 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %145, i8* align 1 %146, i64 %conv168, i1 false)
  %148 = load i32, i32* %zlen, align 4
  %149 = load i8*, i8** %o, align 8
  %idx.ext169 = sext i32 %148 to i64
  %add.ptr170 = getelementptr inbounds i8, i8* %149, i64 %idx.ext169
  store i8* %add.ptr170, i8** %o, align 8
  %150 = load i8*, i8** %zlib, align 8
  call void @free(i8* %150) #10
  %151 = load i32, i32* %zlen, align 4
  call void @stbiw__wpcrc(i8** %o, i32 %151)
  %152 = load i8*, i8** %o, align 8
  %arrayidx171 = getelementptr inbounds i8, i8* %152, i64 0
  store i8 0, i8* %arrayidx171, align 1
  %153 = load i8*, i8** %o, align 8
  %arrayidx172 = getelementptr inbounds i8, i8* %153, i64 1
  store i8 0, i8* %arrayidx172, align 1
  %154 = load i8*, i8** %o, align 8
  %arrayidx173 = getelementptr inbounds i8, i8* %154, i64 2
  store i8 0, i8* %arrayidx173, align 1
  %155 = load i8*, i8** %o, align 8
  %arrayidx174 = getelementptr inbounds i8, i8* %155, i64 3
  store i8 0, i8* %arrayidx174, align 1
  %156 = load i8*, i8** %o, align 8
  %add.ptr175 = getelementptr inbounds i8, i8* %156, i64 4
  store i8* %add.ptr175, i8** %o, align 8
  %157 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), align 1
  %conv176 = sext i8 %157 to i32
  %and177 = and i32 %conv176, 255
  %conv178 = trunc i32 %and177 to i8
  %158 = load i8*, i8** %o, align 8
  %arrayidx179 = getelementptr inbounds i8, i8* %158, i64 0
  store i8 %conv178, i8* %arrayidx179, align 1
  %159 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 1), align 1
  %conv180 = sext i8 %159 to i32
  %and181 = and i32 %conv180, 255
  %conv182 = trunc i32 %and181 to i8
  %160 = load i8*, i8** %o, align 8
  %arrayidx183 = getelementptr inbounds i8, i8* %160, i64 1
  store i8 %conv182, i8* %arrayidx183, align 1
  %161 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 2), align 1
  %conv184 = sext i8 %161 to i32
  %and185 = and i32 %conv184, 255
  %conv186 = trunc i32 %and185 to i8
  %162 = load i8*, i8** %o, align 8
  %arrayidx187 = getelementptr inbounds i8, i8* %162, i64 2
  store i8 %conv186, i8* %arrayidx187, align 1
  %163 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 3), align 1
  %conv188 = sext i8 %163 to i32
  %and189 = and i32 %conv188, 255
  %conv190 = trunc i32 %and189 to i8
  %164 = load i8*, i8** %o, align 8
  %arrayidx191 = getelementptr inbounds i8, i8* %164, i64 3
  store i8 %conv190, i8* %arrayidx191, align 1
  %165 = load i8*, i8** %o, align 8
  %add.ptr192 = getelementptr inbounds i8, i8* %165, i64 4
  store i8* %add.ptr192, i8** %o, align 8
  call void @stbiw__wpcrc(i8** %o, i32 0)
  %166 = load i8*, i8** %o, align 8
  %167 = load i8*, i8** %out, align 8
  %168 = load i32*, i32** %out_len.addr, align 8
  %169 = load i32, i32* %168, align 4
  %idx.ext193 = sext i32 %169 to i64
  %add.ptr194 = getelementptr inbounds i8, i8* %167, i64 %idx.ext193
  %cmp195 = icmp eq i8* %166, %add.ptr194
  br i1 %cmp195, label %if.then197, label %if.else198

if.then197:                                       ; preds = %if.end71
  br label %if.end199

if.else198:                                       ; preds = %if.end71
  call void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 1179, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @__PRETTY_FUNCTION__.stbi_write_png_to_mem, i64 0, i64 0)) #11
  unreachable

if.end199:                                        ; preds = %if.then197
  %170 = load i8*, i8** %out, align 8
  store i8* %170, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end199, %if.then70, %if.then63, %if.then12, %if.then6
  %171 = load i8*, i8** %retval, align 8
  ret i8* %171
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__encode_png_line(i8* %pixels, i32 %stride_bytes, i32 %width, i32 %height, i32 %y, i32 %n, i32 %filter_type, i8* %line_buffer) #0 {
entry:
  %pixels.addr = alloca i8*, align 8
  %stride_bytes.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %filter_type.addr = alloca i32, align 4
  %line_buffer.addr = alloca i8*, align 8
  %mymap = alloca i32*, align 8
  %i = alloca i32, align 4
  %type = alloca i32, align 4
  %z = alloca i8*, align 8
  %signed_stride = alloca i32, align 4
  store i8* %pixels, i8** %pixels.addr, align 8
  store i32 %stride_bytes, i32* %stride_bytes.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %filter_type, i32* %filter_type.addr, align 4
  store i8* %line_buffer, i8** %line_buffer.addr, align 8
  %0 = load i32, i32* %y.addr, align 4
  %cmp = icmp ne i32 %0, 0
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @stbiw__encode_png_line.mapping, i64 0, i64 0), i32* getelementptr inbounds ([5 x i32], [5 x i32]* @stbiw__encode_png_line.firstmap, i64 0, i64 0)
  store i32* %cond, i32** %mymap, align 8
  %2 = load i32*, i32** %mymap, align 8
  %3 = load i32, i32* %filter_type.addr, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  store i32 %4, i32* %type, align 4
  %5 = load i8*, i8** %pixels.addr, align 8
  %6 = load i32, i32* %stride_bytes.addr, align 4
  %7 = load i32, i32* @stbi__flip_vertically_on_write, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i32, i32* %height.addr, align 4
  %sub = sub nsw i32 %8, 1
  %9 = load i32, i32* %y.addr, align 4
  %sub1 = sub nsw i32 %sub, %9
  br label %cond.end

cond.false:                                       ; preds = %entry
  %10 = load i32, i32* %y.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond2 = phi i32 [ %sub1, %cond.true ], [ %10, %cond.false ]
  %mul = mul nsw i32 %6, %cond2
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %idx.ext
  store i8* %add.ptr, i8** %z, align 8
  %11 = load i32, i32* @stbi__flip_vertically_on_write, align 4
  %tobool3 = icmp ne i32 %11, 0
  br i1 %tobool3, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %12 = load i32, i32* %stride_bytes.addr, align 4
  %sub5 = sub nsw i32 0, %12
  br label %cond.end7

cond.false6:                                      ; preds = %cond.end
  %13 = load i32, i32* %stride_bytes.addr, align 4
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi i32 [ %sub5, %cond.true4 ], [ %13, %cond.false6 ]
  store i32 %cond8, i32* %signed_stride, align 4
  %14 = load i32, i32* %type, align 4
  %cmp9 = icmp eq i32 %14, 0
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end7
  %15 = load i8*, i8** %line_buffer.addr, align 8
  %16 = load i8*, i8** %z, align 8
  %17 = load i32, i32* %width.addr, align 4
  %18 = load i32, i32* %n.addr, align 4
  %mul10 = mul nsw i32 %17, %18
  %conv = sext i32 %mul10 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %16, i64 %conv, i1 false)
  br label %sw.epilog203

if.end:                                           ; preds = %cond.end7
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp11 = icmp slt i32 %19, %20
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i32, i32* %type, align 4
  switch i32 %21, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb17
    i32 3, label %sw.bb29
    i32 4, label %sw.bb41
    i32 5, label %sw.bb54
    i32 6, label %sw.bb59
  ]

sw.bb:                                            ; preds = %for.body
  %22 = load i8*, i8** %z, align 8
  %23 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %23 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %22, i64 %idxprom13
  %24 = load i8, i8* %arrayidx14, align 1
  %25 = load i8*, i8** %line_buffer.addr, align 8
  %26 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %26 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i64 %idxprom15
  store i8 %24, i8* %arrayidx16, align 1
  br label %sw.epilog

sw.bb17:                                          ; preds = %for.body
  %27 = load i8*, i8** %z, align 8
  %28 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %28 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %27, i64 %idxprom18
  %29 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %29 to i32
  %30 = load i8*, i8** %z, align 8
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %signed_stride, align 4
  %sub21 = sub nsw i32 %31, %32
  %idxprom22 = sext i32 %sub21 to i64
  %arrayidx23 = getelementptr inbounds i8, i8* %30, i64 %idxprom22
  %33 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %33 to i32
  %sub25 = sub nsw i32 %conv20, %conv24
  %conv26 = trunc i32 %sub25 to i8
  %34 = load i8*, i8** %line_buffer.addr, align 8
  %35 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %35 to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %34, i64 %idxprom27
  store i8 %conv26, i8* %arrayidx28, align 1
  br label %sw.epilog

sw.bb29:                                          ; preds = %for.body
  %36 = load i8*, i8** %z, align 8
  %37 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %37 to i64
  %arrayidx31 = getelementptr inbounds i8, i8* %36, i64 %idxprom30
  %38 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %38 to i32
  %39 = load i8*, i8** %z, align 8
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %signed_stride, align 4
  %sub33 = sub nsw i32 %40, %41
  %idxprom34 = sext i32 %sub33 to i64
  %arrayidx35 = getelementptr inbounds i8, i8* %39, i64 %idxprom34
  %42 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %42 to i32
  %shr = ashr i32 %conv36, 1
  %sub37 = sub nsw i32 %conv32, %shr
  %conv38 = trunc i32 %sub37 to i8
  %43 = load i8*, i8** %line_buffer.addr, align 8
  %44 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %44 to i64
  %arrayidx40 = getelementptr inbounds i8, i8* %43, i64 %idxprom39
  store i8 %conv38, i8* %arrayidx40, align 1
  br label %sw.epilog

sw.bb41:                                          ; preds = %for.body
  %45 = load i8*, i8** %z, align 8
  %46 = load i32, i32* %i, align 4
  %idxprom42 = sext i32 %46 to i64
  %arrayidx43 = getelementptr inbounds i8, i8* %45, i64 %idxprom42
  %47 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %47 to i32
  %48 = load i8*, i8** %z, align 8
  %49 = load i32, i32* %i, align 4
  %50 = load i32, i32* %signed_stride, align 4
  %sub45 = sub nsw i32 %49, %50
  %idxprom46 = sext i32 %sub45 to i64
  %arrayidx47 = getelementptr inbounds i8, i8* %48, i64 %idxprom46
  %51 = load i8, i8* %arrayidx47, align 1
  %conv48 = zext i8 %51 to i32
  %call = call zeroext i8 @stbiw__paeth(i32 0, i32 %conv48, i32 0)
  %conv49 = zext i8 %call to i32
  %sub50 = sub nsw i32 %conv44, %conv49
  %conv51 = trunc i32 %sub50 to i8
  %52 = load i8*, i8** %line_buffer.addr, align 8
  %53 = load i32, i32* %i, align 4
  %idxprom52 = sext i32 %53 to i64
  %arrayidx53 = getelementptr inbounds i8, i8* %52, i64 %idxprom52
  store i8 %conv51, i8* %arrayidx53, align 1
  br label %sw.epilog

sw.bb54:                                          ; preds = %for.body
  %54 = load i8*, i8** %z, align 8
  %55 = load i32, i32* %i, align 4
  %idxprom55 = sext i32 %55 to i64
  %arrayidx56 = getelementptr inbounds i8, i8* %54, i64 %idxprom55
  %56 = load i8, i8* %arrayidx56, align 1
  %57 = load i8*, i8** %line_buffer.addr, align 8
  %58 = load i32, i32* %i, align 4
  %idxprom57 = sext i32 %58 to i64
  %arrayidx58 = getelementptr inbounds i8, i8* %57, i64 %idxprom57
  store i8 %56, i8* %arrayidx58, align 1
  br label %sw.epilog

sw.bb59:                                          ; preds = %for.body
  %59 = load i8*, i8** %z, align 8
  %60 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %60 to i64
  %arrayidx61 = getelementptr inbounds i8, i8* %59, i64 %idxprom60
  %61 = load i8, i8* %arrayidx61, align 1
  %62 = load i8*, i8** %line_buffer.addr, align 8
  %63 = load i32, i32* %i, align 4
  %idxprom62 = sext i32 %63 to i64
  %arrayidx63 = getelementptr inbounds i8, i8* %62, i64 %idxprom62
  store i8 %61, i8* %arrayidx63, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb59, %sw.bb54, %sw.bb41, %sw.bb29, %sw.bb17, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %64 = load i32, i32* %i, align 4
  %inc = add nsw i32 %64, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %65 = load i32, i32* %type, align 4
  switch i32 %65, label %sw.epilog203 [
    i32 1, label %sw.bb64
    i32 2, label %sw.bb84
    i32 3, label %sw.bb104
    i32 4, label %sw.bb129
    i32 5, label %sw.bb160
    i32 6, label %sw.bb181
  ]

sw.bb64:                                          ; preds = %for.end
  %66 = load i32, i32* %n.addr, align 4
  store i32 %66, i32* %i, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc81, %sw.bb64
  %67 = load i32, i32* %i, align 4
  %68 = load i32, i32* %width.addr, align 4
  %69 = load i32, i32* %n.addr, align 4
  %mul66 = mul nsw i32 %68, %69
  %cmp67 = icmp slt i32 %67, %mul66
  br i1 %cmp67, label %for.body69, label %for.end83

for.body69:                                       ; preds = %for.cond65
  %70 = load i8*, i8** %z, align 8
  %71 = load i32, i32* %i, align 4
  %idxprom70 = sext i32 %71 to i64
  %arrayidx71 = getelementptr inbounds i8, i8* %70, i64 %idxprom70
  %72 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %72 to i32
  %73 = load i8*, i8** %z, align 8
  %74 = load i32, i32* %i, align 4
  %75 = load i32, i32* %n.addr, align 4
  %sub73 = sub nsw i32 %74, %75
  %idxprom74 = sext i32 %sub73 to i64
  %arrayidx75 = getelementptr inbounds i8, i8* %73, i64 %idxprom74
  %76 = load i8, i8* %arrayidx75, align 1
  %conv76 = zext i8 %76 to i32
  %sub77 = sub nsw i32 %conv72, %conv76
  %conv78 = trunc i32 %sub77 to i8
  %77 = load i8*, i8** %line_buffer.addr, align 8
  %78 = load i32, i32* %i, align 4
  %idxprom79 = sext i32 %78 to i64
  %arrayidx80 = getelementptr inbounds i8, i8* %77, i64 %idxprom79
  store i8 %conv78, i8* %arrayidx80, align 1
  br label %for.inc81

for.inc81:                                        ; preds = %for.body69
  %79 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %79, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond65

for.end83:                                        ; preds = %for.cond65
  br label %sw.epilog203

sw.bb84:                                          ; preds = %for.end
  %80 = load i32, i32* %n.addr, align 4
  store i32 %80, i32* %i, align 4
  br label %for.cond85

for.cond85:                                       ; preds = %for.inc101, %sw.bb84
  %81 = load i32, i32* %i, align 4
  %82 = load i32, i32* %width.addr, align 4
  %83 = load i32, i32* %n.addr, align 4
  %mul86 = mul nsw i32 %82, %83
  %cmp87 = icmp slt i32 %81, %mul86
  br i1 %cmp87, label %for.body89, label %for.end103

for.body89:                                       ; preds = %for.cond85
  %84 = load i8*, i8** %z, align 8
  %85 = load i32, i32* %i, align 4
  %idxprom90 = sext i32 %85 to i64
  %arrayidx91 = getelementptr inbounds i8, i8* %84, i64 %idxprom90
  %86 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %86 to i32
  %87 = load i8*, i8** %z, align 8
  %88 = load i32, i32* %i, align 4
  %89 = load i32, i32* %signed_stride, align 4
  %sub93 = sub nsw i32 %88, %89
  %idxprom94 = sext i32 %sub93 to i64
  %arrayidx95 = getelementptr inbounds i8, i8* %87, i64 %idxprom94
  %90 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %90 to i32
  %sub97 = sub nsw i32 %conv92, %conv96
  %conv98 = trunc i32 %sub97 to i8
  %91 = load i8*, i8** %line_buffer.addr, align 8
  %92 = load i32, i32* %i, align 4
  %idxprom99 = sext i32 %92 to i64
  %arrayidx100 = getelementptr inbounds i8, i8* %91, i64 %idxprom99
  store i8 %conv98, i8* %arrayidx100, align 1
  br label %for.inc101

for.inc101:                                       ; preds = %for.body89
  %93 = load i32, i32* %i, align 4
  %inc102 = add nsw i32 %93, 1
  store i32 %inc102, i32* %i, align 4
  br label %for.cond85

for.end103:                                       ; preds = %for.cond85
  br label %sw.epilog203

sw.bb104:                                         ; preds = %for.end
  %94 = load i32, i32* %n.addr, align 4
  store i32 %94, i32* %i, align 4
  br label %for.cond105

for.cond105:                                      ; preds = %for.inc126, %sw.bb104
  %95 = load i32, i32* %i, align 4
  %96 = load i32, i32* %width.addr, align 4
  %97 = load i32, i32* %n.addr, align 4
  %mul106 = mul nsw i32 %96, %97
  %cmp107 = icmp slt i32 %95, %mul106
  br i1 %cmp107, label %for.body109, label %for.end128

for.body109:                                      ; preds = %for.cond105
  %98 = load i8*, i8** %z, align 8
  %99 = load i32, i32* %i, align 4
  %idxprom110 = sext i32 %99 to i64
  %arrayidx111 = getelementptr inbounds i8, i8* %98, i64 %idxprom110
  %100 = load i8, i8* %arrayidx111, align 1
  %conv112 = zext i8 %100 to i32
  %101 = load i8*, i8** %z, align 8
  %102 = load i32, i32* %i, align 4
  %103 = load i32, i32* %n.addr, align 4
  %sub113 = sub nsw i32 %102, %103
  %idxprom114 = sext i32 %sub113 to i64
  %arrayidx115 = getelementptr inbounds i8, i8* %101, i64 %idxprom114
  %104 = load i8, i8* %arrayidx115, align 1
  %conv116 = zext i8 %104 to i32
  %105 = load i8*, i8** %z, align 8
  %106 = load i32, i32* %i, align 4
  %107 = load i32, i32* %signed_stride, align 4
  %sub117 = sub nsw i32 %106, %107
  %idxprom118 = sext i32 %sub117 to i64
  %arrayidx119 = getelementptr inbounds i8, i8* %105, i64 %idxprom118
  %108 = load i8, i8* %arrayidx119, align 1
  %conv120 = zext i8 %108 to i32
  %add = add nsw i32 %conv116, %conv120
  %shr121 = ashr i32 %add, 1
  %sub122 = sub nsw i32 %conv112, %shr121
  %conv123 = trunc i32 %sub122 to i8
  %109 = load i8*, i8** %line_buffer.addr, align 8
  %110 = load i32, i32* %i, align 4
  %idxprom124 = sext i32 %110 to i64
  %arrayidx125 = getelementptr inbounds i8, i8* %109, i64 %idxprom124
  store i8 %conv123, i8* %arrayidx125, align 1
  br label %for.inc126

for.inc126:                                       ; preds = %for.body109
  %111 = load i32, i32* %i, align 4
  %inc127 = add nsw i32 %111, 1
  store i32 %inc127, i32* %i, align 4
  br label %for.cond105

for.end128:                                       ; preds = %for.cond105
  br label %sw.epilog203

sw.bb129:                                         ; preds = %for.end
  %112 = load i32, i32* %n.addr, align 4
  store i32 %112, i32* %i, align 4
  br label %for.cond130

for.cond130:                                      ; preds = %for.inc157, %sw.bb129
  %113 = load i32, i32* %i, align 4
  %114 = load i32, i32* %width.addr, align 4
  %115 = load i32, i32* %n.addr, align 4
  %mul131 = mul nsw i32 %114, %115
  %cmp132 = icmp slt i32 %113, %mul131
  br i1 %cmp132, label %for.body134, label %for.end159

for.body134:                                      ; preds = %for.cond130
  %116 = load i8*, i8** %z, align 8
  %117 = load i32, i32* %i, align 4
  %idxprom135 = sext i32 %117 to i64
  %arrayidx136 = getelementptr inbounds i8, i8* %116, i64 %idxprom135
  %118 = load i8, i8* %arrayidx136, align 1
  %conv137 = zext i8 %118 to i32
  %119 = load i8*, i8** %z, align 8
  %120 = load i32, i32* %i, align 4
  %121 = load i32, i32* %n.addr, align 4
  %sub138 = sub nsw i32 %120, %121
  %idxprom139 = sext i32 %sub138 to i64
  %arrayidx140 = getelementptr inbounds i8, i8* %119, i64 %idxprom139
  %122 = load i8, i8* %arrayidx140, align 1
  %conv141 = zext i8 %122 to i32
  %123 = load i8*, i8** %z, align 8
  %124 = load i32, i32* %i, align 4
  %125 = load i32, i32* %signed_stride, align 4
  %sub142 = sub nsw i32 %124, %125
  %idxprom143 = sext i32 %sub142 to i64
  %arrayidx144 = getelementptr inbounds i8, i8* %123, i64 %idxprom143
  %126 = load i8, i8* %arrayidx144, align 1
  %conv145 = zext i8 %126 to i32
  %127 = load i8*, i8** %z, align 8
  %128 = load i32, i32* %i, align 4
  %129 = load i32, i32* %signed_stride, align 4
  %sub146 = sub nsw i32 %128, %129
  %130 = load i32, i32* %n.addr, align 4
  %sub147 = sub nsw i32 %sub146, %130
  %idxprom148 = sext i32 %sub147 to i64
  %arrayidx149 = getelementptr inbounds i8, i8* %127, i64 %idxprom148
  %131 = load i8, i8* %arrayidx149, align 1
  %conv150 = zext i8 %131 to i32
  %call151 = call zeroext i8 @stbiw__paeth(i32 %conv141, i32 %conv145, i32 %conv150)
  %conv152 = zext i8 %call151 to i32
  %sub153 = sub nsw i32 %conv137, %conv152
  %conv154 = trunc i32 %sub153 to i8
  %132 = load i8*, i8** %line_buffer.addr, align 8
  %133 = load i32, i32* %i, align 4
  %idxprom155 = sext i32 %133 to i64
  %arrayidx156 = getelementptr inbounds i8, i8* %132, i64 %idxprom155
  store i8 %conv154, i8* %arrayidx156, align 1
  br label %for.inc157

for.inc157:                                       ; preds = %for.body134
  %134 = load i32, i32* %i, align 4
  %inc158 = add nsw i32 %134, 1
  store i32 %inc158, i32* %i, align 4
  br label %for.cond130

for.end159:                                       ; preds = %for.cond130
  br label %sw.epilog203

sw.bb160:                                         ; preds = %for.end
  %135 = load i32, i32* %n.addr, align 4
  store i32 %135, i32* %i, align 4
  br label %for.cond161

for.cond161:                                      ; preds = %for.inc178, %sw.bb160
  %136 = load i32, i32* %i, align 4
  %137 = load i32, i32* %width.addr, align 4
  %138 = load i32, i32* %n.addr, align 4
  %mul162 = mul nsw i32 %137, %138
  %cmp163 = icmp slt i32 %136, %mul162
  br i1 %cmp163, label %for.body165, label %for.end180

for.body165:                                      ; preds = %for.cond161
  %139 = load i8*, i8** %z, align 8
  %140 = load i32, i32* %i, align 4
  %idxprom166 = sext i32 %140 to i64
  %arrayidx167 = getelementptr inbounds i8, i8* %139, i64 %idxprom166
  %141 = load i8, i8* %arrayidx167, align 1
  %conv168 = zext i8 %141 to i32
  %142 = load i8*, i8** %z, align 8
  %143 = load i32, i32* %i, align 4
  %144 = load i32, i32* %n.addr, align 4
  %sub169 = sub nsw i32 %143, %144
  %idxprom170 = sext i32 %sub169 to i64
  %arrayidx171 = getelementptr inbounds i8, i8* %142, i64 %idxprom170
  %145 = load i8, i8* %arrayidx171, align 1
  %conv172 = zext i8 %145 to i32
  %shr173 = ashr i32 %conv172, 1
  %sub174 = sub nsw i32 %conv168, %shr173
  %conv175 = trunc i32 %sub174 to i8
  %146 = load i8*, i8** %line_buffer.addr, align 8
  %147 = load i32, i32* %i, align 4
  %idxprom176 = sext i32 %147 to i64
  %arrayidx177 = getelementptr inbounds i8, i8* %146, i64 %idxprom176
  store i8 %conv175, i8* %arrayidx177, align 1
  br label %for.inc178

for.inc178:                                       ; preds = %for.body165
  %148 = load i32, i32* %i, align 4
  %inc179 = add nsw i32 %148, 1
  store i32 %inc179, i32* %i, align 4
  br label %for.cond161

for.end180:                                       ; preds = %for.cond161
  br label %sw.epilog203

sw.bb181:                                         ; preds = %for.end
  %149 = load i32, i32* %n.addr, align 4
  store i32 %149, i32* %i, align 4
  br label %for.cond182

for.cond182:                                      ; preds = %for.inc200, %sw.bb181
  %150 = load i32, i32* %i, align 4
  %151 = load i32, i32* %width.addr, align 4
  %152 = load i32, i32* %n.addr, align 4
  %mul183 = mul nsw i32 %151, %152
  %cmp184 = icmp slt i32 %150, %mul183
  br i1 %cmp184, label %for.body186, label %for.end202

for.body186:                                      ; preds = %for.cond182
  %153 = load i8*, i8** %z, align 8
  %154 = load i32, i32* %i, align 4
  %idxprom187 = sext i32 %154 to i64
  %arrayidx188 = getelementptr inbounds i8, i8* %153, i64 %idxprom187
  %155 = load i8, i8* %arrayidx188, align 1
  %conv189 = zext i8 %155 to i32
  %156 = load i8*, i8** %z, align 8
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %n.addr, align 4
  %sub190 = sub nsw i32 %157, %158
  %idxprom191 = sext i32 %sub190 to i64
  %arrayidx192 = getelementptr inbounds i8, i8* %156, i64 %idxprom191
  %159 = load i8, i8* %arrayidx192, align 1
  %conv193 = zext i8 %159 to i32
  %call194 = call zeroext i8 @stbiw__paeth(i32 %conv193, i32 0, i32 0)
  %conv195 = zext i8 %call194 to i32
  %sub196 = sub nsw i32 %conv189, %conv195
  %conv197 = trunc i32 %sub196 to i8
  %160 = load i8*, i8** %line_buffer.addr, align 8
  %161 = load i32, i32* %i, align 4
  %idxprom198 = sext i32 %161 to i64
  %arrayidx199 = getelementptr inbounds i8, i8* %160, i64 %idxprom198
  store i8 %conv197, i8* %arrayidx199, align 1
  br label %for.inc200

for.inc200:                                       ; preds = %for.body186
  %162 = load i32, i32* %i, align 4
  %inc201 = add nsw i32 %162, 1
  store i32 %inc201, i32* %i, align 4
  br label %for.cond182

for.end202:                                       ; preds = %for.cond182
  br label %sw.epilog203

sw.epilog203:                                     ; preds = %if.then, %for.end, %for.end202, %for.end180, %for.end159, %for.end128, %for.end103, %for.end83
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__wpcrc(i8** %data, i32 %len) #0 {
entry:
  %data.addr = alloca i8**, align 8
  %len.addr = alloca i32, align 4
  %crc = alloca i32, align 4
  store i8** %data, i8*** %data.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8**, i8*** %data.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = load i32, i32* %len.addr, align 4
  %idx.ext = sext i32 %2 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.neg
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i64 -4
  %3 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %3, 4
  %call = call i32 @stbiw__crc32(i8* %add.ptr1, i32 %add)
  store i32 %call, i32* %crc, align 4
  %4 = load i32, i32* %crc, align 4
  %shr = lshr i32 %4, 24
  %and = and i32 %shr, 255
  %conv = trunc i32 %and to i8
  %5 = load i8**, i8*** %data.addr, align 8
  %6 = load i8*, i8** %5, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 0
  store i8 %conv, i8* %arrayidx, align 1
  %7 = load i32, i32* %crc, align 4
  %shr2 = lshr i32 %7, 16
  %and3 = and i32 %shr2, 255
  %conv4 = trunc i32 %and3 to i8
  %8 = load i8**, i8*** %data.addr, align 8
  %9 = load i8*, i8** %8, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %conv4, i8* %arrayidx5, align 1
  %10 = load i32, i32* %crc, align 4
  %shr6 = lshr i32 %10, 8
  %and7 = and i32 %shr6, 255
  %conv8 = trunc i32 %and7 to i8
  %11 = load i8**, i8*** %data.addr, align 8
  %12 = load i8*, i8** %11, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 %conv8, i8* %arrayidx9, align 1
  %13 = load i32, i32* %crc, align 4
  %and10 = and i32 %13, 255
  %conv11 = trunc i32 %and10 to i8
  %14 = load i8**, i8*** %data.addr, align 8
  %15 = load i8*, i8** %14, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %conv11, i8* %arrayidx12, align 1
  %16 = load i8**, i8*** %data.addr, align 8
  %17 = load i8*, i8** %16, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %17, i64 4
  store i8* %add.ptr13, i8** %16, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbiw__crc32(i8* %buffer, i32 %len) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %crc = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %buffer, i8** %buffer.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 -1, i32* %crc, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %crc, align 4
  %shr = lshr i32 %2, 8
  %3 = load i8*, i8** %buffer.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  %6 = load i32, i32* %crc, align 4
  %and = and i32 %6, 255
  %xor = xor i32 %conv, %and
  %idxprom1 = zext i32 %xor to i64
  %arrayidx2 = getelementptr inbounds [256 x i32], [256 x i32]* @stbiw__crc32.crc_table, i64 0, i64 %idxprom1
  %7 = load i32, i32* %arrayidx2, align 4
  %xor3 = xor i32 %shr, %7
  store i32 %xor3, i32* %crc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %crc, align 4
  %neg = xor i32 %9, -1
  ret i32 %neg
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i8 @stbiw__paeth(i32 %a, i32 %b, i32 %c) #0 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %pa = alloca i32, align 4
  %pb = alloca i32, align 4
  %pc = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %add = add nsw i32 %0, %1
  %2 = load i32, i32* %c.addr, align 4
  %sub = sub nsw i32 %add, %2
  store i32 %sub, i32* %p, align 4
  %3 = load i32, i32* %p, align 4
  %4 = load i32, i32* %a.addr, align 4
  %sub1 = sub nsw i32 %3, %4
  %call = call i32 @abs(i32 %sub1) #9
  store i32 %call, i32* %pa, align 4
  %5 = load i32, i32* %p, align 4
  %6 = load i32, i32* %b.addr, align 4
  %sub2 = sub nsw i32 %5, %6
  %call3 = call i32 @abs(i32 %sub2) #9
  store i32 %call3, i32* %pb, align 4
  %7 = load i32, i32* %p, align 4
  %8 = load i32, i32* %c.addr, align 4
  %sub4 = sub nsw i32 %7, %8
  %call5 = call i32 @abs(i32 %sub4) #9
  store i32 %call5, i32* %pc, align 4
  %9 = load i32, i32* %pa, align 4
  %10 = load i32, i32* %pb, align 4
  %cmp = icmp sle i32 %9, %10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %11 = load i32, i32* %pa, align 4
  %12 = load i32, i32* %pc, align 4
  %cmp6 = icmp sle i32 %11, %12
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %13 = load i32, i32* %a.addr, align 4
  %and = and i32 %13, 255
  %conv = trunc i32 %and to i8
  store i8 %conv, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %14 = load i32, i32* %pb, align 4
  %15 = load i32, i32* %pc, align 4
  %cmp7 = icmp sle i32 %14, %15
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %16 = load i32, i32* %b.addr, align 4
  %and10 = and i32 %16, 255
  %conv11 = trunc i32 %and10 to i8
  store i8 %conv11, i8* %retval, align 1
  br label %return

if.end12:                                         ; preds = %if.end
  %17 = load i32, i32* %c.addr, align 4
  %and13 = and i32 %17, 255
  %conv14 = trunc i32 %and13 to i8
  store i8 %conv14, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end12, %if.then9, %if.then
  %18 = load i8, i8* %retval, align 1
  ret i8 %18
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_write_png(i8* %filename, i32 %x, i32 %y, i32 %comp, i8* %data, i32 %stride_bytes) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %stride_bytes.addr = alloca i32, align 4
  %f = alloca %struct._IO_FILE*, align 8
  %len = alloca i32, align 4
  %png = alloca i8*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  store i32 %stride_bytes, i32* %stride_bytes.addr, align 4
  %0 = load i8*, i8** %data.addr, align 8
  %1 = load i32, i32* %stride_bytes.addr, align 4
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %4 = load i32, i32* %comp.addr, align 4
  %call = call i8* @stbi_write_png_to_mem(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32* %len)
  store i8* %call, i8** %png, align 8
  %5 = load i8*, i8** %png, align 8
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %filename.addr, align 8
  %call1 = call %struct._IO_FILE* @stbiw__fopen(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0))
  store %struct._IO_FILE* %call1, %struct._IO_FILE** %f, align 8
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %tobool = icmp ne %struct._IO_FILE* %7, null
  br i1 %tobool, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %8 = load i8*, i8** %png, align 8
  call void @free(i8* %8) #10
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %9 = load i8*, i8** %png, align 8
  %10 = load i32, i32* %len, align 4
  %conv = sext i32 %10 to i64
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call4 = call i64 @fwrite(i8* %9, i64 1, i64 %conv, %struct._IO_FILE* %11)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call5 = call i32 @fclose(%struct._IO_FILE* %12)
  %13 = load i8*, i8** %png, align 8
  call void @free(i8* %13) #10
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_write_png_to_func(void (i8*, i8*, i32)* %func, i8* %context, i32 %x, i32 %y, i32 %comp, i8* %data, i32 %stride_bytes) #0 {
entry:
  %retval = alloca i32, align 4
  %func.addr = alloca void (i8*, i8*, i32)*, align 8
  %context.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %stride_bytes.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %png = alloca i8*, align 8
  store void (i8*, i8*, i32)* %func, void (i8*, i8*, i32)** %func.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  store i32 %stride_bytes, i32* %stride_bytes.addr, align 4
  %0 = load i8*, i8** %data.addr, align 8
  %1 = load i32, i32* %stride_bytes.addr, align 4
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %4 = load i32, i32* %comp.addr, align 4
  %call = call i8* @stbi_write_png_to_mem(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32* %len)
  store i8* %call, i8** %png, align 8
  %5 = load i8*, i8** %png, align 8
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %6 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func.addr, align 8
  %7 = load i8*, i8** %context.addr, align 8
  %8 = load i8*, i8** %png, align 8
  %9 = load i32, i32* %len, align 4
  call void %6(i8* %7, i8* %8, i32 %9)
  %10 = load i8*, i8** %png, align 8
  call void @free(i8* %10) #10
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_write_jpg_to_func(void (i8*, i8*, i32)* %func, i8* %context, i32 %x, i32 %y, i32 %comp, i8* %data, i32 %quality) #0 {
entry:
  %func.addr = alloca void (i8*, i8*, i32)*, align 8
  %context.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %quality.addr = alloca i32, align 4
  %s = alloca %struct.stbi__write_context, align 8
  store void (i8*, i8*, i32)* %func, void (i8*, i8*, i32)** %func.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  store i32 %quality, i32* %quality.addr, align 4
  %0 = bitcast %struct.stbi__write_context* %s to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 88, i1 false)
  %1 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func.addr, align 8
  %2 = load i8*, i8** %context.addr, align 8
  call void @stbi__start_write_callbacks(%struct.stbi__write_context* %s, void (i8*, i8*, i32)* %1, i8* %2)
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %y.addr, align 4
  %5 = load i32, i32* %comp.addr, align 4
  %6 = load i8*, i8** %data.addr, align 8
  %7 = load i32, i32* %quality.addr, align 4
  %call = call i32 @stbi_write_jpg_core(%struct.stbi__write_context* %s, i32 %3, i32 %4, i32 %5, i8* %6, i32 %7)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbi_write_jpg_core(%struct.stbi__write_context* %s, i32 %width, i32 %height, i32 %comp, i8* %data, i32 %quality) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %quality.addr = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %subsample = alloca i32, align 4
  %fdtbl_Y = alloca [64 x float], align 16
  %fdtbl_UV = alloca [64 x float], align 16
  %YTable = alloca [64 x i8], align 16
  %UVTable = alloca [64 x i8], align 16
  %uvti = alloca i32, align 4
  %yti = alloca i32, align 4
  %head1 = alloca [24 x i8], align 16
  %DCY = alloca i32, align 4
  %DCU = alloca i32, align 4
  %DCV = alloca i32, align 4
  %bitBuf = alloca i32, align 4
  %bitCnt = alloca i32, align 4
  %ofsG = alloca i32, align 4
  %ofsB = alloca i32, align 4
  %dataR = alloca i8*, align 8
  %dataG = alloca i8*, align 8
  %dataB = alloca i8*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %pos = alloca i32, align 4
  %Y = alloca [256 x float], align 16
  %U = alloca [256 x float], align 16
  %V = alloca [256 x float], align 16
  %clamped_row = alloca i32, align 4
  %base_p = alloca i32, align 4
  %p = alloca i32, align 4
  %r = alloca float, align 4
  %g = alloca float, align 4
  %b = alloca float, align 4
  %subU = alloca [64 x float], align 16
  %subV = alloca [64 x float], align 16
  %yy = alloca i32, align 4
  %xx = alloca i32, align 4
  %j = alloca i32, align 4
  %Y346 = alloca [64 x float], align 16
  %U347 = alloca [64 x float], align 16
  %V348 = alloca [64 x float], align 16
  %clamped_row354 = alloca i32, align 4
  %base_p362 = alloca i32, align 4
  %p377 = alloca i32, align 4
  %r387 = alloca float, align 4
  %g391 = alloca float, align 4
  %b395 = alloca float, align 4
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  store i32 %quality, i32* %quality.addr, align 4
  %0 = load i8*, i8** %data.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %width.addr, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %height.addr, align 4
  %tobool3 = icmp ne i32 %2, 0
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %3 = load i32, i32* %comp.addr, align 4
  %cmp = icmp sgt i32 %3, 4
  br i1 %cmp, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false4
  %4 = load i32, i32* %comp.addr, align 4
  %cmp6 = icmp slt i32 %4, 1
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false5
  %5 = load i32, i32* %quality.addr, align 4
  %tobool7 = icmp ne i32 %5, 0
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %6 = load i32, i32* %quality.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %6, %cond.true ], [ 90, %cond.false ]
  store i32 %cond, i32* %quality.addr, align 4
  %7 = load i32, i32* %quality.addr, align 4
  %cmp8 = icmp sle i32 %7, 90
  %8 = zext i1 %cmp8 to i64
  %cond9 = select i1 %cmp8, i32 1, i32 0
  store i32 %cond9, i32* %subsample, align 4
  %9 = load i32, i32* %quality.addr, align 4
  %cmp10 = icmp slt i32 %9, 1
  br i1 %cmp10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %cond.end
  br label %cond.end18

cond.false12:                                     ; preds = %cond.end
  %10 = load i32, i32* %quality.addr, align 4
  %cmp13 = icmp sgt i32 %10, 100
  br i1 %cmp13, label %cond.true14, label %cond.false15

cond.true14:                                      ; preds = %cond.false12
  br label %cond.end16

cond.false15:                                     ; preds = %cond.false12
  %11 = load i32, i32* %quality.addr, align 4
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 100, %cond.true14 ], [ %11, %cond.false15 ]
  br label %cond.end18

cond.end18:                                       ; preds = %cond.end16, %cond.true11
  %cond19 = phi i32 [ 1, %cond.true11 ], [ %cond17, %cond.end16 ]
  store i32 %cond19, i32* %quality.addr, align 4
  %12 = load i32, i32* %quality.addr, align 4
  %cmp20 = icmp slt i32 %12, 50
  br i1 %cmp20, label %cond.true21, label %cond.false22

cond.true21:                                      ; preds = %cond.end18
  %13 = load i32, i32* %quality.addr, align 4
  %div = sdiv i32 5000, %13
  br label %cond.end23

cond.false22:                                     ; preds = %cond.end18
  %14 = load i32, i32* %quality.addr, align 4
  %mul = mul nsw i32 %14, 2
  %sub = sub nsw i32 200, %mul
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i32 [ %div, %cond.true21 ], [ %sub, %cond.false22 ]
  store i32 %cond24, i32* %quality.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end23
  %15 = load i32, i32* %i, align 4
  %cmp25 = icmp slt i32 %15, 64
  br i1 %cmp25, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* @stbi_write_jpg_core.YQT, i64 0, i64 %idxprom
  %17 = load i32, i32* %arrayidx, align 4
  %18 = load i32, i32* %quality.addr, align 4
  %mul26 = mul nsw i32 %17, %18
  %add = add nsw i32 %mul26, 50
  %div27 = sdiv i32 %add, 100
  store i32 %div27, i32* %yti, align 4
  %19 = load i32, i32* %yti, align 4
  %cmp28 = icmp slt i32 %19, 1
  br i1 %cmp28, label %cond.true29, label %cond.false30

cond.true29:                                      ; preds = %for.body
  br label %cond.end36

cond.false30:                                     ; preds = %for.body
  %20 = load i32, i32* %yti, align 4
  %cmp31 = icmp sgt i32 %20, 255
  br i1 %cmp31, label %cond.true32, label %cond.false33

cond.true32:                                      ; preds = %cond.false30
  br label %cond.end34

cond.false33:                                     ; preds = %cond.false30
  %21 = load i32, i32* %yti, align 4
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi i32 [ 255, %cond.true32 ], [ %21, %cond.false33 ]
  br label %cond.end36

cond.end36:                                       ; preds = %cond.end34, %cond.true29
  %cond37 = phi i32 [ 1, %cond.true29 ], [ %cond35, %cond.end34 ]
  %conv = trunc i32 %cond37 to i8
  %22 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %22 to i64
  %arrayidx39 = getelementptr inbounds [64 x i8], [64 x i8]* @stbiw__jpg_ZigZag, i64 0, i64 %idxprom38
  %23 = load i8, i8* %arrayidx39, align 1
  %idxprom40 = zext i8 %23 to i64
  %arrayidx41 = getelementptr inbounds [64 x i8], [64 x i8]* %YTable, i64 0, i64 %idxprom40
  store i8 %conv, i8* %arrayidx41, align 1
  %24 = load i32, i32* %i, align 4
  %idxprom42 = sext i32 %24 to i64
  %arrayidx43 = getelementptr inbounds [64 x i32], [64 x i32]* @stbi_write_jpg_core.UVQT, i64 0, i64 %idxprom42
  %25 = load i32, i32* %arrayidx43, align 4
  %26 = load i32, i32* %quality.addr, align 4
  %mul44 = mul nsw i32 %25, %26
  %add45 = add nsw i32 %mul44, 50
  %div46 = sdiv i32 %add45, 100
  store i32 %div46, i32* %uvti, align 4
  %27 = load i32, i32* %uvti, align 4
  %cmp47 = icmp slt i32 %27, 1
  br i1 %cmp47, label %cond.true49, label %cond.false50

cond.true49:                                      ; preds = %cond.end36
  br label %cond.end57

cond.false50:                                     ; preds = %cond.end36
  %28 = load i32, i32* %uvti, align 4
  %cmp51 = icmp sgt i32 %28, 255
  br i1 %cmp51, label %cond.true53, label %cond.false54

cond.true53:                                      ; preds = %cond.false50
  br label %cond.end55

cond.false54:                                     ; preds = %cond.false50
  %29 = load i32, i32* %uvti, align 4
  br label %cond.end55

cond.end55:                                       ; preds = %cond.false54, %cond.true53
  %cond56 = phi i32 [ 255, %cond.true53 ], [ %29, %cond.false54 ]
  br label %cond.end57

cond.end57:                                       ; preds = %cond.end55, %cond.true49
  %cond58 = phi i32 [ 1, %cond.true49 ], [ %cond56, %cond.end55 ]
  %conv59 = trunc i32 %cond58 to i8
  %30 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %30 to i64
  %arrayidx61 = getelementptr inbounds [64 x i8], [64 x i8]* @stbiw__jpg_ZigZag, i64 0, i64 %idxprom60
  %31 = load i8, i8* %arrayidx61, align 1
  %idxprom62 = zext i8 %31 to i64
  %arrayidx63 = getelementptr inbounds [64 x i8], [64 x i8]* %UVTable, i64 0, i64 %idxprom62
  store i8 %conv59, i8* %arrayidx63, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end57
  %32 = load i32, i32* %i, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %row, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc106, %for.end
  %33 = load i32, i32* %row, align 4
  %cmp65 = icmp slt i32 %33, 8
  br i1 %cmp65, label %for.body67, label %for.end108

for.body67:                                       ; preds = %for.cond64
  store i32 0, i32* %col, align 4
  br label %for.cond68

for.cond68:                                       ; preds = %for.inc102, %for.body67
  %34 = load i32, i32* %col, align 4
  %cmp69 = icmp slt i32 %34, 8
  br i1 %cmp69, label %for.body71, label %for.end105

for.body71:                                       ; preds = %for.cond68
  %35 = load i32, i32* %k, align 4
  %idxprom72 = sext i32 %35 to i64
  %arrayidx73 = getelementptr inbounds [64 x i8], [64 x i8]* @stbiw__jpg_ZigZag, i64 0, i64 %idxprom72
  %36 = load i8, i8* %arrayidx73, align 1
  %idxprom74 = zext i8 %36 to i64
  %arrayidx75 = getelementptr inbounds [64 x i8], [64 x i8]* %YTable, i64 0, i64 %idxprom74
  %37 = load i8, i8* %arrayidx75, align 1
  %conv76 = zext i8 %37 to i32
  %conv77 = sitofp i32 %conv76 to float
  %38 = load i32, i32* %row, align 4
  %idxprom78 = sext i32 %38 to i64
  %arrayidx79 = getelementptr inbounds [8 x float], [8 x float]* @stbi_write_jpg_core.aasf, i64 0, i64 %idxprom78
  %39 = load float, float* %arrayidx79, align 4
  %mul80 = fmul float %conv77, %39
  %40 = load i32, i32* %col, align 4
  %idxprom81 = sext i32 %40 to i64
  %arrayidx82 = getelementptr inbounds [8 x float], [8 x float]* @stbi_write_jpg_core.aasf, i64 0, i64 %idxprom81
  %41 = load float, float* %arrayidx82, align 4
  %mul83 = fmul float %mul80, %41
  %div84 = fdiv float 1.000000e+00, %mul83
  %42 = load i32, i32* %k, align 4
  %idxprom85 = sext i32 %42 to i64
  %arrayidx86 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_Y, i64 0, i64 %idxprom85
  store float %div84, float* %arrayidx86, align 4
  %43 = load i32, i32* %k, align 4
  %idxprom87 = sext i32 %43 to i64
  %arrayidx88 = getelementptr inbounds [64 x i8], [64 x i8]* @stbiw__jpg_ZigZag, i64 0, i64 %idxprom87
  %44 = load i8, i8* %arrayidx88, align 1
  %idxprom89 = zext i8 %44 to i64
  %arrayidx90 = getelementptr inbounds [64 x i8], [64 x i8]* %UVTable, i64 0, i64 %idxprom89
  %45 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %45 to i32
  %conv92 = sitofp i32 %conv91 to float
  %46 = load i32, i32* %row, align 4
  %idxprom93 = sext i32 %46 to i64
  %arrayidx94 = getelementptr inbounds [8 x float], [8 x float]* @stbi_write_jpg_core.aasf, i64 0, i64 %idxprom93
  %47 = load float, float* %arrayidx94, align 4
  %mul95 = fmul float %conv92, %47
  %48 = load i32, i32* %col, align 4
  %idxprom96 = sext i32 %48 to i64
  %arrayidx97 = getelementptr inbounds [8 x float], [8 x float]* @stbi_write_jpg_core.aasf, i64 0, i64 %idxprom96
  %49 = load float, float* %arrayidx97, align 4
  %mul98 = fmul float %mul95, %49
  %div99 = fdiv float 1.000000e+00, %mul98
  %50 = load i32, i32* %k, align 4
  %idxprom100 = sext i32 %50 to i64
  %arrayidx101 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_UV, i64 0, i64 %idxprom100
  store float %div99, float* %arrayidx101, align 4
  br label %for.inc102

for.inc102:                                       ; preds = %for.body71
  %51 = load i32, i32* %col, align 4
  %inc103 = add nsw i32 %51, 1
  store i32 %inc103, i32* %col, align 4
  %52 = load i32, i32* %k, align 4
  %inc104 = add nsw i32 %52, 1
  store i32 %inc104, i32* %k, align 4
  br label %for.cond68

for.end105:                                       ; preds = %for.cond68
  br label %for.inc106

for.inc106:                                       ; preds = %for.end105
  %53 = load i32, i32* %row, align 4
  %inc107 = add nsw i32 %53, 1
  store i32 %inc107, i32* %row, align 4
  br label %for.cond64

for.end108:                                       ; preds = %for.cond64
  %arrayinit.begin = getelementptr inbounds [24 x i8], [24 x i8]* %head1, i64 0, i64 0
  store i8 -1, i8* %arrayinit.begin, align 1
  %arrayinit.element = getelementptr inbounds i8, i8* %arrayinit.begin, i64 1
  store i8 -64, i8* %arrayinit.element, align 1
  %arrayinit.element109 = getelementptr inbounds i8, i8* %arrayinit.element, i64 1
  store i8 0, i8* %arrayinit.element109, align 1
  %arrayinit.element110 = getelementptr inbounds i8, i8* %arrayinit.element109, i64 1
  store i8 17, i8* %arrayinit.element110, align 1
  %arrayinit.element111 = getelementptr inbounds i8, i8* %arrayinit.element110, i64 1
  store i8 8, i8* %arrayinit.element111, align 1
  %arrayinit.element112 = getelementptr inbounds i8, i8* %arrayinit.element111, i64 1
  %54 = load i32, i32* %height.addr, align 4
  %shr = ashr i32 %54, 8
  %conv113 = trunc i32 %shr to i8
  store i8 %conv113, i8* %arrayinit.element112, align 1
  %arrayinit.element114 = getelementptr inbounds i8, i8* %arrayinit.element112, i64 1
  %55 = load i32, i32* %height.addr, align 4
  %and = and i32 %55, 255
  %conv115 = trunc i32 %and to i8
  store i8 %conv115, i8* %arrayinit.element114, align 1
  %arrayinit.element116 = getelementptr inbounds i8, i8* %arrayinit.element114, i64 1
  %56 = load i32, i32* %width.addr, align 4
  %shr117 = ashr i32 %56, 8
  %conv118 = trunc i32 %shr117 to i8
  store i8 %conv118, i8* %arrayinit.element116, align 1
  %arrayinit.element119 = getelementptr inbounds i8, i8* %arrayinit.element116, i64 1
  %57 = load i32, i32* %width.addr, align 4
  %and120 = and i32 %57, 255
  %conv121 = trunc i32 %and120 to i8
  store i8 %conv121, i8* %arrayinit.element119, align 1
  %arrayinit.element122 = getelementptr inbounds i8, i8* %arrayinit.element119, i64 1
  store i8 3, i8* %arrayinit.element122, align 1
  %arrayinit.element123 = getelementptr inbounds i8, i8* %arrayinit.element122, i64 1
  store i8 1, i8* %arrayinit.element123, align 1
  %arrayinit.element124 = getelementptr inbounds i8, i8* %arrayinit.element123, i64 1
  %58 = load i32, i32* %subsample, align 4
  %tobool125 = icmp ne i32 %58, 0
  %59 = zext i1 %tobool125 to i64
  %cond126 = select i1 %tobool125, i32 34, i32 17
  %conv127 = trunc i32 %cond126 to i8
  store i8 %conv127, i8* %arrayinit.element124, align 1
  %arrayinit.element128 = getelementptr inbounds i8, i8* %arrayinit.element124, i64 1
  store i8 0, i8* %arrayinit.element128, align 1
  %arrayinit.element129 = getelementptr inbounds i8, i8* %arrayinit.element128, i64 1
  store i8 2, i8* %arrayinit.element129, align 1
  %arrayinit.element130 = getelementptr inbounds i8, i8* %arrayinit.element129, i64 1
  store i8 17, i8* %arrayinit.element130, align 1
  %arrayinit.element131 = getelementptr inbounds i8, i8* %arrayinit.element130, i64 1
  store i8 1, i8* %arrayinit.element131, align 1
  %arrayinit.element132 = getelementptr inbounds i8, i8* %arrayinit.element131, i64 1
  store i8 3, i8* %arrayinit.element132, align 1
  %arrayinit.element133 = getelementptr inbounds i8, i8* %arrayinit.element132, i64 1
  store i8 17, i8* %arrayinit.element133, align 1
  %arrayinit.element134 = getelementptr inbounds i8, i8* %arrayinit.element133, i64 1
  store i8 1, i8* %arrayinit.element134, align 1
  %arrayinit.element135 = getelementptr inbounds i8, i8* %arrayinit.element134, i64 1
  store i8 -1, i8* %arrayinit.element135, align 1
  %arrayinit.element136 = getelementptr inbounds i8, i8* %arrayinit.element135, i64 1
  store i8 -60, i8* %arrayinit.element136, align 1
  %arrayinit.element137 = getelementptr inbounds i8, i8* %arrayinit.element136, i64 1
  store i8 1, i8* %arrayinit.element137, align 1
  %arrayinit.element138 = getelementptr inbounds i8, i8* %arrayinit.element137, i64 1
  store i8 -94, i8* %arrayinit.element138, align 1
  %arrayinit.element139 = getelementptr inbounds i8, i8* %arrayinit.element138, i64 1
  store i8 0, i8* %arrayinit.element139, align 1
  %60 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %60, i32 0, i32 0
  %61 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func, align 8
  %62 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %62, i32 0, i32 1
  %63 = load i8*, i8** %context, align 8
  call void %61(i8* %63, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @stbi_write_jpg_core.head0, i64 0, i64 0), i32 25)
  %64 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func140 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %64, i32 0, i32 0
  %65 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func140, align 8
  %66 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context141 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %66, i32 0, i32 1
  %67 = load i8*, i8** %context141, align 8
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %YTable, i64 0, i64 0
  call void %65(i8* %67, i8* %arraydecay, i32 64)
  %68 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__putc(%struct.stbi__write_context* %68, i8 zeroext 1)
  %69 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func142 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %69, i32 0, i32 0
  %70 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func142, align 8
  %71 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context143 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %71, i32 0, i32 1
  %72 = load i8*, i8** %context143, align 8
  %arraydecay144 = getelementptr inbounds [64 x i8], [64 x i8]* %UVTable, i64 0, i64 0
  call void %70(i8* %72, i8* %arraydecay144, i32 64)
  %73 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func145 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %73, i32 0, i32 0
  %74 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func145, align 8
  %75 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context146 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %75, i32 0, i32 1
  %76 = load i8*, i8** %context146, align 8
  %arraydecay147 = getelementptr inbounds [24 x i8], [24 x i8]* %head1, i64 0, i64 0
  call void %74(i8* %76, i8* %arraydecay147, i32 24)
  %77 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func148 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %77, i32 0, i32 0
  %78 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func148, align 8
  %79 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context149 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %79, i32 0, i32 1
  %80 = load i8*, i8** %context149, align 8
  call void %78(i8* %80, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @stbi_write_jpg_core.std_dc_luminance_nrcodes, i64 0, i64 1), i32 16)
  %81 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func150 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %81, i32 0, i32 0
  %82 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func150, align 8
  %83 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context151 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %83, i32 0, i32 1
  %84 = load i8*, i8** %context151, align 8
  call void %82(i8* %84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @stbi_write_jpg_core.std_dc_luminance_values, i64 0, i64 0), i32 12)
  %85 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__putc(%struct.stbi__write_context* %85, i8 zeroext 16)
  %86 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func152 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %86, i32 0, i32 0
  %87 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func152, align 8
  %88 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context153 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %88, i32 0, i32 1
  %89 = load i8*, i8** %context153, align 8
  call void %87(i8* %89, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @stbi_write_jpg_core.std_ac_luminance_nrcodes, i64 0, i64 1), i32 16)
  %90 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func154 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %90, i32 0, i32 0
  %91 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func154, align 8
  %92 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context155 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %92, i32 0, i32 1
  %93 = load i8*, i8** %context155, align 8
  call void %91(i8* %93, i8* getelementptr inbounds ([162 x i8], [162 x i8]* @stbi_write_jpg_core.std_ac_luminance_values, i64 0, i64 0), i32 162)
  %94 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__putc(%struct.stbi__write_context* %94, i8 zeroext 1)
  %95 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func156 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %95, i32 0, i32 0
  %96 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func156, align 8
  %97 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context157 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %97, i32 0, i32 1
  %98 = load i8*, i8** %context157, align 8
  call void %96(i8* %98, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @stbi_write_jpg_core.std_dc_chrominance_nrcodes, i64 0, i64 1), i32 16)
  %99 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func158 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %99, i32 0, i32 0
  %100 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func158, align 8
  %101 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context159 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %101, i32 0, i32 1
  %102 = load i8*, i8** %context159, align 8
  call void %100(i8* %102, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @stbi_write_jpg_core.std_dc_chrominance_values, i64 0, i64 0), i32 12)
  %103 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__putc(%struct.stbi__write_context* %103, i8 zeroext 17)
  %104 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func160 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %104, i32 0, i32 0
  %105 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func160, align 8
  %106 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context161 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %106, i32 0, i32 1
  %107 = load i8*, i8** %context161, align 8
  call void %105(i8* %107, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @stbi_write_jpg_core.std_ac_chrominance_nrcodes, i64 0, i64 1), i32 16)
  %108 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func162 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %108, i32 0, i32 0
  %109 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func162, align 8
  %110 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context163 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %110, i32 0, i32 1
  %111 = load i8*, i8** %context163, align 8
  call void %109(i8* %111, i8* getelementptr inbounds ([162 x i8], [162 x i8]* @stbi_write_jpg_core.std_ac_chrominance_values, i64 0, i64 0), i32 162)
  %112 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func164 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %112, i32 0, i32 0
  %113 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func164, align 8
  %114 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context165 = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %114, i32 0, i32 1
  %115 = load i8*, i8** %context165, align 8
  call void %113(i8* %115, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @stbi_write_jpg_core.head2, i64 0, i64 0), i32 14)
  store i32 0, i32* %DCY, align 4
  store i32 0, i32* %DCU, align 4
  store i32 0, i32* %DCV, align 4
  store i32 0, i32* %bitBuf, align 4
  store i32 0, i32* %bitCnt, align 4
  %116 = load i32, i32* %comp.addr, align 4
  %cmp166 = icmp sgt i32 %116, 2
  %117 = zext i1 %cmp166 to i64
  %cond168 = select i1 %cmp166, i32 1, i32 0
  store i32 %cond168, i32* %ofsG, align 4
  %118 = load i32, i32* %comp.addr, align 4
  %cmp169 = icmp sgt i32 %118, 2
  %119 = zext i1 %cmp169 to i64
  %cond171 = select i1 %cmp169, i32 2, i32 0
  store i32 %cond171, i32* %ofsB, align 4
  %120 = load i8*, i8** %data.addr, align 8
  store i8* %120, i8** %dataR, align 8
  %121 = load i8*, i8** %dataR, align 8
  %122 = load i32, i32* %ofsG, align 4
  %idx.ext = sext i32 %122 to i64
  %add.ptr = getelementptr inbounds i8, i8* %121, i64 %idx.ext
  store i8* %add.ptr, i8** %dataG, align 8
  %123 = load i8*, i8** %dataR, align 8
  %124 = load i32, i32* %ofsB, align 4
  %idx.ext172 = sext i32 %124 to i64
  %add.ptr173 = getelementptr inbounds i8, i8* %123, i64 %idx.ext172
  store i8* %add.ptr173, i8** %dataB, align 8
  %125 = load i32, i32* %subsample, align 4
  %tobool174 = icmp ne i32 %125, 0
  br i1 %tobool174, label %if.then175, label %if.else

if.then175:                                       ; preds = %for.end108
  store i32 0, i32* %y, align 4
  br label %for.cond176

for.cond176:                                      ; preds = %for.inc335, %if.then175
  %126 = load i32, i32* %y, align 4
  %127 = load i32, i32* %height.addr, align 4
  %cmp177 = icmp slt i32 %126, %127
  br i1 %cmp177, label %for.body179, label %for.end337

for.body179:                                      ; preds = %for.cond176
  store i32 0, i32* %x, align 4
  br label %for.cond180

for.cond180:                                      ; preds = %for.inc332, %for.body179
  %128 = load i32, i32* %x, align 4
  %129 = load i32, i32* %width.addr, align 4
  %cmp181 = icmp slt i32 %128, %129
  br i1 %cmp181, label %for.body183, label %for.end334

for.body183:                                      ; preds = %for.cond180
  %130 = load i32, i32* %y, align 4
  store i32 %130, i32* %row, align 4
  store i32 0, i32* %pos, align 4
  br label %for.cond184

for.cond184:                                      ; preds = %for.inc254, %for.body183
  %131 = load i32, i32* %row, align 4
  %132 = load i32, i32* %y, align 4
  %add185 = add nsw i32 %132, 16
  %cmp186 = icmp slt i32 %131, %add185
  br i1 %cmp186, label %for.body188, label %for.end256

for.body188:                                      ; preds = %for.cond184
  %133 = load i32, i32* %row, align 4
  %134 = load i32, i32* %height.addr, align 4
  %cmp189 = icmp slt i32 %133, %134
  br i1 %cmp189, label %cond.true191, label %cond.false192

cond.true191:                                     ; preds = %for.body188
  %135 = load i32, i32* %row, align 4
  br label %cond.end194

cond.false192:                                    ; preds = %for.body188
  %136 = load i32, i32* %height.addr, align 4
  %sub193 = sub nsw i32 %136, 1
  br label %cond.end194

cond.end194:                                      ; preds = %cond.false192, %cond.true191
  %cond195 = phi i32 [ %135, %cond.true191 ], [ %sub193, %cond.false192 ]
  store i32 %cond195, i32* %clamped_row, align 4
  %137 = load i32, i32* @stbi__flip_vertically_on_write, align 4
  %tobool196 = icmp ne i32 %137, 0
  br i1 %tobool196, label %cond.true197, label %cond.false200

cond.true197:                                     ; preds = %cond.end194
  %138 = load i32, i32* %height.addr, align 4
  %sub198 = sub nsw i32 %138, 1
  %139 = load i32, i32* %clamped_row, align 4
  %sub199 = sub nsw i32 %sub198, %139
  br label %cond.end201

cond.false200:                                    ; preds = %cond.end194
  %140 = load i32, i32* %clamped_row, align 4
  br label %cond.end201

cond.end201:                                      ; preds = %cond.false200, %cond.true197
  %cond202 = phi i32 [ %sub199, %cond.true197 ], [ %140, %cond.false200 ]
  %141 = load i32, i32* %width.addr, align 4
  %mul203 = mul nsw i32 %cond202, %141
  %142 = load i32, i32* %comp.addr, align 4
  %mul204 = mul nsw i32 %mul203, %142
  store i32 %mul204, i32* %base_p, align 4
  %143 = load i32, i32* %x, align 4
  store i32 %143, i32* %col, align 4
  br label %for.cond205

for.cond205:                                      ; preds = %for.inc250, %cond.end201
  %144 = load i32, i32* %col, align 4
  %145 = load i32, i32* %x, align 4
  %add206 = add nsw i32 %145, 16
  %cmp207 = icmp slt i32 %144, %add206
  br i1 %cmp207, label %for.body209, label %for.end253

for.body209:                                      ; preds = %for.cond205
  %146 = load i32, i32* %base_p, align 4
  %147 = load i32, i32* %col, align 4
  %148 = load i32, i32* %width.addr, align 4
  %cmp210 = icmp slt i32 %147, %148
  br i1 %cmp210, label %cond.true212, label %cond.false213

cond.true212:                                     ; preds = %for.body209
  %149 = load i32, i32* %col, align 4
  br label %cond.end215

cond.false213:                                    ; preds = %for.body209
  %150 = load i32, i32* %width.addr, align 4
  %sub214 = sub nsw i32 %150, 1
  br label %cond.end215

cond.end215:                                      ; preds = %cond.false213, %cond.true212
  %cond216 = phi i32 [ %149, %cond.true212 ], [ %sub214, %cond.false213 ]
  %151 = load i32, i32* %comp.addr, align 4
  %mul217 = mul nsw i32 %cond216, %151
  %add218 = add nsw i32 %146, %mul217
  store i32 %add218, i32* %p, align 4
  %152 = load i8*, i8** %dataR, align 8
  %153 = load i32, i32* %p, align 4
  %idxprom219 = sext i32 %153 to i64
  %arrayidx220 = getelementptr inbounds i8, i8* %152, i64 %idxprom219
  %154 = load i8, i8* %arrayidx220, align 1
  %conv221 = uitofp i8 %154 to float
  store float %conv221, float* %r, align 4
  %155 = load i8*, i8** %dataG, align 8
  %156 = load i32, i32* %p, align 4
  %idxprom222 = sext i32 %156 to i64
  %arrayidx223 = getelementptr inbounds i8, i8* %155, i64 %idxprom222
  %157 = load i8, i8* %arrayidx223, align 1
  %conv224 = uitofp i8 %157 to float
  store float %conv224, float* %g, align 4
  %158 = load i8*, i8** %dataB, align 8
  %159 = load i32, i32* %p, align 4
  %idxprom225 = sext i32 %159 to i64
  %arrayidx226 = getelementptr inbounds i8, i8* %158, i64 %idxprom225
  %160 = load i8, i8* %arrayidx226, align 1
  %conv227 = uitofp i8 %160 to float
  store float %conv227, float* %b, align 4
  %161 = load float, float* %r, align 4
  %mul228 = fmul float 0x3FD322D0E0000000, %161
  %162 = load float, float* %g, align 4
  %mul229 = fmul float 0x3FE2C8B440000000, %162
  %add230 = fadd float %mul228, %mul229
  %163 = load float, float* %b, align 4
  %mul231 = fmul float 0x3FBD2F1AA0000000, %163
  %add232 = fadd float %add230, %mul231
  %sub233 = fsub float %add232, 1.280000e+02
  %164 = load i32, i32* %pos, align 4
  %idxprom234 = sext i32 %164 to i64
  %arrayidx235 = getelementptr inbounds [256 x float], [256 x float]* %Y, i64 0, i64 %idxprom234
  store float %sub233, float* %arrayidx235, align 4
  %165 = load float, float* %r, align 4
  %mul236 = fmul float 0xBFC59945C0000000, %165
  %166 = load float, float* %g, align 4
  %mul237 = fmul float 0x3FD5335D20000000, %166
  %sub238 = fsub float %mul236, %mul237
  %167 = load float, float* %b, align 4
  %mul239 = fmul float 5.000000e-01, %167
  %add240 = fadd float %sub238, %mul239
  %168 = load i32, i32* %pos, align 4
  %idxprom241 = sext i32 %168 to i64
  %arrayidx242 = getelementptr inbounds [256 x float], [256 x float]* %U, i64 0, i64 %idxprom241
  store float %add240, float* %arrayidx242, align 4
  %169 = load float, float* %r, align 4
  %mul243 = fmul float 5.000000e-01, %169
  %170 = load float, float* %g, align 4
  %mul244 = fmul float 0x3FDACBD120000000, %170
  %sub245 = fsub float %mul243, %mul244
  %171 = load float, float* %b, align 4
  %mul246 = fmul float 0x3FB4D0BB60000000, %171
  %sub247 = fsub float %sub245, %mul246
  %172 = load i32, i32* %pos, align 4
  %idxprom248 = sext i32 %172 to i64
  %arrayidx249 = getelementptr inbounds [256 x float], [256 x float]* %V, i64 0, i64 %idxprom248
  store float %sub247, float* %arrayidx249, align 4
  br label %for.inc250

for.inc250:                                       ; preds = %cond.end215
  %173 = load i32, i32* %col, align 4
  %inc251 = add nsw i32 %173, 1
  store i32 %inc251, i32* %col, align 4
  %174 = load i32, i32* %pos, align 4
  %inc252 = add nsw i32 %174, 1
  store i32 %inc252, i32* %pos, align 4
  br label %for.cond205

for.end253:                                       ; preds = %for.cond205
  br label %for.inc254

for.inc254:                                       ; preds = %for.end253
  %175 = load i32, i32* %row, align 4
  %inc255 = add nsw i32 %175, 1
  store i32 %inc255, i32* %row, align 4
  br label %for.cond184

for.end256:                                       ; preds = %for.cond184
  %176 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %arraydecay257 = getelementptr inbounds [256 x float], [256 x float]* %Y, i64 0, i64 0
  %add.ptr258 = getelementptr inbounds float, float* %arraydecay257, i64 0
  %arraydecay259 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_Y, i64 0, i64 0
  %177 = load i32, i32* %DCY, align 4
  %call = call i32 @stbiw__jpg_processDU(%struct.stbi__write_context* %176, i32* %bitBuf, i32* %bitCnt, float* %add.ptr258, i32 16, float* %arraydecay259, i32 %177, [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* bitcast (<{ [12 x [2 x i16]], [244 x [2 x i16]] }>* @stbi_write_jpg_core.YDC_HT to [256 x [2 x i16]]*), i64 0, i64 0), [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* @stbi_write_jpg_core.YAC_HT, i64 0, i64 0))
  store i32 %call, i32* %DCY, align 4
  %178 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %arraydecay260 = getelementptr inbounds [256 x float], [256 x float]* %Y, i64 0, i64 0
  %add.ptr261 = getelementptr inbounds float, float* %arraydecay260, i64 8
  %arraydecay262 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_Y, i64 0, i64 0
  %179 = load i32, i32* %DCY, align 4
  %call263 = call i32 @stbiw__jpg_processDU(%struct.stbi__write_context* %178, i32* %bitBuf, i32* %bitCnt, float* %add.ptr261, i32 16, float* %arraydecay262, i32 %179, [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* bitcast (<{ [12 x [2 x i16]], [244 x [2 x i16]] }>* @stbi_write_jpg_core.YDC_HT to [256 x [2 x i16]]*), i64 0, i64 0), [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* @stbi_write_jpg_core.YAC_HT, i64 0, i64 0))
  store i32 %call263, i32* %DCY, align 4
  %180 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %arraydecay264 = getelementptr inbounds [256 x float], [256 x float]* %Y, i64 0, i64 0
  %add.ptr265 = getelementptr inbounds float, float* %arraydecay264, i64 128
  %arraydecay266 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_Y, i64 0, i64 0
  %181 = load i32, i32* %DCY, align 4
  %call267 = call i32 @stbiw__jpg_processDU(%struct.stbi__write_context* %180, i32* %bitBuf, i32* %bitCnt, float* %add.ptr265, i32 16, float* %arraydecay266, i32 %181, [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* bitcast (<{ [12 x [2 x i16]], [244 x [2 x i16]] }>* @stbi_write_jpg_core.YDC_HT to [256 x [2 x i16]]*), i64 0, i64 0), [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* @stbi_write_jpg_core.YAC_HT, i64 0, i64 0))
  store i32 %call267, i32* %DCY, align 4
  %182 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %arraydecay268 = getelementptr inbounds [256 x float], [256 x float]* %Y, i64 0, i64 0
  %add.ptr269 = getelementptr inbounds float, float* %arraydecay268, i64 136
  %arraydecay270 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_Y, i64 0, i64 0
  %183 = load i32, i32* %DCY, align 4
  %call271 = call i32 @stbiw__jpg_processDU(%struct.stbi__write_context* %182, i32* %bitBuf, i32* %bitCnt, float* %add.ptr269, i32 16, float* %arraydecay270, i32 %183, [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* bitcast (<{ [12 x [2 x i16]], [244 x [2 x i16]] }>* @stbi_write_jpg_core.YDC_HT to [256 x [2 x i16]]*), i64 0, i64 0), [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* @stbi_write_jpg_core.YAC_HT, i64 0, i64 0))
  store i32 %call271, i32* %DCY, align 4
  store i32 0, i32* %yy, align 4
  store i32 0, i32* %pos, align 4
  br label %for.cond272

for.cond272:                                      ; preds = %for.inc323, %for.end256
  %184 = load i32, i32* %yy, align 4
  %cmp273 = icmp slt i32 %184, 8
  br i1 %cmp273, label %for.body275, label %for.end325

for.body275:                                      ; preds = %for.cond272
  store i32 0, i32* %xx, align 4
  br label %for.cond276

for.cond276:                                      ; preds = %for.inc319, %for.body275
  %185 = load i32, i32* %xx, align 4
  %cmp277 = icmp slt i32 %185, 8
  br i1 %cmp277, label %for.body279, label %for.end322

for.body279:                                      ; preds = %for.cond276
  %186 = load i32, i32* %yy, align 4
  %mul280 = mul nsw i32 %186, 32
  %187 = load i32, i32* %xx, align 4
  %mul281 = mul nsw i32 %187, 2
  %add282 = add nsw i32 %mul280, %mul281
  store i32 %add282, i32* %j, align 4
  %188 = load i32, i32* %j, align 4
  %add283 = add nsw i32 %188, 0
  %idxprom284 = sext i32 %add283 to i64
  %arrayidx285 = getelementptr inbounds [256 x float], [256 x float]* %U, i64 0, i64 %idxprom284
  %189 = load float, float* %arrayidx285, align 4
  %190 = load i32, i32* %j, align 4
  %add286 = add nsw i32 %190, 1
  %idxprom287 = sext i32 %add286 to i64
  %arrayidx288 = getelementptr inbounds [256 x float], [256 x float]* %U, i64 0, i64 %idxprom287
  %191 = load float, float* %arrayidx288, align 4
  %add289 = fadd float %189, %191
  %192 = load i32, i32* %j, align 4
  %add290 = add nsw i32 %192, 16
  %idxprom291 = sext i32 %add290 to i64
  %arrayidx292 = getelementptr inbounds [256 x float], [256 x float]* %U, i64 0, i64 %idxprom291
  %193 = load float, float* %arrayidx292, align 4
  %add293 = fadd float %add289, %193
  %194 = load i32, i32* %j, align 4
  %add294 = add nsw i32 %194, 17
  %idxprom295 = sext i32 %add294 to i64
  %arrayidx296 = getelementptr inbounds [256 x float], [256 x float]* %U, i64 0, i64 %idxprom295
  %195 = load float, float* %arrayidx296, align 4
  %add297 = fadd float %add293, %195
  %mul298 = fmul float %add297, 2.500000e-01
  %196 = load i32, i32* %pos, align 4
  %idxprom299 = sext i32 %196 to i64
  %arrayidx300 = getelementptr inbounds [64 x float], [64 x float]* %subU, i64 0, i64 %idxprom299
  store float %mul298, float* %arrayidx300, align 4
  %197 = load i32, i32* %j, align 4
  %add301 = add nsw i32 %197, 0
  %idxprom302 = sext i32 %add301 to i64
  %arrayidx303 = getelementptr inbounds [256 x float], [256 x float]* %V, i64 0, i64 %idxprom302
  %198 = load float, float* %arrayidx303, align 4
  %199 = load i32, i32* %j, align 4
  %add304 = add nsw i32 %199, 1
  %idxprom305 = sext i32 %add304 to i64
  %arrayidx306 = getelementptr inbounds [256 x float], [256 x float]* %V, i64 0, i64 %idxprom305
  %200 = load float, float* %arrayidx306, align 4
  %add307 = fadd float %198, %200
  %201 = load i32, i32* %j, align 4
  %add308 = add nsw i32 %201, 16
  %idxprom309 = sext i32 %add308 to i64
  %arrayidx310 = getelementptr inbounds [256 x float], [256 x float]* %V, i64 0, i64 %idxprom309
  %202 = load float, float* %arrayidx310, align 4
  %add311 = fadd float %add307, %202
  %203 = load i32, i32* %j, align 4
  %add312 = add nsw i32 %203, 17
  %idxprom313 = sext i32 %add312 to i64
  %arrayidx314 = getelementptr inbounds [256 x float], [256 x float]* %V, i64 0, i64 %idxprom313
  %204 = load float, float* %arrayidx314, align 4
  %add315 = fadd float %add311, %204
  %mul316 = fmul float %add315, 2.500000e-01
  %205 = load i32, i32* %pos, align 4
  %idxprom317 = sext i32 %205 to i64
  %arrayidx318 = getelementptr inbounds [64 x float], [64 x float]* %subV, i64 0, i64 %idxprom317
  store float %mul316, float* %arrayidx318, align 4
  br label %for.inc319

for.inc319:                                       ; preds = %for.body279
  %206 = load i32, i32* %xx, align 4
  %inc320 = add nsw i32 %206, 1
  store i32 %inc320, i32* %xx, align 4
  %207 = load i32, i32* %pos, align 4
  %inc321 = add nsw i32 %207, 1
  store i32 %inc321, i32* %pos, align 4
  br label %for.cond276

for.end322:                                       ; preds = %for.cond276
  br label %for.inc323

for.inc323:                                       ; preds = %for.end322
  %208 = load i32, i32* %yy, align 4
  %inc324 = add nsw i32 %208, 1
  store i32 %inc324, i32* %yy, align 4
  br label %for.cond272

for.end325:                                       ; preds = %for.cond272
  %209 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %arraydecay326 = getelementptr inbounds [64 x float], [64 x float]* %subU, i64 0, i64 0
  %arraydecay327 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_UV, i64 0, i64 0
  %210 = load i32, i32* %DCU, align 4
  %call328 = call i32 @stbiw__jpg_processDU(%struct.stbi__write_context* %209, i32* %bitBuf, i32* %bitCnt, float* %arraydecay326, i32 8, float* %arraydecay327, i32 %210, [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* bitcast (<{ [12 x [2 x i16]], [244 x [2 x i16]] }>* @stbi_write_jpg_core.UVDC_HT to [256 x [2 x i16]]*), i64 0, i64 0), [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* @stbi_write_jpg_core.UVAC_HT, i64 0, i64 0))
  store i32 %call328, i32* %DCU, align 4
  %211 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %arraydecay329 = getelementptr inbounds [64 x float], [64 x float]* %subV, i64 0, i64 0
  %arraydecay330 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_UV, i64 0, i64 0
  %212 = load i32, i32* %DCV, align 4
  %call331 = call i32 @stbiw__jpg_processDU(%struct.stbi__write_context* %211, i32* %bitBuf, i32* %bitCnt, float* %arraydecay329, i32 8, float* %arraydecay330, i32 %212, [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* bitcast (<{ [12 x [2 x i16]], [244 x [2 x i16]] }>* @stbi_write_jpg_core.UVDC_HT to [256 x [2 x i16]]*), i64 0, i64 0), [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* @stbi_write_jpg_core.UVAC_HT, i64 0, i64 0))
  store i32 %call331, i32* %DCV, align 4
  br label %for.inc332

for.inc332:                                       ; preds = %for.end325
  %213 = load i32, i32* %x, align 4
  %add333 = add nsw i32 %213, 16
  store i32 %add333, i32* %x, align 4
  br label %for.cond180

for.end334:                                       ; preds = %for.cond180
  br label %for.inc335

for.inc335:                                       ; preds = %for.end334
  %214 = load i32, i32* %y, align 4
  %add336 = add nsw i32 %214, 16
  store i32 %add336, i32* %y, align 4
  br label %for.cond176

for.end337:                                       ; preds = %for.cond176
  br label %if.end443

if.else:                                          ; preds = %for.end108
  store i32 0, i32* %y, align 4
  br label %for.cond338

for.cond338:                                      ; preds = %for.inc440, %if.else
  %215 = load i32, i32* %y, align 4
  %216 = load i32, i32* %height.addr, align 4
  %cmp339 = icmp slt i32 %215, %216
  br i1 %cmp339, label %for.body341, label %for.end442

for.body341:                                      ; preds = %for.cond338
  store i32 0, i32* %x, align 4
  br label %for.cond342

for.cond342:                                      ; preds = %for.inc437, %for.body341
  %217 = load i32, i32* %x, align 4
  %218 = load i32, i32* %width.addr, align 4
  %cmp343 = icmp slt i32 %217, %218
  br i1 %cmp343, label %for.body345, label %for.end439

for.body345:                                      ; preds = %for.cond342
  %219 = load i32, i32* %y, align 4
  store i32 %219, i32* %row, align 4
  store i32 0, i32* %pos, align 4
  br label %for.cond349

for.cond349:                                      ; preds = %for.inc425, %for.body345
  %220 = load i32, i32* %row, align 4
  %221 = load i32, i32* %y, align 4
  %add350 = add nsw i32 %221, 8
  %cmp351 = icmp slt i32 %220, %add350
  br i1 %cmp351, label %for.body353, label %for.end427

for.body353:                                      ; preds = %for.cond349
  %222 = load i32, i32* %row, align 4
  %223 = load i32, i32* %height.addr, align 4
  %cmp355 = icmp slt i32 %222, %223
  br i1 %cmp355, label %cond.true357, label %cond.false358

cond.true357:                                     ; preds = %for.body353
  %224 = load i32, i32* %row, align 4
  br label %cond.end360

cond.false358:                                    ; preds = %for.body353
  %225 = load i32, i32* %height.addr, align 4
  %sub359 = sub nsw i32 %225, 1
  br label %cond.end360

cond.end360:                                      ; preds = %cond.false358, %cond.true357
  %cond361 = phi i32 [ %224, %cond.true357 ], [ %sub359, %cond.false358 ]
  store i32 %cond361, i32* %clamped_row354, align 4
  %226 = load i32, i32* @stbi__flip_vertically_on_write, align 4
  %tobool363 = icmp ne i32 %226, 0
  br i1 %tobool363, label %cond.true364, label %cond.false367

cond.true364:                                     ; preds = %cond.end360
  %227 = load i32, i32* %height.addr, align 4
  %sub365 = sub nsw i32 %227, 1
  %228 = load i32, i32* %clamped_row354, align 4
  %sub366 = sub nsw i32 %sub365, %228
  br label %cond.end368

cond.false367:                                    ; preds = %cond.end360
  %229 = load i32, i32* %clamped_row354, align 4
  br label %cond.end368

cond.end368:                                      ; preds = %cond.false367, %cond.true364
  %cond369 = phi i32 [ %sub366, %cond.true364 ], [ %229, %cond.false367 ]
  %230 = load i32, i32* %width.addr, align 4
  %mul370 = mul nsw i32 %cond369, %230
  %231 = load i32, i32* %comp.addr, align 4
  %mul371 = mul nsw i32 %mul370, %231
  store i32 %mul371, i32* %base_p362, align 4
  %232 = load i32, i32* %x, align 4
  store i32 %232, i32* %col, align 4
  br label %for.cond372

for.cond372:                                      ; preds = %for.inc421, %cond.end368
  %233 = load i32, i32* %col, align 4
  %234 = load i32, i32* %x, align 4
  %add373 = add nsw i32 %234, 8
  %cmp374 = icmp slt i32 %233, %add373
  br i1 %cmp374, label %for.body376, label %for.end424

for.body376:                                      ; preds = %for.cond372
  %235 = load i32, i32* %base_p362, align 4
  %236 = load i32, i32* %col, align 4
  %237 = load i32, i32* %width.addr, align 4
  %cmp378 = icmp slt i32 %236, %237
  br i1 %cmp378, label %cond.true380, label %cond.false381

cond.true380:                                     ; preds = %for.body376
  %238 = load i32, i32* %col, align 4
  br label %cond.end383

cond.false381:                                    ; preds = %for.body376
  %239 = load i32, i32* %width.addr, align 4
  %sub382 = sub nsw i32 %239, 1
  br label %cond.end383

cond.end383:                                      ; preds = %cond.false381, %cond.true380
  %cond384 = phi i32 [ %238, %cond.true380 ], [ %sub382, %cond.false381 ]
  %240 = load i32, i32* %comp.addr, align 4
  %mul385 = mul nsw i32 %cond384, %240
  %add386 = add nsw i32 %235, %mul385
  store i32 %add386, i32* %p377, align 4
  %241 = load i8*, i8** %dataR, align 8
  %242 = load i32, i32* %p377, align 4
  %idxprom388 = sext i32 %242 to i64
  %arrayidx389 = getelementptr inbounds i8, i8* %241, i64 %idxprom388
  %243 = load i8, i8* %arrayidx389, align 1
  %conv390 = uitofp i8 %243 to float
  store float %conv390, float* %r387, align 4
  %244 = load i8*, i8** %dataG, align 8
  %245 = load i32, i32* %p377, align 4
  %idxprom392 = sext i32 %245 to i64
  %arrayidx393 = getelementptr inbounds i8, i8* %244, i64 %idxprom392
  %246 = load i8, i8* %arrayidx393, align 1
  %conv394 = uitofp i8 %246 to float
  store float %conv394, float* %g391, align 4
  %247 = load i8*, i8** %dataB, align 8
  %248 = load i32, i32* %p377, align 4
  %idxprom396 = sext i32 %248 to i64
  %arrayidx397 = getelementptr inbounds i8, i8* %247, i64 %idxprom396
  %249 = load i8, i8* %arrayidx397, align 1
  %conv398 = uitofp i8 %249 to float
  store float %conv398, float* %b395, align 4
  %250 = load float, float* %r387, align 4
  %mul399 = fmul float 0x3FD322D0E0000000, %250
  %251 = load float, float* %g391, align 4
  %mul400 = fmul float 0x3FE2C8B440000000, %251
  %add401 = fadd float %mul399, %mul400
  %252 = load float, float* %b395, align 4
  %mul402 = fmul float 0x3FBD2F1AA0000000, %252
  %add403 = fadd float %add401, %mul402
  %sub404 = fsub float %add403, 1.280000e+02
  %253 = load i32, i32* %pos, align 4
  %idxprom405 = sext i32 %253 to i64
  %arrayidx406 = getelementptr inbounds [64 x float], [64 x float]* %Y346, i64 0, i64 %idxprom405
  store float %sub404, float* %arrayidx406, align 4
  %254 = load float, float* %r387, align 4
  %mul407 = fmul float 0xBFC59945C0000000, %254
  %255 = load float, float* %g391, align 4
  %mul408 = fmul float 0x3FD5335D20000000, %255
  %sub409 = fsub float %mul407, %mul408
  %256 = load float, float* %b395, align 4
  %mul410 = fmul float 5.000000e-01, %256
  %add411 = fadd float %sub409, %mul410
  %257 = load i32, i32* %pos, align 4
  %idxprom412 = sext i32 %257 to i64
  %arrayidx413 = getelementptr inbounds [64 x float], [64 x float]* %U347, i64 0, i64 %idxprom412
  store float %add411, float* %arrayidx413, align 4
  %258 = load float, float* %r387, align 4
  %mul414 = fmul float 5.000000e-01, %258
  %259 = load float, float* %g391, align 4
  %mul415 = fmul float 0x3FDACBD120000000, %259
  %sub416 = fsub float %mul414, %mul415
  %260 = load float, float* %b395, align 4
  %mul417 = fmul float 0x3FB4D0BB60000000, %260
  %sub418 = fsub float %sub416, %mul417
  %261 = load i32, i32* %pos, align 4
  %idxprom419 = sext i32 %261 to i64
  %arrayidx420 = getelementptr inbounds [64 x float], [64 x float]* %V348, i64 0, i64 %idxprom419
  store float %sub418, float* %arrayidx420, align 4
  br label %for.inc421

for.inc421:                                       ; preds = %cond.end383
  %262 = load i32, i32* %col, align 4
  %inc422 = add nsw i32 %262, 1
  store i32 %inc422, i32* %col, align 4
  %263 = load i32, i32* %pos, align 4
  %inc423 = add nsw i32 %263, 1
  store i32 %inc423, i32* %pos, align 4
  br label %for.cond372

for.end424:                                       ; preds = %for.cond372
  br label %for.inc425

for.inc425:                                       ; preds = %for.end424
  %264 = load i32, i32* %row, align 4
  %inc426 = add nsw i32 %264, 1
  store i32 %inc426, i32* %row, align 4
  br label %for.cond349

for.end427:                                       ; preds = %for.cond349
  %265 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %arraydecay428 = getelementptr inbounds [64 x float], [64 x float]* %Y346, i64 0, i64 0
  %arraydecay429 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_Y, i64 0, i64 0
  %266 = load i32, i32* %DCY, align 4
  %call430 = call i32 @stbiw__jpg_processDU(%struct.stbi__write_context* %265, i32* %bitBuf, i32* %bitCnt, float* %arraydecay428, i32 8, float* %arraydecay429, i32 %266, [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* bitcast (<{ [12 x [2 x i16]], [244 x [2 x i16]] }>* @stbi_write_jpg_core.YDC_HT to [256 x [2 x i16]]*), i64 0, i64 0), [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* @stbi_write_jpg_core.YAC_HT, i64 0, i64 0))
  store i32 %call430, i32* %DCY, align 4
  %267 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %arraydecay431 = getelementptr inbounds [64 x float], [64 x float]* %U347, i64 0, i64 0
  %arraydecay432 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_UV, i64 0, i64 0
  %268 = load i32, i32* %DCU, align 4
  %call433 = call i32 @stbiw__jpg_processDU(%struct.stbi__write_context* %267, i32* %bitBuf, i32* %bitCnt, float* %arraydecay431, i32 8, float* %arraydecay432, i32 %268, [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* bitcast (<{ [12 x [2 x i16]], [244 x [2 x i16]] }>* @stbi_write_jpg_core.UVDC_HT to [256 x [2 x i16]]*), i64 0, i64 0), [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* @stbi_write_jpg_core.UVAC_HT, i64 0, i64 0))
  store i32 %call433, i32* %DCU, align 4
  %269 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %arraydecay434 = getelementptr inbounds [64 x float], [64 x float]* %V348, i64 0, i64 0
  %arraydecay435 = getelementptr inbounds [64 x float], [64 x float]* %fdtbl_UV, i64 0, i64 0
  %270 = load i32, i32* %DCV, align 4
  %call436 = call i32 @stbiw__jpg_processDU(%struct.stbi__write_context* %269, i32* %bitBuf, i32* %bitCnt, float* %arraydecay434, i32 8, float* %arraydecay435, i32 %270, [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* bitcast (<{ [12 x [2 x i16]], [244 x [2 x i16]] }>* @stbi_write_jpg_core.UVDC_HT to [256 x [2 x i16]]*), i64 0, i64 0), [2 x i16]* getelementptr inbounds ([256 x [2 x i16]], [256 x [2 x i16]]* @stbi_write_jpg_core.UVAC_HT, i64 0, i64 0))
  store i32 %call436, i32* %DCV, align 4
  br label %for.inc437

for.inc437:                                       ; preds = %for.end427
  %271 = load i32, i32* %x, align 4
  %add438 = add nsw i32 %271, 8
  store i32 %add438, i32* %x, align 4
  br label %for.cond342

for.end439:                                       ; preds = %for.cond342
  br label %for.inc440

for.inc440:                                       ; preds = %for.end439
  %272 = load i32, i32* %y, align 4
  %add441 = add nsw i32 %272, 8
  store i32 %add441, i32* %y, align 4
  br label %for.cond338

for.end442:                                       ; preds = %for.cond338
  br label %if.end443

if.end443:                                        ; preds = %for.end442, %for.end337
  %273 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__jpg_writeBits(%struct.stbi__write_context* %273, i32* %bitBuf, i32* %bitCnt, i16* getelementptr inbounds ([2 x i16], [2 x i16]* @stbi_write_jpg_core.fillBits, i64 0, i64 0))
  %274 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__putc(%struct.stbi__write_context* %274, i8 zeroext -1)
  %275 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__putc(%struct.stbi__write_context* %275, i8 zeroext -39)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end443, %if.then
  %276 = load i32, i32* %retval, align 4
  ret i32 %276
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__putc(%struct.stbi__write_context* %s, i8 zeroext %c) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %c.addr = alloca i8, align 1
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i8 %c, i8* %c.addr, align 1
  %0 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %func = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %0, i32 0, i32 0
  %1 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %func, align 8
  %2 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %context = getelementptr inbounds %struct.stbi__write_context, %struct.stbi__write_context* %2, i32 0, i32 1
  %3 = load i8*, i8** %context, align 8
  call void %1(i8* %3, i8* %c.addr, i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @stbiw__jpg_processDU(%struct.stbi__write_context* %s, i32* %bitBuf, i32* %bitCnt, float* %CDU, i32 %du_stride, float* %fdtbl, i32 %DC, [2 x i16]* %HTDC, [2 x i16]* %HTAC) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %bitBuf.addr = alloca i32*, align 8
  %bitCnt.addr = alloca i32*, align 8
  %CDU.addr = alloca float*, align 8
  %du_stride.addr = alloca i32, align 4
  %fdtbl.addr = alloca float*, align 8
  %DC.addr = alloca i32, align 4
  %HTDC.addr = alloca [2 x i16]*, align 8
  %HTAC.addr = alloca [2 x i16]*, align 8
  %EOB = alloca [2 x i16], align 2
  %M16zeroes = alloca [2 x i16], align 2
  %dataOff = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %diff = alloca i32, align 4
  %end0pos = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %DU = alloca [64 x i32], align 16
  %v = alloca float, align 4
  %bits = alloca [2 x i16], align 2
  %startpos = alloca i32, align 4
  %nrzeroes = alloca i32, align 4
  %bits123 = alloca [2 x i16], align 2
  %lng = alloca i32, align 4
  %nrmarker = alloca i32, align 4
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32* %bitBuf, i32** %bitBuf.addr, align 8
  store i32* %bitCnt, i32** %bitCnt.addr, align 8
  store float* %CDU, float** %CDU.addr, align 8
  store i32 %du_stride, i32* %du_stride.addr, align 4
  store float* %fdtbl, float** %fdtbl.addr, align 8
  store i32 %DC, i32* %DC.addr, align 4
  store [2 x i16]* %HTDC, [2 x i16]** %HTDC.addr, align 8
  store [2 x i16]* %HTAC, [2 x i16]** %HTAC.addr, align 8
  %arrayinit.begin = getelementptr inbounds [2 x i16], [2 x i16]* %EOB, i64 0, i64 0
  %0 = load [2 x i16]*, [2 x i16]** %HTAC.addr, align 8
  %arrayidx = getelementptr inbounds [2 x i16], [2 x i16]* %0, i64 0
  %arrayidx1 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx, i64 0, i64 0
  %1 = load i16, i16* %arrayidx1, align 2
  store i16 %1, i16* %arrayinit.begin, align 2
  %arrayinit.element = getelementptr inbounds i16, i16* %arrayinit.begin, i64 1
  %2 = load [2 x i16]*, [2 x i16]** %HTAC.addr, align 8
  %arrayidx2 = getelementptr inbounds [2 x i16], [2 x i16]* %2, i64 0
  %arrayidx3 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx2, i64 0, i64 1
  %3 = load i16, i16* %arrayidx3, align 2
  store i16 %3, i16* %arrayinit.element, align 2
  %arrayinit.begin4 = getelementptr inbounds [2 x i16], [2 x i16]* %M16zeroes, i64 0, i64 0
  %4 = load [2 x i16]*, [2 x i16]** %HTAC.addr, align 8
  %arrayidx5 = getelementptr inbounds [2 x i16], [2 x i16]* %4, i64 240
  %arrayidx6 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx5, i64 0, i64 0
  %5 = load i16, i16* %arrayidx6, align 2
  store i16 %5, i16* %arrayinit.begin4, align 2
  %arrayinit.element7 = getelementptr inbounds i16, i16* %arrayinit.begin4, i64 1
  %6 = load [2 x i16]*, [2 x i16]** %HTAC.addr, align 8
  %arrayidx8 = getelementptr inbounds [2 x i16], [2 x i16]* %6, i64 240
  %arrayidx9 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx8, i64 0, i64 1
  %7 = load i16, i16* %arrayidx9, align 2
  store i16 %7, i16* %arrayinit.element7, align 2
  store i32 0, i32* %dataOff, align 4
  %8 = load i32, i32* %du_stride.addr, align 4
  %mul = mul nsw i32 %8, 8
  store i32 %mul, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %dataOff, align 4
  %10 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load float*, float** %CDU.addr, align 8
  %12 = load i32, i32* %dataOff, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx10 = getelementptr inbounds float, float* %11, i64 %idxprom
  %13 = load float*, float** %CDU.addr, align 8
  %14 = load i32, i32* %dataOff, align 4
  %add = add nsw i32 %14, 1
  %idxprom11 = sext i32 %add to i64
  %arrayidx12 = getelementptr inbounds float, float* %13, i64 %idxprom11
  %15 = load float*, float** %CDU.addr, align 8
  %16 = load i32, i32* %dataOff, align 4
  %add13 = add nsw i32 %16, 2
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds float, float* %15, i64 %idxprom14
  %17 = load float*, float** %CDU.addr, align 8
  %18 = load i32, i32* %dataOff, align 4
  %add16 = add nsw i32 %18, 3
  %idxprom17 = sext i32 %add16 to i64
  %arrayidx18 = getelementptr inbounds float, float* %17, i64 %idxprom17
  %19 = load float*, float** %CDU.addr, align 8
  %20 = load i32, i32* %dataOff, align 4
  %add19 = add nsw i32 %20, 4
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds float, float* %19, i64 %idxprom20
  %21 = load float*, float** %CDU.addr, align 8
  %22 = load i32, i32* %dataOff, align 4
  %add22 = add nsw i32 %22, 5
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds float, float* %21, i64 %idxprom23
  %23 = load float*, float** %CDU.addr, align 8
  %24 = load i32, i32* %dataOff, align 4
  %add25 = add nsw i32 %24, 6
  %idxprom26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds float, float* %23, i64 %idxprom26
  %25 = load float*, float** %CDU.addr, align 8
  %26 = load i32, i32* %dataOff, align 4
  %add28 = add nsw i32 %26, 7
  %idxprom29 = sext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds float, float* %25, i64 %idxprom29
  call void @stbiw__jpg_DCT(float* %arrayidx10, float* %arrayidx12, float* %arrayidx15, float* %arrayidx18, float* %arrayidx21, float* %arrayidx24, float* %arrayidx27, float* %arrayidx30)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %du_stride.addr, align 4
  %28 = load i32, i32* %dataOff, align 4
  %add31 = add nsw i32 %28, %27
  store i32 %add31, i32* %dataOff, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %dataOff, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc64, %for.end
  %29 = load i32, i32* %dataOff, align 4
  %cmp33 = icmp slt i32 %29, 8
  br i1 %cmp33, label %for.body34, label %for.end65

for.body34:                                       ; preds = %for.cond32
  %30 = load float*, float** %CDU.addr, align 8
  %31 = load i32, i32* %dataOff, align 4
  %idxprom35 = sext i32 %31 to i64
  %arrayidx36 = getelementptr inbounds float, float* %30, i64 %idxprom35
  %32 = load float*, float** %CDU.addr, align 8
  %33 = load i32, i32* %dataOff, align 4
  %34 = load i32, i32* %du_stride.addr, align 4
  %add37 = add nsw i32 %33, %34
  %idxprom38 = sext i32 %add37 to i64
  %arrayidx39 = getelementptr inbounds float, float* %32, i64 %idxprom38
  %35 = load float*, float** %CDU.addr, align 8
  %36 = load i32, i32* %dataOff, align 4
  %37 = load i32, i32* %du_stride.addr, align 4
  %mul40 = mul nsw i32 %37, 2
  %add41 = add nsw i32 %36, %mul40
  %idxprom42 = sext i32 %add41 to i64
  %arrayidx43 = getelementptr inbounds float, float* %35, i64 %idxprom42
  %38 = load float*, float** %CDU.addr, align 8
  %39 = load i32, i32* %dataOff, align 4
  %40 = load i32, i32* %du_stride.addr, align 4
  %mul44 = mul nsw i32 %40, 3
  %add45 = add nsw i32 %39, %mul44
  %idxprom46 = sext i32 %add45 to i64
  %arrayidx47 = getelementptr inbounds float, float* %38, i64 %idxprom46
  %41 = load float*, float** %CDU.addr, align 8
  %42 = load i32, i32* %dataOff, align 4
  %43 = load i32, i32* %du_stride.addr, align 4
  %mul48 = mul nsw i32 %43, 4
  %add49 = add nsw i32 %42, %mul48
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds float, float* %41, i64 %idxprom50
  %44 = load float*, float** %CDU.addr, align 8
  %45 = load i32, i32* %dataOff, align 4
  %46 = load i32, i32* %du_stride.addr, align 4
  %mul52 = mul nsw i32 %46, 5
  %add53 = add nsw i32 %45, %mul52
  %idxprom54 = sext i32 %add53 to i64
  %arrayidx55 = getelementptr inbounds float, float* %44, i64 %idxprom54
  %47 = load float*, float** %CDU.addr, align 8
  %48 = load i32, i32* %dataOff, align 4
  %49 = load i32, i32* %du_stride.addr, align 4
  %mul56 = mul nsw i32 %49, 6
  %add57 = add nsw i32 %48, %mul56
  %idxprom58 = sext i32 %add57 to i64
  %arrayidx59 = getelementptr inbounds float, float* %47, i64 %idxprom58
  %50 = load float*, float** %CDU.addr, align 8
  %51 = load i32, i32* %dataOff, align 4
  %52 = load i32, i32* %du_stride.addr, align 4
  %mul60 = mul nsw i32 %52, 7
  %add61 = add nsw i32 %51, %mul60
  %idxprom62 = sext i32 %add61 to i64
  %arrayidx63 = getelementptr inbounds float, float* %50, i64 %idxprom62
  call void @stbiw__jpg_DCT(float* %arrayidx36, float* %arrayidx39, float* %arrayidx43, float* %arrayidx47, float* %arrayidx51, float* %arrayidx55, float* %arrayidx59, float* %arrayidx63)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body34
  %53 = load i32, i32* %dataOff, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %dataOff, align 4
  br label %for.cond32

for.end65:                                        ; preds = %for.cond32
  store i32 0, i32* %y, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc89, %for.end65
  %54 = load i32, i32* %y, align 4
  %cmp67 = icmp slt i32 %54, 8
  br i1 %cmp67, label %for.body68, label %for.end91

for.body68:                                       ; preds = %for.cond66
  store i32 0, i32* %x, align 4
  br label %for.cond69

for.cond69:                                       ; preds = %for.inc85, %for.body68
  %55 = load i32, i32* %x, align 4
  %cmp70 = icmp slt i32 %55, 8
  br i1 %cmp70, label %for.body71, label %for.end88

for.body71:                                       ; preds = %for.cond69
  %56 = load i32, i32* %y, align 4
  %57 = load i32, i32* %du_stride.addr, align 4
  %mul72 = mul nsw i32 %56, %57
  %58 = load i32, i32* %x, align 4
  %add73 = add nsw i32 %mul72, %58
  store i32 %add73, i32* %i, align 4
  %59 = load float*, float** %CDU.addr, align 8
  %60 = load i32, i32* %i, align 4
  %idxprom74 = sext i32 %60 to i64
  %arrayidx75 = getelementptr inbounds float, float* %59, i64 %idxprom74
  %61 = load float, float* %arrayidx75, align 4
  %62 = load float*, float** %fdtbl.addr, align 8
  %63 = load i32, i32* %j, align 4
  %idxprom76 = sext i32 %63 to i64
  %arrayidx77 = getelementptr inbounds float, float* %62, i64 %idxprom76
  %64 = load float, float* %arrayidx77, align 4
  %mul78 = fmul float %61, %64
  store float %mul78, float* %v, align 4
  %65 = load float, float* %v, align 4
  %cmp79 = fcmp olt float %65, 0.000000e+00
  br i1 %cmp79, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body71
  %66 = load float, float* %v, align 4
  %sub = fsub float %66, 5.000000e-01
  br label %cond.end

cond.false:                                       ; preds = %for.body71
  %67 = load float, float* %v, align 4
  %add80 = fadd float %67, 5.000000e-01
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %sub, %cond.true ], [ %add80, %cond.false ]
  %conv = fptosi float %cond to i32
  %68 = load i32, i32* %j, align 4
  %idxprom81 = sext i32 %68 to i64
  %arrayidx82 = getelementptr inbounds [64 x i8], [64 x i8]* @stbiw__jpg_ZigZag, i64 0, i64 %idxprom81
  %69 = load i8, i8* %arrayidx82, align 1
  %idxprom83 = zext i8 %69 to i64
  %arrayidx84 = getelementptr inbounds [64 x i32], [64 x i32]* %DU, i64 0, i64 %idxprom83
  store i32 %conv, i32* %arrayidx84, align 4
  br label %for.inc85

for.inc85:                                        ; preds = %cond.end
  %70 = load i32, i32* %x, align 4
  %inc86 = add nsw i32 %70, 1
  store i32 %inc86, i32* %x, align 4
  %71 = load i32, i32* %j, align 4
  %inc87 = add nsw i32 %71, 1
  store i32 %inc87, i32* %j, align 4
  br label %for.cond69

for.end88:                                        ; preds = %for.cond69
  br label %for.inc89

for.inc89:                                        ; preds = %for.end88
  %72 = load i32, i32* %y, align 4
  %inc90 = add nsw i32 %72, 1
  store i32 %inc90, i32* %y, align 4
  br label %for.cond66

for.end91:                                        ; preds = %for.cond66
  %arrayidx92 = getelementptr inbounds [64 x i32], [64 x i32]* %DU, i64 0, i64 0
  %73 = load i32, i32* %arrayidx92, align 16
  %74 = load i32, i32* %DC.addr, align 4
  %sub93 = sub nsw i32 %73, %74
  store i32 %sub93, i32* %diff, align 4
  %75 = load i32, i32* %diff, align 4
  %cmp94 = icmp eq i32 %75, 0
  br i1 %cmp94, label %if.then, label %if.else

if.then:                                          ; preds = %for.end91
  %76 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %77 = load i32*, i32** %bitBuf.addr, align 8
  %78 = load i32*, i32** %bitCnt.addr, align 8
  %79 = load [2 x i16]*, [2 x i16]** %HTDC.addr, align 8
  %arrayidx96 = getelementptr inbounds [2 x i16], [2 x i16]* %79, i64 0
  %arraydecay = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx96, i64 0, i64 0
  call void @stbiw__jpg_writeBits(%struct.stbi__write_context* %76, i32* %77, i32* %78, i16* %arraydecay)
  br label %if.end

if.else:                                          ; preds = %for.end91
  %80 = load i32, i32* %diff, align 4
  %arraydecay97 = getelementptr inbounds [2 x i16], [2 x i16]* %bits, i64 0, i64 0
  call void @stbiw__jpg_calcBits(i32 %80, i16* %arraydecay97)
  %81 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %82 = load i32*, i32** %bitBuf.addr, align 8
  %83 = load i32*, i32** %bitCnt.addr, align 8
  %84 = load [2 x i16]*, [2 x i16]** %HTDC.addr, align 8
  %arrayidx98 = getelementptr inbounds [2 x i16], [2 x i16]* %bits, i64 0, i64 1
  %85 = load i16, i16* %arrayidx98, align 2
  %idxprom99 = zext i16 %85 to i64
  %arrayidx100 = getelementptr inbounds [2 x i16], [2 x i16]* %84, i64 %idxprom99
  %arraydecay101 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx100, i64 0, i64 0
  call void @stbiw__jpg_writeBits(%struct.stbi__write_context* %81, i32* %82, i32* %83, i16* %arraydecay101)
  %86 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %87 = load i32*, i32** %bitBuf.addr, align 8
  %88 = load i32*, i32** %bitCnt.addr, align 8
  %arraydecay102 = getelementptr inbounds [2 x i16], [2 x i16]* %bits, i64 0, i64 0
  call void @stbiw__jpg_writeBits(%struct.stbi__write_context* %86, i32* %87, i32* %88, i16* %arraydecay102)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 63, i32* %end0pos, align 4
  br label %for.cond103

for.cond103:                                      ; preds = %for.inc111, %if.end
  %89 = load i32, i32* %end0pos, align 4
  %cmp104 = icmp sgt i32 %89, 0
  br i1 %cmp104, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond103
  %90 = load i32, i32* %end0pos, align 4
  %idxprom106 = sext i32 %90 to i64
  %arrayidx107 = getelementptr inbounds [64 x i32], [64 x i32]* %DU, i64 0, i64 %idxprom106
  %91 = load i32, i32* %arrayidx107, align 4
  %cmp108 = icmp eq i32 %91, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond103
  %92 = phi i1 [ false, %for.cond103 ], [ %cmp108, %land.rhs ]
  br i1 %92, label %for.body110, label %for.end112

for.body110:                                      ; preds = %land.end
  br label %for.inc111

for.inc111:                                       ; preds = %for.body110
  %93 = load i32, i32* %end0pos, align 4
  %dec = add nsw i32 %93, -1
  store i32 %dec, i32* %end0pos, align 4
  br label %for.cond103

for.end112:                                       ; preds = %land.end
  %94 = load i32, i32* %end0pos, align 4
  %cmp113 = icmp eq i32 %94, 0
  br i1 %cmp113, label %if.then115, label %if.end118

if.then115:                                       ; preds = %for.end112
  %95 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %96 = load i32*, i32** %bitBuf.addr, align 8
  %97 = load i32*, i32** %bitCnt.addr, align 8
  %arraydecay116 = getelementptr inbounds [2 x i16], [2 x i16]* %EOB, i64 0, i64 0
  call void @stbiw__jpg_writeBits(%struct.stbi__write_context* %95, i32* %96, i32* %97, i16* %arraydecay116)
  %arrayidx117 = getelementptr inbounds [64 x i32], [64 x i32]* %DU, i64 0, i64 0
  %98 = load i32, i32* %arrayidx117, align 16
  store i32 %98, i32* %retval, align 4
  br label %return

if.end118:                                        ; preds = %for.end112
  store i32 1, i32* %i, align 4
  br label %for.cond119

for.cond119:                                      ; preds = %for.inc160, %if.end118
  %99 = load i32, i32* %i, align 4
  %100 = load i32, i32* %end0pos, align 4
  %cmp120 = icmp sle i32 %99, %100
  br i1 %cmp120, label %for.body122, label %for.end162

for.body122:                                      ; preds = %for.cond119
  %101 = load i32, i32* %i, align 4
  store i32 %101, i32* %startpos, align 4
  br label %for.cond124

for.cond124:                                      ; preds = %for.inc134, %for.body122
  %102 = load i32, i32* %i, align 4
  %idxprom125 = sext i32 %102 to i64
  %arrayidx126 = getelementptr inbounds [64 x i32], [64 x i32]* %DU, i64 0, i64 %idxprom125
  %103 = load i32, i32* %arrayidx126, align 4
  %cmp127 = icmp eq i32 %103, 0
  br i1 %cmp127, label %land.rhs129, label %land.end132

land.rhs129:                                      ; preds = %for.cond124
  %104 = load i32, i32* %i, align 4
  %105 = load i32, i32* %end0pos, align 4
  %cmp130 = icmp sle i32 %104, %105
  br label %land.end132

land.end132:                                      ; preds = %land.rhs129, %for.cond124
  %106 = phi i1 [ false, %for.cond124 ], [ %cmp130, %land.rhs129 ]
  br i1 %106, label %for.body133, label %for.end136

for.body133:                                      ; preds = %land.end132
  br label %for.inc134

for.inc134:                                       ; preds = %for.body133
  %107 = load i32, i32* %i, align 4
  %inc135 = add nsw i32 %107, 1
  store i32 %inc135, i32* %i, align 4
  br label %for.cond124

for.end136:                                       ; preds = %land.end132
  %108 = load i32, i32* %i, align 4
  %109 = load i32, i32* %startpos, align 4
  %sub137 = sub nsw i32 %108, %109
  store i32 %sub137, i32* %nrzeroes, align 4
  %110 = load i32, i32* %nrzeroes, align 4
  %cmp138 = icmp sge i32 %110, 16
  br i1 %cmp138, label %if.then140, label %if.end149

if.then140:                                       ; preds = %for.end136
  %111 = load i32, i32* %nrzeroes, align 4
  %shr = ashr i32 %111, 4
  store i32 %shr, i32* %lng, align 4
  store i32 1, i32* %nrmarker, align 4
  br label %for.cond141

for.cond141:                                      ; preds = %for.inc146, %if.then140
  %112 = load i32, i32* %nrmarker, align 4
  %113 = load i32, i32* %lng, align 4
  %cmp142 = icmp sle i32 %112, %113
  br i1 %cmp142, label %for.body144, label %for.end148

for.body144:                                      ; preds = %for.cond141
  %114 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %115 = load i32*, i32** %bitBuf.addr, align 8
  %116 = load i32*, i32** %bitCnt.addr, align 8
  %arraydecay145 = getelementptr inbounds [2 x i16], [2 x i16]* %M16zeroes, i64 0, i64 0
  call void @stbiw__jpg_writeBits(%struct.stbi__write_context* %114, i32* %115, i32* %116, i16* %arraydecay145)
  br label %for.inc146

for.inc146:                                       ; preds = %for.body144
  %117 = load i32, i32* %nrmarker, align 4
  %inc147 = add nsw i32 %117, 1
  store i32 %inc147, i32* %nrmarker, align 4
  br label %for.cond141

for.end148:                                       ; preds = %for.cond141
  %118 = load i32, i32* %nrzeroes, align 4
  %and = and i32 %118, 15
  store i32 %and, i32* %nrzeroes, align 4
  br label %if.end149

if.end149:                                        ; preds = %for.end148, %for.end136
  %119 = load i32, i32* %i, align 4
  %idxprom150 = sext i32 %119 to i64
  %arrayidx151 = getelementptr inbounds [64 x i32], [64 x i32]* %DU, i64 0, i64 %idxprom150
  %120 = load i32, i32* %arrayidx151, align 4
  %arraydecay152 = getelementptr inbounds [2 x i16], [2 x i16]* %bits123, i64 0, i64 0
  call void @stbiw__jpg_calcBits(i32 %120, i16* %arraydecay152)
  %121 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %122 = load i32*, i32** %bitBuf.addr, align 8
  %123 = load i32*, i32** %bitCnt.addr, align 8
  %124 = load [2 x i16]*, [2 x i16]** %HTAC.addr, align 8
  %125 = load i32, i32* %nrzeroes, align 4
  %shl = shl i32 %125, 4
  %arrayidx153 = getelementptr inbounds [2 x i16], [2 x i16]* %bits123, i64 0, i64 1
  %126 = load i16, i16* %arrayidx153, align 2
  %conv154 = zext i16 %126 to i32
  %add155 = add nsw i32 %shl, %conv154
  %idxprom156 = sext i32 %add155 to i64
  %arrayidx157 = getelementptr inbounds [2 x i16], [2 x i16]* %124, i64 %idxprom156
  %arraydecay158 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx157, i64 0, i64 0
  call void @stbiw__jpg_writeBits(%struct.stbi__write_context* %121, i32* %122, i32* %123, i16* %arraydecay158)
  %127 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %128 = load i32*, i32** %bitBuf.addr, align 8
  %129 = load i32*, i32** %bitCnt.addr, align 8
  %arraydecay159 = getelementptr inbounds [2 x i16], [2 x i16]* %bits123, i64 0, i64 0
  call void @stbiw__jpg_writeBits(%struct.stbi__write_context* %127, i32* %128, i32* %129, i16* %arraydecay159)
  br label %for.inc160

for.inc160:                                       ; preds = %if.end149
  %130 = load i32, i32* %i, align 4
  %inc161 = add nsw i32 %130, 1
  store i32 %inc161, i32* %i, align 4
  br label %for.cond119

for.end162:                                       ; preds = %for.cond119
  %131 = load i32, i32* %end0pos, align 4
  %cmp163 = icmp ne i32 %131, 63
  br i1 %cmp163, label %if.then165, label %if.end167

if.then165:                                       ; preds = %for.end162
  %132 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %133 = load i32*, i32** %bitBuf.addr, align 8
  %134 = load i32*, i32** %bitCnt.addr, align 8
  %arraydecay166 = getelementptr inbounds [2 x i16], [2 x i16]* %EOB, i64 0, i64 0
  call void @stbiw__jpg_writeBits(%struct.stbi__write_context* %132, i32* %133, i32* %134, i16* %arraydecay166)
  br label %if.end167

if.end167:                                        ; preds = %if.then165, %for.end162
  %arrayidx168 = getelementptr inbounds [64 x i32], [64 x i32]* %DU, i64 0, i64 0
  %135 = load i32, i32* %arrayidx168, align 16
  store i32 %135, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end167, %if.then115
  %136 = load i32, i32* %retval, align 4
  ret i32 %136
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__jpg_writeBits(%struct.stbi__write_context* %s, i32* %bitBufP, i32* %bitCntP, i16* %bs) #0 {
entry:
  %s.addr = alloca %struct.stbi__write_context*, align 8
  %bitBufP.addr = alloca i32*, align 8
  %bitCntP.addr = alloca i32*, align 8
  %bs.addr = alloca i16*, align 8
  %bitBuf = alloca i32, align 4
  %bitCnt = alloca i32, align 4
  %c = alloca i8, align 1
  store %struct.stbi__write_context* %s, %struct.stbi__write_context** %s.addr, align 8
  store i32* %bitBufP, i32** %bitBufP.addr, align 8
  store i32* %bitCntP, i32** %bitCntP.addr, align 8
  store i16* %bs, i16** %bs.addr, align 8
  %0 = load i32*, i32** %bitBufP.addr, align 8
  %1 = load i32, i32* %0, align 4
  store i32 %1, i32* %bitBuf, align 4
  %2 = load i32*, i32** %bitCntP.addr, align 8
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %bitCnt, align 4
  %4 = load i16*, i16** %bs.addr, align 8
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 1
  %5 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %5 to i32
  %6 = load i32, i32* %bitCnt, align 4
  %add = add nsw i32 %6, %conv
  store i32 %add, i32* %bitCnt, align 4
  %7 = load i16*, i16** %bs.addr, align 8
  %arrayidx1 = getelementptr inbounds i16, i16* %7, i64 0
  %8 = load i16, i16* %arrayidx1, align 2
  %conv2 = zext i16 %8 to i32
  %9 = load i32, i32* %bitCnt, align 4
  %sub = sub nsw i32 24, %9
  %shl = shl i32 %conv2, %sub
  %10 = load i32, i32* %bitBuf, align 4
  %or = or i32 %10, %shl
  store i32 %or, i32* %bitBuf, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %11 = load i32, i32* %bitCnt, align 4
  %cmp = icmp sge i32 %11, 8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load i32, i32* %bitBuf, align 4
  %shr = ashr i32 %12, 16
  %and = and i32 %shr, 255
  %conv4 = trunc i32 %and to i8
  store i8 %conv4, i8* %c, align 1
  %13 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  %14 = load i8, i8* %c, align 1
  call void @stbiw__putc(%struct.stbi__write_context* %13, i8 zeroext %14)
  %15 = load i8, i8* %c, align 1
  %conv5 = zext i8 %15 to i32
  %cmp6 = icmp eq i32 %conv5, 255
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %16 = load %struct.stbi__write_context*, %struct.stbi__write_context** %s.addr, align 8
  call void @stbiw__putc(%struct.stbi__write_context* %16, i8 zeroext 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %17 = load i32, i32* %bitBuf, align 4
  %shl8 = shl i32 %17, 8
  store i32 %shl8, i32* %bitBuf, align 4
  %18 = load i32, i32* %bitCnt, align 4
  %sub9 = sub nsw i32 %18, 8
  store i32 %sub9, i32* %bitCnt, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %19 = load i32, i32* %bitBuf, align 4
  %20 = load i32*, i32** %bitBufP.addr, align 8
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* %bitCnt, align 4
  %22 = load i32*, i32** %bitCntP.addr, align 8
  store i32 %21, i32* %22, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__jpg_DCT(float* %d0p, float* %d1p, float* %d2p, float* %d3p, float* %d4p, float* %d5p, float* %d6p, float* %d7p) #0 {
entry:
  %d0p.addr = alloca float*, align 8
  %d1p.addr = alloca float*, align 8
  %d2p.addr = alloca float*, align 8
  %d3p.addr = alloca float*, align 8
  %d4p.addr = alloca float*, align 8
  %d5p.addr = alloca float*, align 8
  %d6p.addr = alloca float*, align 8
  %d7p.addr = alloca float*, align 8
  %d0 = alloca float, align 4
  %d1 = alloca float, align 4
  %d2 = alloca float, align 4
  %d3 = alloca float, align 4
  %d4 = alloca float, align 4
  %d5 = alloca float, align 4
  %d6 = alloca float, align 4
  %d7 = alloca float, align 4
  %z1 = alloca float, align 4
  %z2 = alloca float, align 4
  %z3 = alloca float, align 4
  %z4 = alloca float, align 4
  %z5 = alloca float, align 4
  %z11 = alloca float, align 4
  %z13 = alloca float, align 4
  %tmp0 = alloca float, align 4
  %tmp7 = alloca float, align 4
  %tmp1 = alloca float, align 4
  %tmp6 = alloca float, align 4
  %tmp2 = alloca float, align 4
  %tmp5 = alloca float, align 4
  %tmp3 = alloca float, align 4
  %tmp4 = alloca float, align 4
  %tmp10 = alloca float, align 4
  %tmp13 = alloca float, align 4
  %tmp11 = alloca float, align 4
  %tmp12 = alloca float, align 4
  store float* %d0p, float** %d0p.addr, align 8
  store float* %d1p, float** %d1p.addr, align 8
  store float* %d2p, float** %d2p.addr, align 8
  store float* %d3p, float** %d3p.addr, align 8
  store float* %d4p, float** %d4p.addr, align 8
  store float* %d5p, float** %d5p.addr, align 8
  store float* %d6p, float** %d6p.addr, align 8
  store float* %d7p, float** %d7p.addr, align 8
  %0 = load float*, float** %d0p.addr, align 8
  %1 = load float, float* %0, align 4
  store float %1, float* %d0, align 4
  %2 = load float*, float** %d1p.addr, align 8
  %3 = load float, float* %2, align 4
  store float %3, float* %d1, align 4
  %4 = load float*, float** %d2p.addr, align 8
  %5 = load float, float* %4, align 4
  store float %5, float* %d2, align 4
  %6 = load float*, float** %d3p.addr, align 8
  %7 = load float, float* %6, align 4
  store float %7, float* %d3, align 4
  %8 = load float*, float** %d4p.addr, align 8
  %9 = load float, float* %8, align 4
  store float %9, float* %d4, align 4
  %10 = load float*, float** %d5p.addr, align 8
  %11 = load float, float* %10, align 4
  store float %11, float* %d5, align 4
  %12 = load float*, float** %d6p.addr, align 8
  %13 = load float, float* %12, align 4
  store float %13, float* %d6, align 4
  %14 = load float*, float** %d7p.addr, align 8
  %15 = load float, float* %14, align 4
  store float %15, float* %d7, align 4
  %16 = load float, float* %d0, align 4
  %17 = load float, float* %d7, align 4
  %add = fadd float %16, %17
  store float %add, float* %tmp0, align 4
  %18 = load float, float* %d0, align 4
  %19 = load float, float* %d7, align 4
  %sub = fsub float %18, %19
  store float %sub, float* %tmp7, align 4
  %20 = load float, float* %d1, align 4
  %21 = load float, float* %d6, align 4
  %add1 = fadd float %20, %21
  store float %add1, float* %tmp1, align 4
  %22 = load float, float* %d1, align 4
  %23 = load float, float* %d6, align 4
  %sub2 = fsub float %22, %23
  store float %sub2, float* %tmp6, align 4
  %24 = load float, float* %d2, align 4
  %25 = load float, float* %d5, align 4
  %add3 = fadd float %24, %25
  store float %add3, float* %tmp2, align 4
  %26 = load float, float* %d2, align 4
  %27 = load float, float* %d5, align 4
  %sub4 = fsub float %26, %27
  store float %sub4, float* %tmp5, align 4
  %28 = load float, float* %d3, align 4
  %29 = load float, float* %d4, align 4
  %add5 = fadd float %28, %29
  store float %add5, float* %tmp3, align 4
  %30 = load float, float* %d3, align 4
  %31 = load float, float* %d4, align 4
  %sub6 = fsub float %30, %31
  store float %sub6, float* %tmp4, align 4
  %32 = load float, float* %tmp0, align 4
  %33 = load float, float* %tmp3, align 4
  %add7 = fadd float %32, %33
  store float %add7, float* %tmp10, align 4
  %34 = load float, float* %tmp0, align 4
  %35 = load float, float* %tmp3, align 4
  %sub8 = fsub float %34, %35
  store float %sub8, float* %tmp13, align 4
  %36 = load float, float* %tmp1, align 4
  %37 = load float, float* %tmp2, align 4
  %add9 = fadd float %36, %37
  store float %add9, float* %tmp11, align 4
  %38 = load float, float* %tmp1, align 4
  %39 = load float, float* %tmp2, align 4
  %sub10 = fsub float %38, %39
  store float %sub10, float* %tmp12, align 4
  %40 = load float, float* %tmp10, align 4
  %41 = load float, float* %tmp11, align 4
  %add11 = fadd float %40, %41
  store float %add11, float* %d0, align 4
  %42 = load float, float* %tmp10, align 4
  %43 = load float, float* %tmp11, align 4
  %sub12 = fsub float %42, %43
  store float %sub12, float* %d4, align 4
  %44 = load float, float* %tmp12, align 4
  %45 = load float, float* %tmp13, align 4
  %add13 = fadd float %44, %45
  %mul = fmul float %add13, 0x3FE6A09E60000000
  store float %mul, float* %z1, align 4
  %46 = load float, float* %tmp13, align 4
  %47 = load float, float* %z1, align 4
  %add14 = fadd float %46, %47
  store float %add14, float* %d2, align 4
  %48 = load float, float* %tmp13, align 4
  %49 = load float, float* %z1, align 4
  %sub15 = fsub float %48, %49
  store float %sub15, float* %d6, align 4
  %50 = load float, float* %tmp4, align 4
  %51 = load float, float* %tmp5, align 4
  %add16 = fadd float %50, %51
  store float %add16, float* %tmp10, align 4
  %52 = load float, float* %tmp5, align 4
  %53 = load float, float* %tmp6, align 4
  %add17 = fadd float %52, %53
  store float %add17, float* %tmp11, align 4
  %54 = load float, float* %tmp6, align 4
  %55 = load float, float* %tmp7, align 4
  %add18 = fadd float %54, %55
  store float %add18, float* %tmp12, align 4
  %56 = load float, float* %tmp10, align 4
  %57 = load float, float* %tmp12, align 4
  %sub19 = fsub float %56, %57
  %mul20 = fmul float %sub19, 0x3FD87DE2A0000000
  store float %mul20, float* %z5, align 4
  %58 = load float, float* %tmp10, align 4
  %mul21 = fmul float %58, 0x3FE1517A80000000
  %59 = load float, float* %z5, align 4
  %add22 = fadd float %mul21, %59
  store float %add22, float* %z2, align 4
  %60 = load float, float* %tmp12, align 4
  %mul23 = fmul float %60, 0x3FF4E7AEA0000000
  %61 = load float, float* %z5, align 4
  %add24 = fadd float %mul23, %61
  store float %add24, float* %z4, align 4
  %62 = load float, float* %tmp11, align 4
  %mul25 = fmul float %62, 0x3FE6A09E60000000
  store float %mul25, float* %z3, align 4
  %63 = load float, float* %tmp7, align 4
  %64 = load float, float* %z3, align 4
  %add26 = fadd float %63, %64
  store float %add26, float* %z11, align 4
  %65 = load float, float* %tmp7, align 4
  %66 = load float, float* %z3, align 4
  %sub27 = fsub float %65, %66
  store float %sub27, float* %z13, align 4
  %67 = load float, float* %z13, align 4
  %68 = load float, float* %z2, align 4
  %add28 = fadd float %67, %68
  %69 = load float*, float** %d5p.addr, align 8
  store float %add28, float* %69, align 4
  %70 = load float, float* %z13, align 4
  %71 = load float, float* %z2, align 4
  %sub29 = fsub float %70, %71
  %72 = load float*, float** %d3p.addr, align 8
  store float %sub29, float* %72, align 4
  %73 = load float, float* %z11, align 4
  %74 = load float, float* %z4, align 4
  %add30 = fadd float %73, %74
  %75 = load float*, float** %d1p.addr, align 8
  store float %add30, float* %75, align 4
  %76 = load float, float* %z11, align 4
  %77 = load float, float* %z4, align 4
  %sub31 = fsub float %76, %77
  %78 = load float*, float** %d7p.addr, align 8
  store float %sub31, float* %78, align 4
  %79 = load float, float* %d0, align 4
  %80 = load float*, float** %d0p.addr, align 8
  store float %79, float* %80, align 4
  %81 = load float, float* %d2, align 4
  %82 = load float*, float** %d2p.addr, align 8
  store float %81, float* %82, align 4
  %83 = load float, float* %d4, align 4
  %84 = load float*, float** %d4p.addr, align 8
  store float %83, float* %84, align 4
  %85 = load float, float* %d6, align 4
  %86 = load float*, float** %d6p.addr, align 8
  store float %85, float* %86, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @stbiw__jpg_calcBits(i32 %val, i16* %bits) #0 {
entry:
  %val.addr = alloca i32, align 4
  %bits.addr = alloca i16*, align 8
  %tmp1 = alloca i32, align 4
  store i32 %val, i32* %val.addr, align 4
  store i16* %bits, i16** %bits.addr, align 8
  %0 = load i32, i32* %val.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %val.addr, align 4
  %sub = sub nsw i32 0, %1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %val.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %2, %cond.false ]
  store i32 %cond, i32* %tmp1, align 4
  %3 = load i32, i32* %val.addr, align 4
  %cmp1 = icmp slt i32 %3, 0
  br i1 %cmp1, label %cond.true2, label %cond.false4

cond.true2:                                       ; preds = %cond.end
  %4 = load i32, i32* %val.addr, align 4
  %sub3 = sub nsw i32 %4, 1
  br label %cond.end5

cond.false4:                                      ; preds = %cond.end
  %5 = load i32, i32* %val.addr, align 4
  br label %cond.end5

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi i32 [ %sub3, %cond.true2 ], [ %5, %cond.false4 ]
  store i32 %cond6, i32* %val.addr, align 4
  %6 = load i16*, i16** %bits.addr, align 8
  %arrayidx = getelementptr inbounds i16, i16* %6, i64 1
  store i16 1, i16* %arrayidx, align 2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end5
  %7 = load i32, i32* %tmp1, align 4
  %shr = ashr i32 %7, 1
  store i32 %shr, i32* %tmp1, align 4
  %tobool = icmp ne i32 %shr, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i16*, i16** %bits.addr, align 8
  %arrayidx7 = getelementptr inbounds i16, i16* %8, i64 1
  %9 = load i16, i16* %arrayidx7, align 2
  %inc = add i16 %9, 1
  store i16 %inc, i16* %arrayidx7, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %val.addr, align 4
  %11 = load i16*, i16** %bits.addr, align 8
  %arrayidx8 = getelementptr inbounds i16, i16* %11, i64 1
  %12 = load i16, i16* %arrayidx8, align 2
  %conv = zext i16 %12 to i32
  %shl = shl i32 1, %conv
  %sub9 = sub nsw i32 %shl, 1
  %and = and i32 %10, %sub9
  %conv10 = trunc i32 %and to i16
  %13 = load i16*, i16** %bits.addr, align 8
  %arrayidx11 = getelementptr inbounds i16, i16* %13, i64 0
  store i16 %conv10, i16* %arrayidx11, align 2
  ret void
}

; Function Attrs: noinline nounwind optnone
define i32 @stbi_write_jpg(i8* %filename, i32 %x, i32 %y, i32 %comp, i8* %data, i32 %quality) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %comp.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %quality.addr = alloca i32, align 4
  %s = alloca %struct.stbi__write_context, align 8
  %r = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %comp, i32* %comp.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  store i32 %quality, i32* %quality.addr, align 4
  %0 = bitcast %struct.stbi__write_context* %s to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 88, i1 false)
  %1 = load i8*, i8** %filename.addr, align 8
  %call = call i32 @stbi__start_write_file(%struct.stbi__write_context* %s, i8* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %4 = load i32, i32* %comp.addr, align 4
  %5 = load i8*, i8** %data.addr, align 8
  %6 = load i32, i32* %quality.addr, align 4
  %call1 = call i32 @stbi_write_jpg_core(%struct.stbi__write_context* %s, i32 %2, i32 %3, i32 %4, i8* %5, i32 %6)
  store i32 %call1, i32* %r, align 4
  call void @stbi__end_write_file(%struct.stbi__write_context* %s)
  %7 = load i32, i32* %r, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone
define %struct.image* @image_create(i32 %width, i32 %height, i32 %grey) #0 {
entry:
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %grey.addr = alloca i32, align 4
  %img = alloca %struct.image*, align 8
  %i = alloca i32, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %grey, i32* %grey.addr, align 4
  %0 = load i32, i32* %width.addr, align 4
  %cmp = icmp slt i32 0, %0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 52, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @__PRETTY_FUNCTION__.image_create, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %1 = load i32, i32* %height.addr, align 4
  %cmp1 = icmp slt i32 0, %1
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.end
  br label %if.end4

if.else3:                                         ; preds = %if.end
  call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 53, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @__PRETTY_FUNCTION__.image_create, i64 0, i64 0)) #11
  unreachable

if.end4:                                          ; preds = %if.then2
  %2 = load i32, i32* %grey.addr, align 4
  %cmp5 = icmp sle i32 0, %2
  br i1 %cmp5, label %land.lhs.true, label %if.else8

land.lhs.true:                                    ; preds = %if.end4
  %3 = load i32, i32* %grey.addr, align 4
  %cmp6 = icmp sle i32 %3, 255
  br i1 %cmp6, label %if.then7, label %if.else8

if.then7:                                         ; preds = %land.lhs.true
  br label %if.end9

if.else8:                                         ; preds = %land.lhs.true, %if.end4
  call void @__assert_fail(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 54, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @__PRETTY_FUNCTION__.image_create, i64 0, i64 0)) #11
  unreachable

if.end9:                                          ; preds = %if.then7
  %call = call noalias i8* @malloc(i64 24) #10
  %4 = bitcast i8* %call to %struct.image*
  store %struct.image* %4, %struct.image** %img, align 8
  %5 = load i32, i32* %width.addr, align 4
  %6 = load %struct.image*, %struct.image** %img, align 8
  %w = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 0
  store i32 %5, i32* %w, align 8
  %7 = load i32, i32* %height.addr, align 4
  %8 = load %struct.image*, %struct.image** %img, align 8
  %h = getelementptr inbounds %struct.image, %struct.image* %8, i32 0, i32 1
  store i32 %7, i32* %h, align 4
  %9 = load %struct.image*, %struct.image** %img, align 8
  %depth = getelementptr inbounds %struct.image, %struct.image* %9, i32 0, i32 2
  store i32 1, i32* %depth, align 8
  %10 = load %struct.image*, %struct.image** %img, align 8
  %depth10 = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 2
  %11 = load i32, i32* %depth10, align 8
  %12 = load %struct.image*, %struct.image** %img, align 8
  %w11 = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 0
  %13 = load i32, i32* %w11, align 8
  %mul = mul nsw i32 %11, %13
  %14 = load %struct.image*, %struct.image** %img, align 8
  %stride = getelementptr inbounds %struct.image, %struct.image* %14, i32 0, i32 3
  store i32 %mul, i32* %stride, align 4
  %15 = load %struct.image*, %struct.image** %img, align 8
  %h12 = getelementptr inbounds %struct.image, %struct.image* %15, i32 0, i32 1
  %16 = load i32, i32* %h12, align 4
  %conv = sext i32 %16 to i64
  %mul13 = mul i64 1, %conv
  %17 = load %struct.image*, %struct.image** %img, align 8
  %stride14 = getelementptr inbounds %struct.image, %struct.image* %17, i32 0, i32 3
  %18 = load i32, i32* %stride14, align 4
  %conv15 = sext i32 %18 to i64
  %mul16 = mul i64 %mul13, %conv15
  %call17 = call noalias i8* @malloc(i64 %mul16) #10
  %19 = load %struct.image*, %struct.image** %img, align 8
  %data = getelementptr inbounds %struct.image, %struct.image* %19, i32 0, i32 4
  store i8* %call17, i8** %data, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end9
  %20 = load i32, i32* %i, align 4
  %21 = load %struct.image*, %struct.image** %img, align 8
  %h18 = getelementptr inbounds %struct.image, %struct.image* %21, i32 0, i32 1
  %22 = load i32, i32* %h18, align 4
  %23 = load %struct.image*, %struct.image** %img, align 8
  %stride19 = getelementptr inbounds %struct.image, %struct.image* %23, i32 0, i32 3
  %24 = load i32, i32* %stride19, align 4
  %mul20 = mul nsw i32 %22, %24
  %cmp21 = icmp slt i32 %20, %mul20
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %25 = load i32, i32* %grey.addr, align 4
  %conv23 = trunc i32 %25 to i8
  %26 = load %struct.image*, %struct.image** %img, align 8
  %data24 = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 4
  %27 = load i8*, i8** %data24, align 8
  %28 = load i32, i32* %i, align 4
  %idxprom = sext i32 %28 to i64
  %arrayidx = getelementptr inbounds i8, i8* %27, i64 %idxprom
  store i8 %conv23, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load %struct.image*, %struct.image** %img, align 8
  ret %struct.image* %30
}

; Function Attrs: noinline nounwind optnone
define void @image_destroy(%struct.image* %img) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %tobool = icmp ne %struct.image* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 69, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__PRETTY_FUNCTION__.image_destroy, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  %data = getelementptr inbounds %struct.image, %struct.image* %1, i32 0, i32 4
  %2 = load i8*, i8** %data, align 8
  call void @free(i8* %2) #10
  %3 = load %struct.image*, %struct.image** %img.addr, align 8
  %4 = bitcast %struct.image* %3 to i8*
  call void @free(i8* %4) #10
  ret void
}

; Function Attrs: noinline nounwind optnone
define i32 @image_get_width(%struct.image* %img) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %tobool = icmp ne %struct.image* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @__PRETTY_FUNCTION__.image_get_width, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  %w = getelementptr inbounds %struct.image, %struct.image* %1, i32 0, i32 0
  %2 = load i32, i32* %w, align 8
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone
define i32 @image_get_height(%struct.image* %img) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %tobool = icmp ne %struct.image* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__PRETTY_FUNCTION__.image_get_height, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  %h = getelementptr inbounds %struct.image, %struct.image* %1, i32 0, i32 1
  %2 = load i32, i32* %h, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone
define i32 @image_get_pixel(%struct.image* %img, i32 %x, i32 %y) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %y.addr, align 4
  %call = call i8* @pos(%struct.image* %0, i32 %1, i32 %2)
  store i8* %call, i8** %p, align 8
  %3 = load i8*, i8** %p, align 8
  %4 = load i8, i8* %3, align 1
  %conv = zext i8 %4 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define internal i8* @pos(%struct.image* %img, i32 %x, i32 %y) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %y.addr, align 4
  %call = call zeroext i1 @valid_pixel(%struct.image* %0, i32 %1, i32 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.153, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 47, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @__PRETTY_FUNCTION__.pos, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %3 = load %struct.image*, %struct.image** %img.addr, align 8
  %data = getelementptr inbounds %struct.image, %struct.image* %3, i32 0, i32 4
  %4 = load i8*, i8** %data, align 8
  %5 = load i32, i32* %x.addr, align 4
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %depth = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 2
  %7 = load i32, i32* %depth, align 8
  %mul = mul nsw i32 %5, %7
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %idx.ext
  %8 = load i32, i32* %y.addr, align 4
  %9 = load %struct.image*, %struct.image** %img.addr, align 8
  %stride = getelementptr inbounds %struct.image, %struct.image* %9, i32 0, i32 3
  %10 = load i32, i32* %stride, align 4
  %mul1 = mul nsw i32 %8, %10
  %idx.ext2 = sext i32 %mul1 to i64
  %add.ptr3 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext2
  ret i8* %add.ptr3
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @valid_pixel(%struct.image* %img, i32 %x, i32 %y) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %tobool = icmp ne %struct.image* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 42, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @__PRETTY_FUNCTION__.valid_pixel, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp sle i32 0, %1
  br i1 %cmp, label %land.lhs.true, label %land.end5

land.lhs.true:                                    ; preds = %if.end
  %2 = load i32, i32* %x.addr, align 4
  %3 = load %struct.image*, %struct.image** %img.addr, align 8
  %w = getelementptr inbounds %struct.image, %struct.image* %3, i32 0, i32 0
  %4 = load i32, i32* %w, align 8
  %cmp1 = icmp slt i32 %2, %4
  br i1 %cmp1, label %land.rhs, label %land.end5

land.rhs:                                         ; preds = %land.lhs.true
  %5 = load i32, i32* %y.addr, align 4
  %cmp2 = icmp sle i32 0, %5
  br i1 %cmp2, label %land.rhs3, label %land.end

land.rhs3:                                        ; preds = %land.rhs
  %6 = load i32, i32* %y.addr, align 4
  %7 = load %struct.image*, %struct.image** %img.addr, align 8
  %h = getelementptr inbounds %struct.image, %struct.image* %7, i32 0, i32 1
  %8 = load i32, i32* %h, align 4
  %cmp4 = icmp slt i32 %6, %8
  br label %land.end

land.end:                                         ; preds = %land.rhs3, %land.rhs
  %9 = phi i1 [ false, %land.rhs ], [ %cmp4, %land.rhs3 ]
  br label %land.end5

land.end5:                                        ; preds = %land.end, %land.lhs.true, %if.end
  %10 = phi i1 [ false, %land.lhs.true ], [ false, %if.end ], [ %9, %land.end ]
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define void @image_set_pixel(%struct.image* %img, i32 %x, i32 %y, i32 %grey) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %grey.addr = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %grey, i32* %grey.addr, align 4
  %0 = load i32, i32* %grey.addr, align 4
  %cmp = icmp sle i32 0, %0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %grey.addr, align 4
  %cmp1 = icmp sle i32 %1, 255
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 90, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__PRETTY_FUNCTION__.image_set_pixel, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %2 = load %struct.image*, %struct.image** %img.addr, align 8
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %y.addr, align 4
  %call = call i8* @pos(%struct.image* %2, i32 %3, i32 %4)
  store i8* %call, i8** %p, align 8
  %5 = load i32, i32* %grey.addr, align 4
  %conv = trunc i32 %5 to i8
  %6 = load i8*, i8** %p, align 8
  store i8 %conv, i8* %6, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define %struct.image* @image_load_library(i32 %image_id) #0 {
entry:
  %image_id.addr = alloca i32, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %depth = alloca i32, align 4
  %data = alloca i8*, align 8
  %img = alloca %struct.image*, align 8
  store i32 %image_id, i32* %image_id.addr, align 4
  %0 = load i32, i32* %image_id.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 98, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @__PRETTY_FUNCTION__.image_load_library, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %1 = load i8*, i8** @severdir, align 8
  %2 = load i32, i32* %image_id.addr, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @filename_buffer, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* %1, i32 %2) #10
  store i32 0, i32* %w, align 4
  store i32 0, i32* %h, align 4
  store i32 0, i32* %depth, align 4
  %call1 = call i8* @stbi_load(i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @filename_buffer, i64 0, i64 0), i32* %w, i32* %h, i32* %depth, i32 1)
  store i8* %call1, i8** %data, align 8
  %3 = load i8*, i8** %data, align 8
  %cmp2 = icmp eq i8* %3, null
  br i1 %cmp2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call4 = call i8* @stbi_failure_reason()
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @filename_buffer, i64 0, i64 0), i8* %call4)
  call void @exit(i32 0) #11
  unreachable

if.end6:                                          ; preds = %if.end
  %5 = load i32, i32* %w, align 4
  %6 = load i32, i32* %h, align 4
  %call7 = call %struct.image* @image_create(i32 %5, i32 %6, i32 0)
  store %struct.image* %call7, %struct.image** %img, align 8
  %7 = load %struct.image*, %struct.image** %img, align 8
  %data8 = getelementptr inbounds %struct.image, %struct.image* %7, i32 0, i32 4
  %8 = load i8*, i8** %data8, align 8
  call void @free(i8* %8) #10
  %9 = load i8*, i8** %data, align 8
  %10 = load %struct.image*, %struct.image** %img, align 8
  %data9 = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 4
  store i8* %9, i8** %data9, align 8
  %11 = load %struct.image*, %struct.image** %img, align 8
  ret %struct.image* %11
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: noinline nounwind optnone
define void @check_dir(i8* %dirname) #0 {
entry:
  %dirname.addr = alloca i8*, align 8
  %dir = alloca %struct.__dirstream*, align 8
  store i8* %dirname, i8** %dirname.addr, align 8
  %0 = load i8*, i8** %dirname.addr, align 8
  %call = call %struct.__dirstream* @opendir(i8* %0)
  store %struct.__dirstream* %call, %struct.__dirstream** %dir, align 8
  %1 = load %struct.__dirstream*, %struct.__dirstream** %dir, align 8
  %tobool = icmp ne %struct.__dirstream* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.__dirstream*, %struct.__dirstream** %dir, align 8
  %call1 = call i32 @closedir(%struct.__dirstream* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4 = load i8*, i8** %dirname.addr, align 8
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.17, i64 0, i64 0), i8* %4)
  call void @exit(i32 0) #11
  unreachable

if.end:                                           ; preds = %if.then
  ret void
}

declare %struct.__dirstream* @opendir(i8*) #2

declare i32 @closedir(%struct.__dirstream*) #2

; Function Attrs: noinline nounwind optnone
define void @image_save_to_web(%struct.image* %img, i8* %filename_png) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  %filename_png.addr = alloca i8*, align 8
  %userid = alloca i8*, align 8
  %result = alloca i32, align 4
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i8* %filename_png, i8** %filename_png.addr, align 8
  %call = call i8* @getlogin()
  store i8* %call, i8** %userid, align 8
  %0 = load i8*, i8** %userid, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.18, i64 0, i64 0))
  call void @exit(i32 0) #11
  unreachable

if.end:                                           ; preds = %entry
  call void @check_output_dir()
  %2 = load i8*, i8** %filename_png.addr, align 8
  call void @check_filename(i8* %2)
  %3 = load i8*, i8** %filename_png.addr, align 8
  %call2 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @filename_buffer, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @path_buffer, i64 0, i64 0), i8* %3) #10
  %4 = load %struct.image*, %struct.image** %img.addr, align 8
  %w = getelementptr inbounds %struct.image, %struct.image* %4, i32 0, i32 0
  %5 = load i32, i32* %w, align 8
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %h = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 1
  %7 = load i32, i32* %h, align 4
  %8 = load %struct.image*, %struct.image** %img.addr, align 8
  %depth = getelementptr inbounds %struct.image, %struct.image* %8, i32 0, i32 2
  %9 = load i32, i32* %depth, align 8
  %10 = load %struct.image*, %struct.image** %img.addr, align 8
  %data = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 4
  %11 = load i8*, i8** %data, align 8
  %12 = load %struct.image*, %struct.image** %img.addr, align 8
  %stride = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 3
  %13 = load i32, i32* %stride, align 4
  %call3 = call i32 @stbi_write_png(i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @filename_buffer, i64 0, i64 0), i32 %5, i32 %7, i32 %9, i8* %11, i32 %13)
  store i32 %call3, i32* %result, align 4
  %14 = load i32, i32* %result, align 4
  %cmp4 = icmp eq i32 %14, 0
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @filename_buffer, i64 0, i64 0))
  call void @exit(i32 0) #11
  unreachable

if.end7:                                          ; preds = %if.end
  %call8 = call i32 @chmod(i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @filename_buffer, i64 0, i64 0), i32 420) #10
  %cmp9 = icmp slt i32 %call8, 0
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0))
  call void @exit(i32 0) #11
  unreachable

if.end12:                                         ; preds = %if.end7
  %17 = load i8*, i8** %userid, align 8
  %18 = load i8*, i8** %filename_png.addr, align 8
  %call13 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @url_buffer, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.22, i64 0, i64 0), i8* %17, i8* %18) #10
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @url_buffer, i64 0, i64 0))
  ret void
}

declare i8* @getlogin() #2

; Function Attrs: noinline nounwind optnone
define internal void @check_output_dir() #0 {
entry:
  %pw = alloca %struct.passwd*, align 8
  %homedir = alloca i8*, align 8
  %call = call i32 @getuid() #10
  %call1 = call %struct.passwd* @getpwuid(i32 %call)
  store %struct.passwd* %call1, %struct.passwd** %pw, align 8
  %0 = load %struct.passwd*, %struct.passwd** %pw, align 8
  %tobool = icmp ne %struct.passwd* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.155, i64 0, i64 0))
  call void @exit(i32 0) #11
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %struct.passwd*, %struct.passwd** %pw, align 8
  %pw_dir = getelementptr inbounds %struct.passwd, %struct.passwd* %2, i32 0, i32 5
  %3 = load i8*, i8** %pw_dir, align 8
  store i8* %3, i8** %homedir, align 8
  %4 = load i8*, i8** %homedir, align 8
  %tobool3 = icmp ne i8* %4, null
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %if.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.156, i64 0, i64 0))
  call void @exit(i32 0) #11
  unreachable

if.end6:                                          ; preds = %if.end
  %6 = load i8*, i8** %homedir, align 8
  %call7 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @path_buffer, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.157, i64 0, i64 0), i8* %6) #10
  call void @check_dir(i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @path_buffer, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @check_filename(i8* %fname) #0 {
entry:
  %fname.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %fname, i8** %fname.addr, align 8
  %0 = load i8*, i8** %fname.addr, align 8
  %call = call i64 @strlen(i8* %0) #12
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  %1 = load i32, i32* %len, align 4
  %cmp = icmp sgt i32 %1, 20
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %3 = load i8*, i8** %fname.addr, align 8
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.158, i64 0, i64 0), i8* %3)
  call void @exit(i32 0) #11
  unreachable

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %fname.addr, align 8
  %5 = load i32, i32* %len, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %idx.ext
  %add.ptr3 = getelementptr inbounds i8, i8* %add.ptr, i64 -4
  %call4 = call i32 @strcmp(i8* %add.ptr3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.159, i64 0, i64 0)) #12
  %cmp5 = icmp ne i32 %call4, 0
  br i1 %cmp5, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %7 = load i8*, i8** %fname.addr, align 8
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.160, i64 0, i64 0), i8* %7)
  call void @exit(i32 0) #11
  unreachable

if.end9:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end9
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %9, 4
  %cmp10 = icmp slt i32 %8, %sub
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %fname.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %idxprom
  %12 = load i8, i8* %arrayidx, align 1
  %conv12 = sext i8 %12 to i32
  %cmp13 = icmp sge i32 %conv12, 97
  br i1 %cmp13, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %for.body
  %13 = load i8*, i8** %fname.addr, align 8
  %14 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %14 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %13, i64 %idxprom15
  %15 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %15 to i32
  %cmp18 = icmp sle i32 %conv17, 122
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %land.lhs.true
  br label %for.inc

if.end21:                                         ; preds = %land.lhs.true, %for.body
  %16 = load i8*, i8** %fname.addr, align 8
  %17 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %17 to i64
  %arrayidx23 = getelementptr inbounds i8, i8* %16, i64 %idxprom22
  %18 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %18 to i32
  %cmp25 = icmp sge i32 %conv24, 65
  br i1 %cmp25, label %land.lhs.true27, label %if.end34

land.lhs.true27:                                  ; preds = %if.end21
  %19 = load i8*, i8** %fname.addr, align 8
  %20 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %20 to i64
  %arrayidx29 = getelementptr inbounds i8, i8* %19, i64 %idxprom28
  %21 = load i8, i8* %arrayidx29, align 1
  %conv30 = sext i8 %21 to i32
  %cmp31 = icmp sle i32 %conv30, 90
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %land.lhs.true27
  br label %for.inc

if.end34:                                         ; preds = %land.lhs.true27, %if.end21
  %22 = load i8*, i8** %fname.addr, align 8
  %23 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %23 to i64
  %arrayidx36 = getelementptr inbounds i8, i8* %22, i64 %idxprom35
  %24 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %24 to i32
  %cmp38 = icmp sge i32 %conv37, 48
  br i1 %cmp38, label %land.lhs.true40, label %if.end47

land.lhs.true40:                                  ; preds = %if.end34
  %25 = load i8*, i8** %fname.addr, align 8
  %26 = load i32, i32* %i, align 4
  %idxprom41 = sext i32 %26 to i64
  %arrayidx42 = getelementptr inbounds i8, i8* %25, i64 %idxprom41
  %27 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %27 to i32
  %cmp44 = icmp sle i32 %conv43, 57
  br i1 %cmp44, label %if.then46, label %if.end47

if.then46:                                        ; preds = %land.lhs.true40
  br label %for.inc

if.end47:                                         ; preds = %land.lhs.true40, %if.end34
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %29 = load i8*, i8** %fname.addr, align 8
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.161, i64 0, i64 0), i8* %29)
  call void @exit(i32 0) #11
  unreachable

for.inc:                                          ; preds = %if.then46, %if.then33, %if.then20
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind
declare i32 @chmod(i8*, i32) #1

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #6

; Function Attrs: nounwind
declare i32 @getuid() #1

declare %struct.passwd* @getpwuid(i32) #2

; Function Attrs: noinline nounwind optnone
define void @image_trace(%struct.image* %img) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %y = alloca i32, align 4
  %x = alloca i32, align 4
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %tobool = icmp ne %struct.image* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0), i32 183, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__PRETTY_FUNCTION__.image_trace, i64 0, i64 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  %call = call i32 @image_get_width(%struct.image* %1)
  store i32 %call, i32* %width, align 4
  %2 = load %struct.image*, %struct.image** %img.addr, align 8
  %call1 = call i32 @image_get_height(%struct.image* %2)
  store i32 %call1, i32* %height, align 4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4 = load i32, i32* %width, align 4
  %5 = load i32, i32* %height, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24, i64 0, i64 0), i32 %4, i32 %5)
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %6 = load i32, i32* %y, align 4
  %7 = load i32, i32* %height, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i64 0, i64 0))
  store i32 0, i32* %x, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %x, align 4
  %10 = load i32, i32* %width, align 4
  %cmp5 = icmp slt i32 %9, %10
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %11 = load i32, i32* %x, align 4
  %tobool7 = icmp ne i32 %11, 0
  br i1 %tobool7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %for.body6
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i64 0, i64 0))
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %for.body6
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %14 = load %struct.image*, %struct.image** %img.addr, align 8
  %15 = load i32, i32* %x, align 4
  %16 = load i32, i32* %y, align 4
  %call11 = call i32 @image_get_pixel(%struct.image* %14, i32 %15, i32 %16)
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0), i32 %call11)
  br label %for.inc

for.inc:                                          ; preds = %if.end10
  %17 = load i32, i32* %x, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %x, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0))
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %19 = load i32, i32* %y, align 4
  %inc15 = add nsw i32 %19, 1
  store i32 %inc15, i32* %y, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind readonly }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)"}
!1 = !{i32 1, !"wchar_size", i32 4}
